{"version":3,"file":"testing.js","sources":["../../../src/cdk/testing/type-in-element.ts","../../../src/cdk/testing/test-element.ts","../../../src/cdk/testing/harness-environment.ts","../../../src/cdk/testing/element-focus.ts","../../../src/cdk/testing/dispatch-events.ts","../../../src/cdk/testing/event-objects.ts","../../../src/cdk/testing/component-harness.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dispatchFakeEvent, dispatchKeyboardEvent} from './dispatch-events';\nimport {triggerFocus} from './element-focus';\nimport {ModifierKeys} from './event-objects';\n\n/**\n * Checks whether the given Element is a text input element.\n * @docs-private\n */\nexport function isTextInput(element: Element): element is HTMLInputElement | HTMLTextAreaElement {\n  return element.nodeName.toLowerCase() === 'input' ||\n      element.nodeName.toLowerCase() === 'textarea' ;\n}\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param element Element onto which to set the value.\n * @param keys The keys to send to the element.\n * @docs-private\n */\nexport function typeInElement(\n    element: HTMLElement, ...keys: (string | {keyCode?: number, key?: string})[]): void;\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param element Element onto which to set the value.\n * @param modifiers Modifier keys that are held while typing.\n * @param keys The keys to send to the element.\n * @docs-private\n */\nexport function typeInElement(element: HTMLElement, modifiers: ModifierKeys,\n                              ...keys: (string | {keyCode?: number, key?: string})[]): void;\n\nexport function typeInElement(element: HTMLElement, ...modifiersAndKeys: any) {\n  const first = modifiersAndKeys[0];\n  let modifiers: ModifierKeys;\n  let rest: (string | {keyCode?: number, key?: string})[];\n  if (typeof first !== 'string' && first.keyCode === undefined && first.key === undefined) {\n    modifiers = first;\n    rest = modifiersAndKeys.slice(1);\n  } else {\n    modifiers = {};\n    rest = modifiersAndKeys;\n  }\n  const keys: {keyCode?: number, key?: string}[] = rest\n      .map(k => typeof k === 'string' ?\n          k.split('').map(c => ({keyCode: c.toUpperCase().charCodeAt(0), key: c})) : [k])\n      .reduce((arr, k) => arr.concat(k), []);\n\n  triggerFocus(element);\n  for (const key of keys) {\n    dispatchKeyboardEvent(element, 'keydown', key.keyCode, key.key, element, modifiers);\n    dispatchKeyboardEvent(element, 'keypress', key.keyCode, key.key, element, modifiers);\n    if (isTextInput(element) && key.key && key.key.length === 1) {\n      element.value += key.key;\n      dispatchFakeEvent(element, 'input');\n    }\n    dispatchKeyboardEvent(element, 'keyup', key.keyCode, key.key, element, modifiers);\n  }\n}\n\n/**\n * Clears the text in an input or textarea element.\n * @docs-private\n */\nexport function clearElement(element: HTMLInputElement | HTMLTextAreaElement) {\n  triggerFocus(element as HTMLElement);\n  element.value = '';\n  dispatchFakeEvent(element, 'input');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementDimensions} from './element-dimensions';\nimport {ModifierKeys} from './event-objects';\n\n/** An enum of non-text keys that can be used with the `sendKeys` method. */\n// NOTE: This is a separate enum from `@angular/cdk/keycodes` because we don't necessarily want to\n// support every possible keyCode. We also can't rely on Protractor's `Key` because we don't want a\n// dependency on any particular testing framework here. Instead we'll just maintain this supported\n// list of keys and let individual concrete `HarnessEnvironment` classes map them to whatever key\n// representation is used in its respective testing framework.\nexport enum TestKey {\n  BACKSPACE,\n  TAB,\n  ENTER,\n  SHIFT,\n  CONTROL,\n  ALT,\n  ESCAPE,\n  PAGE_UP,\n  PAGE_DOWN,\n  END,\n  HOME,\n  LEFT_ARROW,\n  UP_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  INSERT,\n  DELETE,\n  F1,\n  F2,\n  F3,\n  F4,\n  F5,\n  F6,\n  F7,\n  F8,\n  F9,\n  F10,\n  F11,\n  F12,\n  META\n}\n\n/**\n * This acts as a common interface for DOM elements across both unit and e2e tests. It is the\n * interface through which the ComponentHarness interacts with the component's DOM.\n */\nexport interface TestElement {\n  /** Blur the element. */\n  blur(): Promise<void>;\n\n  /** Clear the element's input (for input elements only). */\n  clear(): Promise<void>;\n\n  /**\n   * Click the element.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   */\n  click(relativeX?: number, relativeY?: number): Promise<void>;\n\n  /** Focus the element. */\n  focus(): Promise<void>;\n\n  /** Get the computed value of the given CSS property for the element. */\n  getCssValue(property: string): Promise<string>;\n\n  /** Hovers the mouse over the element. */\n  hover(): Promise<void>;\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n\n  /** Gets the text from the element. */\n  text(): Promise<string>;\n\n  /** Gets the value for the given attribute from the element. */\n  getAttribute(name: string): Promise<string | null>;\n\n  /** Checks whether the element has the given class. */\n  hasClass(name: string): Promise<boolean>;\n\n  /** Gets the dimensions of the element. */\n  getDimensions(): Promise<ElementDimensions>;\n\n  /** Gets the value of a property of an element. */\n  getProperty(name: string): Promise<any>;\n\n  /** Checks whether this element matches the given selector. */\n  matchesSelector(selector: string): Promise<boolean>;\n\n  /**\n   * Flushes change detection and async tasks.\n   * In most cases it should not be necessary to call this. However, there may be some edge cases\n   * where it is needed to fully flush animation events.\n   */\n  forceStabilize(): Promise<void>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AsyncFactoryFn,\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessLoader,\n  HarnessPredicate,\n  LocatorFactory\n} from './component-harness';\nimport {TestElement} from './test-element';\n\n/**\n * Base harness environment class that can be extended to allow `ComponentHarness`es to be used in\n * different test environments (e.g. testbed, protractor, etc.). This class implements the\n * functionality of both a `HarnessLoader` and `LocatorFactory`. This class is generic on the raw\n * element type, `E`, used by the particular test environment.\n */\nexport abstract class HarnessEnvironment<E> implements HarnessLoader, LocatorFactory {\n  // Implemented as part of the `LocatorFactory` interface.\n  rootElement: TestElement;\n\n  protected constructor(protected rawRootElement: E) {\n    this.rootElement = this.createTestElement(rawRootElement);\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  documentRootLocatorFactory(): LocatorFactory {\n    return this.createEnvironment(this.getDocumentRoot());\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  locatorFor(selector: string): AsyncFactoryFn<TestElement>;\n  locatorFor<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T>;\n  locatorFor<T extends ComponentHarness>(\n      arg: string | ComponentHarnessConstructor<T> | HarnessPredicate<T>) {\n    return async () => {\n      if (typeof arg === 'string') {\n        return this.createTestElement(await this._assertElementFound(arg));\n      } else {\n        return this._assertHarnessFound(arg);\n      }\n    };\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  locatorForOptional(selector: string): AsyncFactoryFn<TestElement | null>;\n  locatorForOptional<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T | null>;\n  locatorForOptional<T extends ComponentHarness>(\n      arg: string | ComponentHarnessConstructor<T> | HarnessPredicate<T>) {\n    return async () => {\n      if (typeof arg === 'string') {\n        const element = (await this.getAllRawElements(arg))[0];\n        return element ? this.createTestElement(element) : null;\n      } else {\n        const candidates = await this._getAllHarnesses(arg);\n        return candidates[0] || null;\n      }\n    };\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  locatorForAll(selector: string): AsyncFactoryFn<TestElement[]>;\n  locatorForAll<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T[]>;\n  locatorForAll<T extends ComponentHarness>(\n      arg: string | ComponentHarnessConstructor<T> | HarnessPredicate<T>) {\n    return async () => {\n      if (typeof arg === 'string') {\n        return (await this.getAllRawElements(arg)).map(e => this.createTestElement(e));\n      } else {\n        return this._getAllHarnesses(arg);\n      }\n    };\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  getHarness<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T> {\n    return this.locatorFor(harnessType)();\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  getAllHarnesses<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T[]> {\n    return this.locatorForAll(harnessType)();\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  async getChildLoader(selector: string): Promise<HarnessLoader> {\n    return this.createEnvironment(await this._assertElementFound(selector));\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  async getAllChildLoaders(selector: string): Promise<HarnessLoader[]> {\n    return (await this.getAllRawElements(selector)).map(e => this.createEnvironment(e));\n  }\n\n  /** Creates a `ComponentHarness` for the given harness type with the given raw host element. */\n  protected createComponentHarness<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T>, element: E): T {\n    return new harnessType(this.createEnvironment(element));\n  }\n\n  /** Gets the root element for the document. */\n  protected abstract getDocumentRoot(): E;\n\n  /** Creates a `TestElement` from a raw element. */\n  protected abstract createTestElement(element: E): TestElement;\n\n  /** Creates a `HarnessLoader` rooted at the given raw element. */\n  protected abstract createEnvironment(element: E): HarnessEnvironment<E>;\n\n  /**\n   * Gets a list of all elements matching the given selector under this environment's root element.\n   */\n  protected abstract getAllRawElements(selector: string): Promise<E[]>;\n\n  private async _getAllHarnesses<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T[]> {\n    const harnessPredicate = harnessType instanceof HarnessPredicate ?\n        harnessType : new HarnessPredicate(harnessType, {});\n    const elements = await this.getAllRawElements(harnessPredicate.getSelector());\n    return harnessPredicate.filter(elements.map(\n        element => this.createComponentHarness(harnessPredicate.harnessType, element)));\n  }\n\n  private async _assertElementFound(selector: string): Promise<E> {\n    const element = (await this.getAllRawElements(selector))[0];\n    if (!element) {\n      throw Error(`Expected to find element matching selector: \"${selector}\", but none was found`);\n    }\n    return element;\n  }\n\n  private async _assertHarnessFound<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T> {\n    const harness = (await this._getAllHarnesses(harnessType))[0];\n    if (!harness) {\n      throw _getErrorForMissingHarness(harnessType);\n    }\n    return harness;\n  }\n}\n\nfunction _getErrorForMissingHarness<T extends ComponentHarness>(\n    harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Error {\n  const harnessPredicate =\n      harnessType instanceof HarnessPredicate ? harnessType : new HarnessPredicate(harnessType, {});\n  const {name, hostSelector} = harnessPredicate.harnessType;\n  let restrictions = harnessPredicate.getDescription();\n  let message = `Expected to find element for ${name} matching selector: \"${hostSelector}\"`;\n  if (restrictions) {\n    message += ` (with restrictions: ${restrictions})`;\n  }\n  message += ', but none was found';\n  return Error(message);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dispatchFakeEvent} from './dispatch-events';\n\nfunction triggerFocusChange(element: HTMLElement, event: 'focus' | 'blur') {\n  let eventFired = false;\n  const handler = () => eventFired = true;\n  element.addEventListener(event, handler);\n  element[event]();\n  element.removeEventListener(event, handler);\n  if (!eventFired) {\n    dispatchFakeEvent(element, event);\n  }\n}\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n * @docs-private\n */\nexport function patchElementFocus(element: HTMLElement) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n\n/** @docs-private */\nexport function triggerFocus(element: HTMLElement) {\n  triggerFocusChange(element, 'focus');\n}\n\n/** @docs-private */\nexport function triggerBlur(element: HTMLElement) {\n  triggerFocusChange(element, 'blur');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  createFakeEvent,\n  createKeyboardEvent,\n  createMouseEvent,\n  createTouchEvent,\n  ModifierKeys\n} from './event-objects';\n\n/**\n * Utility to dispatch any event on a Node.\n * @docs-private\n */\nexport function dispatchEvent(node: Node | Window, event: Event): Event {\n  node.dispatchEvent(event);\n  return event;\n}\n\n/**\n * Shorthand to dispatch a fake event on a specified node.\n * @docs-private\n */\nexport function dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event {\n  return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n\n/**\n * Shorthand to dispatch a keyboard event with a specified key code.\n * @docs-private\n */\nexport function dispatchKeyboardEvent(node: Node, type: string, keyCode?: number, key?: string,\n                                      target?: Element, modifiers?: ModifierKeys): KeyboardEvent {\n  return dispatchEvent(node,\n      createKeyboardEvent(type, keyCode, key, target, modifiers)) as KeyboardEvent;\n}\n\n/**\n * Shorthand to dispatch a mouse event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchMouseEvent(node: Node, type: string, x = 0, y = 0,\n  event = createMouseEvent(type, x, y)): MouseEvent {\n  return dispatchEvent(node, event) as MouseEvent;\n}\n\n/**\n * Shorthand to dispatch a touch event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchTouchEvent(node: Node, type: string, x = 0, y = 0) {\n  return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Modifier keys that may be held while typing. */\nexport interface ModifierKeys {\n  control?: boolean;\n  alt?: boolean;\n  shift?: boolean;\n  meta?: boolean;\n}\n\n/**\n * Creates a browser MouseEvent with the specified options.\n * @docs-private\n */\nexport function createMouseEvent(type: string, x = 0, y = 0, button = 0) {\n  const event = document.createEvent('MouseEvent');\n  const originalPreventDefault = event.preventDefault;\n\n  event.initMouseEvent(type,\n    true, /* canBubble */\n    true, /* cancelable */\n    window, /* view */\n    0, /* detail */\n    x, /* screenX */\n    y, /* screenY */\n    x, /* clientX */\n    y, /* clientY */\n    false, /* ctrlKey */\n    false, /* altKey */\n    false, /* shiftKey */\n    false, /* metaKey */\n    button, /* button */\n    null /* relatedTarget */);\n\n  // `initMouseEvent` doesn't allow us to pass the `buttons` and\n  // defaults it to 0 which looks like a fake event.\n  Object.defineProperty(event, 'buttons', {get: () => 1});\n\n  // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\n  event.preventDefault = function() {\n    Object.defineProperty(event, 'defaultPrevented', { get: () => true });\n    return originalPreventDefault.apply(this, arguments);\n  };\n\n  return event;\n}\n\n/**\n * Creates a browser TouchEvent with the specified pointer coordinates.\n * @docs-private\n */\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0) {\n  // In favor of creating events that work for most of the browsers, the event is created\n  // as a basic UI Event. The necessary details for the event will be set manually.\n  const event = document.createEvent('UIEvent');\n  const touchDetails = {pageX, pageY};\n\n  event.initUIEvent(type, true, true, window, 0);\n\n  // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n  // the touch details.\n  Object.defineProperties(event, {\n    touches: {value: [touchDetails]},\n    targetTouches: {value: [touchDetails]},\n    changedTouches: {value: [touchDetails]}\n  });\n\n  return event;\n}\n\n/**\n * Dispatches a keydown event from an element.\n * @docs-private\n */\nexport function createKeyboardEvent(type: string, keyCode: number = 0, key: string = '',\n                                    target?: Element, modifiers: ModifierKeys = {}) {\n  const event = document.createEvent('KeyboardEvent') as any;\n  const originalPreventDefault = event.preventDefault;\n\n  // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n  if (event.initKeyEvent) {\n    event.initKeyEvent(type, true, true, window, modifiers.control, modifiers.alt, modifiers.shift,\n        modifiers.meta, keyCode);\n  } else {\n    // `initKeyboardEvent` expects to receive modifiers as a whitespace-delimited string\n    // See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\n    const modifiersStr = (modifiers.control ? 'Control ' : '' + modifiers.alt ? 'Alt ' : '' +\n        modifiers.shift ? 'Shift ' : '' + modifiers.meta ? 'Meta' : '').trim();\n    event.initKeyboardEvent(type,\n        true, /* canBubble */\n        true, /* cancelable */\n        window, /* view */\n        0, /* char */\n        key, /* key */\n        0, /* location */\n        modifiersStr, /* modifiersList */\n        false /* repeat */);\n  }\n\n  // Webkit Browsers don't set the keyCode when calling the init function.\n  // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n  Object.defineProperties(event, {\n    keyCode: { get: () => keyCode },\n    key: { get: () => key },\n    target: { get: () => target },\n    ctrlKey: { get: () => !!modifiers.control },\n    altKey: { get: () => !!modifiers.alt },\n    shiftKey: { get: () => !!modifiers.shift },\n    metaKey: { get: () => !!modifiers.meta }\n  });\n\n  // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\n  event.preventDefault = function() {\n    Object.defineProperty(event, 'defaultPrevented', { get: () => true });\n    return originalPreventDefault.apply(this, arguments);\n  };\n\n  return event;\n}\n\n/**\n * Creates a fake event object with any desired event type.\n * @docs-private\n */\nexport function createFakeEvent(type: string, canBubble = false, cancelable = true) {\n  const event = document.createEvent('Event');\n  event.initEvent(type, canBubble, cancelable);\n  return event;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TestElement} from './test-element';\n\n/** An async function that returns a promise when called. */\nexport type AsyncFactoryFn<T> = () => Promise<T>;\n\n/** An async function that takes an item and returns a boolean promise */\nexport type AsyncPredicate<T> = (item: T) => Promise<boolean>;\n\n/** An async function that takes an item and an option value and returns a boolean promise. */\nexport type AsyncOptionPredicate<T, O> = (item: T, option: O) => Promise<boolean>;\n\n/**\n * Interface used to load ComponentHarness objects. This interface is used by test authors to\n * instantiate `ComponentHarness`es.\n */\nexport interface HarnessLoader {\n  /**\n   * Searches for an element with the given selector under the current instances's root element,\n   * and returns a `HarnessLoader` rooted at the matching element. If multiple elements match the\n   * selector, the first is used. If no elements match, an error is thrown.\n   * @param selector The selector for the root element of the new `HarnessLoader`\n   * @return A `HarnessLoader` rooted at the element matching the given selector.\n   * @throws If a matching element can't be found.\n   */\n  getChildLoader(selector: string): Promise<HarnessLoader>;\n\n  /**\n   * Searches for all elements with the given selector under the current instances's root element,\n   * and returns an array of `HarnessLoader`s, one for each matching element, rooted at that\n   * element.\n   * @param selector The selector for the root element of the new `HarnessLoader`\n   * @return A list of `HarnessLoader`s, one for each matching element, rooted at that element.\n   */\n  getAllChildLoaders(selector: string): Promise<HarnessLoader[]>;\n\n  /**\n   * Searches for an instance of the component corresponding to the given harness type under the\n   * `HarnessLoader`'s root element, and returns a `ComponentHarness` for that instance. If multiple\n   * matching components are found, a harness for the first one is returned. If no matching\n   * component is found, an error is thrown.\n   * @param harnessType The type of harness to create\n   * @return An instance of the given harness type\n   * @throws If a matching component instance can't be found.\n   */\n  getHarness<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T>;\n\n  /**\n   * Searches for all instances of the component corresponding to the given harness type under the\n   * `HarnessLoader`'s root element, and returns a list `ComponentHarness` for each instance.\n   * @param harnessType The type of harness to create\n   * @return A list instances of the given harness type.\n   */\n  getAllHarnesses<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T[]>;\n}\n\n/**\n * Interface used to create asynchronous locator functions used find elements and component\n * harnesses. This interface is used by `ComponentHarness` authors to create locator functions for\n * their `ComponentHarenss` subclass.\n */\nexport interface LocatorFactory {\n  /** Gets a locator factory rooted at the document root. */\n  documentRootLocatorFactory(): LocatorFactory;\n\n  /** The root element of this `LocatorFactory` as a `TestElement`. */\n  rootElement: TestElement;\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the root element of this `LocatorFactory`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, an error is thrown.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  locatorFor(selector: string): AsyncFactoryFn<TestElement>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the root element of this `LocatorFactory`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, an error is thrown.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or throws an error.\n   */\n  locatorFor<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the root element of this `LocatorFactory`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, null is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or returns null.\n   */\n  locatorForOptional(selector: string): AsyncFactoryFn<TestElement | null>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the root element of this `LocatorFactory`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, null is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or null if none is found.\n   */\n  locatorForOptional<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T | null>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for a list of elements with\n   * the given selector under the root element of this `LocatorFactory`. When the resulting locator\n   * function is invoked, a list of matching elements is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  locatorForAll(selector: string): AsyncFactoryFn<TestElement[]>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a list of\n   * `ComponentHarness`es for all components matching the given harness type under the root element\n   * of this `LocatorFactory`. When the resulting locator function is invoked, a list of\n   * `ComponentHarness`es for the matching components is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and returns a list of `ComponentHarness`es.\n   */\n  locatorForAll<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T[]>;\n}\n\n/**\n * Base class for component harnesses that all component harness authors should extend. This base\n * component harness provides the basic ability to locate element and sub-component harness. It\n * should be inherited when defining user's own harness.\n */\nexport abstract class ComponentHarness {\n  constructor(private readonly locatorFactory: LocatorFactory) {}\n\n  /** Gets a `Promise` for the `TestElement` representing the host element of the component. */\n  async host(): Promise<TestElement> {\n    return this.locatorFactory.rootElement;\n  }\n\n  /**\n   * Gets a `LocatorFactory` for the document root element. This factory can be used to create\n   * locators for elements that a component creates outside of its own root element. (e.g. by\n   * appending to document.body).\n   */\n  protected documentRootLocatorFactory(): LocatorFactory {\n    return this.locatorFactory.documentRootLocatorFactory();\n  }\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the host element of this `ComponentHarness`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, an error is thrown.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  protected locatorFor(selector: string): AsyncFactoryFn<TestElement>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the host element of this `ComponentHarness`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, an error is thrown.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or throws an error.\n   */\n  protected locatorFor<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T>;\n\n  protected locatorFor(arg: any) {\n    return this.locatorFactory.locatorFor(arg);\n  }\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the host element of this `ComponentHarness`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, null is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or returns null.\n   */\n  protected locatorForOptional(selector: string): AsyncFactoryFn<TestElement | null>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the host element of this `ComponentHarness`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, null is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or null if none is found.\n   */\n  protected locatorForOptional<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T | null>;\n\n  protected locatorForOptional(arg: any) {\n    return this.locatorFactory.locatorForOptional(arg);\n  }\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for a list of elements with\n   * the given selector under the host element of this `ComponentHarness`. When the resulting\n   * locator function is invoked, a list of matching elements is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  protected locatorForAll(selector: string): AsyncFactoryFn<TestElement[]>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a list of\n   * `ComponentHarness`es for all components matching the given harness type under the host element\n   * of this `ComponentHarness`. When the resulting locator function is invoked, a list of\n   * `ComponentHarness`es for the matching components is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and returns a list of `ComponentHarness`es.\n   */\n  protected locatorForAll<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T[]>;\n\n  protected locatorForAll(arg: any) {\n    return this.locatorFactory.locatorForAll(arg);\n  }\n}\n\n/** Constructor for a ComponentHarness subclass. */\nexport interface ComponentHarnessConstructor<T extends ComponentHarness> {\n  new(locatorFactory: LocatorFactory): T;\n\n  /**\n   * `ComponentHarness` subclasses must specify a static `hostSelector` property that is used to\n   * find the host element for the corresponding component. This property should match the selector\n   * for the Angular component.\n   */\n  hostSelector: string;\n}\n\nexport interface BaseHarnessFilters {\n  /** Only find component instances whose host element matches the given selector. */\n  selector?: string;\n  /** Only find component instances that are nested under an element with the given selector. */\n  ancestor?: string;\n}\n\n/**\n * A class used to associate a ComponentHarness class with predicates functions that can be used to\n * filter instances of the class.\n */\nexport class HarnessPredicate<T extends ComponentHarness> {\n  private _predicates: AsyncPredicate<T>[] = [];\n  private _descriptions: string[] = [];\n  private _ancestor: string;\n\n  constructor(public harnessType: ComponentHarnessConstructor<T>, options: BaseHarnessFilters) {\n    this._addBaseOptions(options);\n  }\n\n  /**\n   * Checks if a string matches the given pattern.\n   * @param s The string to check, or a Promise for the string to check.\n   * @param pattern The pattern the string is expected to match. If `pattern` is a string, `s` is\n   *   expected to match exactly. If `pattern` is a regex, a partial match is allowed.\n   * @return A Promise that resolves to whether the string matches the pattern.\n   */\n  static async stringMatches(s: string | Promise<string>, pattern: string | RegExp):\n      Promise<boolean> {\n    s = await s;\n    return typeof pattern === 'string' ? s === pattern : pattern.test(s);\n  }\n\n  /**\n   * Adds a predicate function to be run against candidate harnesses.\n   * @param description A description of this predicate that may be used in error messages.\n   * @param predicate An async predicate function.\n   * @return this (for method chaining).\n   */\n  add(description: string, predicate: AsyncPredicate<T>) {\n    this._descriptions.push(description);\n    this._predicates.push(predicate);\n    return this;\n  }\n\n  /**\n   * Adds a predicate function that depends on an option value to be run against candidate\n   * harnesses. If the option value is undefined, the predicate will be ignored.\n   * @param name The name of the option (may be used in error messages).\n   * @param option The option value.\n   * @param predicate The predicate function to run if the option value is not undefined.\n   * @return this (for method chaining).\n   */\n  addOption<O>(name: string, option: O | undefined, predicate: AsyncOptionPredicate<T, O>) {\n    // Add quotes around strings to differentiate them from other values\n    const value = typeof option === 'string' ? `\"${option}\"` : `${option}`;\n    if (option !== undefined) {\n      this.add(`${name} = ${value}`, item => predicate(item, option));\n    }\n    return this;\n  }\n\n  /**\n   * Filters a list of harnesses on this predicate.\n   * @param harnesses The list of harnesses to filter.\n   * @return A list of harnesses that satisfy this predicate.\n   */\n  async filter(harnesses: T[]): Promise<T[]> {\n    const results = await Promise.all(harnesses.map(h => this.evaluate(h)));\n    return harnesses.filter((_, i) => results[i]);\n  }\n\n  /**\n   * Evaluates whether the given harness satisfies this predicate.\n   * @param harness The harness to check\n   * @return A promise that resolves to true if the harness satisfies this predicate,\n   *   and resolves to false otherwise.\n   */\n  async evaluate(harness: T): Promise<boolean> {\n    const results = await Promise.all(this._predicates.map(p => p(harness)));\n    return results.reduce((combined, current) => combined && current, true);\n  }\n\n  /** Gets a description of this predicate for use in error messages. */\n  getDescription() {\n    return this._descriptions.join(', ');\n  }\n\n  /** Gets the selector used to find candidate elements. */\n  getSelector() {\n    return this._ancestor.split(',')\n        .map(part => `${part.trim()} ${this.harnessType.hostSelector}`.trim())\n        .join(',');\n  }\n\n  /** Adds base options common to all harness types. */\n  private _addBaseOptions(options: BaseHarnessFilters) {\n    this._ancestor = options.ancestor || '';\n    if (this._ancestor) {\n      this._descriptions.push(`has ancestor matching selector \"${this._ancestor}\"`);\n    }\n    const selector = options.selector;\n    if (selector !== undefined) {\n      this.add(`host matches selector \"${selector}\"`, async item => {\n        return (await item.host()).matchesSelector(selector);\n      });\n    }\n  }\n}\n"],"names":["tslib_1.__awaiter"],"mappings":"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"}
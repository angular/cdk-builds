/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { dispatchFakeEvent } from './dispatch-events';
function triggerFocusChange(element, event) {
    let eventFired = false;
    const handler = () => eventFired = true;
    element.addEventListener(event, handler);
    element[event]();
    element.removeEventListener(event, handler);
    // Some browsers won't move focus if the browser window is blurred while other will move it
    // asynchronously. If that is the case, we fake the event sequence as a fallback.
    if (!eventFired) {
        simulateFocusSequence(element, event);
    }
}
/** Simulates the full event sequence for a focus event. */
function simulateFocusSequence(element, event) {
    dispatchFakeEvent(element, event);
    dispatchFakeEvent(element, event === 'focus' ? 'focusin' : 'focusout');
}
/**
 * Patches an elements focus and blur methods to emit events consistently and predictably.
 * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,
 * while others won't fire them at all if the browser window is not focused.
 * @docs-private
 */
export function patchElementFocus(element) {
    element.focus = () => simulateFocusSequence(element, 'focus');
    element.blur = () => simulateFocusSequence(element, 'blur');
}
/** @docs-private */
export function triggerFocus(element) {
    triggerFocusChange(element, 'focus');
}
/** @docs-private */
export function triggerBlur(element) {
    triggerFocusChange(element, 'blur');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC1mb2N1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jZGsvdGVzdGluZy90ZXN0YmVkL2Zha2UtZXZlbnRzL2VsZW1lbnQtZm9jdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQsU0FBUyxrQkFBa0IsQ0FBQyxPQUFvQixFQUFFLEtBQXVCO0lBQ3ZFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3hDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDakIsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUU1QywyRkFBMkY7SUFDM0YsaUZBQWlGO0lBQ2pGLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDZixxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDdkM7QUFDSCxDQUFDO0FBRUQsMkRBQTJEO0FBQzNELFNBQVMscUJBQXFCLENBQUMsT0FBb0IsRUFBRSxLQUF1QjtJQUMxRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLEtBQUssS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDekUsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLE9BQW9CO0lBQ3BELE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzlELE9BQU8sQ0FBQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRCxvQkFBb0I7QUFDcEIsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUFvQjtJQUMvQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELG9CQUFvQjtBQUNwQixNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQW9CO0lBQzlDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7ZGlzcGF0Y2hGYWtlRXZlbnR9IGZyb20gJy4vZGlzcGF0Y2gtZXZlbnRzJztcblxuZnVuY3Rpb24gdHJpZ2dlckZvY3VzQ2hhbmdlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBldmVudDogJ2ZvY3VzJyB8ICdibHVyJykge1xuICBsZXQgZXZlbnRGaXJlZCA9IGZhbHNlO1xuICBjb25zdCBoYW5kbGVyID0gKCkgPT4gZXZlbnRGaXJlZCA9IHRydWU7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XG4gIGVsZW1lbnRbZXZlbnRdKCk7XG4gIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XG5cbiAgLy8gU29tZSBicm93c2VycyB3b24ndCBtb3ZlIGZvY3VzIGlmIHRoZSBicm93c2VyIHdpbmRvdyBpcyBibHVycmVkIHdoaWxlIG90aGVyIHdpbGwgbW92ZSBpdFxuICAvLyBhc3luY2hyb25vdXNseS4gSWYgdGhhdCBpcyB0aGUgY2FzZSwgd2UgZmFrZSB0aGUgZXZlbnQgc2VxdWVuY2UgYXMgYSBmYWxsYmFjay5cbiAgaWYgKCFldmVudEZpcmVkKSB7XG4gICAgc2ltdWxhdGVGb2N1c1NlcXVlbmNlKGVsZW1lbnQsIGV2ZW50KTtcbiAgfVxufVxuXG4vKiogU2ltdWxhdGVzIHRoZSBmdWxsIGV2ZW50IHNlcXVlbmNlIGZvciBhIGZvY3VzIGV2ZW50LiAqL1xuZnVuY3Rpb24gc2ltdWxhdGVGb2N1c1NlcXVlbmNlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBldmVudDogJ2ZvY3VzJyB8ICdibHVyJykge1xuICBkaXNwYXRjaEZha2VFdmVudChlbGVtZW50LCBldmVudCk7XG4gIGRpc3BhdGNoRmFrZUV2ZW50KGVsZW1lbnQsIGV2ZW50ID09PSAnZm9jdXMnID8gJ2ZvY3VzaW4nIDogJ2ZvY3Vzb3V0Jyk7XG59XG5cbi8qKlxuICogUGF0Y2hlcyBhbiBlbGVtZW50cyBmb2N1cyBhbmQgYmx1ciBtZXRob2RzIHRvIGVtaXQgZXZlbnRzIGNvbnNpc3RlbnRseSBhbmQgcHJlZGljdGFibHkuXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSwgYmVjYXVzZSBzb21lIGJyb3dzZXJzLCBsaWtlIElFMTEsIHdpbGwgY2FsbCB0aGUgZm9jdXMgaGFuZGxlcnMgYXN5bmNocm9ub3VzbHksXG4gKiB3aGlsZSBvdGhlcnMgd29uJ3QgZmlyZSB0aGVtIGF0IGFsbCBpZiB0aGUgYnJvd3NlciB3aW5kb3cgaXMgbm90IGZvY3VzZWQuXG4gKiBAZG9jcy1wcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaEVsZW1lbnRGb2N1cyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICBlbGVtZW50LmZvY3VzID0gKCkgPT4gc2ltdWxhdGVGb2N1c1NlcXVlbmNlKGVsZW1lbnQsICdmb2N1cycpO1xuICBlbGVtZW50LmJsdXIgPSAoKSA9PiBzaW11bGF0ZUZvY3VzU2VxdWVuY2UoZWxlbWVudCwgJ2JsdXInKTtcbn1cblxuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyRm9jdXMoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgdHJpZ2dlckZvY3VzQ2hhbmdlKGVsZW1lbnQsICdmb2N1cycpO1xufVxuXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXJCbHVyKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gIHRyaWdnZXJGb2N1c0NoYW5nZShlbGVtZW50LCAnYmx1cicpO1xufVxuIl19
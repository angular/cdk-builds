{"version":3,"file":"clipboard.js","sources":["../../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../../src/cdk/clipboard/clipboard.ts","../../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../../src/cdk/clipboard/public-api.ts","../../../../../../src/cdk/clipboard/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus && currentFocus instanceof HTMLElement) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {Clipboard} from './clipboard';\n\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\nexport interface CdkCopyToClipboardConfig {\n  /** Default number of attempts to make when copying text to the clipboard. */\n  attempts?: number;\n}\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG =\n    new InjectionToken<CdkCopyToClipboardConfig>('CKD_COPY_TO_CLIPBOARD_CONFIG');\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   */\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   * @deprecated Use `cdkCopyToClipboardCopied` instead.\n   * @breaking-change 10.0.0\n   */\n  @Output('copied') _deprecatedCopied = this.copied;\n\n  constructor(\n    private _clipboard: Clipboard,\n    /**\n     * @deprecated _ngZone parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    private _ngZone?: NgZone,\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n\n  /** Copies the current text to the clipboard. */\n  copy(attempts: number = this.attempts): void {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts) {\n          // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n          if (this._ngZone) {\n            this._ngZone.runOutsideAngular(() => setTimeout(attempt));\n          } else {\n            setTimeout(attempt);\n          }\n        } else {\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  imports: [CommonModule],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './clipboard';\nexport * from './clipboard-module';\nexport * from './copy-to-clipboard';\nexport * from './pending-copy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}
{"version":3,"file":"cdk-testing-testbed.umd.js","sources":["../../../../../../../src/cdk/testing/testbed/task-state-zone-interceptor.ts","../../../../../../src/cdk/testing/test-element.ts","../../../../../../../src/cdk/testing/testbed/unit-test-element.ts","../../../../../../../src/cdk/testing/testbed/testbed-harness-environment.ts","../../../../../../../src/cdk/testing/testbed/public-api.ts","../../../../../../../src/cdk/testing/testbed/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ProxyZone, ProxyZoneStatic} from './proxy-zone-types';\nimport {HasTaskState, Zone, ZoneDelegate} from './zone-types';\n\n/** Current state of the intercepted zone. */\nexport interface TaskState {\n  /** Whether the zone is stable (i.e. no microtasks and macrotasks). */\n  stable: boolean;\n}\n\n/** Unique symbol that is used to patch a property to a proxy zone. */\nconst stateObservableSymbol = Symbol('ProxyZone_PATCHED#stateObservable');\n\n/** Type that describes a potentially patched proxy zone instance. */\ntype PatchedProxyZone = ProxyZone & {\n  [stateObservableSymbol]: undefined|Observable<TaskState>;\n};\n\n/**\n * Interceptor that can be set up in a `ProxyZone` instance. The interceptor\n * will keep track of the task state and emit whenever the state changes.\n *\n * This serves as a workaround for https://github.com/angular/angular/issues/32896.\n */\nexport class TaskStateZoneInterceptor {\n  /** Subject that can be used to emit a new state change. */\n  private _stateSubject: BehaviorSubject<TaskState> = new BehaviorSubject<TaskState>(\n      this._lastState ? this._getTaskStateFromInternalZoneState(this._lastState) : {stable: true});\n\n  /** Public observable that emits whenever the task state changes. */\n  readonly state: Observable<TaskState> = this._stateSubject.asObservable();\n\n  constructor(private _lastState: HasTaskState|null) {}\n\n  /** This will be called whenever the task state changes in the intercepted zone. */\n  onHasTask(delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) {\n    if (current === target) {\n      this._stateSubject.next(this._getTaskStateFromInternalZoneState(hasTaskState));\n    }\n  }\n\n  /** Gets the task state from the internal ZoneJS task state. */\n  private _getTaskStateFromInternalZoneState(state: HasTaskState): TaskState {\n    return {stable: !state.macroTask && !state.microTask};\n  }\n\n  /**\n   * Sets up the custom task state Zone interceptor in the  `ProxyZone`. Throws if\n   * no `ProxyZone` could be found.\n   * @returns an observable that emits whenever the task state changes.\n   */\n  static setup(): Observable<TaskState> {\n    if (Zone === undefined) {\n      throw Error('Could not find ZoneJS. For test harnesses running in TestBed, ' +\n        'ZoneJS needs to be installed.');\n    }\n\n    // tslint:disable-next-line:variable-name\n    const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as ProxyZoneStatic|undefined;\n\n    // If there is no \"ProxyZoneSpec\" installed, we throw an error and recommend\n    // setting up the proxy zone by pulling in the testing bundle.\n    if (!ProxyZoneSpec) {\n      throw Error(\n        'ProxyZoneSpec is needed for the test harnesses but could not be found. ' +\n        'Please make sure that your environment includes zone.js/dist/zone-testing.js');\n    }\n\n    // Ensure that there is a proxy zone instance set up, and get\n    // a reference to the instance if present.\n    const zoneSpec = ProxyZoneSpec.assertPresent() as PatchedProxyZone;\n\n    // If there already is a delegate registered in the proxy zone, and it\n    // is type of the custom task state interceptor, we just use that state\n    // observable. This allows us to only intercept Zone once per test\n    // (similar to how `fakeAsync` or `async` work).\n    if (zoneSpec[stateObservableSymbol]) {\n      return zoneSpec[stateObservableSymbol]!;\n    }\n\n    // Since we intercept on environment creation and the fixture has been\n    // created before, we might have missed tasks scheduled before. Fortunately\n    // the proxy zone keeps track of the previous task state, so we can just pass\n    // this as initial state to the task zone interceptor.\n    const interceptor = new TaskStateZoneInterceptor(zoneSpec.lastTaskState);\n    const zoneSpecOnHasTask = zoneSpec.onHasTask;\n\n    // We setup the task state interceptor in the `ProxyZone`. Note that we cannot register\n    // the interceptor as a new proxy zone delegate because it would mean that other zone\n    // delegates (e.g. `FakeAsyncTestZone` or `AsyncTestZone`) can accidentally overwrite/disable\n    // our interceptor. Since we just intend to monitor the task state of the proxy zone, it is\n    // sufficient to just patch the proxy zone. This also avoids that we interfere with the task\n    // queue scheduling logic.\n    zoneSpec.onHasTask = function() {\n      zoneSpecOnHasTask.apply(zoneSpec, arguments);\n      interceptor.onHasTask.apply(interceptor, arguments);\n    };\n\n    return zoneSpec[stateObservableSymbol] = interceptor.state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementDimensions} from './element-dimensions';\nimport {ModifierKeys} from './event-objects';\n\n/** An enum of non-text keys that can be used with the `sendKeys` method. */\n// NOTE: This is a separate enum from `@angular/cdk/keycodes` because we don't necessarily want to\n// support every possible keyCode. We also can't rely on Protractor's `Key` because we don't want a\n// dependency on any particular testing framework here. Instead we'll just maintain this supported\n// list of keys and let individual concrete `HarnessEnvironment` classes map them to whatever key\n// representation is used in its respective testing framework.\nexport enum TestKey {\n  BACKSPACE,\n  TAB,\n  ENTER,\n  SHIFT,\n  CONTROL,\n  ALT,\n  ESCAPE,\n  PAGE_UP,\n  PAGE_DOWN,\n  END,\n  HOME,\n  LEFT_ARROW,\n  UP_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  INSERT,\n  DELETE,\n  F1,\n  F2,\n  F3,\n  F4,\n  F5,\n  F6,\n  F7,\n  F8,\n  F9,\n  F10,\n  F11,\n  F12,\n  META\n}\n\n/**\n * This acts as a common interface for DOM elements across both unit and e2e tests. It is the\n * interface through which the ComponentHarness interacts with the component's DOM.\n */\nexport interface TestElement {\n  /** Blur the element. */\n  blur(): Promise<void>;\n\n  /** Clear the element's input (for input elements only). */\n  clear(): Promise<void>;\n\n  /**\n   * Click the element.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   */\n  click(relativeX?: number, relativeY?: number): Promise<void>;\n\n  /** Focus the element. */\n  focus(): Promise<void>;\n\n  /** Get the computed value of the given CSS property for the element. */\n  getCssValue(property: string): Promise<string>;\n\n  /** Hovers the mouse over the element. */\n  hover(): Promise<void>;\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n\n  /** Gets the text from the element. */\n  text(): Promise<string>;\n\n  /** Gets the value for the given attribute from the element. */\n  getAttribute(name: string): Promise<string | null>;\n\n  /** Checks whether the element has the given class. */\n  hasClass(name: string): Promise<boolean>;\n\n  /** Gets the dimensions of the element. */\n  getDimensions(): Promise<ElementDimensions>;\n\n  /** Gets the value of a property of an element. */\n  getProperty(name: string): Promise<any>;\n\n  /** Checks whether this element matches the given selector. */\n  matchesSelector(selector: string): Promise<boolean>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as keyCodes from '@angular/cdk/keycodes';\nimport {\n  clearElement,\n  dispatchMouseEvent,\n  isTextInput,\n  ModifierKeys,\n  triggerBlur,\n  triggerFocus,\n  typeInElement\n} from '@angular/cdk/testing';\nimport {TestElement, TestKey} from '../test-element';\nimport {ElementDimensions} from '../element-dimensions';\n\n/** Maps `TestKey` constants to the `keyCode` and `key` values used by native browser events. */\nconst keyMap = {\n  [TestKey.BACKSPACE]: {keyCode: keyCodes.BACKSPACE, key: 'Backspace'},\n  [TestKey.TAB]: {keyCode: keyCodes.TAB, key: 'Tab'},\n  [TestKey.ENTER]: {keyCode: keyCodes.ENTER, key: 'Enter'},\n  [TestKey.SHIFT]: {keyCode: keyCodes.SHIFT, key: 'Shift'},\n  [TestKey.CONTROL]: {keyCode: keyCodes.CONTROL, key: 'Control'},\n  [TestKey.ALT]: {keyCode: keyCodes.ALT, key: 'Alt'},\n  [TestKey.ESCAPE]: {keyCode: keyCodes.ESCAPE, key: 'Escape'},\n  [TestKey.PAGE_UP]: {keyCode: keyCodes.PAGE_UP, key: 'PageUp'},\n  [TestKey.PAGE_DOWN]: {keyCode: keyCodes.PAGE_DOWN, key: 'PageDown'},\n  [TestKey.END]: {keyCode: keyCodes.END, key: 'End'},\n  [TestKey.HOME]: {keyCode: keyCodes.HOME, key: 'Home'},\n  [TestKey.LEFT_ARROW]: {keyCode: keyCodes.LEFT_ARROW, key: 'ArrowLeft'},\n  [TestKey.UP_ARROW]: {keyCode: keyCodes.UP_ARROW, key: 'ArrowUp'},\n  [TestKey.RIGHT_ARROW]: {keyCode: keyCodes.RIGHT_ARROW, key: 'ArrowRight'},\n  [TestKey.DOWN_ARROW]: {keyCode: keyCodes.DOWN_ARROW, key: 'ArrowDown'},\n  [TestKey.INSERT]: {keyCode: keyCodes.INSERT, key: 'Insert'},\n  [TestKey.DELETE]: {keyCode: keyCodes.DELETE, key: 'Delete'},\n  [TestKey.F1]: {keyCode: keyCodes.F1, key: 'F1'},\n  [TestKey.F2]: {keyCode: keyCodes.F2, key: 'F2'},\n  [TestKey.F3]: {keyCode: keyCodes.F3, key: 'F3'},\n  [TestKey.F4]: {keyCode: keyCodes.F4, key: 'F4'},\n  [TestKey.F5]: {keyCode: keyCodes.F5, key: 'F5'},\n  [TestKey.F6]: {keyCode: keyCodes.F6, key: 'F6'},\n  [TestKey.F7]: {keyCode: keyCodes.F7, key: 'F7'},\n  [TestKey.F8]: {keyCode: keyCodes.F8, key: 'F8'},\n  [TestKey.F9]: {keyCode: keyCodes.F9, key: 'F9'},\n  [TestKey.F10]: {keyCode: keyCodes.F10, key: 'F10'},\n  [TestKey.F11]: {keyCode: keyCodes.F11, key: 'F11'},\n  [TestKey.F12]: {keyCode: keyCodes.F12, key: 'F12'},\n  [TestKey.META]: {keyCode: keyCodes.META, key: 'Meta'}\n};\n\n/** A `TestElement` implementation for unit tests. */\nexport class UnitTestElement implements TestElement {\n  constructor(readonly element: Element, private _stabilize: () => Promise<void>) {}\n\n  async blur(): Promise<void> {\n    await this._stabilize();\n    triggerBlur(this.element as HTMLElement);\n    await this._stabilize();\n  }\n\n  async clear(): Promise<void> {\n    await this._stabilize();\n    if (!isTextInput(this.element)) {\n      throw Error('Attempting to clear an invalid element');\n    }\n    clearElement(this.element);\n    await this._stabilize();\n  }\n\n  async click(relativeX = 0, relativeY = 0): Promise<void> {\n    await this._stabilize();\n    const {left, top} = this.element.getBoundingClientRect();\n    // Round the computed click position as decimal pixels are not\n    // supported by mouse events and could lead to unexpected results.\n    const clientX = Math.round(left + relativeX);\n    const clientY = Math.round(top + relativeY);\n    dispatchMouseEvent(this.element, 'mousedown', clientX, clientY);\n    dispatchMouseEvent(this.element, 'mouseup', clientX, clientY);\n    dispatchMouseEvent(this.element, 'click', clientX, clientY);\n    await this._stabilize();\n  }\n\n  async focus(): Promise<void> {\n    await this._stabilize();\n    triggerFocus(this.element as HTMLElement);\n    await this._stabilize();\n  }\n\n  async getCssValue(property: string): Promise<string> {\n    await this._stabilize();\n    // TODO(mmalerba): Consider adding value normalization if we run into common cases where its\n    //  needed.\n    return getComputedStyle(this.element).getPropertyValue(property);\n  }\n\n  async hover(): Promise<void> {\n    await this._stabilize();\n    dispatchMouseEvent(this.element, 'mouseenter');\n    await this._stabilize();\n  }\n\n  async sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n  async sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n  async sendKeys(...modifiersAndKeys: any[]): Promise<void> {\n    await this._stabilize();\n    const args = modifiersAndKeys.map(k => typeof k === 'number' ? keyMap[k as TestKey] : k);\n    typeInElement(this.element as HTMLElement, ...args);\n    await this._stabilize();\n  }\n\n  async text(): Promise<string> {\n    await this._stabilize();\n    return (this.element.textContent || '').trim();\n  }\n\n  async getAttribute(name: string): Promise<string|null> {\n    await this._stabilize();\n    return this.element.getAttribute(name);\n  }\n\n  async hasClass(name: string): Promise<boolean> {\n    await this._stabilize();\n    return this.element.classList.contains(name);\n  }\n\n  async getDimensions(): Promise<ElementDimensions> {\n    await this._stabilize();\n    return this.element.getBoundingClientRect();\n  }\n\n  async getProperty(name: string): Promise<any> {\n    await this._stabilize();\n    return (this.element as any)[name];\n  }\n\n  async matchesSelector(selector: string): Promise<boolean> {\n    await this._stabilize();\n    const elementPrototype = Element.prototype as any;\n    return (elementPrototype['matches'] || elementPrototype['msMatchesSelector'])\n        .call(this.element, selector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessEnvironment} from '@angular/cdk/testing';\nimport {ComponentFixture, flush} from '@angular/core/testing';\nimport {Observable} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {ComponentHarness, ComponentHarnessConstructor, HarnessLoader} from '../component-harness';\nimport {TestElement} from '../test-element';\nimport {TaskState, TaskStateZoneInterceptor} from './task-state-zone-interceptor';\nimport {UnitTestElement} from './unit-test-element';\n\n\n/** A `HarnessEnvironment` implementation for Angular's Testbed. */\nexport class TestbedHarnessEnvironment extends HarnessEnvironment<Element> {\n  private _destroyed = false;\n\n  /** Observable that emits whenever the test task state changes. */\n  private _taskState: Observable<TaskState>;\n\n  protected constructor(rawRootElement: Element, private _fixture: ComponentFixture<unknown>) {\n    super(rawRootElement);\n    this._taskState = TaskStateZoneInterceptor.setup();\n    _fixture.componentRef.onDestroy(() => this._destroyed = true);\n  }\n\n  /** Creates a `HarnessLoader` rooted at the given fixture's root element. */\n  static loader(fixture: ComponentFixture<unknown>): HarnessLoader {\n    return new TestbedHarnessEnvironment(fixture.nativeElement, fixture);\n  }\n\n  /**\n   * Creates a `HarnessLoader` at the document root. This can be used if harnesses are\n   * located outside of a fixture (e.g. overlays appended to the document body).\n   */\n  static documentRootLoader(fixture: ComponentFixture<unknown>): HarnessLoader {\n    return new TestbedHarnessEnvironment(document.body, fixture);\n  }\n\n  /**\n   * Creates an instance of the given harness type, using the fixture's root element as the\n   * harness's host element. This method should be used when creating a harness for the root element\n   * of a fixture, as components do not have the correct selector when they are created as the root\n   * of the fixture.\n   */\n  static async harnessForFixture<T extends ComponentHarness>(\n      fixture: ComponentFixture<unknown>, harnessType: ComponentHarnessConstructor<T>): Promise<T> {\n    const environment = new TestbedHarnessEnvironment(fixture.nativeElement, fixture);\n    await environment.forceStabilize();\n    return environment.createComponentHarness(harnessType, fixture.nativeElement);\n  }\n\n  async forceStabilize(): Promise<void> {\n    if (this._destroyed) {\n      throw Error('Harness is attempting to use a fixture that has already been destroyed.');\n    }\n\n    this._fixture.detectChanges();\n    await this._fixture.whenStable();\n  }\n\n  async waitForTasksOutsideAngular(): Promise<void> {\n    // If we run in the fake async zone, we run \"flush\" to run any scheduled tasks. This\n    // ensures that the harnesses behave inside of the FakeAsyncTestZone similar to the\n    // \"AsyncTestZone\" and the root zone (i.e. neither fakeAsync or async). Note that we\n    // cannot just rely on the task state observable to become stable because the state will\n    // never change. This is because the task queue will be only drained if the fake async\n    // zone is being flushed.\n    if (Zone!.current.get('FakeAsyncTestZoneSpec')) {\n      flush();\n    }\n\n    // Wait until the task queue has been drained and the zone is stable. Note that\n    // we cannot rely on \"fixture.whenStable\" since it does not catch tasks scheduled\n    // outside of the Angular zone. For test harnesses, we want to ensure that the\n    // app is fully stabilized and therefore need to use our own zone interceptor.\n    await this._taskState.pipe(takeWhile(state => !state.stable)).toPromise();\n  }\n\n  protected getDocumentRoot(): Element {\n    return document.body;\n  }\n\n  protected createTestElement(element: Element): TestElement {\n    return new UnitTestElement(element, () => this.forceStabilize());\n  }\n\n  protected createEnvironment(element: Element): HarnessEnvironment<Element> {\n    return new TestbedHarnessEnvironment(element, this._fixture);\n  }\n\n  protected async getAllRawElements(selector: string): Promise<Element[]> {\n    await this.forceStabilize();\n    return Array.from(this.rawRootElement.querySelectorAll(selector));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './testbed-harness-environment';\nexport * from './unit-test-element';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["BehaviorSubject","keyCodes.BACKSPACE","keyCodes.TAB","keyCodes.ENTER","keyCodes.SHIFT","keyCodes.CONTROL","keyCodes.ALT","keyCodes.ESCAPE","keyCodes.PAGE_UP","keyCodes.PAGE_DOWN","keyCodes.END","keyCodes.HOME","keyCodes.LEFT_ARROW","keyCodes.UP_ARROW","keyCodes.RIGHT_ARROW","keyCodes.DOWN_ARROW","keyCodes.INSERT","keyCodes.DELETE","keyCodes.F1","keyCodes.F2","keyCodes.F3","keyCodes.F4","keyCodes.F5","keyCodes.F6","keyCodes.F7","keyCodes.F8","keyCodes.F9","keyCodes.F10","keyCodes.F11","keyCodes.F12","keyCodes.META","triggerBlur","isTextInput","clearElement","dispatchMouseEvent","triggerFocus","typeInElement","tslib_1.__extends","flush","takeWhile","HarnessEnvironment"],"mappings":"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"}
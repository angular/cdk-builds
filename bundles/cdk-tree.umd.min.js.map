{"version":3,"sources":["src/cdk/cdk-tree.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","tree","tslib","collections","rxjs","operators","core","bidi","coercion","a11y","common","this","BaseTreeControl","expansionModel","SelectionModel","prototype","toggle","dataNode","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","_a","toBeProcessed","push","apply","__spread","getDescendants","FlatTreeControl","_super","getLevel","isExpandable","_this","call","__extends","results","i","dataNodes","indexOf","length","expandAll","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","Observable","pipe","take","filter","Boolean","subscribe","children","e_1","children_1","__values","children_1_1","next","done","value","e_1_1","error","return","CDK_TREE_NODE_OUTLET_NODE","InjectionToken","CdkTreeNodeOutlet","viewContainer","_node","decorators","type","Directive","args","selector","ctorParameters","ViewContainerRef","undefined","Inject","Optional","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","inputs","TemplateRef","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","Subject","_levels","Map","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","Object","defineProperty","get","_dataSource","set","dataSource","_switchDataSource","enumerable","configurable","ngOnInit","_dataDiffer","find","create","trackBy","treeControl","ngOnDestroy","_nodeOutlet","complete","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","def","when","_defaultNodeDef","_observeRenderChanges","dataStream","isDataSource","connect","of","takeUntil","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","node","context","level","has","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","Component","exportAs","host","class","role","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","Default","IterableDiffers","ChangeDetectorRef","propDecorators","Input","ViewChild","static","ContentChildren","_elementRef","_tree","_destroyed","_dataChanges","_data","_setRoleFromData","focus","nativeElement","_setRoleFromChildren","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","ElementRef","CdkNestedTreeNode","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","providers","provide","useExisting","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","change","_level","coerceNumberProperty","indent","units","parts","split","_paddingIndent","nodeLevel","forceChange","padding","_currentPadding","element","paddingProp","resetProp","setStyle","Renderer2","Directionality","CdkTreeNodeToggle","_recursive","coerceBooleanProperty","_toggle","event","recursive","stopPropagation","HostListener","EXPORTED_DECLARATIONS","CdkTreeModule","NgModule","imports","CommonModule","declarations","FocusMonitor"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/collections'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/a11y'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/tree', ['exports', 'tslib', '@angular/cdk/collections', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/a11y', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.tree = {}), global.tslib, global.ng.cdk.collections, global.rxjs, global.rxjs.operators, global.ng.core, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.a11y, global.ng.common));\n}(this, (function (exports, tslib, collections, rxjs, operators, core, bidi, coercion, a11y, common) { 'use strict';\n\n    /** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n    var BaseTreeControl = /** @class */ (function () {\n        function BaseTreeControl() {\n            /** A selection model with multi-selection to track expansion status. */\n            this.expansionModel = new collections.SelectionModel(true);\n        }\n        /** Toggles one single data node's expanded/collapsed state. */\n        BaseTreeControl.prototype.toggle = function (dataNode) {\n            this.expansionModel.toggle(dataNode);\n        };\n        /** Expands one single data node. */\n        BaseTreeControl.prototype.expand = function (dataNode) {\n            this.expansionModel.select(dataNode);\n        };\n        /** Collapses one single data node. */\n        BaseTreeControl.prototype.collapse = function (dataNode) {\n            this.expansionModel.deselect(dataNode);\n        };\n        /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n        BaseTreeControl.prototype.isExpanded = function (dataNode) {\n            return this.expansionModel.isSelected(dataNode);\n        };\n        /** Toggles a subtree rooted at `node` recursively. */\n        BaseTreeControl.prototype.toggleDescendants = function (dataNode) {\n            this.expansionModel.isSelected(dataNode)\n                ? this.collapseDescendants(dataNode)\n                : this.expandDescendants(dataNode);\n        };\n        /** Collapse all dataNodes in the tree. */\n        BaseTreeControl.prototype.collapseAll = function () {\n            this.expansionModel.clear();\n        };\n        /** Expands a subtree rooted at given data node recursively. */\n        BaseTreeControl.prototype.expandDescendants = function (dataNode) {\n            var _a;\n            var toBeProcessed = [dataNode];\n            toBeProcessed.push.apply(toBeProcessed, tslib.__spread(this.getDescendants(dataNode)));\n            (_a = this.expansionModel).select.apply(_a, tslib.__spread(toBeProcessed));\n        };\n        /** Collapses a subtree rooted at given data node recursively. */\n        BaseTreeControl.prototype.collapseDescendants = function (dataNode) {\n            var _a;\n            var toBeProcessed = [dataNode];\n            toBeProcessed.push.apply(toBeProcessed, tslib.__spread(this.getDescendants(dataNode)));\n            (_a = this.expansionModel).deselect.apply(_a, tslib.__spread(toBeProcessed));\n        };\n        return BaseTreeControl;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n    var FlatTreeControl = /** @class */ (function (_super) {\n        tslib.__extends(FlatTreeControl, _super);\n        /** Construct with flat tree data node functions getLevel and isExpandable. */\n        function FlatTreeControl(getLevel, isExpandable) {\n            var _this = _super.call(this) || this;\n            _this.getLevel = getLevel;\n            _this.isExpandable = isExpandable;\n            return _this;\n        }\n        /**\n         * Gets a list of the data node's subtree of descendent data nodes.\n         *\n         * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n         * with correct levels.\n         */\n        FlatTreeControl.prototype.getDescendants = function (dataNode) {\n            var startIndex = this.dataNodes.indexOf(dataNode);\n            var results = [];\n            // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n            // The level of descendants of a tree node must be greater than the level of the given\n            // tree node.\n            // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n            // If we reach a node whose level is greater than the level of the tree node, we hit a\n            // sibling of an ancestor.\n            for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n                results.push(this.dataNodes[i]);\n            }\n            return results;\n        };\n        /**\n         * Expands all data nodes in the tree.\n         *\n         * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n         * data nodes of the tree.\n         */\n        FlatTreeControl.prototype.expandAll = function () {\n            var _a;\n            (_a = this.expansionModel).select.apply(_a, tslib.__spread(this.dataNodes));\n        };\n        return FlatTreeControl;\n    }(BaseTreeControl));\n\n    /** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n    var NestedTreeControl = /** @class */ (function (_super) {\n        tslib.__extends(NestedTreeControl, _super);\n        /** Construct with nested tree function getChildren. */\n        function NestedTreeControl(getChildren) {\n            var _this = _super.call(this) || this;\n            _this.getChildren = getChildren;\n            return _this;\n        }\n        /**\n         * Expands all dataNodes in the tree.\n         *\n         * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n         * data nodes of the tree.\n         */\n        NestedTreeControl.prototype.expandAll = function () {\n            var _a;\n            var _this = this;\n            this.expansionModel.clear();\n            var allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n                return tslib.__spread(accumulator, _this.getDescendants(dataNode), [dataNode]);\n            }, []);\n            (_a = this.expansionModel).select.apply(_a, tslib.__spread(allNodes));\n        };\n        /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n        NestedTreeControl.prototype.getDescendants = function (dataNode) {\n            var descendants = [];\n            this._getDescendants(descendants, dataNode);\n            // Remove the node itself\n            return descendants.splice(1);\n        };\n        /** A helper function to get descendants recursively. */\n        NestedTreeControl.prototype._getDescendants = function (descendants, dataNode) {\n            var _this = this;\n            descendants.push(dataNode);\n            var childrenNodes = this.getChildren(dataNode);\n            if (Array.isArray(childrenNodes)) {\n                childrenNodes.forEach(function (child) { return _this._getDescendants(descendants, child); });\n            }\n            else if (childrenNodes instanceof rxjs.Observable) {\n                // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n                // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n                childrenNodes.pipe(operators.take(1), operators.filter(Boolean))\n                    .subscribe(function (children) {\n                    var e_1, _a;\n                    try {\n                        for (var children_1 = tslib.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                            var child = children_1_1.value;\n                            _this._getDescendants(descendants, child);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                });\n            }\n        };\n        return NestedTreeControl;\n    }(BaseTreeControl));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token used to provide a `CdkTreeNode` to its outlet.\n     * Used primarily to avoid circular imports.\n     * @docs-private\n     */\n    var CDK_TREE_NODE_OUTLET_NODE = new core.InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n    /**\n     * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n     * inside the outlet.\n     */\n    var CdkTreeNodeOutlet = /** @class */ (function () {\n        function CdkTreeNodeOutlet(viewContainer, _node) {\n            this.viewContainer = viewContainer;\n            this._node = _node;\n        }\n        CdkTreeNodeOutlet.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkTreeNodeOutlet]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodeOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: core.Optional }] }\n        ]; };\n        return CdkTreeNodeOutlet;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Context provided to the tree node component. */\n    var CdkTreeNodeOutletContext = /** @class */ (function () {\n        function CdkTreeNodeOutletContext(data) {\n            this.$implicit = data;\n        }\n        return CdkTreeNodeOutletContext;\n    }());\n    /**\n     * Data node definition for the CdkTree.\n     * Captures the node's template and a when predicate that describes when this node should be used.\n     */\n    var CdkTreeNodeDef = /** @class */ (function () {\n        /** @docs-private */\n        function CdkTreeNodeDef(template) {\n            this.template = template;\n        }\n        CdkTreeNodeDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkTreeNodeDef]',\n                        inputs: [\n                            'when: cdkTreeNodeDefWhen'\n                        ],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodeDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkTreeNodeDef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when there is no usable data.\n     * @docs-private\n     */\n    function getTreeNoValidDataSourceError() {\n        return Error(\"A valid data source must be provided.\");\n    }\n    /**\n     * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n     * @docs-private\n     */\n    function getTreeMultipleDefaultNodeDefsError() {\n        return Error(\"There can only be one default row without a when predicate function.\");\n    }\n    /**\n     * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n     * @docs-private\n     */\n    function getTreeMissingMatchingNodeDefError() {\n        return Error(\"Could not find a matching node definition for the provided node data.\");\n    }\n    /**\n     * Returns an error to be thrown when there are tree control.\n     * @docs-private\n     */\n    function getTreeControlMissingError() {\n        return Error(\"Could not find a tree control for the tree.\");\n    }\n    /**\n     * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n     * @docs-private\n     */\n    function getTreeControlFunctionsMissingError() {\n        return Error(\"Could not find functions for nested/flat tree in tree control.\");\n    }\n\n    /**\n     * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n     * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n     */\n    var CdkTree = /** @class */ (function () {\n        function CdkTree(_differs, _changeDetectorRef) {\n            this._differs = _differs;\n            this._changeDetectorRef = _changeDetectorRef;\n            /** Subject that emits when the component has been destroyed. */\n            this._onDestroy = new rxjs.Subject();\n            /** Level of nodes */\n            this._levels = new Map();\n            // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n            //     Remove the MAX_VALUE in viewChange\n            /**\n             * Stream containing the latest information on what rows are being displayed on screen.\n             * Can be used by the data source to as a heuristic of what data should be provided.\n             */\n            this.viewChange = new rxjs.BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        }\n        Object.defineProperty(CdkTree.prototype, \"dataSource\", {\n            /**\n             * Provides a stream containing the latest data array to render. Influenced by the tree's\n             * stream of view window (what dataNodes are currently on screen).\n             * Data source can be an observable of data array, or a data array to render.\n             */\n            get: function () { return this._dataSource; },\n            set: function (dataSource) {\n                if (this._dataSource !== dataSource) {\n                    this._switchDataSource(dataSource);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTree.prototype.ngOnInit = function () {\n            this._dataDiffer = this._differs.find([]).create(this.trackBy);\n            if (!this.treeControl) {\n                throw getTreeControlMissingError();\n            }\n        };\n        CdkTree.prototype.ngOnDestroy = function () {\n            this._nodeOutlet.viewContainer.clear();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n                this.dataSource.disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n        };\n        CdkTree.prototype.ngAfterContentChecked = function () {\n            var defaultNodeDefs = this._nodeDefs.filter(function (def) { return !def.when; });\n            if (defaultNodeDefs.length > 1) {\n                throw getTreeMultipleDefaultNodeDefsError();\n            }\n            this._defaultNodeDef = defaultNodeDefs[0];\n            if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n                this._observeRenderChanges();\n            }\n        };\n        // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n        //     and nested trees.\n        /**\n         * Switch to the provided data source by resetting the data and unsubscribing from the current\n         * render change subscription if one exists. If the data source is null, interpret this by\n         * clearing the node outlet. Otherwise start listening for new data.\n         */\n        CdkTree.prototype._switchDataSource = function (dataSource) {\n            if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n                this.dataSource.disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n            // Remove the all dataNodes if there is now no data source\n            if (!dataSource) {\n                this._nodeOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n            if (this._nodeDefs) {\n                this._observeRenderChanges();\n            }\n        };\n        /** Set up a subscription for the data provided by the data source. */\n        CdkTree.prototype._observeRenderChanges = function () {\n            var _this = this;\n            var dataStream;\n            if (collections.isDataSource(this._dataSource)) {\n                dataStream = this._dataSource.connect(this);\n            }\n            else if (this._dataSource instanceof rxjs.Observable) {\n                dataStream = this._dataSource;\n            }\n            else if (Array.isArray(this._dataSource)) {\n                dataStream = rxjs.of(this._dataSource);\n            }\n            if (dataStream) {\n                this._dataSubscription = dataStream.pipe(operators.takeUntil(this._onDestroy))\n                    .subscribe(function (data) { return _this.renderNodeChanges(data); });\n            }\n            else {\n                throw getTreeNoValidDataSourceError();\n            }\n        };\n        /** Check for changes made in the data and render each change (node added/removed/moved). */\n        CdkTree.prototype.renderNodeChanges = function (data, dataDiffer, viewContainer, parentData) {\n            var _this = this;\n            if (dataDiffer === void 0) { dataDiffer = this._dataDiffer; }\n            if (viewContainer === void 0) { viewContainer = this._nodeOutlet.viewContainer; }\n            var changes = dataDiffer.diff(data);\n            if (!changes) {\n                return;\n            }\n            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n                if (item.previousIndex == null) {\n                    _this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                    _this._levels.delete(item.item);\n                }\n                else {\n                    var view = viewContainer.get(adjustedPreviousIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n            this._changeDetectorRef.detectChanges();\n        };\n        /**\n         * Finds the matching node definition that should be used for this node data. If there is only\n         * one node definition, it is returned. Otherwise, find the node definition that has a when\n         * predicate that returns true with the data. If none return true, return the default node\n         * definition.\n         */\n        CdkTree.prototype._getNodeDef = function (data, i) {\n            if (this._nodeDefs.length === 1) {\n                return this._nodeDefs.first;\n            }\n            var nodeDef = this._nodeDefs.find(function (def) { return def.when && def.when(i, data); }) || this._defaultNodeDef;\n            if (!nodeDef) {\n                throw getTreeMissingMatchingNodeDefError();\n            }\n            return nodeDef;\n        };\n        /**\n         * Create the embedded view for the data node template and place it in the correct index location\n         * within the data node view container.\n         */\n        CdkTree.prototype.insertNode = function (nodeData, index, viewContainer, parentData) {\n            var node = this._getNodeDef(nodeData, index);\n            // Node context that will be provided to created embedded view\n            var context = new CdkTreeNodeOutletContext(nodeData);\n            // If the tree is flat tree, then use the `getLevel` function in flat tree control\n            // Otherwise, use the level of parent node.\n            if (this.treeControl.getLevel) {\n                context.level = this.treeControl.getLevel(nodeData);\n            }\n            else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n                context.level = this._levels.get(parentData) + 1;\n            }\n            else {\n                context.level = 0;\n            }\n            this._levels.set(nodeData, context.level);\n            // Use default tree nodeOutlet, or nested node's nodeOutlet\n            var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n            container.createEmbeddedView(node.template, context, index);\n            // Set the data to just created `CdkTreeNode`.\n            // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n            //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n            if (CdkTreeNode.mostRecentTreeNode) {\n                CdkTreeNode.mostRecentTreeNode.data = nodeData;\n            }\n        };\n        CdkTree.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-tree',\n                        exportAs: 'cdkTree',\n                        template: \"<ng-container cdkTreeNodeOutlet></ng-container>\",\n                        host: {\n                            'class': 'cdk-tree',\n                            'role': 'tree',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                        // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                        // declared elsewhere, they are checked when their declaration points are checked.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkTree.ctorParameters = function () { return [\n            { type: core.IterableDiffers },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        CdkTree.propDecorators = {\n            dataSource: [{ type: core.Input }],\n            treeControl: [{ type: core.Input }],\n            trackBy: [{ type: core.Input }],\n            _nodeOutlet: [{ type: core.ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n            _nodeDefs: [{ type: core.ContentChildren, args: [CdkTreeNodeDef, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return CdkTree;\n    }());\n    /**\n     * Tree node for CdkTree. It contains the data in the tree node.\n     */\n    var CdkTreeNode = /** @class */ (function () {\n        function CdkTreeNode(_elementRef, _tree) {\n            this._elementRef = _elementRef;\n            this._tree = _tree;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** Emits when the node's data has changed. */\n            this._dataChanges = new rxjs.Subject();\n            /**\n             * The role of the node should be 'group' if it's an internal node,\n             * and 'treeitem' if it's a leaf node.\n             */\n            this.role = 'treeitem';\n            CdkTreeNode.mostRecentTreeNode = this;\n        }\n        Object.defineProperty(CdkTreeNode.prototype, \"data\", {\n            /** The tree node's data. */\n            get: function () { return this._data; },\n            set: function (value) {\n                if (value !== this._data) {\n                    this._data = value;\n                    this._setRoleFromData();\n                    this._dataChanges.next();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTreeNode.prototype, \"isExpanded\", {\n            get: function () {\n                return this._tree.treeControl.isExpanded(this._data);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTreeNode.prototype, \"level\", {\n            get: function () {\n                return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTreeNode.prototype.ngOnDestroy = function () {\n            // If this is the last tree node being destroyed,\n            // clear out the reference to avoid leaking memory.\n            if (CdkTreeNode.mostRecentTreeNode === this) {\n                CdkTreeNode.mostRecentTreeNode = null;\n            }\n            this._dataChanges.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Focuses the menu item. Implements for FocusableOption. */\n        CdkTreeNode.prototype.focus = function () {\n            this._elementRef.nativeElement.focus();\n        };\n        CdkTreeNode.prototype._setRoleFromData = function () {\n            var _this = this;\n            if (this._tree.treeControl.isExpandable) {\n                this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n            }\n            else {\n                if (!this._tree.treeControl.getChildren) {\n                    throw getTreeControlFunctionsMissingError();\n                }\n                var childrenNodes = this._tree.treeControl.getChildren(this._data);\n                if (Array.isArray(childrenNodes)) {\n                    this._setRoleFromChildren(childrenNodes);\n                }\n                else if (childrenNodes instanceof rxjs.Observable) {\n                    childrenNodes.pipe(operators.takeUntil(this._destroyed))\n                        .subscribe(function (children) { return _this._setRoleFromChildren(children); });\n                }\n            }\n        };\n        CdkTreeNode.prototype._setRoleFromChildren = function (children) {\n            this.role = children && children.length ? 'group' : 'treeitem';\n        };\n        /**\n         * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n         * in `CdkTree` and set the data to it.\n         */\n        CdkTreeNode.mostRecentTreeNode = null;\n        CdkTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-tree-node',\n                        exportAs: 'cdkTreeNode',\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                            '[attr.role]': 'role',\n                            'class': 'cdk-tree-node',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: CdkTree }\n        ]; };\n        CdkTreeNode.propDecorators = {\n            role: [{ type: core.Input }]\n        };\n        return CdkTreeNode;\n    }());\n\n    /**\n     * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n     * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n     * be added in the `cdkTreeNodeOutlet` in tree node template.\n     * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n     */\n    var CdkNestedTreeNode = /** @class */ (function (_super) {\n        tslib.__extends(CdkNestedTreeNode, _super);\n        function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n            var _this = _super.call(this, _elementRef, _tree) || this;\n            _this._elementRef = _elementRef;\n            _this._tree = _tree;\n            _this._differs = _differs;\n            return _this;\n        }\n        CdkNestedTreeNode.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            var childrenNodes = this._tree.treeControl.getChildren(this.data);\n            if (Array.isArray(childrenNodes)) {\n                this.updateChildrenNodes(childrenNodes);\n            }\n            else if (childrenNodes instanceof rxjs.Observable) {\n                childrenNodes.pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (result) { return _this.updateChildrenNodes(result); });\n            }\n            this.nodeOutlet.changes.pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this.updateChildrenNodes(); });\n        };\n        CdkNestedTreeNode.prototype.ngOnDestroy = function () {\n            this._clear();\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        /** Add children dataNodes to the NodeOutlet */\n        CdkNestedTreeNode.prototype.updateChildrenNodes = function (children) {\n            var outlet = this._getNodeOutlet();\n            if (children) {\n                this._children = children;\n            }\n            if (outlet && this._children) {\n                var viewContainer = outlet.viewContainer;\n                this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n            }\n            else {\n                // Reset the data differ if there's no children nodes displayed\n                this._dataDiffer.diff([]);\n            }\n        };\n        /** Clear the children dataNodes. */\n        CdkNestedTreeNode.prototype._clear = function () {\n            var outlet = this._getNodeOutlet();\n            if (outlet) {\n                outlet.viewContainer.clear();\n                this._dataDiffer.diff([]);\n            }\n        };\n        /** Gets the outlet for the current node. */\n        CdkNestedTreeNode.prototype._getNodeOutlet = function () {\n            var _this = this;\n            var outlets = this.nodeOutlet;\n            // Note that since we use `descendants: true` on the query, we have to ensure\n            // that we don't pick up the outlet of a child node by accident.\n            return outlets && outlets.find(function (outlet) { return !outlet._node || outlet._node === _this; });\n        };\n        CdkNestedTreeNode.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-nested-tree-node',\n                        exportAs: 'cdkNestedTreeNode',\n                        host: {\n                            '[attr.aria-expanded]': 'isExpanded',\n                            '[attr.role]': 'role',\n                            'class': 'cdk-tree-node cdk-nested-tree-node',\n                        },\n                        providers: [\n                            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                        ]\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkNestedTreeNode.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: CdkTree },\n            { type: core.IterableDiffers }\n        ]; };\n        CdkNestedTreeNode.propDecorators = {\n            nodeOutlet: [{ type: core.ContentChildren, args: [CdkTreeNodeOutlet, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return CdkNestedTreeNode;\n    }(CdkTreeNode));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Regex used to split a string on its CSS units. */\n    var cssUnitPattern = /([A-Za-z%]+)$/;\n    /**\n     * Indent for the children tree dataNodes.\n     * This directive will add left-padding to the node to show hierarchy.\n     */\n    var CdkTreeNodePadding = /** @class */ (function () {\n        function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {\n            var _this = this;\n            this._treeNode = _treeNode;\n            this._tree = _tree;\n            this._renderer = _renderer;\n            this._element = _element;\n            this._dir = _dir;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /** CSS units used for the indentation value. */\n            this.indentUnits = 'px';\n            this._indent = 40;\n            this._setPadding();\n            if (_dir) {\n                _dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () { return _this._setPadding(true); });\n            }\n            // In Ivy the indentation binding might be set before the tree node's data has been added,\n            // which means that we'll miss the first render. We have to subscribe to changes in the\n            // data to ensure that everything is up to date.\n            _treeNode._dataChanges.subscribe(function () { return _this._setPadding(); });\n        }\n        Object.defineProperty(CdkTreeNodePadding.prototype, \"level\", {\n            /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n            get: function () { return this._level; },\n            set: function (value) {\n                // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n                // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n                // they set 0 explicitly.\n                this._level = coercion.coerceNumberProperty(value, null);\n                this._setPadding();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTreeNodePadding.prototype, \"indent\", {\n            /**\n             * The indent for each level. Can be a number or a CSS string.\n             * Default number 40px from material design menu sub-menu spec.\n             */\n            get: function () { return this._indent; },\n            set: function (indent) {\n                var value = indent;\n                var units = 'px';\n                if (typeof indent === 'string') {\n                    var parts = indent.split(cssUnitPattern);\n                    value = parts[0];\n                    units = parts[1] || units;\n                }\n                this.indentUnits = units;\n                this._indent = coercion.coerceNumberProperty(value);\n                this._setPadding();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTreeNodePadding.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n        CdkTreeNodePadding.prototype._paddingIndent = function () {\n            var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n                ? this._tree.treeControl.getLevel(this._treeNode.data)\n                : null;\n            var level = this._level == null ? nodeLevel : this._level;\n            return typeof level === 'number' ? \"\" + level * this._indent + this.indentUnits : null;\n        };\n        CdkTreeNodePadding.prototype._setPadding = function (forceChange) {\n            if (forceChange === void 0) { forceChange = false; }\n            var padding = this._paddingIndent();\n            if (padding !== this._currentPadding || forceChange) {\n                var element = this._element.nativeElement;\n                var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n                var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n                this._renderer.setStyle(element, paddingProp, padding);\n                this._renderer.setStyle(element, resetProp, null);\n                this._currentPadding = padding;\n            }\n        };\n        CdkTreeNodePadding.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkTreeNodePadding]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodePadding.ctorParameters = function () { return [\n            { type: CdkTreeNode },\n            { type: CdkTree },\n            { type: core.Renderer2 },\n            { type: core.ElementRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] }\n        ]; };\n        CdkTreeNodePadding.propDecorators = {\n            level: [{ type: core.Input, args: ['cdkTreeNodePadding',] }],\n            indent: [{ type: core.Input, args: ['cdkTreeNodePaddingIndent',] }]\n        };\n        return CdkTreeNodePadding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Node toggle to expand/collapse the node.\n     */\n    var CdkTreeNodeToggle = /** @class */ (function () {\n        function CdkTreeNodeToggle(_tree, _treeNode) {\n            this._tree = _tree;\n            this._treeNode = _treeNode;\n            this._recursive = false;\n        }\n        Object.defineProperty(CdkTreeNodeToggle.prototype, \"recursive\", {\n            /** Whether expand/collapse the node recursively. */\n            get: function () { return this._recursive; },\n            set: function (value) { this._recursive = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        CdkTreeNodeToggle.prototype._toggle = function (event) {\n            this.recursive\n                ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n                : this._tree.treeControl.toggle(this._treeNode.data);\n            event.stopPropagation();\n        };\n        CdkTreeNodeToggle.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkTreeNodeToggle]' },] }\n        ];\n        /** @nocollapse */\n        CdkTreeNodeToggle.ctorParameters = function () { return [\n            { type: CdkTree },\n            { type: CdkTreeNode }\n        ]; };\n        CdkTreeNodeToggle.propDecorators = {\n            recursive: [{ type: core.Input, args: ['cdkTreeNodeToggleRecursive',] }],\n            _toggle: [{ type: core.HostListener, args: ['click', ['$event'],] }]\n        };\n        return CdkTreeNodeToggle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [\n        CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet,\n    ];\n    var CdkTreeModule = /** @class */ (function () {\n        function CdkTreeModule() {\n        }\n        CdkTreeModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS,\n                        providers: [a11y.FocusMonitor, CdkTreeNodeDef]\n                    },] }\n        ];\n        return CdkTreeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.BaseTreeControl = BaseTreeControl;\n    exports.CDK_TREE_NODE_OUTLET_NODE = CDK_TREE_NODE_OUTLET_NODE;\n    exports.CdkNestedTreeNode = CdkNestedTreeNode;\n    exports.CdkTree = CdkTree;\n    exports.CdkTreeModule = CdkTreeModule;\n    exports.CdkTreeNode = CdkTreeNode;\n    exports.CdkTreeNodeDef = CdkTreeNodeDef;\n    exports.CdkTreeNodeOutlet = CdkTreeNodeOutlet;\n    exports.CdkTreeNodeOutletContext = CdkTreeNodeOutletContext;\n    exports.CdkTreeNodePadding = CdkTreeNodePadding;\n    exports.CdkTreeNodeToggle = CdkTreeNodeToggle;\n    exports.FlatTreeControl = FlatTreeControl;\n    exports.NestedTreeControl = NestedTreeControl;\n    exports.getTreeControlFunctionsMissingError = getTreeControlFunctionsMissingError;\n    exports.getTreeControlMissingError = getTreeControlMissingError;\n    exports.getTreeMissingMatchingNodeDefError = getTreeMissingMatchingNodeDefError;\n    exports.getTreeMultipleDefaultNodeDefsError = getTreeMultipleDefaultNodeDefsError;\n    exports.getTreeNoValidDataSourceError = getTreeNoValidDataSourceError;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-tree.umd.js.map\n"]}
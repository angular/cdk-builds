{"version":3,"sources":["src/cdk/cdk-scrolling.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","scrolling","coercion","core","rxjs","operators","platform","common","bidi","tslib","collections","this","i0","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","prototype","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","hasV8BreakIterator","CdkFixedSizeVirtualScroll","Object","defineProperty","get","set","value","coerceNumberProperty","enumerable","configurable","ngOnChanges","decorators","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","propDecorators","Input","Intl","v8BreakIterator","_a","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","Injectable","providedIn","ctorParameters","Optional","Inject","PLATFORM_ID","ɵprov","ɵɵdefineInjectable","Platform_Factory","ɵɵinject","token","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","_this","has","elementScrolled","subscribe","deregister","scrollableReference","unsubscribe","delete","scrolled","auditTimeInMs","Observable","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","of","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","NgZone","ScrollDispatcher_Factory","CdkScrollable","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","takeUntil","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","supportsScrollBehavior","scrollTop","scrollLeft","from","ElementRef","Directionality","SCROLL_SCHEDULER","requestAnimationFrame","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","_super","_changeDetectorRef","call","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","__extends","orientation","_calculateSpacerSize","_measureViewportSize","startWith","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","e_1","markForCheck","style","runAfterChangeDetection","runAfterChangeDetection_1","__values","runAfterChangeDetection_1_1","done","fn","e_1_1","error","return","Component","template","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","useExisting","styles","ChangeDetectorRef","undefined","Output","ViewChild","static","getSize","node","getBoundingClientRect","rect","width","height","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","pairwise","switchMap","_b","__read","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","isDataSource","ArrayDataSource","Array","slice","_cdkVirtualForTrackBy","item","renderedStartIndex","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","_c","destroy","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cdkVirtualForOf","cachedView","pop","insert","ViewContainerRef","TemplateRef","IterableDiffers","SkipSelf","cdkVirtualForTemplate","ScrollingModule","NgModule","imports","BidiModule","PlatformModule","declarations","ViewportRuler","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","DEFAULT_RESIZE_TIME","DEFAULT_SCROLL_TIME"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/platform'), require('@angular/common'), require('@angular/cdk/bidi'), require('tslib'), require('@angular/cdk/collections')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/scrolling', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/cdk/platform', '@angular/common', '@angular/cdk/bidi', 'tslib', '@angular/cdk/collections'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.scrolling = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.cdk.platform, global.ng.common, global.ng.cdk.bidi, global.tslib, global.ng.cdk.collections));\n}(this, (function (exports, coercion, i0, rxjs, operators, platform, common, bidi, tslib, collections) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The injection token used to specify the virtual scrolling strategy. */\n    var VIRTUAL_SCROLL_STRATEGY = new i0.InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Virtual scrolling strategy for lists with items of known fixed size. */\n    var FixedSizeVirtualScrollStrategy = /** @class */ (function () {\n        /**\n         * @param itemSize The size of the items in the virtually scrolling list.\n         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n         */\n        function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n            this._scrolledIndexChange = new rxjs.Subject();\n            /** @docs-private Implemented as part of VirtualScrollStrategy. */\n            this.scrolledIndexChange = this._scrolledIndexChange.pipe(operators.distinctUntilChanged());\n            /** The attached viewport. */\n            this._viewport = null;\n            this._itemSize = itemSize;\n            this._minBufferPx = minBufferPx;\n            this._maxBufferPx = maxBufferPx;\n        }\n        /**\n         * Attaches this scroll strategy to a viewport.\n         * @param viewport The viewport to attach this strategy to.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.attach = function (viewport) {\n            this._viewport = viewport;\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** Detaches this scroll strategy from the currently attached viewport. */\n        FixedSizeVirtualScrollStrategy.prototype.detach = function () {\n            this._scrolledIndexChange.complete();\n            this._viewport = null;\n        };\n        /**\n         * Update the item size and buffer size.\n         * @param itemSize The size of the items in the virtually scrolling list.\n         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.updateItemAndBufferSize = function (itemSize, minBufferPx, maxBufferPx) {\n            if (maxBufferPx < minBufferPx) {\n                throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n            }\n            this._itemSize = itemSize;\n            this._minBufferPx = minBufferPx;\n            this._maxBufferPx = maxBufferPx;\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onContentScrolled = function () {\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onDataLengthChanged = function () {\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onContentRendered = function () { };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };\n        /**\n         * Scroll to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {\n            if (this._viewport) {\n                this._viewport.scrollToOffset(index * this._itemSize, behavior);\n            }\n        };\n        /** Update the viewport's total content size. */\n        FixedSizeVirtualScrollStrategy.prototype._updateTotalContentSize = function () {\n            if (!this._viewport) {\n                return;\n            }\n            this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n        };\n        /** Update the viewport's rendered range. */\n        FixedSizeVirtualScrollStrategy.prototype._updateRenderedRange = function () {\n            if (!this._viewport) {\n                return;\n            }\n            var scrollOffset = this._viewport.measureScrollOffset();\n            var firstVisibleIndex = scrollOffset / this._itemSize;\n            var renderedRange = this._viewport.getRenderedRange();\n            var newRange = { start: renderedRange.start, end: renderedRange.end };\n            var viewportSize = this._viewport.getViewportSize();\n            var dataLength = this._viewport.getDataLength();\n            var startBuffer = scrollOffset - newRange.start * this._itemSize;\n            if (startBuffer < this._minBufferPx && newRange.start != 0) {\n                var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n                newRange.start = Math.max(0, newRange.start - expandStart);\n                newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n            }\n            else {\n                var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n                if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                    var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                    if (expandEnd > 0) {\n                        newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                        newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                    }\n                }\n            }\n            this._viewport.setRenderedRange(newRange);\n            this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n            this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n        };\n        return FixedSizeVirtualScrollStrategy;\n    }());\n    /**\n     * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n     * `FixedSizeVirtualScrollStrategy` from the given directive.\n     * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n     *     `FixedSizeVirtualScrollStrategy` from.\n     */\n    function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n        return fixedSizeDir._scrollStrategy;\n    }\n    /** A virtual scroll strategy that supports fixed-size items. */\n    var CdkFixedSizeVirtualScroll = /** @class */ (function () {\n        function CdkFixedSizeVirtualScroll() {\n            this._itemSize = 20;\n            this._minBufferPx = 100;\n            this._maxBufferPx = 200;\n            /** The scroll strategy used by this directive. */\n            this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"itemSize\", {\n            /** The size of the items in the list (in pixels). */\n            get: function () { return this._itemSize; },\n            set: function (value) { this._itemSize = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"minBufferPx\", {\n            /**\n             * The minimum amount of buffer rendered beyond the viewport (in pixels).\n             * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n             */\n            get: function () { return this._minBufferPx; },\n            set: function (value) { this._minBufferPx = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"maxBufferPx\", {\n            /**\n             * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n             */\n            get: function () { return this._maxBufferPx; },\n            set: function (value) { this._maxBufferPx = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        CdkFixedSizeVirtualScroll.prototype.ngOnChanges = function () {\n            this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        };\n        CdkFixedSizeVirtualScroll.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                        providers: [{\n                                provide: VIRTUAL_SCROLL_STRATEGY,\n                                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                                deps: [i0.forwardRef(function () { return CdkFixedSizeVirtualScroll; })],\n                            }],\n                    },] }\n        ];\n        CdkFixedSizeVirtualScroll.propDecorators = {\n            itemSize: [{ type: i0.Input }],\n            minBufferPx: [{ type: i0.Input }],\n            maxBufferPx: [{ type: i0.Input }]\n        };\n        return CdkFixedSizeVirtualScroll;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Whether the current platform supports the V8 Break Iterator. The V8 check\n    // is necessary to detect all Blink based browsers.\n    var hasV8BreakIterator;\n    // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n    // cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n    // the consumer is providing a polyfilled `Map`. See:\n    // https://github.com/Microsoft/ChakraCore/issues/3189\n    // https://github.com/angular/components/issues/15687\n    try {\n        hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n    }\n    catch (_a) {\n        hasV8BreakIterator = false;\n    }\n    /**\n     * Service to detect the current platform by comparing the userAgent strings and\n     * checking browser-specific global properties.\n     */\n    var Platform = /** @class */ (function () {\n        /**\n         * @breaking-change 8.0.0 remove optional decorator\n         */\n        function Platform(_platformId) {\n            this._platformId = _platformId;\n            // We want to use the Angular platform check because if the Document is shimmed\n            // without the navigator, the following checks will fail. This is preferred because\n            // sometimes the Document may be shimmed without the user's knowledge or intention\n            /** Whether the Angular application is being rendered in the browser. */\n            this.isBrowser = this._platformId ?\n                common.isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n            /** Whether the current browser is Microsoft Edge. */\n            this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n            /** Whether the current rendering engine is Microsoft Trident. */\n            this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n            // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n            /** Whether the current rendering engine is Blink. */\n            this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n                typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n            // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n            // ensure that Webkit runs standalone and is not used as another engine's base.\n            /** Whether the current rendering engine is WebKit. */\n            this.WEBKIT = this.isBrowser &&\n                /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n            /** Whether the current platform is Apple iOS. */\n            this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n                !('MSStream' in window);\n            // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n            // them self as Gecko-like browsers and modify the userAgent's according to that.\n            // Since we only cover one explicit Firefox case, we can simply check for Firefox\n            // instead of having an unstable check for Gecko.\n            /** Whether the current browser is Firefox. */\n            this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n            /** Whether the current platform is Android. */\n            // Trident on mobile adds the android platform to the userAgent to trick detections.\n            this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n            // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n            // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n            // Safari browser should also use Webkit as its layout engine.\n            /** Whether the current browser is Safari. */\n            this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n        }\n        Platform.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        Platform.ctorParameters = function () { return [\n            { type: Object, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i0.PLATFORM_ID,] }] }\n        ]; };\n        Platform.ɵprov = i0.ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(i0.ɵɵinject(i0.PLATFORM_ID, 8)); }, token: Platform, providedIn: \"root\" });\n        return Platform;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the scrolling events by default. */\n    var DEFAULT_SCROLL_TIME = 20;\n    /**\n     * Service contained all registered Scrollable references and emits an event when any one of the\n     * Scrollable references emit a scrolled event.\n     */\n    var ScrollDispatcher = /** @class */ (function () {\n        function ScrollDispatcher(_ngZone, _platform) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n            this._scrolled = new rxjs.Subject();\n            /** Keeps track of the global `scroll` and `resize` subscriptions. */\n            this._globalSubscription = null;\n            /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n            this._scrolledCount = 0;\n            /**\n             * Map of all the scrollable references that are registered with the service and their\n             * scroll event subscriptions.\n             */\n            this.scrollContainers = new Map();\n        }\n        /**\n         * Registers a scrollable instance with the service and listens for its scrolled events. When the\n         * scrollable is scrolled, the service emits the event to its scrolled observable.\n         * @param scrollable Scrollable instance to be registered.\n         */\n        ScrollDispatcher.prototype.register = function (scrollable) {\n            var _this = this;\n            if (!this.scrollContainers.has(scrollable)) {\n                this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                    .subscribe(function () { return _this._scrolled.next(scrollable); }));\n            }\n        };\n        /**\n         * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n         * @param scrollable Scrollable instance to be deregistered.\n         */\n        ScrollDispatcher.prototype.deregister = function (scrollable) {\n            var scrollableReference = this.scrollContainers.get(scrollable);\n            if (scrollableReference) {\n                scrollableReference.unsubscribe();\n                this.scrollContainers.delete(scrollable);\n            }\n        };\n        /**\n         * Returns an observable that emits an event whenever any of the registered Scrollable\n         * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n         * to override the default \"throttle\" time.\n         *\n         * **Note:** in order to avoid hitting change detection for every scroll event,\n         * all of the events emitted from this stream will be run outside the Angular zone.\n         * If you need to update any data bindings as a result of a scroll event, you have\n         * to run the callback using `NgZone.run`.\n         */\n        ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {\n            var _this = this;\n            if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n            if (!this._platform.isBrowser) {\n                return rxjs.of();\n            }\n            return new rxjs.Observable(function (observer) {\n                if (!_this._globalSubscription) {\n                    _this._addGlobalListener();\n                }\n                // In the case of a 0ms delay, use an observable without auditTime\n                // since it does add a perceptible delay in processing overhead.\n                var subscription = auditTimeInMs > 0 ?\n                    _this._scrolled.pipe(operators.auditTime(auditTimeInMs)).subscribe(observer) :\n                    _this._scrolled.subscribe(observer);\n                _this._scrolledCount++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._scrolledCount--;\n                    if (!_this._scrolledCount) {\n                        _this._removeGlobalListener();\n                    }\n                };\n            });\n        };\n        ScrollDispatcher.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._removeGlobalListener();\n            this.scrollContainers.forEach(function (_, container) { return _this.deregister(container); });\n            this._scrolled.complete();\n        };\n        /**\n         * Returns an observable that emits whenever any of the\n         * scrollable ancestors of an element are scrolled.\n         * @param elementRef Element whose ancestors to listen for.\n         * @param auditTimeInMs Time to throttle the scroll events.\n         */\n        ScrollDispatcher.prototype.ancestorScrolled = function (elementRef, auditTimeInMs) {\n            var ancestors = this.getAncestorScrollContainers(elementRef);\n            return this.scrolled(auditTimeInMs).pipe(operators.filter(function (target) {\n                return !target || ancestors.indexOf(target) > -1;\n            }));\n        };\n        /** Returns all registered Scrollables that contain the provided element. */\n        ScrollDispatcher.prototype.getAncestorScrollContainers = function (elementRef) {\n            var _this = this;\n            var scrollingContainers = [];\n            this.scrollContainers.forEach(function (_subscription, scrollable) {\n                if (_this._scrollableContainsElement(scrollable, elementRef)) {\n                    scrollingContainers.push(scrollable);\n                }\n            });\n            return scrollingContainers;\n        };\n        /** Returns true if the element is contained within the provided Scrollable. */\n        ScrollDispatcher.prototype._scrollableContainsElement = function (scrollable, elementRef) {\n            var element = elementRef.nativeElement;\n            var scrollableElement = scrollable.getElementRef().nativeElement;\n            // Traverse through the element parents until we reach null, checking if any of the elements\n            // are the scrollable's element.\n            do {\n                if (element == scrollableElement) {\n                    return true;\n                }\n            } while (element = element.parentElement);\n            return false;\n        };\n        /** Sets up the global scroll listeners. */\n        ScrollDispatcher.prototype._addGlobalListener = function () {\n            var _this = this;\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                return rxjs.fromEvent(window.document, 'scroll').subscribe(function () { return _this._scrolled.next(); });\n            });\n        };\n        /** Cleans up the global scroll listener. */\n        ScrollDispatcher.prototype._removeGlobalListener = function () {\n            if (this._globalSubscription) {\n                this._globalSubscription.unsubscribe();\n                this._globalSubscription = null;\n            }\n        };\n        ScrollDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollDispatcher.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: platform.Platform }\n        ]; };\n        ScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n        return ScrollDispatcher;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Sends an event when the directive's element is scrolled. Registers itself with the\n     * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n     * can be listened to through the service.\n     */\n    var CdkScrollable = /** @class */ (function () {\n        function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n            var _this = this;\n            this.elementRef = elementRef;\n            this.scrollDispatcher = scrollDispatcher;\n            this.ngZone = ngZone;\n            this.dir = dir;\n            this._destroyed = new rxjs.Subject();\n            this._elementScrolled = new rxjs.Observable(function (observer) {\n                return _this.ngZone.runOutsideAngular(function () {\n                    return rxjs.fromEvent(_this.elementRef.nativeElement, 'scroll').pipe(operators.takeUntil(_this._destroyed))\n                        .subscribe(observer);\n                });\n            });\n        }\n        CdkScrollable.prototype.ngOnInit = function () {\n            this.scrollDispatcher.register(this);\n        };\n        CdkScrollable.prototype.ngOnDestroy = function () {\n            this.scrollDispatcher.deregister(this);\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Returns observable that emits when a scroll event is fired on the host element. */\n        CdkScrollable.prototype.elementScrolled = function () {\n            return this._elementScrolled;\n        };\n        /** Gets the ElementRef for the viewport. */\n        CdkScrollable.prototype.getElementRef = function () {\n            return this.elementRef;\n        };\n        /**\n         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param options specified the offsets to scroll to.\n         */\n        CdkScrollable.prototype.scrollTo = function (options) {\n            var el = this.elementRef.nativeElement;\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            // Rewrite start & end offsets as right or left offsets.\n            options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n            options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n            // Rewrite the bottom offset as a top offset.\n            if (options.bottom != null) {\n                options.top =\n                    el.scrollHeight - el.clientHeight - options.bottom;\n            }\n            // Rewrite the right offset as a left offset.\n            if (isRtl && platform.getRtlScrollAxisType() != platform.RtlScrollAxisType.NORMAL) {\n                if (options.left != null) {\n                    options.right =\n                        el.scrollWidth - el.clientWidth - options.left;\n                }\n                if (platform.getRtlScrollAxisType() == platform.RtlScrollAxisType.INVERTED) {\n                    options.left = options.right;\n                }\n                else if (platform.getRtlScrollAxisType() == platform.RtlScrollAxisType.NEGATED) {\n                    options.left = options.right ? -options.right : options.right;\n                }\n            }\n            else {\n                if (options.right != null) {\n                    options.left =\n                        el.scrollWidth - el.clientWidth - options.right;\n                }\n            }\n            this._applyScrollToOptions(options);\n        };\n        CdkScrollable.prototype._applyScrollToOptions = function (options) {\n            var el = this.elementRef.nativeElement;\n            if (platform.supportsScrollBehavior()) {\n                el.scrollTo(options);\n            }\n            else {\n                if (options.top != null) {\n                    el.scrollTop = options.top;\n                }\n                if (options.left != null) {\n                    el.scrollLeft = options.left;\n                }\n            }\n        };\n        /**\n         * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n         * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n         * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param from The edge to measure from.\n         */\n        CdkScrollable.prototype.measureScrollOffset = function (from) {\n            var LEFT = 'left';\n            var RIGHT = 'right';\n            var el = this.elementRef.nativeElement;\n            if (from == 'top') {\n                return el.scrollTop;\n            }\n            if (from == 'bottom') {\n                return el.scrollHeight - el.clientHeight - el.scrollTop;\n            }\n            // Rewrite start & end as left or right offsets.\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            if (from == 'start') {\n                from = isRtl ? RIGHT : LEFT;\n            }\n            else if (from == 'end') {\n                from = isRtl ? LEFT : RIGHT;\n            }\n            if (isRtl && platform.getRtlScrollAxisType() == platform.RtlScrollAxisType.INVERTED) {\n                // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n                else {\n                    return el.scrollLeft;\n                }\n            }\n            else if (isRtl && platform.getRtlScrollAxisType() == platform.RtlScrollAxisType.NEGATED) {\n                // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft + el.scrollWidth - el.clientWidth;\n                }\n                else {\n                    return -el.scrollLeft;\n                }\n            }\n            else {\n                // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n                // (scrollWidth - clientWidth) when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft;\n                }\n                else {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n            }\n        };\n        CdkScrollable.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-scrollable], [cdkScrollable]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkScrollable.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: ScrollDispatcher },\n            { type: i0.NgZone },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return CdkScrollable;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Checks if the given ranges are equal. */\n    function rangesEqual(r1, r2) {\n        return r1.start == r2.start && r1.end == r2.end;\n    }\n    /**\n     * Scheduler to be used for scroll events. Needs to fall back to\n     * something that doesn't rely on requestAnimationFrame on environments\n     * that don't support it (e.g. server-side rendering).\n     */\n    var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs.animationFrameScheduler : rxjs.asapScheduler;\n    /** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n    var CdkVirtualScrollViewport = /** @class */ (function (_super) {\n        tslib.__extends(CdkVirtualScrollViewport, _super);\n        function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone, dir) || this;\n            _this.elementRef = elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._scrollStrategy = _scrollStrategy;\n            /** Emits when the viewport is detached from a CdkVirtualForOf. */\n            _this._detachedSubject = new rxjs.Subject();\n            /** Emits when the rendered range changes. */\n            _this._renderedRangeSubject = new rxjs.Subject();\n            _this._orientation = 'vertical';\n            // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n            // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n            // depending on how the strategy calculates the scrolled index, it may come at a cost to\n            // performance.\n            /** Emits when the index of the first element visible in the viewport changes. */\n            _this.scrolledIndexChange = new rxjs.Observable(function (observer) {\n                return _this._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n                    return Promise.resolve().then(function () { return _this.ngZone.run(function () { return observer.next(index); }); });\n                });\n            });\n            /** A stream that emits whenever the rendered range changes. */\n            _this.renderedRangeStream = _this._renderedRangeSubject.asObservable();\n            /**\n             * The total size of all content (in pixels), including content that is not currently rendered.\n             */\n            _this._totalContentSize = 0;\n            /** A string representing the `style.width` property value to be used for the spacer element. */\n            _this._totalContentWidth = '';\n            /** A string representing the `style.height` property value to be used for the spacer element. */\n            _this._totalContentHeight = '';\n            /** The currently rendered range of indices. */\n            _this._renderedRange = { start: 0, end: 0 };\n            /** The length of the data bound to this viewport (in number of items). */\n            _this._dataLength = 0;\n            /** The size of the viewport (in pixels). */\n            _this._viewportSize = 0;\n            /** The last rendered content offset that was set. */\n            _this._renderedContentOffset = 0;\n            /**\n             * Whether the last rendered content offset was to the end of the content (and therefore needs to\n             * be rewritten as an offset to the start of the content).\n             */\n            _this._renderedContentOffsetNeedsRewrite = false;\n            /** Whether there is a pending change detection cycle. */\n            _this._isChangeDetectionPending = false;\n            /** A list of functions to run after the next change detection cycle. */\n            _this._runAfterChangeDetection = [];\n            if (!_scrollStrategy) {\n                throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n            }\n            return _this;\n        }\n        Object.defineProperty(CdkVirtualScrollViewport.prototype, \"orientation\", {\n            /** The direction the viewport scrolls. */\n            get: function () {\n                return this._orientation;\n            },\n            set: function (orientation) {\n                if (this._orientation !== orientation) {\n                    this._orientation = orientation;\n                    this._calculateSpacerSize();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkVirtualScrollViewport.prototype.ngOnInit = function () {\n            var _this = this;\n            _super.prototype.ngOnInit.call(this);\n            // It's still too early to measure the viewport at this point. Deferring with a promise allows\n            // the Viewport to be rendered with the correct size before we measure. We run this outside the\n            // zone to avoid causing more change detection cycles. We handle the change detection loop\n            // ourselves instead.\n            this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                _this._measureViewportSize();\n                _this._scrollStrategy.attach(_this);\n                _this.elementScrolled()\n                    .pipe(\n                // Start off with a fake scroll event so we properly detect our initial position.\n                operators.startWith(null), \n                // Collect multiple events into one until the next animation frame. This way if\n                // there are multiple scroll events in the same frame we only need to recheck\n                // our layout once.\n                operators.auditTime(0, SCROLL_SCHEDULER))\n                    .subscribe(function () { return _this._scrollStrategy.onContentScrolled(); });\n                _this._markChangeDetectionNeeded();\n            }); });\n        };\n        CdkVirtualScrollViewport.prototype.ngOnDestroy = function () {\n            this.detach();\n            this._scrollStrategy.detach();\n            // Complete all subjects\n            this._renderedRangeSubject.complete();\n            this._detachedSubject.complete();\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        /** Attaches a `CdkVirtualForOf` to this viewport. */\n        CdkVirtualScrollViewport.prototype.attach = function (forOf) {\n            var _this = this;\n            if (this._forOf) {\n                throw Error('CdkVirtualScrollViewport is already attached.');\n            }\n            // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n            // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n            // change detection loop ourselves.\n            this.ngZone.runOutsideAngular(function () {\n                _this._forOf = forOf;\n                _this._forOf.dataStream.pipe(operators.takeUntil(_this._detachedSubject)).subscribe(function (data) {\n                    var newLength = data.length;\n                    if (newLength !== _this._dataLength) {\n                        _this._dataLength = newLength;\n                        _this._scrollStrategy.onDataLengthChanged();\n                    }\n                    _this._doChangeDetection();\n                });\n            });\n        };\n        /** Detaches the current `CdkVirtualForOf`. */\n        CdkVirtualScrollViewport.prototype.detach = function () {\n            this._forOf = null;\n            this._detachedSubject.next();\n        };\n        /** Gets the length of the data bound to this viewport (in number of items). */\n        CdkVirtualScrollViewport.prototype.getDataLength = function () {\n            return this._dataLength;\n        };\n        /** Gets the size of the viewport (in pixels). */\n        CdkVirtualScrollViewport.prototype.getViewportSize = function () {\n            return this._viewportSize;\n        };\n        // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n        // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n        // setting it to something else, but its error prone and should probably be split into\n        // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n        /** Get the current rendered range of items. */\n        CdkVirtualScrollViewport.prototype.getRenderedRange = function () {\n            return this._renderedRange;\n        };\n        /**\n         * Sets the total size of all content (in pixels), including content that is not currently\n         * rendered.\n         */\n        CdkVirtualScrollViewport.prototype.setTotalContentSize = function (size) {\n            if (this._totalContentSize !== size) {\n                this._totalContentSize = size;\n                this._calculateSpacerSize();\n                this._markChangeDetectionNeeded();\n            }\n        };\n        /** Sets the currently rendered range of indices. */\n        CdkVirtualScrollViewport.prototype.setRenderedRange = function (range) {\n            var _this = this;\n            if (!rangesEqual(this._renderedRange, range)) {\n                this._renderedRangeSubject.next(this._renderedRange = range);\n                this._markChangeDetectionNeeded(function () { return _this._scrollStrategy.onContentRendered(); });\n            }\n        };\n        /**\n         * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n         */\n        CdkVirtualScrollViewport.prototype.getOffsetToRenderedContentStart = function () {\n            return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n        };\n        /**\n         * Sets the offset from the start of the viewport to either the start or end of the rendered data\n         * (in pixels).\n         */\n        CdkVirtualScrollViewport.prototype.setRenderedContentOffset = function (offset, to) {\n            var _this = this;\n            if (to === void 0) { to = 'to-start'; }\n            // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n            // in the negative direction.\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            var isHorizontal = this.orientation == 'horizontal';\n            var axis = isHorizontal ? 'X' : 'Y';\n            var axisDirection = isHorizontal && isRtl ? -1 : 1;\n            var transform = \"translate\" + axis + \"(\" + Number(axisDirection * offset) + \"px)\";\n            this._renderedContentOffset = offset;\n            if (to === 'to-end') {\n                transform += \" translate\" + axis + \"(-100%)\";\n                // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n                // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n                // expand upward).\n                this._renderedContentOffsetNeedsRewrite = true;\n            }\n            if (this._renderedContentTransform != transform) {\n                // We know this value is safe because we parse `offset` with `Number()` before passing it\n                // into the string.\n                this._renderedContentTransform = transform;\n                this._markChangeDetectionNeeded(function () {\n                    if (_this._renderedContentOffsetNeedsRewrite) {\n                        _this._renderedContentOffset -= _this.measureRenderedContentSize();\n                        _this._renderedContentOffsetNeedsRewrite = false;\n                        _this.setRenderedContentOffset(_this._renderedContentOffset);\n                    }\n                    else {\n                        _this._scrollStrategy.onRenderedOffsetChanged();\n                    }\n                });\n            }\n        };\n        /**\n         * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n         * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n         * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n         * @param offset The offset to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        CdkVirtualScrollViewport.prototype.scrollToOffset = function (offset, behavior) {\n            if (behavior === void 0) { behavior = 'auto'; }\n            var options = { behavior: behavior };\n            if (this.orientation === 'horizontal') {\n                options.start = offset;\n            }\n            else {\n                options.top = offset;\n            }\n            this.scrollTo(options);\n        };\n        /**\n         * Scrolls to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        CdkVirtualScrollViewport.prototype.scrollToIndex = function (index, behavior) {\n            if (behavior === void 0) { behavior = 'auto'; }\n            this._scrollStrategy.scrollToIndex(index, behavior);\n        };\n        /**\n         * Gets the current scroll offset from the start of the viewport (in pixels).\n         * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n         *     in horizontal mode.\n         */\n        CdkVirtualScrollViewport.prototype.measureScrollOffset = function (from) {\n            return _super.prototype.measureScrollOffset.call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n        };\n        /** Measure the combined size of all of the rendered items. */\n        CdkVirtualScrollViewport.prototype.measureRenderedContentSize = function () {\n            var contentEl = this._contentWrapper.nativeElement;\n            return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n        };\n        /**\n         * Measure the total combined size of the given range. Throws if the range includes items that are\n         * not rendered.\n         */\n        CdkVirtualScrollViewport.prototype.measureRangeSize = function (range) {\n            if (!this._forOf) {\n                return 0;\n            }\n            return this._forOf.measureRangeSize(range, this.orientation);\n        };\n        /** Update the viewport dimensions and re-render. */\n        CdkVirtualScrollViewport.prototype.checkViewportSize = function () {\n            // TODO: Cleanup later when add logic for handling content resize\n            this._measureViewportSize();\n            this._scrollStrategy.onDataLengthChanged();\n        };\n        /** Measure the viewport size. */\n        CdkVirtualScrollViewport.prototype._measureViewportSize = function () {\n            var viewportEl = this.elementRef.nativeElement;\n            this._viewportSize = this.orientation === 'horizontal' ?\n                viewportEl.clientWidth : viewportEl.clientHeight;\n        };\n        /** Queue up change detection to run. */\n        CdkVirtualScrollViewport.prototype._markChangeDetectionNeeded = function (runAfter) {\n            var _this = this;\n            if (runAfter) {\n                this._runAfterChangeDetection.push(runAfter);\n            }\n            // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n            // properties sequentially we only have to run `_doChangeDetection` once at the end.\n            if (!this._isChangeDetectionPending) {\n                this._isChangeDetectionPending = true;\n                this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                    _this._doChangeDetection();\n                }); });\n            }\n        };\n        /** Run change detection. */\n        CdkVirtualScrollViewport.prototype._doChangeDetection = function () {\n            var e_1, _a;\n            var _this = this;\n            this._isChangeDetectionPending = false;\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this.ngZone.run(function () { return _this._changeDetectorRef.markForCheck(); });\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            var runAfterChangeDetection = this._runAfterChangeDetection;\n            this._runAfterChangeDetection = [];\n            try {\n                for (var runAfterChangeDetection_1 = tslib.__values(runAfterChangeDetection), runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next(); !runAfterChangeDetection_1_1.done; runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next()) {\n                    var fn = runAfterChangeDetection_1_1.value;\n                    fn();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (runAfterChangeDetection_1_1 && !runAfterChangeDetection_1_1.done && (_a = runAfterChangeDetection_1.return)) _a.call(runAfterChangeDetection_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /** Calculates the `style.width` and `style.height` for the spacer element. */\n        CdkVirtualScrollViewport.prototype._calculateSpacerSize = function () {\n            this._totalContentHeight =\n                this.orientation === 'horizontal' ? '' : this._totalContentSize + \"px\";\n            this._totalContentWidth =\n                this.orientation === 'horizontal' ? this._totalContentSize + \"px\" : '';\n        };\n        CdkVirtualScrollViewport.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'cdk-virtual-scroll-viewport',\n                        template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                        host: {\n                            'class': 'cdk-virtual-scroll-viewport',\n                            '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                            '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                        },\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        providers: [{\n                                provide: CdkScrollable,\n                                useExisting: CdkVirtualScrollViewport,\n                            }],\n                        styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkVirtualScrollViewport.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: i0.ChangeDetectorRef },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: ScrollDispatcher }\n        ]; };\n        CdkVirtualScrollViewport.propDecorators = {\n            orientation: [{ type: i0.Input }],\n            scrolledIndexChange: [{ type: i0.Output }],\n            _contentWrapper: [{ type: i0.ViewChild, args: ['contentWrapper', { static: true },] }]\n        };\n        return CdkVirtualScrollViewport;\n    }(CdkScrollable));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Helper to extract size from a DOM Node. */\n    function getSize(orientation, node) {\n        var el = node;\n        if (!el.getBoundingClientRect) {\n            return 0;\n        }\n        var rect = el.getBoundingClientRect();\n        return orientation == 'horizontal' ? rect.width : rect.height;\n    }\n    /**\n     * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n     * container.\n     */\n    var CdkVirtualForOf = /** @class */ (function () {\n        function CdkVirtualForOf(\n        /** The view container to add items to. */\n        _viewContainerRef, \n        /** The template to use when stamping out new items. */\n        _template, \n        /** The set of available differs. */\n        _differs, \n        /** The virtual scrolling viewport that these items are being rendered in. */\n        _viewport, ngZone) {\n            var _this = this;\n            this._viewContainerRef = _viewContainerRef;\n            this._template = _template;\n            this._differs = _differs;\n            this._viewport = _viewport;\n            /** Emits when the rendered view of the data changes. */\n            this.viewChange = new rxjs.Subject();\n            /** Subject that emits when a new DataSource instance is given. */\n            this._dataSourceChanges = new rxjs.Subject();\n            /**\n             * The size of the cache used to store templates that are not being used for re-use later.\n             * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n             */\n            this.cdkVirtualForTemplateCacheSize = 20;\n            /** Emits whenever the data in the current DataSource changes. */\n            this.dataStream = this._dataSourceChanges\n                .pipe(\n            // Start off with null `DataSource`.\n            operators.startWith(null), \n            // Bundle up the previous and current data sources so we can work with both.\n            operators.pairwise(), \n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            operators.switchMap(function (_a) {\n                var _b = tslib.__read(_a, 2), prev = _b[0], cur = _b[1];\n                return _this._changeDataSource(prev, cur);\n            }), \n            // Replay the last emitted data when someone subscribes.\n            operators.shareReplay(1));\n            /** The differ used to calculate changes to the data. */\n            this._differ = null;\n            /**\n             * The template cache used to hold on ot template instancess that have been stamped out, but don't\n             * currently need to be rendered. These instances will be reused in the future rather than\n             * stamping out brand new ones.\n             */\n            this._templateCache = [];\n            /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n            this._needsUpdate = false;\n            this._destroyed = new rxjs.Subject();\n            this.dataStream.subscribe(function (data) {\n                _this._data = data;\n                _this._onRenderedDataChange();\n            });\n            this._viewport.renderedRangeStream.pipe(operators.takeUntil(this._destroyed)).subscribe(function (range) {\n                _this._renderedRange = range;\n                ngZone.run(function () { return _this.viewChange.next(_this._renderedRange); });\n                _this._onRenderedDataChange();\n            });\n            this._viewport.attach(this);\n        }\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForOf\", {\n            /** The DataSource to display. */\n            get: function () {\n                return this._cdkVirtualForOf;\n            },\n            set: function (value) {\n                this._cdkVirtualForOf = value;\n                var ds = collections.isDataSource(value) ? value :\n                    // Slice the value if its an NgIterable to ensure we're working with an array.\n                    new collections.ArrayDataSource(value instanceof rxjs.Observable ? value : Array.prototype.slice.call(value || []));\n                this._dataSourceChanges.next(ds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTrackBy\", {\n            /**\n             * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n             * the item and produces a value to be used as the item's identity when tracking changes.\n             */\n            get: function () {\n                return this._cdkVirtualForTrackBy;\n            },\n            set: function (fn) {\n                var _this = this;\n                this._needsUpdate = true;\n                this._cdkVirtualForTrackBy = fn ?\n                    function (index, item) { return fn(index + (_this._renderedRange ? _this._renderedRange.start : 0), item); } :\n                    undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTemplate\", {\n            /** The template used to stamp out new elements. */\n            set: function (value) {\n                if (value) {\n                    this._needsUpdate = true;\n                    this._template = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n         * in the specified range. Throws an error if the range includes items that are not currently\n         * rendered.\n         */\n        CdkVirtualForOf.prototype.measureRangeSize = function (range, orientation) {\n            if (range.start >= range.end) {\n                return 0;\n            }\n            if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n                throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n            }\n            // The index into the list of rendered views for the first item in the range.\n            var renderedStartIndex = range.start - this._renderedRange.start;\n            // The length of the range we're measuring.\n            var rangeLen = range.end - range.start;\n            // Loop over all root nodes for all items in the range and sum up their size.\n            var totalSize = 0;\n            var i = rangeLen;\n            while (i--) {\n                var view = this._viewContainerRef.get(i + renderedStartIndex);\n                var j = view ? view.rootNodes.length : 0;\n                while (j--) {\n                    totalSize += getSize(orientation, view.rootNodes[j]);\n                }\n            }\n            return totalSize;\n        };\n        CdkVirtualForOf.prototype.ngDoCheck = function () {\n            if (this._differ && this._needsUpdate) {\n                // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n                // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n                // changing (need to do this diff).\n                var changes = this._differ.diff(this._renderedItems);\n                if (!changes) {\n                    this._updateContext();\n                }\n                else {\n                    this._applyChanges(changes);\n                }\n                this._needsUpdate = false;\n            }\n        };\n        CdkVirtualForOf.prototype.ngOnDestroy = function () {\n            var e_1, _a;\n            this._viewport.detach();\n            this._dataSourceChanges.next();\n            this._dataSourceChanges.complete();\n            this.viewChange.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            try {\n                for (var _b = tslib.__values(this._templateCache), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var view = _c.value;\n                    view.destroy();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /** React to scroll state changes in the viewport. */\n        CdkVirtualForOf.prototype._onRenderedDataChange = function () {\n            if (!this._renderedRange) {\n                return;\n            }\n            this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n            if (!this._differ) {\n                this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n            }\n            this._needsUpdate = true;\n        };\n        /** Swap out one `DataSource` for another. */\n        CdkVirtualForOf.prototype._changeDataSource = function (oldDs, newDs) {\n            if (oldDs) {\n                oldDs.disconnect(this);\n            }\n            this._needsUpdate = true;\n            return newDs ? newDs.connect(this) : rxjs.of();\n        };\n        /** Update the `CdkVirtualForOfContext` for all views. */\n        CdkVirtualForOf.prototype._updateContext = function () {\n            var count = this._data.length;\n            var i = this._viewContainerRef.length;\n            while (i--) {\n                var view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n                view.detectChanges();\n            }\n        };\n        /** Apply changes to the DOM. */\n        CdkVirtualForOf.prototype._applyChanges = function (changes) {\n            var _this = this;\n            // Rearrange the views to put them in the right location.\n            changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n                if (record.previousIndex == null) { // Item added.\n                    var view = _this._insertViewForNewItem(currentIndex);\n                    view.context.$implicit = record.item;\n                }\n                else if (currentIndex == null) { // Item removed.\n                    _this._cacheView(_this._detachView(adjustedPreviousIndex));\n                }\n                else { // Item moved.\n                    var view = _this._viewContainerRef.get(adjustedPreviousIndex);\n                    _this._viewContainerRef.move(view, currentIndex);\n                    view.context.$implicit = record.item;\n                }\n            });\n            // Update $implicit for any items that had an identity change.\n            changes.forEachIdentityChange(function (record) {\n                var view = _this._viewContainerRef.get(record.currentIndex);\n                view.context.$implicit = record.item;\n            });\n            // Update the context variables on all items.\n            var count = this._data.length;\n            var i = this._viewContainerRef.length;\n            while (i--) {\n                var view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n            }\n        };\n        /** Cache the given detached view. */\n        CdkVirtualForOf.prototype._cacheView = function (view) {\n            if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n                this._templateCache.push(view);\n            }\n            else {\n                var index = this._viewContainerRef.indexOf(view);\n                // It's very unlikely that the index will ever be -1, but just in case,\n                // destroy the view on its own, otherwise destroy it through the\n                // container to ensure that all the references are removed.\n                if (index === -1) {\n                    view.destroy();\n                }\n                else {\n                    this._viewContainerRef.remove(index);\n                }\n            }\n        };\n        /** Inserts a view for a new item, either from the cache or by creating a new one. */\n        CdkVirtualForOf.prototype._insertViewForNewItem = function (index) {\n            return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n        };\n        /** Update the computed properties on the `CdkVirtualForOfContext`. */\n        CdkVirtualForOf.prototype._updateComputedContextProperties = function (context) {\n            context.first = context.index === 0;\n            context.last = context.index === context.count - 1;\n            context.even = context.index % 2 === 0;\n            context.odd = !context.even;\n        };\n        /** Creates a new embedded view and moves it to the given index */\n        CdkVirtualForOf.prototype._createEmbeddedViewAt = function (index) {\n            // Note that it's important that we insert the item directly at the proper index,\n            // rather than inserting it and the moving it in place, because if there's a directive\n            // on the same node that injects the `ViewContainerRef`, Angular will insert another\n            // comment node which can throw off the move when it's being repeated for all items.\n            return this._viewContainerRef.createEmbeddedView(this._template, {\n                $implicit: null,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            }, index);\n        };\n        /** Inserts a recycled view from the cache at the given index. */\n        CdkVirtualForOf.prototype._insertViewFromCache = function (index) {\n            var cachedView = this._templateCache.pop();\n            if (cachedView) {\n                this._viewContainerRef.insert(cachedView, index);\n            }\n            return cachedView || null;\n        };\n        /** Detaches the embedded view at the given index. */\n        CdkVirtualForOf.prototype._detachView = function (index) {\n            return this._viewContainerRef.detach(index);\n        };\n        CdkVirtualForOf.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkVirtualForOf.ctorParameters = function () { return [\n            { type: i0.ViewContainerRef },\n            { type: i0.TemplateRef },\n            { type: i0.IterableDiffers },\n            { type: CdkVirtualScrollViewport, decorators: [{ type: i0.SkipSelf }] },\n            { type: i0.NgZone }\n        ]; };\n        CdkVirtualForOf.propDecorators = {\n            cdkVirtualForOf: [{ type: i0.Input }],\n            cdkVirtualForTrackBy: [{ type: i0.Input }],\n            cdkVirtualForTemplate: [{ type: i0.Input }],\n            cdkVirtualForTemplateCacheSize: [{ type: i0.Input }]\n        };\n        return CdkVirtualForOf;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ScrollingModule = /** @class */ (function () {\n        function ScrollingModule() {\n        }\n        ScrollingModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [bidi.BidiModule, platform.PlatformModule],\n                        exports: [\n                            bidi.BidiModule,\n                            CdkFixedSizeVirtualScroll,\n                            CdkScrollable,\n                            CdkVirtualForOf,\n                            CdkVirtualScrollViewport,\n                        ],\n                        declarations: [\n                            CdkFixedSizeVirtualScroll,\n                            CdkScrollable,\n                            CdkVirtualForOf,\n                            CdkVirtualScrollViewport,\n                        ],\n                    },] }\n        ];\n        return ScrollingModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the resize events by default. */\n    var DEFAULT_RESIZE_TIME = 20;\n    /**\n     * Simple utility for getting the bounds of the browser viewport.\n     * @docs-private\n     */\n    var ViewportRuler = /** @class */ (function () {\n        function ViewportRuler(_platform, ngZone) {\n            var _this = this;\n            this._platform = _platform;\n            ngZone.runOutsideAngular(function () {\n                _this._change = _platform.isBrowser ?\n                    rxjs.merge(rxjs.fromEvent(window, 'resize'), rxjs.fromEvent(window, 'orientationchange')) :\n                    rxjs.of();\n                // Note that we need to do the subscription inside `runOutsideAngular`\n                // since subscribing is what causes the event listener to be added.\n                _this._invalidateCache = _this.change().subscribe(function () { return _this._updateViewportSize(); });\n            });\n        }\n        ViewportRuler.prototype.ngOnDestroy = function () {\n            this._invalidateCache.unsubscribe();\n        };\n        /** Returns the viewport's width and height. */\n        ViewportRuler.prototype.getViewportSize = function () {\n            if (!this._viewportSize) {\n                this._updateViewportSize();\n            }\n            var output = { width: this._viewportSize.width, height: this._viewportSize.height };\n            // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n            if (!this._platform.isBrowser) {\n                this._viewportSize = null;\n            }\n            return output;\n        };\n        /** Gets a ClientRect for the viewport's bounds. */\n        ViewportRuler.prototype.getViewportRect = function () {\n            // Use the document element's bounding rect rather than the window scroll properties\n            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n            // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n            // can disagree when the page is pinch-zoomed (on devices that support touch).\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n            // We use the documentElement instead of the body because, by default (without a css reset)\n            // browsers typically give the document body an 8px margin, which is not included in\n            // getBoundingClientRect().\n            var scrollPosition = this.getViewportScrollPosition();\n            var _a = this.getViewportSize(), width = _a.width, height = _a.height;\n            return {\n                top: scrollPosition.top,\n                left: scrollPosition.left,\n                bottom: scrollPosition.top + height,\n                right: scrollPosition.left + width,\n                height: height,\n                width: width,\n            };\n        };\n        /** Gets the (top, left) scroll position of the viewport. */\n        ViewportRuler.prototype.getViewportScrollPosition = function () {\n            // While we can get a reference to the fake document\n            // during SSR, it doesn't have getBoundingClientRect.\n            if (!this._platform.isBrowser) {\n                return { top: 0, left: 0 };\n            }\n            // The top-left-corner of the viewport is determined by the scroll position of the document\n            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n            // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n            // `document.documentElement` works consistently, where the `top` and `left` values will\n            // equal negative the scroll position.\n            var documentElement = document.documentElement;\n            var documentRect = documentElement.getBoundingClientRect();\n            var top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                documentElement.scrollTop || 0;\n            var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                documentElement.scrollLeft || 0;\n            return { top: top, left: left };\n        };\n        /**\n         * Returns a stream that emits whenever the size of the viewport changes.\n         * @param throttleTime Time in milliseconds to throttle the stream.\n         */\n        ViewportRuler.prototype.change = function (throttleTime) {\n            if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }\n            return throttleTime > 0 ? this._change.pipe(operators.auditTime(throttleTime)) : this._change;\n        };\n        /** Updates the cached viewport size. */\n        ViewportRuler.prototype._updateViewportSize = function () {\n            this._viewportSize = this._platform.isBrowser ?\n                { width: window.innerWidth, height: window.innerHeight } :\n                { width: 0, height: 0 };\n        };\n        ViewportRuler.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ViewportRuler.ctorParameters = function () { return [\n            { type: platform.Platform },\n            { type: i0.NgZone }\n        ]; };\n        ViewportRuler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(i0.ɵɵinject(Platform), i0.ɵɵinject(i0.NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n        return ViewportRuler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkFixedSizeVirtualScroll = CdkFixedSizeVirtualScroll;\n    exports.CdkScrollable = CdkScrollable;\n    exports.CdkVirtualForOf = CdkVirtualForOf;\n    exports.CdkVirtualScrollViewport = CdkVirtualScrollViewport;\n    exports.DEFAULT_RESIZE_TIME = DEFAULT_RESIZE_TIME;\n    exports.DEFAULT_SCROLL_TIME = DEFAULT_SCROLL_TIME;\n    exports.FixedSizeVirtualScrollStrategy = FixedSizeVirtualScrollStrategy;\n    exports.ScrollDispatcher = ScrollDispatcher;\n    exports.ScrollingModule = ScrollingModule;\n    exports.VIRTUAL_SCROLL_STRATEGY = VIRTUAL_SCROLL_STRATEGY;\n    exports.ViewportRuler = ViewportRuler;\n    exports._fixedSizeVirtualScrollStrategyFactory = _fixedSizeVirtualScrollStrategyFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-scrolling.umd.js.map\n"]}
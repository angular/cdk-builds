{"version":3,"sources":["src/cdk/cdk-scrolling.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","scrolling","coercion","core","rxjs","operators","platform","common","bidi","collections","this","i0","i1","i2","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","prototype","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","Object","defineProperty","get","set","value","coerceNumberProperty","enumerable","configurable","ngOnChanges","decorators","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","propDecorators","Input","ScrollDispatcher","_ngZone","_platform","document","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","_document","register","scrollable","_this","has","elementScrolled","subscribe","deregister","scrollableReference","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","of","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","_getDocument","_getWindow","defaultView","window","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","Injectable","providedIn","ctorParameters","NgZone","Platform","undefined","Optional","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","ScrollDispatcher_Factory","ɵɵinject","token","CdkScrollable","scrollDispatcher","ngZone","dir","_destroyed","_elementScrolled","takeUntil","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","scrollWidth","clientWidth","_applyScrollToOptions","supportsScrollBehavior","scrollTop","scrollLeft","from","ElementRef","Directionality","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__values","o","m","Symbol","iterator","i","call","length","done","ViewportRuler","_change","merge","_invalidateCache","change","_updateViewportSize","_viewportSize","output","width","height","getViewportRect","scrollPosition","getViewportScrollPosition","_a","documentElement","documentRect","getBoundingClientRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","SCROLL_SCHEDULER","requestAnimationFrame","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","_super","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","Subscription","EMPTY","checkViewportSize","__extends","__","constructor","create","orientation","_calculateSpacerSize","_measureViewportSize","startWith","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","_doChangeDetection","size","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","e_1","style","markForCheck","runAfterChangeDetection","runAfterChangeDetection_1","runAfterChangeDetection_1_1","fn","e_1_1","error","return","Component","template","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","useExisting","styles","ChangeDetectorRef","Output","ViewChild","static","getSize","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","pairwise","switchMap","_b","__read","n","r","e","ar","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","isDataSource","ArrayDataSource","isObservable","slice","_cdkVirtualForTrackBy","item","renderedStartIndex","totalSize","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","_c","destroy","find","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cdkVirtualForOf","cachedView","pop","insert","ViewContainerRef","TemplateRef","IterableDiffers","SkipSelf","cdkVirtualForTemplate","CdkScrollableModule","NgModule","declarations","ScrollingModule","imports","BidiModule","PlatformModule","DEFAULT_RESIZE_TIME","DEFAULT_SCROLL_TIME"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/platform'), require('@angular/common'), require('@angular/cdk/bidi'), require('@angular/cdk/collections')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/scrolling', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/cdk/platform', '@angular/common', '@angular/cdk/bidi', '@angular/cdk/collections'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.scrolling = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.cdk.platform, global.ng.common, global.ng.cdk.bidi, global.ng.cdk.collections));\n}(this, (function (exports, coercion, i0, rxjs, operators, i1, i2, bidi, collections) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The injection token used to specify the virtual scrolling strategy. */\n    var VIRTUAL_SCROLL_STRATEGY = new i0.InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Virtual scrolling strategy for lists with items of known fixed size. */\n    var FixedSizeVirtualScrollStrategy = /** @class */ (function () {\n        /**\n         * @param itemSize The size of the items in the virtually scrolling list.\n         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n         */\n        function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n            this._scrolledIndexChange = new rxjs.Subject();\n            /** @docs-private Implemented as part of VirtualScrollStrategy. */\n            this.scrolledIndexChange = this._scrolledIndexChange.pipe(operators.distinctUntilChanged());\n            /** The attached viewport. */\n            this._viewport = null;\n            this._itemSize = itemSize;\n            this._minBufferPx = minBufferPx;\n            this._maxBufferPx = maxBufferPx;\n        }\n        /**\n         * Attaches this scroll strategy to a viewport.\n         * @param viewport The viewport to attach this strategy to.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.attach = function (viewport) {\n            this._viewport = viewport;\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** Detaches this scroll strategy from the currently attached viewport. */\n        FixedSizeVirtualScrollStrategy.prototype.detach = function () {\n            this._scrolledIndexChange.complete();\n            this._viewport = null;\n        };\n        /**\n         * Update the item size and buffer size.\n         * @param itemSize The size of the items in the virtually scrolling list.\n         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.updateItemAndBufferSize = function (itemSize, minBufferPx, maxBufferPx) {\n            if (maxBufferPx < minBufferPx) {\n                throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n            }\n            this._itemSize = itemSize;\n            this._minBufferPx = minBufferPx;\n            this._maxBufferPx = maxBufferPx;\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onContentScrolled = function () {\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onDataLengthChanged = function () {\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onContentRendered = function () { };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };\n        /**\n         * Scroll to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {\n            if (this._viewport) {\n                this._viewport.scrollToOffset(index * this._itemSize, behavior);\n            }\n        };\n        /** Update the viewport's total content size. */\n        FixedSizeVirtualScrollStrategy.prototype._updateTotalContentSize = function () {\n            if (!this._viewport) {\n                return;\n            }\n            this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n        };\n        /** Update the viewport's rendered range. */\n        FixedSizeVirtualScrollStrategy.prototype._updateRenderedRange = function () {\n            if (!this._viewport) {\n                return;\n            }\n            var scrollOffset = this._viewport.measureScrollOffset();\n            var firstVisibleIndex = scrollOffset / this._itemSize;\n            var renderedRange = this._viewport.getRenderedRange();\n            var newRange = { start: renderedRange.start, end: renderedRange.end };\n            var viewportSize = this._viewport.getViewportSize();\n            var dataLength = this._viewport.getDataLength();\n            var startBuffer = scrollOffset - newRange.start * this._itemSize;\n            if (startBuffer < this._minBufferPx && newRange.start != 0) {\n                var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n                newRange.start = Math.max(0, newRange.start - expandStart);\n                newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n            }\n            else {\n                var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n                if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                    var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                    if (expandEnd > 0) {\n                        newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                        newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                    }\n                }\n            }\n            this._viewport.setRenderedRange(newRange);\n            this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n            this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n        };\n        return FixedSizeVirtualScrollStrategy;\n    }());\n    /**\n     * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n     * `FixedSizeVirtualScrollStrategy` from the given directive.\n     * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n     *     `FixedSizeVirtualScrollStrategy` from.\n     */\n    function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n        return fixedSizeDir._scrollStrategy;\n    }\n    /** A virtual scroll strategy that supports fixed-size items. */\n    var CdkFixedSizeVirtualScroll = /** @class */ (function () {\n        function CdkFixedSizeVirtualScroll() {\n            this._itemSize = 20;\n            this._minBufferPx = 100;\n            this._maxBufferPx = 200;\n            /** The scroll strategy used by this directive. */\n            this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"itemSize\", {\n            /** The size of the items in the list (in pixels). */\n            get: function () { return this._itemSize; },\n            set: function (value) { this._itemSize = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"minBufferPx\", {\n            /**\n             * The minimum amount of buffer rendered beyond the viewport (in pixels).\n             * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n             */\n            get: function () { return this._minBufferPx; },\n            set: function (value) { this._minBufferPx = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"maxBufferPx\", {\n            /**\n             * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n             */\n            get: function () { return this._maxBufferPx; },\n            set: function (value) { this._maxBufferPx = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        CdkFixedSizeVirtualScroll.prototype.ngOnChanges = function () {\n            this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        };\n        CdkFixedSizeVirtualScroll.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                        providers: [{\n                                provide: VIRTUAL_SCROLL_STRATEGY,\n                                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                                deps: [i0.forwardRef(function () { return CdkFixedSizeVirtualScroll; })],\n                            }],\n                    },] }\n        ];\n        CdkFixedSizeVirtualScroll.propDecorators = {\n            itemSize: [{ type: i0.Input }],\n            minBufferPx: [{ type: i0.Input }],\n            maxBufferPx: [{ type: i0.Input }]\n        };\n        return CdkFixedSizeVirtualScroll;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the scrolling events by default. */\n    var DEFAULT_SCROLL_TIME = 20;\n    /**\n     * Service contained all registered Scrollable references and emits an event when any one of the\n     * Scrollable references emit a scrolled event.\n     */\n    var ScrollDispatcher = /** @class */ (function () {\n        function ScrollDispatcher(_ngZone, _platform, \n        /** @breaking-change 11.0.0 make document required */\n        document) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n            this._scrolled = new rxjs.Subject();\n            /** Keeps track of the global `scroll` and `resize` subscriptions. */\n            this._globalSubscription = null;\n            /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n            this._scrolledCount = 0;\n            /**\n             * Map of all the scrollable references that are registered with the service and their\n             * scroll event subscriptions.\n             */\n            this.scrollContainers = new Map();\n            this._document = document;\n        }\n        /**\n         * Registers a scrollable instance with the service and listens for its scrolled events. When the\n         * scrollable is scrolled, the service emits the event to its scrolled observable.\n         * @param scrollable Scrollable instance to be registered.\n         */\n        ScrollDispatcher.prototype.register = function (scrollable) {\n            var _this = this;\n            if (!this.scrollContainers.has(scrollable)) {\n                this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                    .subscribe(function () { return _this._scrolled.next(scrollable); }));\n            }\n        };\n        /**\n         * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n         * @param scrollable Scrollable instance to be deregistered.\n         */\n        ScrollDispatcher.prototype.deregister = function (scrollable) {\n            var scrollableReference = this.scrollContainers.get(scrollable);\n            if (scrollableReference) {\n                scrollableReference.unsubscribe();\n                this.scrollContainers.delete(scrollable);\n            }\n        };\n        /**\n         * Returns an observable that emits an event whenever any of the registered Scrollable\n         * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n         * to override the default \"throttle\" time.\n         *\n         * **Note:** in order to avoid hitting change detection for every scroll event,\n         * all of the events emitted from this stream will be run outside the Angular zone.\n         * If you need to update any data bindings as a result of a scroll event, you have\n         * to run the callback using `NgZone.run`.\n         */\n        ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {\n            var _this = this;\n            if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n            if (!this._platform.isBrowser) {\n                return rxjs.of();\n            }\n            return new rxjs.Observable(function (observer) {\n                if (!_this._globalSubscription) {\n                    _this._addGlobalListener();\n                }\n                // In the case of a 0ms delay, use an observable without auditTime\n                // since it does add a perceptible delay in processing overhead.\n                var subscription = auditTimeInMs > 0 ?\n                    _this._scrolled.pipe(operators.auditTime(auditTimeInMs)).subscribe(observer) :\n                    _this._scrolled.subscribe(observer);\n                _this._scrolledCount++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._scrolledCount--;\n                    if (!_this._scrolledCount) {\n                        _this._removeGlobalListener();\n                    }\n                };\n            });\n        };\n        ScrollDispatcher.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._removeGlobalListener();\n            this.scrollContainers.forEach(function (_, container) { return _this.deregister(container); });\n            this._scrolled.complete();\n        };\n        /**\n         * Returns an observable that emits whenever any of the\n         * scrollable ancestors of an element are scrolled.\n         * @param elementRef Element whose ancestors to listen for.\n         * @param auditTimeInMs Time to throttle the scroll events.\n         */\n        ScrollDispatcher.prototype.ancestorScrolled = function (elementRef, auditTimeInMs) {\n            var ancestors = this.getAncestorScrollContainers(elementRef);\n            return this.scrolled(auditTimeInMs).pipe(operators.filter(function (target) {\n                return !target || ancestors.indexOf(target) > -1;\n            }));\n        };\n        /** Returns all registered Scrollables that contain the provided element. */\n        ScrollDispatcher.prototype.getAncestorScrollContainers = function (elementRef) {\n            var _this = this;\n            var scrollingContainers = [];\n            this.scrollContainers.forEach(function (_subscription, scrollable) {\n                if (_this._scrollableContainsElement(scrollable, elementRef)) {\n                    scrollingContainers.push(scrollable);\n                }\n            });\n            return scrollingContainers;\n        };\n        /** Access injected document if available or fallback to global document reference */\n        ScrollDispatcher.prototype._getDocument = function () {\n            return this._document || document;\n        };\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        ScrollDispatcher.prototype._getWindow = function () {\n            var doc = this._getDocument();\n            return doc.defaultView || window;\n        };\n        /** Returns true if the element is contained within the provided Scrollable. */\n        ScrollDispatcher.prototype._scrollableContainsElement = function (scrollable, elementRef) {\n            var element = elementRef.nativeElement;\n            var scrollableElement = scrollable.getElementRef().nativeElement;\n            // Traverse through the element parents until we reach null, checking if any of the elements\n            // are the scrollable's element.\n            do {\n                if (element == scrollableElement) {\n                    return true;\n                }\n            } while (element = element.parentElement);\n            return false;\n        };\n        /** Sets up the global scroll listeners. */\n        ScrollDispatcher.prototype._addGlobalListener = function () {\n            var _this = this;\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                var window = _this._getWindow();\n                return rxjs.fromEvent(window.document, 'scroll').subscribe(function () { return _this._scrolled.next(); });\n            });\n        };\n        /** Cleans up the global scroll listener. */\n        ScrollDispatcher.prototype._removeGlobalListener = function () {\n            if (this._globalSubscription) {\n                this._globalSubscription.unsubscribe();\n                this._globalSubscription = null;\n            }\n        };\n        ScrollDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollDispatcher.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: i1.Platform },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i2.DOCUMENT,] }] }\n        ]; };\n        ScrollDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\n        return ScrollDispatcher;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Sends an event when the directive's element is scrolled. Registers itself with the\n     * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n     * can be listened to through the service.\n     */\n    var CdkScrollable = /** @class */ (function () {\n        function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n            var _this = this;\n            this.elementRef = elementRef;\n            this.scrollDispatcher = scrollDispatcher;\n            this.ngZone = ngZone;\n            this.dir = dir;\n            this._destroyed = new rxjs.Subject();\n            this._elementScrolled = new rxjs.Observable(function (observer) {\n                return _this.ngZone.runOutsideAngular(function () {\n                    return rxjs.fromEvent(_this.elementRef.nativeElement, 'scroll').pipe(operators.takeUntil(_this._destroyed))\n                        .subscribe(observer);\n                });\n            });\n        }\n        CdkScrollable.prototype.ngOnInit = function () {\n            this.scrollDispatcher.register(this);\n        };\n        CdkScrollable.prototype.ngOnDestroy = function () {\n            this.scrollDispatcher.deregister(this);\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Returns observable that emits when a scroll event is fired on the host element. */\n        CdkScrollable.prototype.elementScrolled = function () {\n            return this._elementScrolled;\n        };\n        /** Gets the ElementRef for the viewport. */\n        CdkScrollable.prototype.getElementRef = function () {\n            return this.elementRef;\n        };\n        /**\n         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param options specified the offsets to scroll to.\n         */\n        CdkScrollable.prototype.scrollTo = function (options) {\n            var el = this.elementRef.nativeElement;\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            // Rewrite start & end offsets as right or left offsets.\n            if (options.left == null) {\n                options.left = isRtl ? options.end : options.start;\n            }\n            if (options.right == null) {\n                options.right = isRtl ? options.start : options.end;\n            }\n            // Rewrite the bottom offset as a top offset.\n            if (options.bottom != null) {\n                options.top =\n                    el.scrollHeight - el.clientHeight - options.bottom;\n            }\n            // Rewrite the right offset as a left offset.\n            if (isRtl && i1.getRtlScrollAxisType() != 0 /* NORMAL */) {\n                if (options.left != null) {\n                    options.right =\n                        el.scrollWidth - el.clientWidth - options.left;\n                }\n                if (i1.getRtlScrollAxisType() == 2 /* INVERTED */) {\n                    options.left = options.right;\n                }\n                else if (i1.getRtlScrollAxisType() == 1 /* NEGATED */) {\n                    options.left = options.right ? -options.right : options.right;\n                }\n            }\n            else {\n                if (options.right != null) {\n                    options.left =\n                        el.scrollWidth - el.clientWidth - options.right;\n                }\n            }\n            this._applyScrollToOptions(options);\n        };\n        CdkScrollable.prototype._applyScrollToOptions = function (options) {\n            var el = this.elementRef.nativeElement;\n            if (i1.supportsScrollBehavior()) {\n                el.scrollTo(options);\n            }\n            else {\n                if (options.top != null) {\n                    el.scrollTop = options.top;\n                }\n                if (options.left != null) {\n                    el.scrollLeft = options.left;\n                }\n            }\n        };\n        /**\n         * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n         * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n         * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param from The edge to measure from.\n         */\n        CdkScrollable.prototype.measureScrollOffset = function (from) {\n            var LEFT = 'left';\n            var RIGHT = 'right';\n            var el = this.elementRef.nativeElement;\n            if (from == 'top') {\n                return el.scrollTop;\n            }\n            if (from == 'bottom') {\n                return el.scrollHeight - el.clientHeight - el.scrollTop;\n            }\n            // Rewrite start & end as left or right offsets.\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            if (from == 'start') {\n                from = isRtl ? RIGHT : LEFT;\n            }\n            else if (from == 'end') {\n                from = isRtl ? LEFT : RIGHT;\n            }\n            if (isRtl && i1.getRtlScrollAxisType() == 2 /* INVERTED */) {\n                // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n                else {\n                    return el.scrollLeft;\n                }\n            }\n            else if (isRtl && i1.getRtlScrollAxisType() == 1 /* NEGATED */) {\n                // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft + el.scrollWidth - el.clientWidth;\n                }\n                else {\n                    return -el.scrollLeft;\n                }\n            }\n            else {\n                // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n                // (scrollWidth - clientWidth) when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft;\n                }\n                else {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n            }\n        };\n        CdkScrollable.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-scrollable], [cdkScrollable]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkScrollable.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: ScrollDispatcher },\n            { type: i0.NgZone },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return CdkScrollable;\n    }());\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the resize events by default. */\n    var DEFAULT_RESIZE_TIME = 20;\n    /**\n     * Simple utility for getting the bounds of the browser viewport.\n     * @docs-private\n     */\n    var ViewportRuler = /** @class */ (function () {\n        function ViewportRuler(_platform, ngZone, \n        /** @breaking-change 11.0.0 make document required */\n        document) {\n            var _this = this;\n            this._platform = _platform;\n            this._document = document;\n            ngZone.runOutsideAngular(function () {\n                var window = _this._getWindow();\n                _this._change = _platform.isBrowser ?\n                    rxjs.merge(rxjs.fromEvent(window, 'resize'), rxjs.fromEvent(window, 'orientationchange')) :\n                    rxjs.of();\n                // Note that we need to do the subscription inside `runOutsideAngular`\n                // since subscribing is what causes the event listener to be added.\n                _this._invalidateCache = _this.change().subscribe(function () { return _this._updateViewportSize(); });\n            });\n        }\n        ViewportRuler.prototype.ngOnDestroy = function () {\n            this._invalidateCache.unsubscribe();\n        };\n        /** Returns the viewport's width and height. */\n        ViewportRuler.prototype.getViewportSize = function () {\n            if (!this._viewportSize) {\n                this._updateViewportSize();\n            }\n            var output = { width: this._viewportSize.width, height: this._viewportSize.height };\n            // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n            if (!this._platform.isBrowser) {\n                this._viewportSize = null;\n            }\n            return output;\n        };\n        /** Gets a ClientRect for the viewport's bounds. */\n        ViewportRuler.prototype.getViewportRect = function () {\n            // Use the document element's bounding rect rather than the window scroll properties\n            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n            // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n            // can disagree when the page is pinch-zoomed (on devices that support touch).\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n            // We use the documentElement instead of the body because, by default (without a css reset)\n            // browsers typically give the document body an 8px margin, which is not included in\n            // getBoundingClientRect().\n            var scrollPosition = this.getViewportScrollPosition();\n            var _a = this.getViewportSize(), width = _a.width, height = _a.height;\n            return {\n                top: scrollPosition.top,\n                left: scrollPosition.left,\n                bottom: scrollPosition.top + height,\n                right: scrollPosition.left + width,\n                height: height,\n                width: width,\n            };\n        };\n        /** Gets the (top, left) scroll position of the viewport. */\n        ViewportRuler.prototype.getViewportScrollPosition = function () {\n            // While we can get a reference to the fake document\n            // during SSR, it doesn't have getBoundingClientRect.\n            if (!this._platform.isBrowser) {\n                return { top: 0, left: 0 };\n            }\n            // The top-left-corner of the viewport is determined by the scroll position of the document\n            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n            // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n            // `document.documentElement` works consistently, where the `top` and `left` values will\n            // equal negative the scroll position.\n            var document = this._getDocument();\n            var window = this._getWindow();\n            var documentElement = document.documentElement;\n            var documentRect = documentElement.getBoundingClientRect();\n            var top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                documentElement.scrollTop || 0;\n            var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                documentElement.scrollLeft || 0;\n            return { top: top, left: left };\n        };\n        /**\n         * Returns a stream that emits whenever the size of the viewport changes.\n         * @param throttleTime Time in milliseconds to throttle the stream.\n         */\n        ViewportRuler.prototype.change = function (throttleTime) {\n            if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }\n            return throttleTime > 0 ? this._change.pipe(operators.auditTime(throttleTime)) : this._change;\n        };\n        /** Access injected document if available or fallback to global document reference */\n        ViewportRuler.prototype._getDocument = function () {\n            return this._document || document;\n        };\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        ViewportRuler.prototype._getWindow = function () {\n            var doc = this._getDocument();\n            return doc.defaultView || window;\n        };\n        /** Updates the cached viewport size. */\n        ViewportRuler.prototype._updateViewportSize = function () {\n            var window = this._getWindow();\n            this._viewportSize = this._platform.isBrowser ?\n                { width: window.innerWidth, height: window.innerHeight } :\n                { width: 0, height: 0 };\n        };\n        ViewportRuler.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ViewportRuler.ctorParameters = function () { return [\n            { type: i1.Platform },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i2.DOCUMENT,] }] }\n        ]; };\n        ViewportRuler.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\n        return ViewportRuler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Checks if the given ranges are equal. */\n    function rangesEqual(r1, r2) {\n        return r1.start == r2.start && r1.end == r2.end;\n    }\n    /**\n     * Scheduler to be used for scroll events. Needs to fall back to\n     * something that doesn't rely on requestAnimationFrame on environments\n     * that don't support it (e.g. server-side rendering).\n     */\n    var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs.animationFrameScheduler : rxjs.asapScheduler;\n    /** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n    var CdkVirtualScrollViewport = /** @class */ (function (_super) {\n        __extends(CdkVirtualScrollViewport, _super);\n        function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n        /**\n         * @deprecated `viewportRuler` parameter to become required.\n         * @breaking-change 11.0.0\n         */\n        viewportRuler) {\n            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone, dir) || this;\n            _this.elementRef = elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._scrollStrategy = _scrollStrategy;\n            /** Emits when the viewport is detached from a CdkVirtualForOf. */\n            _this._detachedSubject = new rxjs.Subject();\n            /** Emits when the rendered range changes. */\n            _this._renderedRangeSubject = new rxjs.Subject();\n            _this._orientation = 'vertical';\n            // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n            // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n            // depending on how the strategy calculates the scrolled index, it may come at a cost to\n            // performance.\n            /** Emits when the index of the first element visible in the viewport changes. */\n            _this.scrolledIndexChange = new rxjs.Observable(function (observer) {\n                return _this._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n                    return Promise.resolve().then(function () { return _this.ngZone.run(function () { return observer.next(index); }); });\n                });\n            });\n            /** A stream that emits whenever the rendered range changes. */\n            _this.renderedRangeStream = _this._renderedRangeSubject.asObservable();\n            /**\n             * The total size of all content (in pixels), including content that is not currently rendered.\n             */\n            _this._totalContentSize = 0;\n            /** A string representing the `style.width` property value to be used for the spacer element. */\n            _this._totalContentWidth = '';\n            /** A string representing the `style.height` property value to be used for the spacer element. */\n            _this._totalContentHeight = '';\n            /** The currently rendered range of indices. */\n            _this._renderedRange = { start: 0, end: 0 };\n            /** The length of the data bound to this viewport (in number of items). */\n            _this._dataLength = 0;\n            /** The size of the viewport (in pixels). */\n            _this._viewportSize = 0;\n            /** The last rendered content offset that was set. */\n            _this._renderedContentOffset = 0;\n            /**\n             * Whether the last rendered content offset was to the end of the content (and therefore needs to\n             * be rewritten as an offset to the start of the content).\n             */\n            _this._renderedContentOffsetNeedsRewrite = false;\n            /** Whether there is a pending change detection cycle. */\n            _this._isChangeDetectionPending = false;\n            /** A list of functions to run after the next change detection cycle. */\n            _this._runAfterChangeDetection = [];\n            /** Subscription to changes in the viewport size. */\n            _this._viewportChanges = rxjs.Subscription.EMPTY;\n            if (!_scrollStrategy) {\n                throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n            }\n            // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n            if (viewportRuler) {\n                _this._viewportChanges = viewportRuler.change().subscribe(function () {\n                    _this.checkViewportSize();\n                });\n            }\n            return _this;\n        }\n        Object.defineProperty(CdkVirtualScrollViewport.prototype, \"orientation\", {\n            /** The direction the viewport scrolls. */\n            get: function () {\n                return this._orientation;\n            },\n            set: function (orientation) {\n                if (this._orientation !== orientation) {\n                    this._orientation = orientation;\n                    this._calculateSpacerSize();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkVirtualScrollViewport.prototype.ngOnInit = function () {\n            var _this = this;\n            _super.prototype.ngOnInit.call(this);\n            // It's still too early to measure the viewport at this point. Deferring with a promise allows\n            // the Viewport to be rendered with the correct size before we measure. We run this outside the\n            // zone to avoid causing more change detection cycles. We handle the change detection loop\n            // ourselves instead.\n            this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                _this._measureViewportSize();\n                _this._scrollStrategy.attach(_this);\n                _this.elementScrolled()\n                    .pipe(\n                // Start off with a fake scroll event so we properly detect our initial position.\n                operators.startWith(null), \n                // Collect multiple events into one until the next animation frame. This way if\n                // there are multiple scroll events in the same frame we only need to recheck\n                // our layout once.\n                operators.auditTime(0, SCROLL_SCHEDULER))\n                    .subscribe(function () { return _this._scrollStrategy.onContentScrolled(); });\n                _this._markChangeDetectionNeeded();\n            }); });\n        };\n        CdkVirtualScrollViewport.prototype.ngOnDestroy = function () {\n            this.detach();\n            this._scrollStrategy.detach();\n            // Complete all subjects\n            this._renderedRangeSubject.complete();\n            this._detachedSubject.complete();\n            this._viewportChanges.unsubscribe();\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        /** Attaches a `CdkVirtualForOf` to this viewport. */\n        CdkVirtualScrollViewport.prototype.attach = function (forOf) {\n            var _this = this;\n            if (this._forOf) {\n                throw Error('CdkVirtualScrollViewport is already attached.');\n            }\n            // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n            // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n            // change detection loop ourselves.\n            this.ngZone.runOutsideAngular(function () {\n                _this._forOf = forOf;\n                _this._forOf.dataStream.pipe(operators.takeUntil(_this._detachedSubject)).subscribe(function (data) {\n                    var newLength = data.length;\n                    if (newLength !== _this._dataLength) {\n                        _this._dataLength = newLength;\n                        _this._scrollStrategy.onDataLengthChanged();\n                    }\n                    _this._doChangeDetection();\n                });\n            });\n        };\n        /** Detaches the current `CdkVirtualForOf`. */\n        CdkVirtualScrollViewport.prototype.detach = function () {\n            this._forOf = null;\n            this._detachedSubject.next();\n        };\n        /** Gets the length of the data bound to this viewport (in number of items). */\n        CdkVirtualScrollViewport.prototype.getDataLength = function () {\n            return this._dataLength;\n        };\n        /** Gets the size of the viewport (in pixels). */\n        CdkVirtualScrollViewport.prototype.getViewportSize = function () {\n            return this._viewportSize;\n        };\n        // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n        // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n        // setting it to something else, but its error prone and should probably be split into\n        // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n        /** Get the current rendered range of items. */\n        CdkVirtualScrollViewport.prototype.getRenderedRange = function () {\n            return this._renderedRange;\n        };\n        /**\n         * Sets the total size of all content (in pixels), including content that is not currently\n         * rendered.\n         */\n        CdkVirtualScrollViewport.prototype.setTotalContentSize = function (size) {\n            if (this._totalContentSize !== size) {\n                this._totalContentSize = size;\n                this._calculateSpacerSize();\n                this._markChangeDetectionNeeded();\n            }\n        };\n        /** Sets the currently rendered range of indices. */\n        CdkVirtualScrollViewport.prototype.setRenderedRange = function (range) {\n            var _this = this;\n            if (!rangesEqual(this._renderedRange, range)) {\n                this._renderedRangeSubject.next(this._renderedRange = range);\n                this._markChangeDetectionNeeded(function () { return _this._scrollStrategy.onContentRendered(); });\n            }\n        };\n        /**\n         * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n         */\n        CdkVirtualScrollViewport.prototype.getOffsetToRenderedContentStart = function () {\n            return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n        };\n        /**\n         * Sets the offset from the start of the viewport to either the start or end of the rendered data\n         * (in pixels).\n         */\n        CdkVirtualScrollViewport.prototype.setRenderedContentOffset = function (offset, to) {\n            var _this = this;\n            if (to === void 0) { to = 'to-start'; }\n            // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n            // in the negative direction.\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            var isHorizontal = this.orientation == 'horizontal';\n            var axis = isHorizontal ? 'X' : 'Y';\n            var axisDirection = isHorizontal && isRtl ? -1 : 1;\n            var transform = \"translate\" + axis + \"(\" + Number(axisDirection * offset) + \"px)\";\n            this._renderedContentOffset = offset;\n            if (to === 'to-end') {\n                transform += \" translate\" + axis + \"(-100%)\";\n                // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n                // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n                // expand upward).\n                this._renderedContentOffsetNeedsRewrite = true;\n            }\n            if (this._renderedContentTransform != transform) {\n                // We know this value is safe because we parse `offset` with `Number()` before passing it\n                // into the string.\n                this._renderedContentTransform = transform;\n                this._markChangeDetectionNeeded(function () {\n                    if (_this._renderedContentOffsetNeedsRewrite) {\n                        _this._renderedContentOffset -= _this.measureRenderedContentSize();\n                        _this._renderedContentOffsetNeedsRewrite = false;\n                        _this.setRenderedContentOffset(_this._renderedContentOffset);\n                    }\n                    else {\n                        _this._scrollStrategy.onRenderedOffsetChanged();\n                    }\n                });\n            }\n        };\n        /**\n         * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n         * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n         * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n         * @param offset The offset to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        CdkVirtualScrollViewport.prototype.scrollToOffset = function (offset, behavior) {\n            if (behavior === void 0) { behavior = 'auto'; }\n            var options = { behavior: behavior };\n            if (this.orientation === 'horizontal') {\n                options.start = offset;\n            }\n            else {\n                options.top = offset;\n            }\n            this.scrollTo(options);\n        };\n        /**\n         * Scrolls to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        CdkVirtualScrollViewport.prototype.scrollToIndex = function (index, behavior) {\n            if (behavior === void 0) { behavior = 'auto'; }\n            this._scrollStrategy.scrollToIndex(index, behavior);\n        };\n        /**\n         * Gets the current scroll offset from the start of the viewport (in pixels).\n         * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n         *     in horizontal mode.\n         */\n        CdkVirtualScrollViewport.prototype.measureScrollOffset = function (from) {\n            return from ?\n                _super.prototype.measureScrollOffset.call(this, from) :\n                _super.prototype.measureScrollOffset.call(this, this.orientation === 'horizontal' ? 'start' : 'top');\n        };\n        /** Measure the combined size of all of the rendered items. */\n        CdkVirtualScrollViewport.prototype.measureRenderedContentSize = function () {\n            var contentEl = this._contentWrapper.nativeElement;\n            return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n        };\n        /**\n         * Measure the total combined size of the given range. Throws if the range includes items that are\n         * not rendered.\n         */\n        CdkVirtualScrollViewport.prototype.measureRangeSize = function (range) {\n            if (!this._forOf) {\n                return 0;\n            }\n            return this._forOf.measureRangeSize(range, this.orientation);\n        };\n        /** Update the viewport dimensions and re-render. */\n        CdkVirtualScrollViewport.prototype.checkViewportSize = function () {\n            // TODO: Cleanup later when add logic for handling content resize\n            this._measureViewportSize();\n            this._scrollStrategy.onDataLengthChanged();\n        };\n        /** Measure the viewport size. */\n        CdkVirtualScrollViewport.prototype._measureViewportSize = function () {\n            var viewportEl = this.elementRef.nativeElement;\n            this._viewportSize = this.orientation === 'horizontal' ?\n                viewportEl.clientWidth : viewportEl.clientHeight;\n        };\n        /** Queue up change detection to run. */\n        CdkVirtualScrollViewport.prototype._markChangeDetectionNeeded = function (runAfter) {\n            var _this = this;\n            if (runAfter) {\n                this._runAfterChangeDetection.push(runAfter);\n            }\n            // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n            // properties sequentially we only have to run `_doChangeDetection` once at the end.\n            if (!this._isChangeDetectionPending) {\n                this._isChangeDetectionPending = true;\n                this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                    _this._doChangeDetection();\n                }); });\n            }\n        };\n        /** Run change detection. */\n        CdkVirtualScrollViewport.prototype._doChangeDetection = function () {\n            var e_1, _a;\n            var _this = this;\n            this._isChangeDetectionPending = false;\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this.ngZone.run(function () { return _this._changeDetectorRef.markForCheck(); });\n            var runAfterChangeDetection = this._runAfterChangeDetection;\n            this._runAfterChangeDetection = [];\n            try {\n                for (var runAfterChangeDetection_1 = __values(runAfterChangeDetection), runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next(); !runAfterChangeDetection_1_1.done; runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next()) {\n                    var fn = runAfterChangeDetection_1_1.value;\n                    fn();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (runAfterChangeDetection_1_1 && !runAfterChangeDetection_1_1.done && (_a = runAfterChangeDetection_1.return)) _a.call(runAfterChangeDetection_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /** Calculates the `style.width` and `style.height` for the spacer element. */\n        CdkVirtualScrollViewport.prototype._calculateSpacerSize = function () {\n            this._totalContentHeight =\n                this.orientation === 'horizontal' ? '' : this._totalContentSize + \"px\";\n            this._totalContentWidth =\n                this.orientation === 'horizontal' ? this._totalContentSize + \"px\" : '';\n        };\n        CdkVirtualScrollViewport.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'cdk-virtual-scroll-viewport',\n                        template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                        host: {\n                            'class': 'cdk-virtual-scroll-viewport',\n                            '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                            '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                        },\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        providers: [{\n                                provide: CdkScrollable,\n                                useExisting: CdkVirtualScrollViewport,\n                            }],\n                        styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkVirtualScrollViewport.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: i0.ChangeDetectorRef },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: ScrollDispatcher },\n            { type: ViewportRuler, decorators: [{ type: i0.Optional }] }\n        ]; };\n        CdkVirtualScrollViewport.propDecorators = {\n            orientation: [{ type: i0.Input }],\n            scrolledIndexChange: [{ type: i0.Output }],\n            _contentWrapper: [{ type: i0.ViewChild, args: ['contentWrapper', { static: true },] }]\n        };\n        return CdkVirtualScrollViewport;\n    }(CdkScrollable));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Helper to extract size from a DOM Node. */\n    function getSize(orientation, node) {\n        var el = node;\n        if (!el.getBoundingClientRect) {\n            return 0;\n        }\n        var rect = el.getBoundingClientRect();\n        return orientation == 'horizontal' ? rect.width : rect.height;\n    }\n    /**\n     * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n     * container.\n     */\n    var CdkVirtualForOf = /** @class */ (function () {\n        function CdkVirtualForOf(\n        /** The view container to add items to. */\n        _viewContainerRef, \n        /** The template to use when stamping out new items. */\n        _template, \n        /** The set of available differs. */\n        _differs, \n        /** The virtual scrolling viewport that these items are being rendered in. */\n        _viewport, ngZone) {\n            var _this = this;\n            this._viewContainerRef = _viewContainerRef;\n            this._template = _template;\n            this._differs = _differs;\n            this._viewport = _viewport;\n            /** Emits when the rendered view of the data changes. */\n            this.viewChange = new rxjs.Subject();\n            /** Subject that emits when a new DataSource instance is given. */\n            this._dataSourceChanges = new rxjs.Subject();\n            /**\n             * The size of the cache used to store templates that are not being used for re-use later.\n             * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n             */\n            this.cdkVirtualForTemplateCacheSize = 20;\n            /** Emits whenever the data in the current DataSource changes. */\n            this.dataStream = this._dataSourceChanges\n                .pipe(\n            // Start off with null `DataSource`.\n            operators.startWith(null), \n            // Bundle up the previous and current data sources so we can work with both.\n            operators.pairwise(), \n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            operators.switchMap(function (_a) {\n                var _b = __read(_a, 2), prev = _b[0], cur = _b[1];\n                return _this._changeDataSource(prev, cur);\n            }), \n            // Replay the last emitted data when someone subscribes.\n            operators.shareReplay(1));\n            /** The differ used to calculate changes to the data. */\n            this._differ = null;\n            /**\n             * The template cache used to hold on ot template instancess that have been stamped out, but don't\n             * currently need to be rendered. These instances will be reused in the future rather than\n             * stamping out brand new ones.\n             */\n            this._templateCache = [];\n            /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n            this._needsUpdate = false;\n            this._destroyed = new rxjs.Subject();\n            this.dataStream.subscribe(function (data) {\n                _this._data = data;\n                _this._onRenderedDataChange();\n            });\n            this._viewport.renderedRangeStream.pipe(operators.takeUntil(this._destroyed)).subscribe(function (range) {\n                _this._renderedRange = range;\n                ngZone.run(function () { return _this.viewChange.next(_this._renderedRange); });\n                _this._onRenderedDataChange();\n            });\n            this._viewport.attach(this);\n        }\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForOf\", {\n            /** The DataSource to display. */\n            get: function () {\n                return this._cdkVirtualForOf;\n            },\n            set: function (value) {\n                this._cdkVirtualForOf = value;\n                if (collections.isDataSource(value)) {\n                    this._dataSourceChanges.next(value);\n                }\n                else {\n                    // Slice the value if its an NgIterable to ensure we're working with an array.\n                    this._dataSourceChanges.next(new collections.ArrayDataSource(rxjs.isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTrackBy\", {\n            /**\n             * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n             * the item and produces a value to be used as the item's identity when tracking changes.\n             */\n            get: function () {\n                return this._cdkVirtualForTrackBy;\n            },\n            set: function (fn) {\n                var _this = this;\n                this._needsUpdate = true;\n                this._cdkVirtualForTrackBy = fn ?\n                    function (index, item) { return fn(index + (_this._renderedRange ? _this._renderedRange.start : 0), item); } :\n                    undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTemplate\", {\n            /** The template used to stamp out new elements. */\n            set: function (value) {\n                if (value) {\n                    this._needsUpdate = true;\n                    this._template = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n         * in the specified range. Throws an error if the range includes items that are not currently\n         * rendered.\n         */\n        CdkVirtualForOf.prototype.measureRangeSize = function (range, orientation) {\n            if (range.start >= range.end) {\n                return 0;\n            }\n            if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n                throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n            }\n            // The index into the list of rendered views for the first item in the range.\n            var renderedStartIndex = range.start - this._renderedRange.start;\n            // The length of the range we're measuring.\n            var rangeLen = range.end - range.start;\n            // Loop over all root nodes for all items in the range and sum up their size.\n            var totalSize = 0;\n            var i = rangeLen;\n            while (i--) {\n                var view = this._viewContainerRef.get(i + renderedStartIndex);\n                var j = view ? view.rootNodes.length : 0;\n                while (j--) {\n                    totalSize += getSize(orientation, view.rootNodes[j]);\n                }\n            }\n            return totalSize;\n        };\n        CdkVirtualForOf.prototype.ngDoCheck = function () {\n            if (this._differ && this._needsUpdate) {\n                // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n                // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n                // changing (need to do this diff).\n                var changes = this._differ.diff(this._renderedItems);\n                if (!changes) {\n                    this._updateContext();\n                }\n                else {\n                    this._applyChanges(changes);\n                }\n                this._needsUpdate = false;\n            }\n        };\n        CdkVirtualForOf.prototype.ngOnDestroy = function () {\n            var e_1, _a;\n            this._viewport.detach();\n            this._dataSourceChanges.next();\n            this._dataSourceChanges.complete();\n            this.viewChange.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            try {\n                for (var _b = __values(this._templateCache), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var view = _c.value;\n                    view.destroy();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /** React to scroll state changes in the viewport. */\n        CdkVirtualForOf.prototype._onRenderedDataChange = function () {\n            if (!this._renderedRange) {\n                return;\n            }\n            this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n            if (!this._differ) {\n                this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n            }\n            this._needsUpdate = true;\n        };\n        /** Swap out one `DataSource` for another. */\n        CdkVirtualForOf.prototype._changeDataSource = function (oldDs, newDs) {\n            if (oldDs) {\n                oldDs.disconnect(this);\n            }\n            this._needsUpdate = true;\n            return newDs ? newDs.connect(this) : rxjs.of();\n        };\n        /** Update the `CdkVirtualForOfContext` for all views. */\n        CdkVirtualForOf.prototype._updateContext = function () {\n            var count = this._data.length;\n            var i = this._viewContainerRef.length;\n            while (i--) {\n                var view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n                view.detectChanges();\n            }\n        };\n        /** Apply changes to the DOM. */\n        CdkVirtualForOf.prototype._applyChanges = function (changes) {\n            var _this = this;\n            // Rearrange the views to put them in the right location.\n            changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n                if (record.previousIndex == null) { // Item added.\n                    var view = _this._insertViewForNewItem(currentIndex);\n                    view.context.$implicit = record.item;\n                }\n                else if (currentIndex == null) { // Item removed.\n                    _this._cacheView(_this._detachView(adjustedPreviousIndex));\n                }\n                else { // Item moved.\n                    var view = _this._viewContainerRef.get(adjustedPreviousIndex);\n                    _this._viewContainerRef.move(view, currentIndex);\n                    view.context.$implicit = record.item;\n                }\n            });\n            // Update $implicit for any items that had an identity change.\n            changes.forEachIdentityChange(function (record) {\n                var view = _this._viewContainerRef.get(record.currentIndex);\n                view.context.$implicit = record.item;\n            });\n            // Update the context variables on all items.\n            var count = this._data.length;\n            var i = this._viewContainerRef.length;\n            while (i--) {\n                var view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n            }\n        };\n        /** Cache the given detached view. */\n        CdkVirtualForOf.prototype._cacheView = function (view) {\n            if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n                this._templateCache.push(view);\n            }\n            else {\n                var index = this._viewContainerRef.indexOf(view);\n                // It's very unlikely that the index will ever be -1, but just in case,\n                // destroy the view on its own, otherwise destroy it through the\n                // container to ensure that all the references are removed.\n                if (index === -1) {\n                    view.destroy();\n                }\n                else {\n                    this._viewContainerRef.remove(index);\n                }\n            }\n        };\n        /** Inserts a view for a new item, either from the cache or by creating a new one. */\n        CdkVirtualForOf.prototype._insertViewForNewItem = function (index) {\n            return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n        };\n        /** Update the computed properties on the `CdkVirtualForOfContext`. */\n        CdkVirtualForOf.prototype._updateComputedContextProperties = function (context) {\n            context.first = context.index === 0;\n            context.last = context.index === context.count - 1;\n            context.even = context.index % 2 === 0;\n            context.odd = !context.even;\n        };\n        /** Creates a new embedded view and moves it to the given index */\n        CdkVirtualForOf.prototype._createEmbeddedViewAt = function (index) {\n            // Note that it's important that we insert the item directly at the proper index,\n            // rather than inserting it and the moving it in place, because if there's a directive\n            // on the same node that injects the `ViewContainerRef`, Angular will insert another\n            // comment node which can throw off the move when it's being repeated for all items.\n            return this._viewContainerRef.createEmbeddedView(this._template, {\n                $implicit: null,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            }, index);\n        };\n        /** Inserts a recycled view from the cache at the given index. */\n        CdkVirtualForOf.prototype._insertViewFromCache = function (index) {\n            var cachedView = this._templateCache.pop();\n            if (cachedView) {\n                this._viewContainerRef.insert(cachedView, index);\n            }\n            return cachedView || null;\n        };\n        /** Detaches the embedded view at the given index. */\n        CdkVirtualForOf.prototype._detachView = function (index) {\n            return this._viewContainerRef.detach(index);\n        };\n        CdkVirtualForOf.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkVirtualForOf.ctorParameters = function () { return [\n            { type: i0.ViewContainerRef },\n            { type: i0.TemplateRef },\n            { type: i0.IterableDiffers },\n            { type: CdkVirtualScrollViewport, decorators: [{ type: i0.SkipSelf }] },\n            { type: i0.NgZone }\n        ]; };\n        CdkVirtualForOf.propDecorators = {\n            cdkVirtualForOf: [{ type: i0.Input }],\n            cdkVirtualForTrackBy: [{ type: i0.Input }],\n            cdkVirtualForTemplate: [{ type: i0.Input }],\n            cdkVirtualForTemplateCacheSize: [{ type: i0.Input }]\n        };\n        return CdkVirtualForOf;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CdkScrollableModule = /** @class */ (function () {\n        function CdkScrollableModule() {\n        }\n        CdkScrollableModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        exports: [CdkScrollable],\n                        declarations: [CdkScrollable]\n                    },] }\n        ];\n        return CdkScrollableModule;\n    }());\n    var ScrollingModule = /** @class */ (function () {\n        function ScrollingModule() {\n        }\n        ScrollingModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [\n                            bidi.BidiModule,\n                            i1.PlatformModule,\n                            CdkScrollableModule\n                        ],\n                        exports: [\n                            bidi.BidiModule,\n                            CdkScrollableModule,\n                            CdkFixedSizeVirtualScroll,\n                            CdkVirtualForOf,\n                            CdkVirtualScrollViewport,\n                        ],\n                        declarations: [\n                            CdkFixedSizeVirtualScroll,\n                            CdkVirtualForOf,\n                            CdkVirtualScrollViewport,\n                        ],\n                    },] }\n        ];\n        return ScrollingModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkFixedSizeVirtualScroll = CdkFixedSizeVirtualScroll;\n    exports.CdkScrollable = CdkScrollable;\n    exports.CdkScrollableModule = CdkScrollableModule;\n    exports.CdkVirtualForOf = CdkVirtualForOf;\n    exports.CdkVirtualScrollViewport = CdkVirtualScrollViewport;\n    exports.DEFAULT_RESIZE_TIME = DEFAULT_RESIZE_TIME;\n    exports.DEFAULT_SCROLL_TIME = DEFAULT_SCROLL_TIME;\n    exports.FixedSizeVirtualScrollStrategy = FixedSizeVirtualScrollStrategy;\n    exports.ScrollDispatcher = ScrollDispatcher;\n    exports.ScrollingModule = ScrollingModule;\n    exports.VIRTUAL_SCROLL_STRATEGY = VIRTUAL_SCROLL_STRATEGY;\n    exports.ViewportRuler = ViewportRuler;\n    exports._fixedSizeVirtualScrollStrategyFactory = _fixedSizeVirtualScrollStrategyFactory;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-scrolling.umd.js.map\n"]}
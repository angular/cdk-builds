{"version":3,"sources":["src/cdk/cdk-scrolling.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","scrolling","coercion","core","rxjs","operators","platform","bidi","tslib","collections","this","i0","i1","tslib_1","VIRTUAL_SCROLL_STRATEGY","InjectionToken","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","Subject","scrolledIndexChange","pipe","distinctUntilChanged","_viewport","_itemSize","_minBufferPx","_maxBufferPx","prototype","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","complete","updateItemAndBufferSize","Error","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","next","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","Object","defineProperty","get","set","value","coerceNumberProperty","enumerable","configurable","ngOnChanges","decorators","type","Directive","args","selector","providers","provide","useFactory","deps","forwardRef","propDecorators","Input","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","_this","has","elementScrolled","subscribe","deregister","scrollableReference","unsubscribe","delete","scrolled","auditTimeInMs","isBrowser","Observable","observer","_addGlobalListener","subscription","auditTime","_removeGlobalListener","of","ngOnDestroy","forEach","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","filter","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","push","element","nativeElement","scrollableElement","getElementRef","parentElement","runOutsideAngular","fromEvent","window","document","Injectable","providedIn","ctorParameters","NgZone","Platform","ngInjectableDef","ɵɵdefineInjectable","ScrollDispatcher_Factory","ɵɵinject","token","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","ngZone","SCROLL_DISPATCHER_PROVIDER","Optional","SkipSelf","CdkScrollable","scrollDispatcher","dir","_destroyed","_elementScrolled","takeUntil","ngOnInit","scrollTo","options","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","getRtlScrollAxisType","RtlScrollAxisType","NORMAL","scrollWidth","clientWidth","INVERTED","NEGATED","_applyScrollToOptions","supportsScrollBehavior","scrollTop","scrollLeft","from","ElementRef","Directionality","SCROLL_SCHEDULER","requestAnimationFrame","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","_super","_changeDetectorRef","call","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_viewportSize","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","__extends","orientation","_calculateSpacerSize","_measureViewportSize","startWith","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","length","_doChangeDetection","size","range","rangesEqual","r1","r2","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","transform","Number","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","checkViewportSize","viewportEl","runAfter","e_1","_a","markForCheck","style","runAfterChangeDetection","runAfterChangeDetection_1","__values","runAfterChangeDetection_1_1","done","fn","e_1_1","error","return","Component","moduleId","id","template","host","class","[class.cdk-virtual-scroll-orientation-horizontal]","[class.cdk-virtual-scroll-orientation-vertical]","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","useExisting","styles","ChangeDetectorRef","undefined","Inject","Output","ViewChild","static","getSize","node","getBoundingClientRect","rect","width","height","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","pairwise","switchMap","_b","__read","_changeDataSource","shareReplay","_differ","_templateCache","_needsUpdate","_data","_onRenderedDataChange","_cdkVirtualForOf","ds","isDataSource","ArrayDataSource","Array","slice","_cdkVirtualForTrackBy","item","renderedStartIndex","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_applyChanges","_updateContext","_c","destroy","find","create","cdkVirtualForTrackBy","oldDs","newDs","disconnect","connect","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cdkVirtualForOf","cachedView","pop","insert","ViewContainerRef","TemplateRef","IterableDiffers","cdkVirtualForTemplate","ScrollingModule","NgModule","imports","BidiModule","PlatformModule","declarations","ScrollDispatchModule","ViewportRuler","_change","merge","_invalidateCache","change","_updateViewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentElement","documentRect","body","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","VIEWPORT_RULER_PROVIDER","DEFAULT_SCROLL_TIME","DEFAULT_RESIZE_TIME"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/platform'), require('@angular/cdk/bidi'), require('tslib'), require('@angular/cdk/collections')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/scrolling', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/cdk/platform', '@angular/cdk/bidi', 'tslib', '@angular/cdk/collections'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.scrolling = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.cdk.platform, global.ng.cdk.bidi, global.tslib, global.ng.cdk.collections));\n}(this, function (exports, coercion, i0, rxjs, operators, i1, bidi, tslib_1, collections) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The injection token used to specify the virtual scrolling strategy. */\n    var VIRTUAL_SCROLL_STRATEGY = new i0.InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Virtual scrolling strategy for lists with items of known fixed size. */\n    var FixedSizeVirtualScrollStrategy = /** @class */ (function () {\n        /**\n         * @param itemSize The size of the items in the virtually scrolling list.\n         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n         */\n        function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n            this._scrolledIndexChange = new rxjs.Subject();\n            /** @docs-private Implemented as part of VirtualScrollStrategy. */\n            this.scrolledIndexChange = this._scrolledIndexChange.pipe(operators.distinctUntilChanged());\n            /** The attached viewport. */\n            this._viewport = null;\n            this._itemSize = itemSize;\n            this._minBufferPx = minBufferPx;\n            this._maxBufferPx = maxBufferPx;\n        }\n        /**\n         * Attaches this scroll strategy to a viewport.\n         * @param viewport The viewport to attach this strategy to.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.attach = function (viewport) {\n            this._viewport = viewport;\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** Detaches this scroll strategy from the currently attached viewport. */\n        FixedSizeVirtualScrollStrategy.prototype.detach = function () {\n            this._scrolledIndexChange.complete();\n            this._viewport = null;\n        };\n        /**\n         * Update the item size and buffer size.\n         * @param itemSize The size of the items in the virtually scrolling list.\n         * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n         * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.updateItemAndBufferSize = function (itemSize, minBufferPx, maxBufferPx) {\n            if (maxBufferPx < minBufferPx) {\n                throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n            }\n            this._itemSize = itemSize;\n            this._minBufferPx = minBufferPx;\n            this._maxBufferPx = maxBufferPx;\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onContentScrolled = function () {\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onDataLengthChanged = function () {\n            this._updateTotalContentSize();\n            this._updateRenderedRange();\n        };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onContentRendered = function () { };\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        FixedSizeVirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };\n        /**\n         * Scroll to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling.\n         */\n        FixedSizeVirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {\n            if (this._viewport) {\n                this._viewport.scrollToOffset(index * this._itemSize, behavior);\n            }\n        };\n        /** Update the viewport's total content size. */\n        FixedSizeVirtualScrollStrategy.prototype._updateTotalContentSize = function () {\n            if (!this._viewport) {\n                return;\n            }\n            this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n        };\n        /** Update the viewport's rendered range. */\n        FixedSizeVirtualScrollStrategy.prototype._updateRenderedRange = function () {\n            if (!this._viewport) {\n                return;\n            }\n            var scrollOffset = this._viewport.measureScrollOffset();\n            var firstVisibleIndex = scrollOffset / this._itemSize;\n            var renderedRange = this._viewport.getRenderedRange();\n            var newRange = { start: renderedRange.start, end: renderedRange.end };\n            var viewportSize = this._viewport.getViewportSize();\n            var dataLength = this._viewport.getDataLength();\n            var startBuffer = scrollOffset - newRange.start * this._itemSize;\n            if (startBuffer < this._minBufferPx && newRange.start != 0) {\n                var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n                newRange.start = Math.max(0, newRange.start - expandStart);\n                newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n            }\n            else {\n                var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n                if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                    var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                    if (expandEnd > 0) {\n                        newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                        newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                    }\n                }\n            }\n            this._viewport.setRenderedRange(newRange);\n            this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n            this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n        };\n        return FixedSizeVirtualScrollStrategy;\n    }());\n    /**\n     * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n     * `FixedSizeVirtualScrollStrategy` from the given directive.\n     * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n     *     `FixedSizeVirtualScrollStrategy` from.\n     */\n    function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n        return fixedSizeDir._scrollStrategy;\n    }\n    /** A virtual scroll strategy that supports fixed-size items. */\n    var CdkFixedSizeVirtualScroll = /** @class */ (function () {\n        function CdkFixedSizeVirtualScroll() {\n            this._itemSize = 20;\n            this._minBufferPx = 100;\n            this._maxBufferPx = 200;\n            /** The scroll strategy used by this directive. */\n            this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"itemSize\", {\n            /** The size of the items in the list (in pixels). */\n            get: function () { return this._itemSize; },\n            set: function (value) { this._itemSize = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"minBufferPx\", {\n            /**\n             * The minimum amount of buffer rendered beyond the viewport (in pixels).\n             * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n             */\n            get: function () { return this._minBufferPx; },\n            set: function (value) { this._minBufferPx = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkFixedSizeVirtualScroll.prototype, \"maxBufferPx\", {\n            /**\n             * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n             */\n            get: function () { return this._maxBufferPx; },\n            set: function (value) { this._maxBufferPx = coercion.coerceNumberProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        CdkFixedSizeVirtualScroll.prototype.ngOnChanges = function () {\n            this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        };\n        CdkFixedSizeVirtualScroll.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                        providers: [{\n                                provide: VIRTUAL_SCROLL_STRATEGY,\n                                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                                deps: [i0.forwardRef(function () { return CdkFixedSizeVirtualScroll; })],\n                            }],\n                    },] }\n        ];\n        CdkFixedSizeVirtualScroll.propDecorators = {\n            itemSize: [{ type: i0.Input }],\n            minBufferPx: [{ type: i0.Input }],\n            maxBufferPx: [{ type: i0.Input }]\n        };\n        return CdkFixedSizeVirtualScroll;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the scrolling events by default. */\n    var DEFAULT_SCROLL_TIME = 20;\n    /**\n     * Service contained all registered Scrollable references and emits an event when any one of the\n     * Scrollable references emit a scrolled event.\n     */\n    var ScrollDispatcher = /** @class */ (function () {\n        function ScrollDispatcher(_ngZone, _platform) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n            this._scrolled = new rxjs.Subject();\n            /** Keeps track of the global `scroll` and `resize` subscriptions. */\n            this._globalSubscription = null;\n            /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n            this._scrolledCount = 0;\n            /**\n             * Map of all the scrollable references that are registered with the service and their\n             * scroll event subscriptions.\n             */\n            this.scrollContainers = new Map();\n        }\n        /**\n         * Registers a scrollable instance with the service and listens for its scrolled events. When the\n         * scrollable is scrolled, the service emits the event to its scrolled observable.\n         * @param scrollable Scrollable instance to be registered.\n         */\n        ScrollDispatcher.prototype.register = function (scrollable) {\n            var _this = this;\n            if (!this.scrollContainers.has(scrollable)) {\n                this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                    .subscribe(function () { return _this._scrolled.next(scrollable); }));\n            }\n        };\n        /**\n         * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n         * @param scrollable Scrollable instance to be deregistered.\n         */\n        ScrollDispatcher.prototype.deregister = function (scrollable) {\n            var scrollableReference = this.scrollContainers.get(scrollable);\n            if (scrollableReference) {\n                scrollableReference.unsubscribe();\n                this.scrollContainers.delete(scrollable);\n            }\n        };\n        /**\n         * Returns an observable that emits an event whenever any of the registered Scrollable\n         * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n         * to override the default \"throttle\" time.\n         *\n         * **Note:** in order to avoid hitting change detection for every scroll event,\n         * all of the events emitted from this stream will be run outside the Angular zone.\n         * If you need to update any data bindings as a result of a scroll event, you have\n         * to run the callback using `NgZone.run`.\n         */\n        ScrollDispatcher.prototype.scrolled = function (auditTimeInMs) {\n            var _this = this;\n            if (auditTimeInMs === void 0) { auditTimeInMs = DEFAULT_SCROLL_TIME; }\n            if (!this._platform.isBrowser) {\n                return rxjs.of();\n            }\n            return new rxjs.Observable(function (observer) {\n                if (!_this._globalSubscription) {\n                    _this._addGlobalListener();\n                }\n                // In the case of a 0ms delay, use an observable without auditTime\n                // since it does add a perceptible delay in processing overhead.\n                var subscription = auditTimeInMs > 0 ?\n                    _this._scrolled.pipe(operators.auditTime(auditTimeInMs)).subscribe(observer) :\n                    _this._scrolled.subscribe(observer);\n                _this._scrolledCount++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._scrolledCount--;\n                    if (!_this._scrolledCount) {\n                        _this._removeGlobalListener();\n                    }\n                };\n            });\n        };\n        ScrollDispatcher.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._removeGlobalListener();\n            this.scrollContainers.forEach(function (_, container) { return _this.deregister(container); });\n            this._scrolled.complete();\n        };\n        /**\n         * Returns an observable that emits whenever any of the\n         * scrollable ancestors of an element are scrolled.\n         * @param elementRef Element whose ancestors to listen for.\n         * @param auditTimeInMs Time to throttle the scroll events.\n         */\n        ScrollDispatcher.prototype.ancestorScrolled = function (elementRef, auditTimeInMs) {\n            var ancestors = this.getAncestorScrollContainers(elementRef);\n            return this.scrolled(auditTimeInMs).pipe(operators.filter(function (target) {\n                return !target || ancestors.indexOf(target) > -1;\n            }));\n        };\n        /** Returns all registered Scrollables that contain the provided element. */\n        ScrollDispatcher.prototype.getAncestorScrollContainers = function (elementRef) {\n            var _this = this;\n            var scrollingContainers = [];\n            this.scrollContainers.forEach(function (_subscription, scrollable) {\n                if (_this._scrollableContainsElement(scrollable, elementRef)) {\n                    scrollingContainers.push(scrollable);\n                }\n            });\n            return scrollingContainers;\n        };\n        /** Returns true if the element is contained within the provided Scrollable. */\n        ScrollDispatcher.prototype._scrollableContainsElement = function (scrollable, elementRef) {\n            var element = elementRef.nativeElement;\n            var scrollableElement = scrollable.getElementRef().nativeElement;\n            // Traverse through the element parents until we reach null, checking if any of the elements\n            // are the scrollable's element.\n            do {\n                if (element == scrollableElement) {\n                    return true;\n                }\n            } while (element = element.parentElement);\n            return false;\n        };\n        /** Sets up the global scroll listeners. */\n        ScrollDispatcher.prototype._addGlobalListener = function () {\n            var _this = this;\n            this._globalSubscription = this._ngZone.runOutsideAngular(function () {\n                return rxjs.fromEvent(window.document, 'scroll').subscribe(function () { return _this._scrolled.next(); });\n            });\n        };\n        /** Cleans up the global scroll listener. */\n        ScrollDispatcher.prototype._removeGlobalListener = function () {\n            if (this._globalSubscription) {\n                this._globalSubscription.unsubscribe();\n                this._globalSubscription = null;\n            }\n        };\n        ScrollDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollDispatcher.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: i1.Platform }\n        ]; };\n        ScrollDispatcher.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform)); }, token: ScrollDispatcher, providedIn: \"root\" });\n        return ScrollDispatcher;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n        return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var SCROLL_DISPATCHER_PROVIDER = {\n        // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n        provide: ScrollDispatcher,\n        deps: [[new i0.Optional(), new i0.SkipSelf(), ScrollDispatcher], i0.NgZone, i1.Platform],\n        useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Sends an event when the directive's element is scrolled. Registers itself with the\n     * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n     * can be listened to through the service.\n     */\n    var CdkScrollable = /** @class */ (function () {\n        function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n            var _this = this;\n            this.elementRef = elementRef;\n            this.scrollDispatcher = scrollDispatcher;\n            this.ngZone = ngZone;\n            this.dir = dir;\n            this._destroyed = new rxjs.Subject();\n            this._elementScrolled = new rxjs.Observable(function (observer) {\n                return _this.ngZone.runOutsideAngular(function () {\n                    return rxjs.fromEvent(_this.elementRef.nativeElement, 'scroll').pipe(operators.takeUntil(_this._destroyed))\n                        .subscribe(observer);\n                });\n            });\n        }\n        CdkScrollable.prototype.ngOnInit = function () {\n            this.scrollDispatcher.register(this);\n        };\n        CdkScrollable.prototype.ngOnDestroy = function () {\n            this.scrollDispatcher.deregister(this);\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /** Returns observable that emits when a scroll event is fired on the host element. */\n        CdkScrollable.prototype.elementScrolled = function () {\n            return this._elementScrolled;\n        };\n        /** Gets the ElementRef for the viewport. */\n        CdkScrollable.prototype.getElementRef = function () {\n            return this.elementRef;\n        };\n        /**\n         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param options specified the offsets to scroll to.\n         */\n        CdkScrollable.prototype.scrollTo = function (options) {\n            var el = this.elementRef.nativeElement;\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            // Rewrite start & end offsets as right or left offsets.\n            options.left = options.left == null ? (isRtl ? options.end : options.start) : options.left;\n            options.right = options.right == null ? (isRtl ? options.start : options.end) : options.right;\n            // Rewrite the bottom offset as a top offset.\n            if (options.bottom != null) {\n                options.top =\n                    el.scrollHeight - el.clientHeight - options.bottom;\n            }\n            // Rewrite the right offset as a left offset.\n            if (isRtl && i1.getRtlScrollAxisType() != i1.RtlScrollAxisType.NORMAL) {\n                if (options.left != null) {\n                    options.right =\n                        el.scrollWidth - el.clientWidth - options.left;\n                }\n                if (i1.getRtlScrollAxisType() == i1.RtlScrollAxisType.INVERTED) {\n                    options.left = options.right;\n                }\n                else if (i1.getRtlScrollAxisType() == i1.RtlScrollAxisType.NEGATED) {\n                    options.left = options.right ? -options.right : options.right;\n                }\n            }\n            else {\n                if (options.right != null) {\n                    options.left =\n                        el.scrollWidth - el.clientWidth - options.right;\n                }\n            }\n            this._applyScrollToOptions(options);\n        };\n        CdkScrollable.prototype._applyScrollToOptions = function (options) {\n            var el = this.elementRef.nativeElement;\n            if (i1.supportsScrollBehavior()) {\n                el.scrollTo(options);\n            }\n            else {\n                if (options.top != null) {\n                    el.scrollTop = options.top;\n                }\n                if (options.left != null) {\n                    el.scrollLeft = options.left;\n                }\n            }\n        };\n        /**\n         * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n         * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n         * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param from The edge to measure from.\n         */\n        CdkScrollable.prototype.measureScrollOffset = function (from) {\n            var LEFT = 'left';\n            var RIGHT = 'right';\n            var el = this.elementRef.nativeElement;\n            if (from == 'top') {\n                return el.scrollTop;\n            }\n            if (from == 'bottom') {\n                return el.scrollHeight - el.clientHeight - el.scrollTop;\n            }\n            // Rewrite start & end as left or right offsets.\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            if (from == 'start') {\n                from = isRtl ? RIGHT : LEFT;\n            }\n            else if (from == 'end') {\n                from = isRtl ? LEFT : RIGHT;\n            }\n            if (isRtl && i1.getRtlScrollAxisType() == i1.RtlScrollAxisType.INVERTED) {\n                // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n                else {\n                    return el.scrollLeft;\n                }\n            }\n            else if (isRtl && i1.getRtlScrollAxisType() == i1.RtlScrollAxisType.NEGATED) {\n                // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft + el.scrollWidth - el.clientWidth;\n                }\n                else {\n                    return -el.scrollLeft;\n                }\n            }\n            else {\n                // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n                // (scrollWidth - clientWidth) when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft;\n                }\n                else {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n            }\n        };\n        CdkScrollable.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-scrollable], [cdkScrollable]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkScrollable.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: ScrollDispatcher },\n            { type: i0.NgZone },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return CdkScrollable;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Checks if the given ranges are equal. */\n    function rangesEqual(r1, r2) {\n        return r1.start == r2.start && r1.end == r2.end;\n    }\n    /**\n     * Scheduler to be used for scroll events. Needs to fall back to\n     * something that doesn't rely on requestAnimationFrame on environments\n     * that don't support it (e.g. server-side rendering).\n     */\n    var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? rxjs.animationFrameScheduler : rxjs.asapScheduler;\n    /** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n    var CdkVirtualScrollViewport = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkVirtualScrollViewport, _super);\n        function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher) {\n            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone, dir) || this;\n            _this.elementRef = elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._scrollStrategy = _scrollStrategy;\n            /** Emits when the viewport is detached from a CdkVirtualForOf. */\n            _this._detachedSubject = new rxjs.Subject();\n            /** Emits when the rendered range changes. */\n            _this._renderedRangeSubject = new rxjs.Subject();\n            _this._orientation = 'vertical';\n            // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n            // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n            // depending on how the strategy calculates the scrolled index, it may come at a cost to\n            // performance.\n            /** Emits when the index of the first element visible in the viewport changes. */\n            _this.scrolledIndexChange = new rxjs.Observable(function (observer) {\n                return _this._scrollStrategy.scrolledIndexChange.subscribe(function (index) {\n                    return Promise.resolve().then(function () { return _this.ngZone.run(function () { return observer.next(index); }); });\n                });\n            });\n            /** A stream that emits whenever the rendered range changes. */\n            _this.renderedRangeStream = _this._renderedRangeSubject.asObservable();\n            /**\n             * The total size of all content (in pixels), including content that is not currently rendered.\n             */\n            _this._totalContentSize = 0;\n            /** A string representing the `style.width` property value to be used for the spacer element. */\n            _this._totalContentWidth = '';\n            /** A string representing the `style.height` property value to be used for the spacer element. */\n            _this._totalContentHeight = '';\n            /** The currently rendered range of indices. */\n            _this._renderedRange = { start: 0, end: 0 };\n            /** The length of the data bound to this viewport (in number of items). */\n            _this._dataLength = 0;\n            /** The size of the viewport (in pixels). */\n            _this._viewportSize = 0;\n            /** The last rendered content offset that was set. */\n            _this._renderedContentOffset = 0;\n            /**\n             * Whether the last rendered content offset was to the end of the content (and therefore needs to\n             * be rewritten as an offset to the start of the content).\n             */\n            _this._renderedContentOffsetNeedsRewrite = false;\n            /** Whether there is a pending change detection cycle. */\n            _this._isChangeDetectionPending = false;\n            /** A list of functions to run after the next change detection cycle. */\n            _this._runAfterChangeDetection = [];\n            if (!_scrollStrategy) {\n                throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n            }\n            return _this;\n        }\n        Object.defineProperty(CdkVirtualScrollViewport.prototype, \"orientation\", {\n            /** The direction the viewport scrolls. */\n            get: function () {\n                return this._orientation;\n            },\n            set: function (orientation) {\n                if (this._orientation !== orientation) {\n                    this._orientation = orientation;\n                    this._calculateSpacerSize();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkVirtualScrollViewport.prototype.ngOnInit = function () {\n            var _this = this;\n            _super.prototype.ngOnInit.call(this);\n            // It's still too early to measure the viewport at this point. Deferring with a promise allows\n            // the Viewport to be rendered with the correct size before we measure. We run this outside the\n            // zone to avoid causing more change detection cycles. We handle the change detection loop\n            // ourselves instead.\n            this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                _this._measureViewportSize();\n                _this._scrollStrategy.attach(_this);\n                _this.elementScrolled()\n                    .pipe(\n                // Start off with a fake scroll event so we properly detect our initial position.\n                operators.startWith(null), \n                // Collect multiple events into one until the next animation frame. This way if\n                // there are multiple scroll events in the same frame we only need to recheck\n                // our layout once.\n                operators.auditTime(0, SCROLL_SCHEDULER))\n                    .subscribe(function () { return _this._scrollStrategy.onContentScrolled(); });\n                _this._markChangeDetectionNeeded();\n            }); });\n        };\n        CdkVirtualScrollViewport.prototype.ngOnDestroy = function () {\n            this.detach();\n            this._scrollStrategy.detach();\n            // Complete all subjects\n            this._renderedRangeSubject.complete();\n            this._detachedSubject.complete();\n            _super.prototype.ngOnDestroy.call(this);\n        };\n        /** Attaches a `CdkVirtualForOf` to this viewport. */\n        CdkVirtualScrollViewport.prototype.attach = function (forOf) {\n            var _this = this;\n            if (this._forOf) {\n                throw Error('CdkVirtualScrollViewport is already attached.');\n            }\n            // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n            // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n            // change detection loop ourselves.\n            this.ngZone.runOutsideAngular(function () {\n                _this._forOf = forOf;\n                _this._forOf.dataStream.pipe(operators.takeUntil(_this._detachedSubject)).subscribe(function (data) {\n                    var newLength = data.length;\n                    if (newLength !== _this._dataLength) {\n                        _this._dataLength = newLength;\n                        _this._scrollStrategy.onDataLengthChanged();\n                    }\n                    _this._doChangeDetection();\n                });\n            });\n        };\n        /** Detaches the current `CdkVirtualForOf`. */\n        CdkVirtualScrollViewport.prototype.detach = function () {\n            this._forOf = null;\n            this._detachedSubject.next();\n        };\n        /** Gets the length of the data bound to this viewport (in number of items). */\n        CdkVirtualScrollViewport.prototype.getDataLength = function () {\n            return this._dataLength;\n        };\n        /** Gets the size of the viewport (in pixels). */\n        CdkVirtualScrollViewport.prototype.getViewportSize = function () {\n            return this._viewportSize;\n        };\n        // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n        // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n        // setting it to something else, but its error prone and should probably be split into\n        // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n        /** Get the current rendered range of items. */\n        CdkVirtualScrollViewport.prototype.getRenderedRange = function () {\n            return this._renderedRange;\n        };\n        /**\n         * Sets the total size of all content (in pixels), including content that is not currently\n         * rendered.\n         */\n        CdkVirtualScrollViewport.prototype.setTotalContentSize = function (size) {\n            if (this._totalContentSize !== size) {\n                this._totalContentSize = size;\n                this._calculateSpacerSize();\n                this._markChangeDetectionNeeded();\n            }\n        };\n        /** Sets the currently rendered range of indices. */\n        CdkVirtualScrollViewport.prototype.setRenderedRange = function (range) {\n            var _this = this;\n            if (!rangesEqual(this._renderedRange, range)) {\n                this._renderedRangeSubject.next(this._renderedRange = range);\n                this._markChangeDetectionNeeded(function () { return _this._scrollStrategy.onContentRendered(); });\n            }\n        };\n        /**\n         * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n         */\n        CdkVirtualScrollViewport.prototype.getOffsetToRenderedContentStart = function () {\n            return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n        };\n        /**\n         * Sets the offset from the start of the viewport to either the start or end of the rendered data\n         * (in pixels).\n         */\n        CdkVirtualScrollViewport.prototype.setRenderedContentOffset = function (offset, to) {\n            var _this = this;\n            if (to === void 0) { to = 'to-start'; }\n            // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n            // in the negative direction.\n            var isRtl = this.dir && this.dir.value == 'rtl';\n            var isHorizontal = this.orientation == 'horizontal';\n            var axis = isHorizontal ? 'X' : 'Y';\n            var axisDirection = isHorizontal && isRtl ? -1 : 1;\n            var transform = \"translate\" + axis + \"(\" + Number(axisDirection * offset) + \"px)\";\n            this._renderedContentOffset = offset;\n            if (to === 'to-end') {\n                transform += \" translate\" + axis + \"(-100%)\";\n                // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n                // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n                // expand upward).\n                this._renderedContentOffsetNeedsRewrite = true;\n            }\n            if (this._renderedContentTransform != transform) {\n                // We know this value is safe because we parse `offset` with `Number()` before passing it\n                // into the string.\n                this._renderedContentTransform = transform;\n                this._markChangeDetectionNeeded(function () {\n                    if (_this._renderedContentOffsetNeedsRewrite) {\n                        _this._renderedContentOffset -= _this.measureRenderedContentSize();\n                        _this._renderedContentOffsetNeedsRewrite = false;\n                        _this.setRenderedContentOffset(_this._renderedContentOffset);\n                    }\n                    else {\n                        _this._scrollStrategy.onRenderedOffsetChanged();\n                    }\n                });\n            }\n        };\n        /**\n         * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n         * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n         * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n         * @param offset The offset to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        CdkVirtualScrollViewport.prototype.scrollToOffset = function (offset, behavior) {\n            if (behavior === void 0) { behavior = 'auto'; }\n            var options = { behavior: behavior };\n            if (this.orientation === 'horizontal') {\n                options.start = offset;\n            }\n            else {\n                options.top = offset;\n            }\n            this.scrollTo(options);\n        };\n        /**\n         * Scrolls to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        CdkVirtualScrollViewport.prototype.scrollToIndex = function (index, behavior) {\n            if (behavior === void 0) { behavior = 'auto'; }\n            this._scrollStrategy.scrollToIndex(index, behavior);\n        };\n        /**\n         * Gets the current scroll offset from the start of the viewport (in pixels).\n         * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n         *     in horizontal mode.\n         */\n        CdkVirtualScrollViewport.prototype.measureScrollOffset = function (from) {\n            return _super.prototype.measureScrollOffset.call(this, from ? from : this.orientation === 'horizontal' ? 'start' : 'top');\n        };\n        /** Measure the combined size of all of the rendered items. */\n        CdkVirtualScrollViewport.prototype.measureRenderedContentSize = function () {\n            var contentEl = this._contentWrapper.nativeElement;\n            return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n        };\n        /**\n         * Measure the total combined size of the given range. Throws if the range includes items that are\n         * not rendered.\n         */\n        CdkVirtualScrollViewport.prototype.measureRangeSize = function (range) {\n            if (!this._forOf) {\n                return 0;\n            }\n            return this._forOf.measureRangeSize(range, this.orientation);\n        };\n        /** Update the viewport dimensions and re-render. */\n        CdkVirtualScrollViewport.prototype.checkViewportSize = function () {\n            // TODO: Cleanup later when add logic for handling content resize\n            this._measureViewportSize();\n            this._scrollStrategy.onDataLengthChanged();\n        };\n        /** Measure the viewport size. */\n        CdkVirtualScrollViewport.prototype._measureViewportSize = function () {\n            var viewportEl = this.elementRef.nativeElement;\n            this._viewportSize = this.orientation === 'horizontal' ?\n                viewportEl.clientWidth : viewportEl.clientHeight;\n        };\n        /** Queue up change detection to run. */\n        CdkVirtualScrollViewport.prototype._markChangeDetectionNeeded = function (runAfter) {\n            var _this = this;\n            if (runAfter) {\n                this._runAfterChangeDetection.push(runAfter);\n            }\n            // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n            // properties sequentially we only have to run `_doChangeDetection` once at the end.\n            if (!this._isChangeDetectionPending) {\n                this._isChangeDetectionPending = true;\n                this.ngZone.runOutsideAngular(function () { return Promise.resolve().then(function () {\n                    _this._doChangeDetection();\n                }); });\n            }\n        };\n        /** Run change detection. */\n        CdkVirtualScrollViewport.prototype._doChangeDetection = function () {\n            var e_1, _a;\n            var _this = this;\n            this._isChangeDetectionPending = false;\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this.ngZone.run(function () { return _this._changeDetectorRef.markForCheck(); });\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            var runAfterChangeDetection = this._runAfterChangeDetection;\n            this._runAfterChangeDetection = [];\n            try {\n                for (var runAfterChangeDetection_1 = tslib_1.__values(runAfterChangeDetection), runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next(); !runAfterChangeDetection_1_1.done; runAfterChangeDetection_1_1 = runAfterChangeDetection_1.next()) {\n                    var fn = runAfterChangeDetection_1_1.value;\n                    fn();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (runAfterChangeDetection_1_1 && !runAfterChangeDetection_1_1.done && (_a = runAfterChangeDetection_1.return)) _a.call(runAfterChangeDetection_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /** Calculates the `style.width` and `style.height` for the spacer element. */\n        CdkVirtualScrollViewport.prototype._calculateSpacerSize = function () {\n            this._totalContentHeight =\n                this.orientation === 'horizontal' ? '' : this._totalContentSize + \"px\";\n            this._totalContentWidth =\n                this.orientation === 'horizontal' ? this._totalContentSize + \"px\" : '';\n        };\n        CdkVirtualScrollViewport.decorators = [\n            { type: i0.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'cdk-virtual-scroll-viewport',\n                        template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                        host: {\n                            'class': 'cdk-virtual-scroll-viewport',\n                            '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                            '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                        },\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        providers: [{\n                                provide: CdkScrollable,\n                                useExisting: CdkVirtualScrollViewport,\n                            }],\n                        styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}/*# sourceMappingURL=virtual-scroll-viewport.css.map */\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkVirtualScrollViewport.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: i0.ChangeDetectorRef },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: ScrollDispatcher }\n        ]; };\n        CdkVirtualScrollViewport.propDecorators = {\n            orientation: [{ type: i0.Input }],\n            scrolledIndexChange: [{ type: i0.Output }],\n            _contentWrapper: [{ type: i0.ViewChild, args: ['contentWrapper', { static: true },] }]\n        };\n        return CdkVirtualScrollViewport;\n    }(CdkScrollable));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Helper to extract size from a DOM Node. */\n    function getSize(orientation, node) {\n        var el = node;\n        if (!el.getBoundingClientRect) {\n            return 0;\n        }\n        var rect = el.getBoundingClientRect();\n        return orientation == 'horizontal' ? rect.width : rect.height;\n    }\n    /**\n     * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n     * container.\n     */\n    var CdkVirtualForOf = /** @class */ (function () {\n        function CdkVirtualForOf(\n        /** The view container to add items to. */\n        _viewContainerRef, \n        /** The template to use when stamping out new items. */\n        _template, \n        /** The set of available differs. */\n        _differs, \n        /** The virtual scrolling viewport that these items are being rendered in. */\n        _viewport, ngZone) {\n            var _this = this;\n            this._viewContainerRef = _viewContainerRef;\n            this._template = _template;\n            this._differs = _differs;\n            this._viewport = _viewport;\n            /** Emits when the rendered view of the data changes. */\n            this.viewChange = new rxjs.Subject();\n            /** Subject that emits when a new DataSource instance is given. */\n            this._dataSourceChanges = new rxjs.Subject();\n            /**\n             * The size of the cache used to store templates that are not being used for re-use later.\n             * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n             */\n            this.cdkVirtualForTemplateCacheSize = 20;\n            /** Emits whenever the data in the current DataSource changes. */\n            this.dataStream = this._dataSourceChanges\n                .pipe(\n            // Start off with null `DataSource`.\n            operators.startWith(null), \n            // Bundle up the previous and current data sources so we can work with both.\n            operators.pairwise(), \n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            operators.switchMap(function (_a) {\n                var _b = tslib_1.__read(_a, 2), prev = _b[0], cur = _b[1];\n                return _this._changeDataSource(prev, cur);\n            }), \n            // Replay the last emitted data when someone subscribes.\n            operators.shareReplay(1));\n            /** The differ used to calculate changes to the data. */\n            this._differ = null;\n            /**\n             * The template cache used to hold on ot template instancess that have been stamped out, but don't\n             * currently need to be rendered. These instances will be reused in the future rather than\n             * stamping out brand new ones.\n             */\n            this._templateCache = [];\n            /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n            this._needsUpdate = false;\n            this._destroyed = new rxjs.Subject();\n            this.dataStream.subscribe(function (data) {\n                _this._data = data;\n                _this._onRenderedDataChange();\n            });\n            this._viewport.renderedRangeStream.pipe(operators.takeUntil(this._destroyed)).subscribe(function (range) {\n                _this._renderedRange = range;\n                ngZone.run(function () { return _this.viewChange.next(_this._renderedRange); });\n                _this._onRenderedDataChange();\n            });\n            this._viewport.attach(this);\n        }\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForOf\", {\n            /** The DataSource to display. */\n            get: function () {\n                return this._cdkVirtualForOf;\n            },\n            set: function (value) {\n                this._cdkVirtualForOf = value;\n                var ds = collections.isDataSource(value) ? value :\n                    // Slice the value if its an NgIterable to ensure we're working with an array.\n                    new collections.ArrayDataSource(value instanceof rxjs.Observable ? value : Array.prototype.slice.call(value || []));\n                this._dataSourceChanges.next(ds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTrackBy\", {\n            /**\n             * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n             * the item and produces a value to be used as the item's identity when tracking changes.\n             */\n            get: function () {\n                return this._cdkVirtualForTrackBy;\n            },\n            set: function (fn) {\n                var _this = this;\n                this._needsUpdate = true;\n                this._cdkVirtualForTrackBy = fn ?\n                    function (index, item) { return fn(index + (_this._renderedRange ? _this._renderedRange.start : 0), item); } :\n                    undefined;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkVirtualForOf.prototype, \"cdkVirtualForTemplate\", {\n            /** The template used to stamp out new elements. */\n            set: function (value) {\n                if (value) {\n                    this._needsUpdate = true;\n                    this._template = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n         * in the specified range. Throws an error if the range includes items that are not currently\n         * rendered.\n         */\n        CdkVirtualForOf.prototype.measureRangeSize = function (range, orientation) {\n            if (range.start >= range.end) {\n                return 0;\n            }\n            if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n                throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n            }\n            // The index into the list of rendered views for the first item in the range.\n            var renderedStartIndex = range.start - this._renderedRange.start;\n            // The length of the range we're measuring.\n            var rangeLen = range.end - range.start;\n            // Loop over all root nodes for all items in the range and sum up their size.\n            var totalSize = 0;\n            var i = rangeLen;\n            while (i--) {\n                var view = this._viewContainerRef.get(i + renderedStartIndex);\n                var j = view ? view.rootNodes.length : 0;\n                while (j--) {\n                    totalSize += getSize(orientation, view.rootNodes[j]);\n                }\n            }\n            return totalSize;\n        };\n        CdkVirtualForOf.prototype.ngDoCheck = function () {\n            if (this._differ && this._needsUpdate) {\n                // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n                // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n                // changing (need to do this diff).\n                var changes = this._differ.diff(this._renderedItems);\n                if (!changes) {\n                    this._updateContext();\n                }\n                else {\n                    this._applyChanges(changes);\n                }\n                this._needsUpdate = false;\n            }\n        };\n        CdkVirtualForOf.prototype.ngOnDestroy = function () {\n            var e_1, _a;\n            this._viewport.detach();\n            this._dataSourceChanges.next();\n            this._dataSourceChanges.complete();\n            this.viewChange.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            try {\n                for (var _b = tslib_1.__values(this._templateCache), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var view = _c.value;\n                    view.destroy();\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /** React to scroll state changes in the viewport. */\n        CdkVirtualForOf.prototype._onRenderedDataChange = function () {\n            if (!this._renderedRange) {\n                return;\n            }\n            this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n            if (!this._differ) {\n                this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n            }\n            this._needsUpdate = true;\n        };\n        /** Swap out one `DataSource` for another. */\n        CdkVirtualForOf.prototype._changeDataSource = function (oldDs, newDs) {\n            if (oldDs) {\n                oldDs.disconnect(this);\n            }\n            this._needsUpdate = true;\n            return newDs ? newDs.connect(this) : rxjs.of();\n        };\n        /** Update the `CdkVirtualForOfContext` for all views. */\n        CdkVirtualForOf.prototype._updateContext = function () {\n            var count = this._data.length;\n            var i = this._viewContainerRef.length;\n            while (i--) {\n                var view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n                view.detectChanges();\n            }\n        };\n        /** Apply changes to the DOM. */\n        CdkVirtualForOf.prototype._applyChanges = function (changes) {\n            var _this = this;\n            // Rearrange the views to put them in the right location.\n            changes.forEachOperation(function (record, adjustedPreviousIndex, currentIndex) {\n                if (record.previousIndex == null) { // Item added.\n                    var view = _this._insertViewForNewItem(currentIndex);\n                    view.context.$implicit = record.item;\n                }\n                else if (currentIndex == null) { // Item removed.\n                    _this._cacheView(_this._detachView(adjustedPreviousIndex));\n                }\n                else { // Item moved.\n                    var view = _this._viewContainerRef.get(adjustedPreviousIndex);\n                    _this._viewContainerRef.move(view, currentIndex);\n                    view.context.$implicit = record.item;\n                }\n            });\n            // Update $implicit for any items that had an identity change.\n            changes.forEachIdentityChange(function (record) {\n                var view = _this._viewContainerRef.get(record.currentIndex);\n                view.context.$implicit = record.item;\n            });\n            // Update the context variables on all items.\n            var count = this._data.length;\n            var i = this._viewContainerRef.length;\n            while (i--) {\n                var view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n            }\n        };\n        /** Cache the given detached view. */\n        CdkVirtualForOf.prototype._cacheView = function (view) {\n            if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n                this._templateCache.push(view);\n            }\n            else {\n                var index = this._viewContainerRef.indexOf(view);\n                // It's very unlikely that the index will ever be -1, but just in case,\n                // destroy the view on its own, otherwise destroy it through the\n                // container to ensure that all the references are removed.\n                if (index === -1) {\n                    view.destroy();\n                }\n                else {\n                    this._viewContainerRef.remove(index);\n                }\n            }\n        };\n        /** Inserts a view for a new item, either from the cache or by creating a new one. */\n        CdkVirtualForOf.prototype._insertViewForNewItem = function (index) {\n            return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n        };\n        /** Update the computed properties on the `CdkVirtualForOfContext`. */\n        CdkVirtualForOf.prototype._updateComputedContextProperties = function (context) {\n            context.first = context.index === 0;\n            context.last = context.index === context.count - 1;\n            context.even = context.index % 2 === 0;\n            context.odd = !context.even;\n        };\n        /** Creates a new embedded view and moves it to the given index */\n        CdkVirtualForOf.prototype._createEmbeddedViewAt = function (index) {\n            // Note that it's important that we insert the item directly at the proper index,\n            // rather than inserting it and the moving it in place, because if there's a directive\n            // on the same node that injects the `ViewContainerRef`, Angular will insert another\n            // comment node which can throw off the move when it's being repeated for all items.\n            return this._viewContainerRef.createEmbeddedView(this._template, {\n                $implicit: null,\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            }, index);\n        };\n        /** Inserts a recycled view from the cache at the given index. */\n        CdkVirtualForOf.prototype._insertViewFromCache = function (index) {\n            var cachedView = this._templateCache.pop();\n            if (cachedView) {\n                this._viewContainerRef.insert(cachedView, index);\n            }\n            return cachedView || null;\n        };\n        /** Detaches the embedded view at the given index. */\n        CdkVirtualForOf.prototype._detachView = function (index) {\n            return this._viewContainerRef.detach(index);\n        };\n        CdkVirtualForOf.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkVirtualForOf.ctorParameters = function () { return [\n            { type: i0.ViewContainerRef },\n            { type: i0.TemplateRef },\n            { type: i0.IterableDiffers },\n            { type: CdkVirtualScrollViewport, decorators: [{ type: i0.SkipSelf }] },\n            { type: i0.NgZone }\n        ]; };\n        CdkVirtualForOf.propDecorators = {\n            cdkVirtualForOf: [{ type: i0.Input }],\n            cdkVirtualForTrackBy: [{ type: i0.Input }],\n            cdkVirtualForTemplate: [{ type: i0.Input }],\n            cdkVirtualForTemplateCacheSize: [{ type: i0.Input }]\n        };\n        return CdkVirtualForOf;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ScrollingModule = /** @class */ (function () {\n        function ScrollingModule() {\n        }\n        ScrollingModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [bidi.BidiModule, i1.PlatformModule],\n                        exports: [\n                            bidi.BidiModule,\n                            CdkFixedSizeVirtualScroll,\n                            CdkScrollable,\n                            CdkVirtualForOf,\n                            CdkVirtualScrollViewport,\n                        ],\n                        declarations: [\n                            CdkFixedSizeVirtualScroll,\n                            CdkScrollable,\n                            CdkVirtualForOf,\n                            CdkVirtualScrollViewport,\n                        ],\n                    },] }\n        ];\n        return ScrollingModule;\n    }());\n    /**\n     * @deprecated ScrollDispatchModule has been renamed to ScrollingModule.\n     * @breaking-change 8.0.0 delete this alias\n     */\n    var ScrollDispatchModule = /** @class */ (function () {\n        function ScrollDispatchModule() {\n        }\n        ScrollDispatchModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [ScrollingModule],\n                        exports: [ScrollingModule],\n                    },] }\n        ];\n        return ScrollDispatchModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time in ms to throttle the resize events by default. */\n    var DEFAULT_RESIZE_TIME = 20;\n    /**\n     * Simple utility for getting the bounds of the browser viewport.\n     * @docs-private\n     */\n    var ViewportRuler = /** @class */ (function () {\n        function ViewportRuler(_platform, ngZone) {\n            var _this = this;\n            this._platform = _platform;\n            ngZone.runOutsideAngular(function () {\n                _this._change = _platform.isBrowser ?\n                    rxjs.merge(rxjs.fromEvent(window, 'resize'), rxjs.fromEvent(window, 'orientationchange')) :\n                    rxjs.of();\n                // Note that we need to do the subscription inside `runOutsideAngular`\n                // since subscribing is what causes the event listener to be added.\n                _this._invalidateCache = _this.change().subscribe(function () { return _this._updateViewportSize(); });\n            });\n        }\n        ViewportRuler.prototype.ngOnDestroy = function () {\n            this._invalidateCache.unsubscribe();\n        };\n        /** Returns the viewport's width and height. */\n        ViewportRuler.prototype.getViewportSize = function () {\n            if (!this._viewportSize) {\n                this._updateViewportSize();\n            }\n            var output = { width: this._viewportSize.width, height: this._viewportSize.height };\n            // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n            if (!this._platform.isBrowser) {\n                this._viewportSize = null;\n            }\n            return output;\n        };\n        /** Gets a ClientRect for the viewport's bounds. */\n        ViewportRuler.prototype.getViewportRect = function () {\n            // Use the document element's bounding rect rather than the window scroll properties\n            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n            // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n            // can disagree when the page is pinch-zoomed (on devices that support touch).\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n            // We use the documentElement instead of the body because, by default (without a css reset)\n            // browsers typically give the document body an 8px margin, which is not included in\n            // getBoundingClientRect().\n            var scrollPosition = this.getViewportScrollPosition();\n            var _a = this.getViewportSize(), width = _a.width, height = _a.height;\n            return {\n                top: scrollPosition.top,\n                left: scrollPosition.left,\n                bottom: scrollPosition.top + height,\n                right: scrollPosition.left + width,\n                height: height,\n                width: width,\n            };\n        };\n        /** Gets the (top, left) scroll position of the viewport. */\n        ViewportRuler.prototype.getViewportScrollPosition = function () {\n            // While we can get a reference to the fake document\n            // during SSR, it doesn't have getBoundingClientRect.\n            if (!this._platform.isBrowser) {\n                return { top: 0, left: 0 };\n            }\n            // The top-left-corner of the viewport is determined by the scroll position of the document\n            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n            // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n            // `document.documentElement` works consistently, where the `top` and `left` values will\n            // equal negative the scroll position.\n            var documentElement = document.documentElement;\n            var documentRect = documentElement.getBoundingClientRect();\n            var top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                documentElement.scrollTop || 0;\n            var left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                documentElement.scrollLeft || 0;\n            return { top: top, left: left };\n        };\n        /**\n         * Returns a stream that emits whenever the size of the viewport changes.\n         * @param throttleTime Time in milliseconds to throttle the stream.\n         */\n        ViewportRuler.prototype.change = function (throttleTime) {\n            if (throttleTime === void 0) { throttleTime = DEFAULT_RESIZE_TIME; }\n            return throttleTime > 0 ? this._change.pipe(operators.auditTime(throttleTime)) : this._change;\n        };\n        /** Updates the cached viewport size. */\n        ViewportRuler.prototype._updateViewportSize = function () {\n            this._viewportSize = this._platform.isBrowser ?\n                { width: window.innerWidth, height: window.innerHeight } :\n                { width: 0, height: 0 };\n        };\n        ViewportRuler.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ViewportRuler.ctorParameters = function () { return [\n            { type: i1.Platform },\n            { type: i0.NgZone }\n        ]; };\n        ViewportRuler.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone)); }, token: ViewportRuler, providedIn: \"root\" });\n        return ViewportRuler;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler, platform, ngZone) {\n        return parentRuler || new ViewportRuler(platform, ngZone);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var VIEWPORT_RULER_PROVIDER = {\n        // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n        provide: ViewportRuler,\n        deps: [[new i0.Optional(), new i0.SkipSelf(), ViewportRuler], i1.Platform, i0.NgZone],\n        useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.FixedSizeVirtualScrollStrategy = FixedSizeVirtualScrollStrategy;\n    exports._fixedSizeVirtualScrollStrategyFactory = _fixedSizeVirtualScrollStrategyFactory;\n    exports.CdkFixedSizeVirtualScroll = CdkFixedSizeVirtualScroll;\n    exports.DEFAULT_SCROLL_TIME = DEFAULT_SCROLL_TIME;\n    exports.ScrollDispatcher = ScrollDispatcher;\n    exports.SCROLL_DISPATCHER_PROVIDER_FACTORY = SCROLL_DISPATCHER_PROVIDER_FACTORY;\n    exports.SCROLL_DISPATCHER_PROVIDER = SCROLL_DISPATCHER_PROVIDER;\n    exports.CdkScrollable = CdkScrollable;\n    exports.ScrollingModule = ScrollingModule;\n    exports.ScrollDispatchModule = ScrollDispatchModule;\n    exports.DEFAULT_RESIZE_TIME = DEFAULT_RESIZE_TIME;\n    exports.ViewportRuler = ViewportRuler;\n    exports.VIEWPORT_RULER_PROVIDER_FACTORY = VIEWPORT_RULER_PROVIDER_FACTORY;\n    exports.VIEWPORT_RULER_PROVIDER = VIEWPORT_RULER_PROVIDER;\n    exports.CdkVirtualForOf = CdkVirtualForOf;\n    exports.VIRTUAL_SCROLL_STRATEGY = VIRTUAL_SCROLL_STRATEGY;\n    exports.CdkVirtualScrollViewport = CdkVirtualScrollViewport;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-scrolling.umd.js.map\n"]}
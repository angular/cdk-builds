{"version":3,"file":"cdk-stepper.umd.min.js","sources":["../../src/cdk/stepper/step-header.ts","../../src/cdk/stepper/step-label.ts","../../src/cdk/stepper/stepper.ts","../../src/cdk/stepper/stepper-button.ts","../../src/cdk/stepper/stepper-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {FocusableOption} from '@angular/cdk/a11y';\n\n\n@Directive({\n  selector: '[cdkStepHeader]',\n  host: {\n    'role': 'tab',\n  },\n})\nexport class CdkStepHeader implements FocusableOption {\n  constructor(protected _elementRef: ElementRef<HTMLElement>) {}\n\n  /** Focuses the step header. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  constructor(/** @docs-private */ public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, hasModifierKey, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, of as obaservableOf, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {CdkStepHeader} from './step-header';\nimport {CdkStepLabel} from './step-label';\n\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous'|'current'|'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal'|'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number'|'edit'|'done'|'error'|string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const STEPPER_GLOBAL_OPTIONS = new InjectionToken<StepperOptions>('STEPPER_GLOBAL_OPTIONS');\n\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * @breaking-change 8.0.0.\n */\nexport const MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _showError: boolean;\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel, {static: false}) stepLabel: CdkStepLabel;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef, {static: true}) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: FormControlLike;\n\n  /** Whether user has seen the expanded step content or not. */\n  interacted = false;\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input() state: StepState;\n\n  /** Whether the user can return to this step once it has been marked as completed. */\n  @Input()\n  get editable(): boolean {\n    return this._editable;\n  }\n  set editable(value: boolean) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  private _editable = true;\n\n  /** Whether the completion of step is optional. */\n  @Input()\n  get optional(): boolean {\n    return this._optional;\n  }\n  set optional(value: boolean) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional = false;\n\n  /** Whether step is marked as completed. */\n  @Input()\n  get completed(): boolean {\n    return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n  }\n  set completed(value: boolean) {\n    this._completedOverride = coerceBooleanProperty(value);\n  }\n  _completedOverride: boolean|null = null;\n\n  private _getDefaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n\n  /** Whether step has an error. */\n  @Input()\n  get hasError(): boolean {\n    return this._customError == null ? this._getDefaultError() : this._customError;\n  }\n  set hasError(value: boolean) {\n    this._customError = coerceBooleanProperty(value);\n  }\n  private _customError: boolean|null = null;\n\n  private _getDefaultError() {\n    return this.stepControl && this.stepControl.invalid && this.interacted;\n  }\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(\n      @Inject(forwardRef(() => CdkStepper)) private _stepper: CdkStepper,\n      @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this.interacted = false;\n\n    if (this._completedOverride != null) {\n      this._completedOverride = false;\n    }\n\n    if (this._customError != null) {\n      this._customError = false;\n    }\n\n    if (this.stepControl) {\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterViewInit, OnDestroy {\n  /** Emits when the component is destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption>;\n\n  /**\n   * @breaking-change 8.0.0 Remove `| undefined` once the `_document`\n   * constructor param is required.\n   */\n  private _document: Document|undefined;\n\n  /**\n   * The list of step components that the stepper is holding.\n   * @deprecated use `steps` instead\n   * @breaking-change 9.0.0 remove this property\n   */\n  @ContentChildren(CdkStep) _steps: QueryList<CdkStep>;\n\n  /** The list of step components that the stepper is holding. */\n  get steps(): QueryList<CdkStep> {\n    return this._steps;\n  }\n\n  /**\n   * The list of step headers of the steps in the stepper.\n   * @deprecated Type to be changed to `QueryList<CdkStepHeader>`.\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(CdkStepHeader) _stepHeader: QueryList<FocusableOption>;\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input()\n  get linear(): boolean {\n    return this._linear;\n  }\n  set linear(value: boolean) {\n    this._linear = coerceBooleanProperty(value);\n  }\n  private _linear = false;\n\n  /** The index of the selected step. */\n  @Input()\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n  set selectedIndex(index: number) {\n    const newIndex = coerceNumberProperty(index);\n\n    if (this.steps) {\n      // Ensure that the index can't be out of bounds.\n      if (newIndex < 0 || newIndex > this.steps.length - 1) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n          (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n        this._updateSelectedItemIndex(index);\n      }\n    } else {\n      this._selectedIndex = newIndex;\n    }\n  }\n  private _selectedIndex = 0;\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep {\n    // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined!;\n  }\n  set selected(step: CdkStep) {\n    this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output()\n  selectionChange: EventEmitter<StepperSelectionEvent> = new EventEmitter<StepperSelectionEvent>();\n\n  /** Used to track unique ID for each stepper component. */\n  _groupId: number;\n\n  protected _orientation: StepperOrientation = 'horizontal';\n\n  constructor(\n      @Optional() private _dir: Directionality, private _changeDetectorRef: ChangeDetectorRef,\n      // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n      private _elementRef?: ElementRef<HTMLElement>, @Inject(DOCUMENT) _document?: any) {\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n\n  ngAfterViewInit() {\n    // Note that while the step headers are content children by default, any components that\n    // extend this one might have them as view chidren. We initialize the keyboard handling in\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\n    this._keyManager = new FocusKeyManager<FocusableOption>(this._stepHeader)\n                           .withWrap()\n                           .withVerticalOrientation(this._orientation === 'vertical');\n\n    (this._dir ? (this._dir.change as Observable<Direction>) : obaservableOf<Direction>())\n        .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n        .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItemIndex(this._selectedIndex);\n\n    this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this.steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index: number, state: StepState = STEP_STATE.NUMBER): StepState {\n    const step = this.steps.toArray()[index];\n    const isCurrentStep = this._isCurrentStep(index);\n\n    return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n                                               this._getGuidelineLogic(step, isCurrentStep, state);\n  }\n\n  private _getDefaultIndicatorLogic(step: CdkStep, isCurrentStep: boolean): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (!step.completed || isCurrentStep) {\n      return STEP_STATE.NUMBER;\n    } else {\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    }\n  }\n\n  private _getGuidelineLogic(\n      step: CdkStep, isCurrentStep: boolean, state: StepState = STEP_STATE.NUMBER): StepState {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (step.completed && !isCurrentStep) {\n      return STEP_STATE.DONE;\n    } else if (step.completed && isCurrentStep) {\n      return state;\n    } else if (step.editable && isCurrentStep) {\n      return STEP_STATE.EDIT;\n    } else {\n      return state;\n    }\n  }\n\n  private _isCurrentStep(index: number) {\n    return this._selectedIndex === index;\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this.steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n                            this._keyManager.updateActiveItemIndex(newIndex);\n\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const hasModifier = hasModifierKey(event);\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    if (manager.activeItemIndex != null && !hasModifier &&\n        (keyCode === SPACE || keyCode === ENTER)) {\n      this.selectedIndex = manager.activeItemIndex;\n      event.preventDefault();\n    } else if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      manager.onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    const steps = this.steps.toArray();\n\n    steps[this._selectedIndex].interacted = true;\n\n    if (this._linear && index >= 0) {\n      return steps.slice(0, index).some(step => {\n        const control = step.stepControl;\n        const isIncomplete =\n            control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n        return isIncomplete && !step.optional && !step._completedOverride;\n      });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    if (!this._document || !this._elementRef) {\n      return false;\n    }\n\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = this._document.activeElement;\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n}\n\n\n/**\n * Simplified representation of a FormControl from @angular/forms.\n * Used to avoid having to bring in @angular/forms for a single optional interface.\n * @docs-private\n */\ninterface FormControlLike {\n  asyncValidator: () => any | null;\n  dirty: boolean;\n  disabled: boolean;\n  enabled: boolean;\n  errors: {[key: string]: any} | null;\n  invalid: boolean;\n  parent: any;\n  pending: boolean;\n  pristine: boolean;\n  root: FormControlLike;\n  status: string;\n  statusChanges: Observable<any>;\n  touched: boolean;\n  untouched: boolean;\n  updateOn: any;\n  valid: boolean;\n  validator: () => any | null;\n  value: any;\n  valueChanges: Observable<any>;\n  clearAsyncValidators(): void;\n  clearValidators(): void;\n  disable(opts?: any): void;\n  enable(opts?: any): void;\n  get(path: (string | number)[] | string): FormControlLike | null;\n  getError(errorCode: string, path?: (string | number)[] | string): any;\n  hasError(errorCode: string, path?: (string | number)[] | string): boolean;\n  markAllAsTouched(): void;\n  markAsDirty(opts?: any): void;\n  markAsPending(opts?: any): void;\n  markAsPristine(opts?: any): void;\n  markAsTouched(opts?: any): void;\n  markAsUntouched(opts?: any): void;\n  patchValue(value: any, options?: Object): void;\n  reset(value?: any, options?: Object): void;\n  setAsyncValidators(newValidator: () => any | (() => any)[] | null): void;\n  setErrors(errors: {[key: string]: any} | null, opts?: any): void;\n  setParent(parent: any): void;\n  setValidators(newValidator: () => any | (() => any)[] | null): void;\n  setValue(value: any, options?: Object): void;\n  updateValueAndValidity(opts?: any): void;\n  patchValue(value: any, options?: any): void;\n  registerOnChange(fn: Function): void;\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void;\n  reset(formState?: any, options?: any): void;\n  setValue(value: any, options?: any): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, HostListener, Input} from '@angular/core';\n\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperNext {\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(public _stepper: CdkStepper) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click')\n  _handleClick() {\n    this._stepper.next();\n  }\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  }\n})\nexport class CdkStepperPrevious {\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(public _stepper: CdkStepper) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click')\n  _handleClick() {\n    this._stepper.previous();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {CdkStepHeader} from './step-header';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n@NgModule({\n  imports: [BidiModule, CommonModule],\n  exports: [\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ],\n  declarations: [\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ]\n})\nexport class CdkStepperModule {}\n"],"names":["CdkStepHeader","_elementRef","this","prototype","focus","nativeElement","type","Directive","args","selector","host","role","ElementRef","CdkStepLabel","template","TemplateRef","nextId","StepperSelectionEvent","STEP_STATE","NUMBER","EDIT","DONE","ERROR","STEPPER_GLOBAL_OPTIONS","InjectionToken","MAT_STEPPER_GLOBAL_OPTIONS","CdkStep","_stepper","stepperOptions","interacted","_editable","_optional","_completedOverride","_customError","_stepperOptions","_displayDefaultIndicatorType","displayDefaultIndicatorType","_showError","showError","Object","defineProperty","value","coerceBooleanProperty","_getDefaultCompleted","stepControl","valid","_getDefaultError","invalid","select","selected","reset","ngOnChanges","_stateChanged","Component","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","label","errorMessage","ariaLabel","ariaLabelledby","state","editable","optional","completed","hasError","CdkStepper","_dir","_changeDetectorRef","_selectedIndex","_groupId","_document","get","enumerable","configurable","set","newIndex","coerceNumberProperty","index","steps","length","Error","_anyControlsInvalidOrPending","toArray","_updateSelectedItemIndex","selectedIndex","_keyManager","FocusKeyManager","_stepHeader","withWrap","withVerticalOrientation","_orientation","obaservableOf","pipe","startWith","_layoutDirection","takeUntil","_destroyed","subscribe","changes","_this","Math","max","complete","forEach","position","step","isCurrentStep","_isCurrentStep","_getGuidelineLogic","stepsArray","previouslySelectedIndex","selectedStep","previouslySelectedStep","_containsFocus","setActiveItem","updateActiveItemIndex","hasModifier","hasModifierKey","event","keyCode","manager","SPACE","ENTER","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","onKeydown","activeItemIndex","_linear","slice","some","control","pending","stepperElement","focusedElement","activeElement","decorators","undefined","Inject","DOCUMENT","linear","selectionChange","Output","CdkStepperNext","_handleClick","next","[type]","HostListener","CdkStepperPrevious","previous","CdkStepperModule","NgModule","imports","BidiModule","CommonModule","exports","declarations"],"mappings":"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"}
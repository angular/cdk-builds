{"version":3,"sources":["src/cdk/cdk-text-field.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","textField","platform","core","coercion","rxjs","common","operators","this","i0","hasV8BreakIterator","Intl","v8BreakIterator","_a","Platform","_platformId","isBrowser","isPlatformBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","decorators","type","Injectable","args","providedIn","ctorParameters","Object","Optional","Inject","PLATFORM_ID","ɵprov","ɵɵdefineInjectable","Platform_Factory","ɵɵinject","token","listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","prototype","monitor","elementOrRef","_this","EMPTY","element","coerceElement","info","get","subject","asObservable","result","Subject","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","NgZone","AutofillMonitor_Factory","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","ngOnInit","subscribe","emit","Directive","selector","ElementRef","propDecorators","Output","CdkTextareaAutosize","_destroyed","_enabled","_previousMinRows","_textareaElement","nativeElement","defineProperty","_minRows","value","coerceNumberProperty","_setMinHeight","enumerable","configurable","_maxRows","_setMaxHeight","coerceBooleanProperty","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","ngAfterViewInit","_initialHeight","height","fromEvent","pipe","auditTime","takeUntil","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","ngDoCheck","force","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","_noopInputHandler","isStopped","activeElement","setSelectionRange","selectionStart","selectionEnd","exportAs","host","class","(input)","Input","enabled","TextFieldModule","NgModule","declarations","imports","PlatformModule"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/core'), require('@angular/cdk/coercion'), require('rxjs'), require('@angular/common'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/text-field', ['exports', '@angular/cdk/platform', '@angular/core', '@angular/cdk/coercion', 'rxjs', '@angular/common', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.textField = {}), global.ng.cdk.platform, global.ng.core, global.ng.cdk.coercion, global.rxjs, global.ng.common, global.rxjs.operators));\n}(this, (function (exports, platform, i0, coercion, rxjs, common, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Whether the current platform supports the V8 Break Iterator. The V8 check\n    // is necessary to detect all Blink based browsers.\n    var hasV8BreakIterator;\n    // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n    // cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n    // the consumer is providing a polyfilled `Map`. See:\n    // https://github.com/Microsoft/ChakraCore/issues/3189\n    // https://github.com/angular/components/issues/15687\n    try {\n        hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n    }\n    catch (_a) {\n        hasV8BreakIterator = false;\n    }\n    /**\n     * Service to detect the current platform by comparing the userAgent strings and\n     * checking browser-specific global properties.\n     */\n    var Platform = /** @class */ (function () {\n        /**\n         * @breaking-change 8.0.0 remove optional decorator\n         */\n        function Platform(_platformId) {\n            this._platformId = _platformId;\n            // We want to use the Angular platform check because if the Document is shimmed\n            // without the navigator, the following checks will fail. This is preferred because\n            // sometimes the Document may be shimmed without the user's knowledge or intention\n            /** Whether the Angular application is being rendered in the browser. */\n            this.isBrowser = this._platformId ?\n                common.isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n            /** Whether the current browser is Microsoft Edge. */\n            this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n            /** Whether the current rendering engine is Microsoft Trident. */\n            this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n            // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n            /** Whether the current rendering engine is Blink. */\n            this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n                typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n            // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n            // ensure that Webkit runs standalone and is not used as another engine's base.\n            /** Whether the current rendering engine is WebKit. */\n            this.WEBKIT = this.isBrowser &&\n                /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n            /** Whether the current platform is Apple iOS. */\n            this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n                !('MSStream' in window);\n            // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n            // them self as Gecko-like browsers and modify the userAgent's according to that.\n            // Since we only cover one explicit Firefox case, we can simply check for Firefox\n            // instead of having an unstable check for Gecko.\n            /** Whether the current browser is Firefox. */\n            this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n            /** Whether the current platform is Android. */\n            // Trident on mobile adds the android platform to the userAgent to trick detections.\n            this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n            // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n            // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n            // Safari browser should also use Webkit as its layout engine.\n            /** Whether the current browser is Safari. */\n            this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n        }\n        Platform.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        Platform.ctorParameters = function () { return [\n            { type: Object, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i0.PLATFORM_ID,] }] }\n        ]; };\n        Platform.ɵprov = i0.ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(i0.ɵɵinject(i0.PLATFORM_ID, 8)); }, token: Platform, providedIn: \"root\" });\n        return Platform;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Options to pass to the animationstart listener. */\n    var listenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /**\n     * An injectable service that can be used to monitor the autofill state of an input.\n     * Based on the following blog post:\n     * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n     */\n    var AutofillMonitor = /** @class */ (function () {\n        function AutofillMonitor(_platform, _ngZone) {\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._monitoredElements = new Map();\n        }\n        AutofillMonitor.prototype.monitor = function (elementOrRef) {\n            var _this = this;\n            if (!this._platform.isBrowser) {\n                return rxjs.EMPTY;\n            }\n            var element = coercion.coerceElement(elementOrRef);\n            var info = this._monitoredElements.get(element);\n            if (info) {\n                return info.subject.asObservable();\n            }\n            var result = new rxjs.Subject();\n            var cssClass = 'cdk-text-field-autofilled';\n            var listener = (function (event) {\n                // Animation events fire on initial element render, we check for the presence of the autofill\n                // CSS class to make sure this is a real change in state, not just the initial render before\n                // we fire off events.\n                if (event.animationName === 'cdk-text-field-autofill-start' &&\n                    !element.classList.contains(cssClass)) {\n                    element.classList.add(cssClass);\n                    _this._ngZone.run(function () { return result.next({ target: event.target, isAutofilled: true }); });\n                }\n                else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                    element.classList.contains(cssClass)) {\n                    element.classList.remove(cssClass);\n                    _this._ngZone.run(function () { return result.next({ target: event.target, isAutofilled: false }); });\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                element.addEventListener('animationstart', listener, listenerOptions);\n                element.classList.add('cdk-text-field-autofill-monitored');\n            });\n            this._monitoredElements.set(element, {\n                subject: result,\n                unlisten: function () {\n                    element.removeEventListener('animationstart', listener, listenerOptions);\n                }\n            });\n            return result.asObservable();\n        };\n        AutofillMonitor.prototype.stopMonitoring = function (elementOrRef) {\n            var element = coercion.coerceElement(elementOrRef);\n            var info = this._monitoredElements.get(element);\n            if (info) {\n                info.unlisten();\n                info.subject.complete();\n                element.classList.remove('cdk-text-field-autofill-monitored');\n                element.classList.remove('cdk-text-field-autofilled');\n                this._monitoredElements.delete(element);\n            }\n        };\n        AutofillMonitor.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._monitoredElements.forEach(function (_info, element) { return _this.stopMonitoring(element); });\n        };\n        AutofillMonitor.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        AutofillMonitor.ctorParameters = function () { return [\n            { type: platform.Platform },\n            { type: i0.NgZone }\n        ]; };\n        AutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(i0.ɵɵinject(Platform), i0.ɵɵinject(i0.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n        return AutofillMonitor;\n    }());\n    /** A directive that can be used to monitor the autofill state of an input. */\n    var CdkAutofill = /** @class */ (function () {\n        function CdkAutofill(_elementRef, _autofillMonitor) {\n            this._elementRef = _elementRef;\n            this._autofillMonitor = _autofillMonitor;\n            /** Emits when the autofill state of the element changes. */\n            this.cdkAutofill = new i0.EventEmitter();\n        }\n        CdkAutofill.prototype.ngOnInit = function () {\n            var _this = this;\n            this._autofillMonitor\n                .monitor(this._elementRef)\n                .subscribe(function (event) { return _this.cdkAutofill.emit(event); });\n        };\n        CdkAutofill.prototype.ngOnDestroy = function () {\n            this._autofillMonitor.stopMonitoring(this._elementRef);\n        };\n        CdkAutofill.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkAutofill]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkAutofill.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: AutofillMonitor }\n        ]; };\n        CdkAutofill.propDecorators = {\n            cdkAutofill: [{ type: i0.Output }]\n        };\n        return CdkAutofill;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Directive to automatically resize a textarea to fit its content. */\n    var CdkTextareaAutosize = /** @class */ (function () {\n        function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n            this._elementRef = _elementRef;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._destroyed = new rxjs.Subject();\n            this._enabled = true;\n            /**\n             * Value of minRows as of last resize. If the minRows has decreased, the\n             * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n             * does not have the same problem because it does not affect the textarea's scrollHeight.\n             */\n            this._previousMinRows = -1;\n            this._textareaElement = this._elementRef.nativeElement;\n        }\n        Object.defineProperty(CdkTextareaAutosize.prototype, \"minRows\", {\n            /** Minimum amount of rows in the textarea. */\n            get: function () { return this._minRows; },\n            set: function (value) {\n                this._minRows = coercion.coerceNumberProperty(value);\n                this._setMinHeight();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTextareaAutosize.prototype, \"maxRows\", {\n            /** Maximum amount of rows in the textarea. */\n            get: function () { return this._maxRows; },\n            set: function (value) {\n                this._maxRows = coercion.coerceNumberProperty(value);\n                this._setMaxHeight();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTextareaAutosize.prototype, \"enabled\", {\n            /** Whether autosizing is enabled or not */\n            get: function () { return this._enabled; },\n            set: function (value) {\n                value = coercion.coerceBooleanProperty(value);\n                // Only act if the actual value changed. This specifically helps to not run\n                // resizeToFitContent too early (i.e. before ngAfterViewInit)\n                if (this._enabled !== value) {\n                    (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Sets the minimum height of the textarea as determined by minRows. */\n        CdkTextareaAutosize.prototype._setMinHeight = function () {\n            var minHeight = this.minRows && this._cachedLineHeight ?\n                this.minRows * this._cachedLineHeight + \"px\" : null;\n            if (minHeight) {\n                this._textareaElement.style.minHeight = minHeight;\n            }\n        };\n        /** Sets the maximum height of the textarea as determined by maxRows. */\n        CdkTextareaAutosize.prototype._setMaxHeight = function () {\n            var maxHeight = this.maxRows && this._cachedLineHeight ?\n                this.maxRows * this._cachedLineHeight + \"px\" : null;\n            if (maxHeight) {\n                this._textareaElement.style.maxHeight = maxHeight;\n            }\n        };\n        CdkTextareaAutosize.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            if (this._platform.isBrowser) {\n                // Remember the height which we started with in case autosizing is disabled\n                this._initialHeight = this._textareaElement.style.height;\n                this.resizeToFitContent();\n                this._ngZone.runOutsideAngular(function () {\n                    rxjs.fromEvent(window, 'resize')\n                        .pipe(operators.auditTime(16), operators.takeUntil(_this._destroyed))\n                        .subscribe(function () { return _this.resizeToFitContent(true); });\n                });\n            }\n        };\n        CdkTextareaAutosize.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Cache the height of a single-row textarea if it has not already been cached.\n         *\n         * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n         * maxRows. For the initial version, we will assume that the height of a single line in the\n         * textarea does not ever change.\n         */\n        CdkTextareaAutosize.prototype._cacheTextareaLineHeight = function () {\n            if (this._cachedLineHeight) {\n                return;\n            }\n            // Use a clone element because we have to override some styles.\n            var textareaClone = this._textareaElement.cloneNode(false);\n            textareaClone.rows = 1;\n            // Use `position: absolute` so that this doesn't cause a browser layout and use\n            // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n            // would affect the height.\n            textareaClone.style.position = 'absolute';\n            textareaClone.style.visibility = 'hidden';\n            textareaClone.style.border = 'none';\n            textareaClone.style.padding = '0';\n            textareaClone.style.height = '';\n            textareaClone.style.minHeight = '';\n            textareaClone.style.maxHeight = '';\n            // In Firefox it happens that textarea elements are always bigger than the specified amount\n            // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n            // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n            // to hidden. This ensures that there is no invalid calculation of the line height.\n            // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n            textareaClone.style.overflow = 'hidden';\n            this._textareaElement.parentNode.appendChild(textareaClone);\n            this._cachedLineHeight = textareaClone.clientHeight;\n            this._textareaElement.parentNode.removeChild(textareaClone);\n            // Min and max heights have to be re-calculated if the cached line height changes\n            this._setMinHeight();\n            this._setMaxHeight();\n        };\n        CdkTextareaAutosize.prototype.ngDoCheck = function () {\n            if (this._platform.isBrowser) {\n                this.resizeToFitContent();\n            }\n        };\n        /**\n         * Resize the textarea to fit its content.\n         * @param force Whether to force a height recalculation. By default the height will be\n         *    recalculated only if the value changed since the last call.\n         */\n        CdkTextareaAutosize.prototype.resizeToFitContent = function (force) {\n            var _this = this;\n            if (force === void 0) { force = false; }\n            // If autosizing is disabled, just skip everything else\n            if (!this._enabled) {\n                return;\n            }\n            this._cacheTextareaLineHeight();\n            // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n            // in checking the height of the textarea.\n            if (!this._cachedLineHeight) {\n                return;\n            }\n            var textarea = this._elementRef.nativeElement;\n            var value = textarea.value;\n            // Only resize if the value or minRows have changed since these calculations can be expensive.\n            if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n                return;\n            }\n            var placeholderText = textarea.placeholder;\n            // Reset the textarea height to auto in order to shrink back to its default size.\n            // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n            // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n            // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n            // need to be removed temporarily.\n            textarea.classList.add('cdk-textarea-autosize-measuring');\n            textarea.placeholder = '';\n            // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n            // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n            var height = textarea.scrollHeight - 4;\n            // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n            textarea.style.height = height + \"px\";\n            textarea.classList.remove('cdk-textarea-autosize-measuring');\n            textarea.placeholder = placeholderText;\n            this._ngZone.runOutsideAngular(function () {\n                if (typeof requestAnimationFrame !== 'undefined') {\n                    requestAnimationFrame(function () { return _this._scrollToCaretPosition(textarea); });\n                }\n                else {\n                    setTimeout(function () { return _this._scrollToCaretPosition(textarea); });\n                }\n            });\n            this._previousValue = value;\n            this._previousMinRows = this._minRows;\n        };\n        /**\n         * Resets the textarea to its original size\n         */\n        CdkTextareaAutosize.prototype.reset = function () {\n            // Do not try to change the textarea, if the initialHeight has not been determined yet\n            // This might potentially remove styles when reset() is called before ngAfterViewInit\n            if (this._initialHeight === undefined) {\n                return;\n            }\n            this._textareaElement.style.height = this._initialHeight;\n        };\n        CdkTextareaAutosize.prototype._noopInputHandler = function () {\n            // no-op handler that ensures we're running change detection on input events.\n        };\n        /**\n         * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n         * prevent it from scrolling to the caret position. We need to re-set the selection\n         * in order for it to scroll to the proper position.\n         */\n        CdkTextareaAutosize.prototype._scrollToCaretPosition = function (textarea) {\n            var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;\n            // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n            // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n            // between the time we requested the animation frame and when it was executed.\n            // Also note that we have to assert that the textarea is focused before we set the\n            // selection range. Setting the selection range on a non-focused textarea will cause\n            // it to receive focus on IE and Edge.\n            if (!this._destroyed.isStopped && document.activeElement === textarea) {\n                textarea.setSelectionRange(selectionStart, selectionEnd);\n            }\n        };\n        CdkTextareaAutosize.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'textarea[cdkTextareaAutosize]',\n                        exportAs: 'cdkTextareaAutosize',\n                        host: {\n                            'class': 'cdk-textarea-autosize',\n                            // Textarea elements that have the directive applied should have a single row by default.\n                            // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                            'rows': '1',\n                            '(input)': '_noopInputHandler()',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTextareaAutosize.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: platform.Platform },\n            { type: i0.NgZone }\n        ]; };\n        CdkTextareaAutosize.propDecorators = {\n            minRows: [{ type: i0.Input, args: ['cdkAutosizeMinRows',] }],\n            maxRows: [{ type: i0.Input, args: ['cdkAutosizeMaxRows',] }],\n            enabled: [{ type: i0.Input, args: ['cdkTextareaAutosize',] }]\n        };\n        return CdkTextareaAutosize;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TextFieldModule = /** @class */ (function () {\n        function TextFieldModule() {\n        }\n        TextFieldModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [CdkAutofill, CdkTextareaAutosize],\n                        imports: [platform.PlatformModule],\n                        exports: [CdkAutofill, CdkTextareaAutosize],\n                    },] }\n        ];\n        return TextFieldModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.AutofillMonitor = AutofillMonitor;\n    exports.CdkAutofill = CdkAutofill;\n    exports.CdkTextareaAutosize = CdkTextareaAutosize;\n    exports.TextFieldModule = TextFieldModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-text-field.umd.js.map\n"]}
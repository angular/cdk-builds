{"version":3,"sources":["src/cdk/cdk-text-field.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","textField","platform","core","coercion","rxjs","operators","this","i1","i0","listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","prototype","monitor","elementOrRef","_this","isBrowser","EMPTY","element","coerceElement","info","get","subject","asObservable","result","Subject","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","decorators","type","Injectable","args","providedIn","ctorParameters","Platform","NgZone","ngInjectableDef","ɵɵdefineInjectable","AutofillMonitor_Factory","ɵɵinject","token","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","EventEmitter","ngOnInit","subscribe","emit","Directive","selector","ElementRef","propDecorators","Output","CdkTextareaAutosize","_destroyed","_enabled","_previousMinRows","_textareaElement","nativeElement","Object","defineProperty","_minRows","value","_setMinHeight","enumerable","configurable","_maxRows","_setMaxHeight","coerceBooleanProperty","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","ngAfterViewInit","_initialHeight","height","fromEvent","window","pipe","auditTime","takeUntil","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","ngDoCheck","force","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","_noopInputHandler","isStopped","document","activeElement","setSelectionRange","selectionStart","selectionEnd","exportAs","host","class","(input)","Input","enabled","TextFieldModule","NgModule","declarations","imports","PlatformModule"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/core'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/text-field', ['exports', '@angular/cdk/platform', '@angular/core', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.textField = {}), global.ng.cdk.platform, global.ng.core, global.ng.cdk.coercion, global.rxjs, global.rxjs.operators));\n}(this, function (exports, i1, i0, coercion, rxjs, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Options to pass to the animationstart listener. */\n    var listenerOptions = i1.normalizePassiveListenerOptions({ passive: true });\n    /**\n     * An injectable service that can be used to monitor the autofill state of an input.\n     * Based on the following blog post:\n     * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n     */\n    var AutofillMonitor = /** @class */ (function () {\n        function AutofillMonitor(_platform, _ngZone) {\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._monitoredElements = new Map();\n        }\n        AutofillMonitor.prototype.monitor = function (elementOrRef) {\n            var _this = this;\n            if (!this._platform.isBrowser) {\n                return rxjs.EMPTY;\n            }\n            var element = coercion.coerceElement(elementOrRef);\n            var info = this._monitoredElements.get(element);\n            if (info) {\n                return info.subject.asObservable();\n            }\n            var result = new rxjs.Subject();\n            var cssClass = 'cdk-text-field-autofilled';\n            var listener = (function (event) {\n                // Animation events fire on initial element render, we check for the presence of the autofill\n                // CSS class to make sure this is a real change in state, not just the initial render before\n                // we fire off events.\n                if (event.animationName === 'cdk-text-field-autofill-start' &&\n                    !element.classList.contains(cssClass)) {\n                    element.classList.add(cssClass);\n                    _this._ngZone.run(function () { return result.next({ target: event.target, isAutofilled: true }); });\n                }\n                else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                    element.classList.contains(cssClass)) {\n                    element.classList.remove(cssClass);\n                    _this._ngZone.run(function () { return result.next({ target: event.target, isAutofilled: false }); });\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                element.addEventListener('animationstart', listener, listenerOptions);\n                element.classList.add('cdk-text-field-autofill-monitored');\n            });\n            this._monitoredElements.set(element, {\n                subject: result,\n                unlisten: function () {\n                    element.removeEventListener('animationstart', listener, listenerOptions);\n                }\n            });\n            return result.asObservable();\n        };\n        AutofillMonitor.prototype.stopMonitoring = function (elementOrRef) {\n            var element = coercion.coerceElement(elementOrRef);\n            var info = this._monitoredElements.get(element);\n            if (info) {\n                info.unlisten();\n                info.subject.complete();\n                element.classList.remove('cdk-text-field-autofill-monitored');\n                element.classList.remove('cdk-text-field-autofilled');\n                this._monitoredElements.delete(element);\n            }\n        };\n        AutofillMonitor.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._monitoredElements.forEach(function (_info, element) { return _this.stopMonitoring(element); });\n        };\n        AutofillMonitor.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        AutofillMonitor.ctorParameters = function () { return [\n            { type: i1.Platform },\n            { type: i0.NgZone }\n        ]; };\n        AutofillMonitor.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n        return AutofillMonitor;\n    }());\n    /** A directive that can be used to monitor the autofill state of an input. */\n    var CdkAutofill = /** @class */ (function () {\n        function CdkAutofill(_elementRef, _autofillMonitor) {\n            this._elementRef = _elementRef;\n            this._autofillMonitor = _autofillMonitor;\n            /** Emits when the autofill state of the element changes. */\n            this.cdkAutofill = new i0.EventEmitter();\n        }\n        CdkAutofill.prototype.ngOnInit = function () {\n            var _this = this;\n            this._autofillMonitor\n                .monitor(this._elementRef)\n                .subscribe(function (event) { return _this.cdkAutofill.emit(event); });\n        };\n        CdkAutofill.prototype.ngOnDestroy = function () {\n            this._autofillMonitor.stopMonitoring(this._elementRef);\n        };\n        CdkAutofill.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkAutofill]',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkAutofill.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: AutofillMonitor }\n        ]; };\n        CdkAutofill.propDecorators = {\n            cdkAutofill: [{ type: i0.Output }]\n        };\n        return CdkAutofill;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Directive to automatically resize a textarea to fit its content. */\n    var CdkTextareaAutosize = /** @class */ (function () {\n        function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n            this._elementRef = _elementRef;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._destroyed = new rxjs.Subject();\n            this._enabled = true;\n            /**\n             * Value of minRows as of last resize. If the minRows has decreased, the\n             * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n             * does not have the same problem because it does not affect the textarea's scrollHeight.\n             */\n            this._previousMinRows = -1;\n            this._textareaElement = this._elementRef.nativeElement;\n        }\n        Object.defineProperty(CdkTextareaAutosize.prototype, \"minRows\", {\n            /** Minimum amount of rows in the textarea. */\n            get: function () { return this._minRows; },\n            set: function (value) {\n                this._minRows = value;\n                this._setMinHeight();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTextareaAutosize.prototype, \"maxRows\", {\n            /** Maximum amount of rows in the textarea. */\n            get: function () { return this._maxRows; },\n            set: function (value) {\n                this._maxRows = value;\n                this._setMaxHeight();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTextareaAutosize.prototype, \"enabled\", {\n            /** Whether autosizing is enabled or not */\n            get: function () { return this._enabled; },\n            set: function (value) {\n                value = coercion.coerceBooleanProperty(value);\n                // Only act if the actual value changed. This specifically helps to not run\n                // resizeToFitContent too early (i.e. before ngAfterViewInit)\n                if (this._enabled !== value) {\n                    (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Sets the minimum height of the textarea as determined by minRows. */\n        CdkTextareaAutosize.prototype._setMinHeight = function () {\n            var minHeight = this.minRows && this._cachedLineHeight ?\n                this.minRows * this._cachedLineHeight + \"px\" : null;\n            if (minHeight) {\n                this._textareaElement.style.minHeight = minHeight;\n            }\n        };\n        /** Sets the maximum height of the textarea as determined by maxRows. */\n        CdkTextareaAutosize.prototype._setMaxHeight = function () {\n            var maxHeight = this.maxRows && this._cachedLineHeight ?\n                this.maxRows * this._cachedLineHeight + \"px\" : null;\n            if (maxHeight) {\n                this._textareaElement.style.maxHeight = maxHeight;\n            }\n        };\n        CdkTextareaAutosize.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            if (this._platform.isBrowser) {\n                // Remember the height which we started with in case autosizing is disabled\n                this._initialHeight = this._textareaElement.style.height;\n                this.resizeToFitContent();\n                this._ngZone.runOutsideAngular(function () {\n                    rxjs.fromEvent(window, 'resize')\n                        .pipe(operators.auditTime(16), operators.takeUntil(_this._destroyed))\n                        .subscribe(function () { return _this.resizeToFitContent(true); });\n                });\n            }\n        };\n        CdkTextareaAutosize.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Cache the height of a single-row textarea if it has not already been cached.\n         *\n         * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n         * maxRows. For the initial version, we will assume that the height of a single line in the\n         * textarea does not ever change.\n         */\n        CdkTextareaAutosize.prototype._cacheTextareaLineHeight = function () {\n            if (this._cachedLineHeight) {\n                return;\n            }\n            // Use a clone element because we have to override some styles.\n            var textareaClone = this._textareaElement.cloneNode(false);\n            textareaClone.rows = 1;\n            // Use `position: absolute` so that this doesn't cause a browser layout and use\n            // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n            // would affect the height.\n            textareaClone.style.position = 'absolute';\n            textareaClone.style.visibility = 'hidden';\n            textareaClone.style.border = 'none';\n            textareaClone.style.padding = '0';\n            textareaClone.style.height = '';\n            textareaClone.style.minHeight = '';\n            textareaClone.style.maxHeight = '';\n            // In Firefox it happens that textarea elements are always bigger than the specified amount\n            // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n            // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n            // to hidden. This ensures that there is no invalid calculation of the line height.\n            // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n            textareaClone.style.overflow = 'hidden';\n            this._textareaElement.parentNode.appendChild(textareaClone);\n            this._cachedLineHeight = textareaClone.clientHeight;\n            this._textareaElement.parentNode.removeChild(textareaClone);\n            // Min and max heights have to be re-calculated if the cached line height changes\n            this._setMinHeight();\n            this._setMaxHeight();\n        };\n        CdkTextareaAutosize.prototype.ngDoCheck = function () {\n            if (this._platform.isBrowser) {\n                this.resizeToFitContent();\n            }\n        };\n        /**\n         * Resize the textarea to fit its content.\n         * @param force Whether to force a height recalculation. By default the height will be\n         *    recalculated only if the value changed since the last call.\n         */\n        CdkTextareaAutosize.prototype.resizeToFitContent = function (force) {\n            var _this = this;\n            if (force === void 0) { force = false; }\n            // If autosizing is disabled, just skip everything else\n            if (!this._enabled) {\n                return;\n            }\n            this._cacheTextareaLineHeight();\n            // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n            // in checking the height of the textarea.\n            if (!this._cachedLineHeight) {\n                return;\n            }\n            var textarea = this._elementRef.nativeElement;\n            var value = textarea.value;\n            // Only resize if the value or minRows have changed since these calculations can be expensive.\n            if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n                return;\n            }\n            var placeholderText = textarea.placeholder;\n            // Reset the textarea height to auto in order to shrink back to its default size.\n            // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n            // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n            // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n            // need to be removed temporarily.\n            textarea.classList.add('cdk-textarea-autosize-measuring');\n            textarea.placeholder = '';\n            // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n            // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n            var height = textarea.scrollHeight - 4;\n            // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n            textarea.style.height = height + \"px\";\n            textarea.classList.remove('cdk-textarea-autosize-measuring');\n            textarea.placeholder = placeholderText;\n            this._ngZone.runOutsideAngular(function () {\n                if (typeof requestAnimationFrame !== 'undefined') {\n                    requestAnimationFrame(function () { return _this._scrollToCaretPosition(textarea); });\n                }\n                else {\n                    setTimeout(function () { return _this._scrollToCaretPosition(textarea); });\n                }\n            });\n            this._previousValue = value;\n            this._previousMinRows = this._minRows;\n        };\n        /**\n         * Resets the textarea to its original size\n         */\n        CdkTextareaAutosize.prototype.reset = function () {\n            // Do not try to change the textarea, if the initialHeight has not been determined yet\n            // This might potentially remove styles when reset() is called before ngAfterViewInit\n            if (this._initialHeight === undefined) {\n                return;\n            }\n            this._textareaElement.style.height = this._initialHeight;\n        };\n        CdkTextareaAutosize.prototype._noopInputHandler = function () {\n            // no-op handler that ensures we're running change detection on input events.\n        };\n        /**\n         * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n         * prevent it from scrolling to the caret position. We need to re-set the selection\n         * in order for it to scroll to the proper position.\n         */\n        CdkTextareaAutosize.prototype._scrollToCaretPosition = function (textarea) {\n            var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;\n            // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n            // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n            // between the time we requested the animation frame and when it was executed.\n            // Also note that we have to assert that the textarea is focused before we set the\n            // selection range. Setting the selection range on a non-focused textarea will cause\n            // it to receive focus on IE and Edge.\n            if (!this._destroyed.isStopped && document.activeElement === textarea) {\n                textarea.setSelectionRange(selectionStart, selectionEnd);\n            }\n        };\n        CdkTextareaAutosize.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'textarea[cdkTextareaAutosize]',\n                        exportAs: 'cdkTextareaAutosize',\n                        host: {\n                            'class': 'cdk-textarea-autosize',\n                            // Textarea elements that have the directive applied should have a single row by default.\n                            // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                            'rows': '1',\n                            '(input)': '_noopInputHandler()',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkTextareaAutosize.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: i1.Platform },\n            { type: i0.NgZone }\n        ]; };\n        CdkTextareaAutosize.propDecorators = {\n            minRows: [{ type: i0.Input, args: ['cdkAutosizeMinRows',] }],\n            maxRows: [{ type: i0.Input, args: ['cdkAutosizeMaxRows',] }],\n            enabled: [{ type: i0.Input, args: ['cdkTextareaAutosize',] }]\n        };\n        return CdkTextareaAutosize;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var TextFieldModule = /** @class */ (function () {\n        function TextFieldModule() {\n        }\n        TextFieldModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [CdkAutofill, CdkTextareaAutosize],\n                        imports: [i1.PlatformModule],\n                        exports: [CdkAutofill, CdkTextareaAutosize],\n                    },] }\n        ];\n        return TextFieldModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.AutofillMonitor = AutofillMonitor;\n    exports.CdkAutofill = CdkAutofill;\n    exports.CdkTextareaAutosize = CdkTextareaAutosize;\n    exports.TextFieldModule = TextFieldModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-text-field.umd.js.map\n"]}
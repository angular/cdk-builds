{"version":3,"sources":["src/cdk/cdk-clipboard.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","clipboard","common","core","this","i1","i0","PendingCopy","text","_document","textarea","_textarea","createElement","styles","style","opacity","position","left","top","setAttribute","value","body","appendChild","prototype","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","HTMLElement","focus","_a","destroy","parentNode","removeChild","undefined","Clipboard","document","pendingCopy","beginCopy","decorators","type","Injectable","args","providedIn","ctorParameters","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","Clipboard_Factory","ɵɵinject","token","CKD_COPY_TO_CLIPBOARD_CONFIG","InjectionToken","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","EventEmitter","_deprecatedCopied","_this","remainingAttempts_1","pending_1","attempt_1","runOutsideAngular","setTimeout","emit","Directive","selector","host","(click)","NgZone","Optional","propDecorators","Input","Output","ClipboardModule","NgModule","declarations","imports","CommonModule","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/clipboard', ['exports', '@angular/common', '@angular/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.clipboard = {}), global.ng.common, global.ng.core));\n}(this, (function (exports, i1, i0) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A pending copy-to-clipboard operation.\n     *\n     * The implementation of copying text to the clipboard modifies the DOM and\n     * forces a relayout. This relayout can take too long if the string is large,\n     * causing the execCommand('copy') to happen too long after the user clicked.\n     * This results in the browser refusing to copy. This object lets the\n     * relayout happen in a separate tick from copying by providing a copy function\n     * that can be called later.\n     *\n     * Destroy must be called when no longer in use, regardless of whether `copy` is\n     * called.\n     */\n    var PendingCopy = /** @class */ (function () {\n        function PendingCopy(text, _document) {\n            this._document = _document;\n            var textarea = this._textarea = this._document.createElement('textarea');\n            var styles = textarea.style;\n            // Hide the element for display and accessibility. Set an\n            // absolute position so the page layout isn't affected.\n            styles.opacity = '0';\n            styles.position = 'absolute';\n            styles.left = styles.top = '-999em';\n            textarea.setAttribute('aria-hidden', 'true');\n            textarea.value = text;\n            this._document.body.appendChild(textarea);\n        }\n        /** Finishes copying the text. */\n        PendingCopy.prototype.copy = function () {\n            var textarea = this._textarea;\n            var successful = false;\n            try { // Older browsers could throw if copy is not supported.\n                if (textarea) {\n                    var currentFocus = this._document.activeElement;\n                    textarea.select();\n                    textarea.setSelectionRange(0, textarea.value.length);\n                    successful = this._document.execCommand('copy');\n                    if (currentFocus && currentFocus instanceof HTMLElement) {\n                        currentFocus.focus();\n                    }\n                }\n            }\n            catch (_a) {\n                // Discard error.\n                // Initial setting of {@code successful} will represent failure here.\n            }\n            return successful;\n        };\n        /** Cleans up DOM changes used to perform the copy operation. */\n        PendingCopy.prototype.destroy = function () {\n            var textarea = this._textarea;\n            if (textarea) {\n                if (textarea.parentNode) {\n                    textarea.parentNode.removeChild(textarea);\n                }\n                this._textarea = undefined;\n            }\n        };\n        return PendingCopy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A service for copying text to the clipboard.\n     */\n    var Clipboard = /** @class */ (function () {\n        function Clipboard(document) {\n            this._document = document;\n        }\n        /**\n         * Copies the provided text into the user's clipboard.\n         *\n         * @param text The string to copy.\n         * @returns Whether the operation was successful.\n         */\n        Clipboard.prototype.copy = function (text) {\n            var pendingCopy = this.beginCopy(text);\n            var successful = pendingCopy.copy();\n            pendingCopy.destroy();\n            return successful;\n        };\n        /**\n         * Prepares a string to be copied later. This is useful for large strings\n         * which take too long to successfully render and be copied in the same tick.\n         *\n         * The caller must call `destroy` on the returned `PendingCopy`.\n         *\n         * @param text The string to copy.\n         * @returns the pending copy operation.\n         */\n        Clipboard.prototype.beginCopy = function (text) {\n            return new PendingCopy(text, this._document);\n        };\n        Clipboard.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        Clipboard.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        Clipboard.ɵprov = i0.ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(i0.ɵɵinject(i1.DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\n        return Clipboard;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\n    var CKD_COPY_TO_CLIPBOARD_CONFIG = new i0.InjectionToken('CKD_COPY_TO_CLIPBOARD_CONFIG');\n    /**\n     * Provides behavior for a button that when clicked copies content into user's\n     * clipboard.\n     */\n    var CdkCopyToClipboard = /** @class */ (function () {\n        function CdkCopyToClipboard(_clipboard, \n        /**\n         * @deprecated _ngZone parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        _ngZone, config) {\n            this._clipboard = _clipboard;\n            this._ngZone = _ngZone;\n            /** Content to be copied. */\n            this.text = '';\n            /**\n             * How many times to attempt to copy the text. This may be necessary for longer text, because\n             * the browser needs time to fill an intermediate textarea element and copy the content.\n             */\n            this.attempts = 1;\n            /**\n             * Emits when some text is copied to the clipboard. The\n             * emitted value indicates whether copying was successful.\n             */\n            this.copied = new i0.EventEmitter();\n            /**\n             * Emits when some text is copied to the clipboard. The\n             * emitted value indicates whether copying was successful.\n             * @deprecated Use `cdkCopyToClipboardCopied` instead.\n             * @breaking-change 10.0.0\n             */\n            this._deprecatedCopied = this.copied;\n            if (config && config.attempts != null) {\n                this.attempts = config.attempts;\n            }\n        }\n        /** Copies the current text to the clipboard. */\n        CdkCopyToClipboard.prototype.copy = function (attempts) {\n            var _this = this;\n            if (attempts === void 0) { attempts = this.attempts; }\n            if (attempts > 1) {\n                var remainingAttempts_1 = attempts;\n                var pending_1 = this._clipboard.beginCopy(this.text);\n                var attempt_1 = function () {\n                    var successful = pending_1.copy();\n                    if (!successful && --remainingAttempts_1) {\n                        // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n                        if (_this._ngZone) {\n                            _this._ngZone.runOutsideAngular(function () { return setTimeout(attempt_1); });\n                        }\n                        else {\n                            setTimeout(attempt_1);\n                        }\n                    }\n                    else {\n                        pending_1.destroy();\n                        _this.copied.emit(successful);\n                    }\n                };\n                attempt_1();\n            }\n            else {\n                this.copied.emit(this._clipboard.copy(this.text));\n            }\n        };\n        CdkCopyToClipboard.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkCopyToClipboard]',\n                        host: {\n                            '(click)': 'copy()',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkCopyToClipboard.ctorParameters = function () { return [\n            { type: Clipboard },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n        ]; };\n        CdkCopyToClipboard.propDecorators = {\n            text: [{ type: i0.Input, args: ['cdkCopyToClipboard',] }],\n            attempts: [{ type: i0.Input, args: ['cdkCopyToClipboardAttempts',] }],\n            copied: [{ type: i0.Output, args: ['cdkCopyToClipboardCopied',] }],\n            _deprecatedCopied: [{ type: i0.Output, args: ['copied',] }]\n        };\n        return CdkCopyToClipboard;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ClipboardModule = /** @class */ (function () {\n        function ClipboardModule() {\n        }\n        ClipboardModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [CdkCopyToClipboard],\n                        imports: [i1.CommonModule],\n                        exports: [CdkCopyToClipboard],\n                    },] }\n        ];\n        return ClipboardModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CKD_COPY_TO_CLIPBOARD_CONFIG = CKD_COPY_TO_CLIPBOARD_CONFIG;\n    exports.CdkCopyToClipboard = CdkCopyToClipboard;\n    exports.Clipboard = Clipboard;\n    exports.ClipboardModule = ClipboardModule;\n    exports.PendingCopy = PendingCopy;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-clipboard.umd.js.map\n"]}
{"version":3,"sources":["src/cdk/cdk-clipboard.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","clipboard","common","core","this","i1","i0","Clipboard","document","_document","prototype","copy","text","pendingCopy","beginCopy","successful","destroy","PendingCopy","decorators","type","Injectable","args","providedIn","ctorParameters","undefined","Inject","DOCUMENT","ngInjectableDef","ɵɵdefineInjectable","Clipboard_Factory","ɵɵinject","token","textarea","_textarea","createElement","styles","style","opacity","position","left","top","setAttribute","value","body","appendChild","currentFocus","activeElement","select","setSelectionRange","length","execCommand","HTMLElement","focus","_a","parentNode","removeChild","CdkCopyToClipboard","_clipboard","copied","EventEmitter","emit","Directive","selector","host","(click)","propDecorators","Input","Output","ClipboardModule","NgModule","declarations","imports","CommonModule","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/clipboard', ['exports', '@angular/common', '@angular/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.clipboard = {}), global.ng.common, global.ng.core));\n}(this, function (exports, i1, i0) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A service for copying text to the clipboard.\n     *\n     * Example usage:\n     *\n     * clipboard.copy(\"copy this text\");\n     */\n    var Clipboard = /** @class */ (function () {\n        function Clipboard(document) {\n            this._document = document;\n        }\n        /**\n         * Copies the provided text into the user's clipboard.\n         *\n         * @param text The string to copy.\n         * @returns Whether the operation was successful.\n         */\n        Clipboard.prototype.copy = function (text) {\n            var pendingCopy = this.beginCopy(text);\n            var successful = pendingCopy.copy();\n            pendingCopy.destroy();\n            return successful;\n        };\n        /**\n         * Prepares a string to be copied later. This is useful for large strings\n         * which take too long to successfully render and be copied in the same tick.\n         *\n         * The caller must call `destroy` on the returned `PendingCopy`.\n         *\n         * @param text The string to copy.\n         * @returns the pending copy operation.\n         */\n        Clipboard.prototype.beginCopy = function (text) {\n            return new PendingCopy(text, this._document);\n        };\n        Clipboard.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        Clipboard.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        Clipboard.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(i0.ɵɵinject(i1.DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\n        return Clipboard;\n    }());\n    /**\n     * A pending copy-to-clipboard operation.\n     *\n     * The implementation of copying text to the clipboard modifies the DOM and\n     * forces a relayout. This relayout can take too long if the string is large,\n     * causing the execCommand('copy') to happen too long after the user clicked.\n     * This results in the browser refusing to copy. This object lets the\n     * relayout happen in a separate tick from copying by providing a copy function\n     * that can be called later.\n     *\n     * Destroy must be called when no longer in use, regardless of whether `copy` is\n     * called.\n     */\n    var PendingCopy = /** @class */ (function () {\n        function PendingCopy(text, _document) {\n            this._document = _document;\n            var textarea = this._textarea = this._document.createElement('textarea');\n            var styles = textarea.style;\n            // Hide the element for display and accessibility. Set an\n            // absolute position so the page layout isn't affected.\n            styles.opacity = '0';\n            styles.position = 'absolute';\n            styles.left = styles.top = '-999em';\n            textarea.setAttribute('aria-hidden', 'true');\n            textarea.value = text;\n            this._document.body.appendChild(textarea);\n        }\n        /** Finishes copying the text. */\n        PendingCopy.prototype.copy = function () {\n            var textarea = this._textarea;\n            var successful = false;\n            try { // Older browsers could throw if copy is not supported.\n                if (textarea) {\n                    var currentFocus = this._document.activeElement;\n                    textarea.select();\n                    textarea.setSelectionRange(0, textarea.value.length);\n                    successful = this._document.execCommand('copy');\n                    if (currentFocus && currentFocus instanceof HTMLElement) {\n                        currentFocus.focus();\n                    }\n                }\n            }\n            catch (_a) {\n                // Discard error.\n                // Initial setting of {@code successful} will represent failure here.\n            }\n            return successful;\n        };\n        /** Cleans up DOM changes used to perform the copy operation. */\n        PendingCopy.prototype.destroy = function () {\n            var textarea = this._textarea;\n            if (textarea) {\n                if (textarea.parentNode) {\n                    textarea.parentNode.removeChild(textarea);\n                }\n                this._textarea = undefined;\n            }\n        };\n        return PendingCopy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides behavior for a button that when clicked copies content into user's\n     * clipboard.\n     *\n     * Example usage:\n     *\n     * `<button copyToClipboard=\"Content to be copied\">Copy me!</button>`\n     */\n    var CdkCopyToClipboard = /** @class */ (function () {\n        function CdkCopyToClipboard(_clipboard) {\n            this._clipboard = _clipboard;\n            /** Content to be copied. */\n            this.text = '';\n            /**\n             * Emits when some text is copied to the clipboard. The\n             * emitted value indicates whether copying was successful.\n             */\n            this.copied = new i0.EventEmitter();\n        }\n        /** Copies the current text to the clipboard. */\n        CdkCopyToClipboard.prototype.copy = function () {\n            this.copied.emit(this._clipboard.copy(this.text));\n        };\n        CdkCopyToClipboard.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkCopyToClipboard]',\n                        host: {\n                            '(click)': 'copy()',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkCopyToClipboard.ctorParameters = function () { return [\n            { type: Clipboard }\n        ]; };\n        CdkCopyToClipboard.propDecorators = {\n            text: [{ type: i0.Input, args: ['cdkCopyToClipboard',] }],\n            copied: [{ type: i0.Output }]\n        };\n        return CdkCopyToClipboard;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ClipboardModule = /** @class */ (function () {\n        function ClipboardModule() {\n        }\n        ClipboardModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [CdkCopyToClipboard],\n                        imports: [i1.CommonModule],\n                        exports: [CdkCopyToClipboard],\n                    },] }\n        ];\n        return ClipboardModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.Clipboard = Clipboard;\n    exports.PendingCopy = PendingCopy;\n    exports.ClipboardModule = ClipboardModule;\n    exports.CdkCopyToClipboard = CdkCopyToClipboard;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-clipboard.umd.js.map\n"]}
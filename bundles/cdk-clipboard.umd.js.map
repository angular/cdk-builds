{"version":3,"file":"cdk-clipboard.umd.js","sources":["../../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../../src/cdk/clipboard/clipboard.ts","../../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../../src/cdk/clipboard/public-api.ts","../../../../../../src/cdk/clipboard/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus && currentFocus instanceof HTMLElement) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\n\nimport {Clipboard} from './clipboard';\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   * @deprecated Use `cdkCopyToClipboardCopied` instead.\n   * @breaking-change 10.0.0\n   */\n  @Output('copied') _deprecatedCopied = this.copied;\n\n  constructor(private readonly _clipboard: Clipboard) {}\n\n  /** Copies the current text to the clipboard. */\n  copy() {\n    this.copied.emit(this._clipboard.copy(this.text));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  imports: [CommonModule],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './clipboard';\nexport * from './clipboard-module';\nexport * from './copy-to-clipboard';\nexport * from './pending-copy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","Inject","DOCUMENT","EventEmitter","Directive","Input","Output","NgModule","CommonModule"],"mappings":"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"}
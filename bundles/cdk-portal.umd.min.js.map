{"version":3,"sources":["src/cdk/cdk-portal.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","portal","tslib","core","this","tslib_1","throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","ComponentPortal","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","__extends","TemplatePortal","template","context","templateRef","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","BasePortalHost","apply","arguments","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","length","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","DomPortalHost","CdkPortal","decorators","type","Directive","args","selector","exportAs","ctorParameters","TemplateRef","ViewContainerRef","TemplatePortalDirective","providers","provide","useExisting","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","EventEmitter","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","inputs","ComponentFactoryResolver","propDecorators","Output","PortalHostDirective","PortalModule","NgModule","declarations","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/portal', ['exports', 'tslib', '@angular/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.portal = {}), global.tslib, global.ng.core));\n}(this, function (exports, tslib_1, core) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Throws an exception when attempting to attach a null portal to a host.\n     * @docs-private\n     */\n    function throwNullPortalError() {\n        throw Error('Must provide a portal to attach');\n    }\n    /**\n     * Throws an exception when attempting to attach a portal to a host that is already attached.\n     * @docs-private\n     */\n    function throwPortalAlreadyAttachedError() {\n        throw Error('Host already has a portal attached');\n    }\n    /**\n     * Throws an exception when attempting to attach a portal to an already-disposed host.\n     * @docs-private\n     */\n    function throwPortalOutletAlreadyDisposedError() {\n        throw Error('This PortalOutlet has already been disposed');\n    }\n    /**\n     * Throws an exception when attempting to attach an unknown portal type.\n     * @docs-private\n     */\n    function throwUnknownPortalTypeError() {\n        throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n            'a ComponentPortal or a TemplatePortal.');\n    }\n    /**\n     * Throws an exception when attempting to attach a portal to a null host.\n     * @docs-private\n     */\n    function throwNullPortalOutletError() {\n        throw Error('Attempting to attach a portal to a null PortalOutlet');\n    }\n    /**\n     * Throws an exception when attempting to detach a portal that is not attached.\n     * @docs-private\n     */\n    function throwNoPortalAttachedError() {\n        throw Error('Attempting to detach a portal that is not attached to a host');\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `Portal` is something that you want to render somewhere else.\n     * It can be attach to / detached from a `PortalOutlet`.\n     */\n    var Portal = /** @class */ (function () {\n        function Portal() {\n        }\n        /** Attach this portal to a host. */\n        Portal.prototype.attach = function (host) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            this._attachedHost = host;\n            return host.attach(this);\n        };\n        /** Detach this portal from its host */\n        Portal.prototype.detach = function () {\n            var host = this._attachedHost;\n            if (host == null) {\n                throwNoPortalAttachedError();\n            }\n            else {\n                this._attachedHost = null;\n                host.detach();\n            }\n        };\n        Object.defineProperty(Portal.prototype, \"isAttached\", {\n            /** Whether this portal is attached to a host. */\n            get: function () {\n                return this._attachedHost != null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n         * the PortalOutlet when it is performing an `attach()` or `detach()`.\n         */\n        Portal.prototype.setAttachedHost = function (host) {\n            this._attachedHost = host;\n        };\n        return Portal;\n    }());\n    /**\n     * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n     */\n    var ComponentPortal = /** @class */ (function (_super) {\n        tslib_1.__extends(ComponentPortal, _super);\n        function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n            var _this = _super.call(this) || this;\n            _this.component = component;\n            _this.viewContainerRef = viewContainerRef;\n            _this.injector = injector;\n            _this.componentFactoryResolver = componentFactoryResolver;\n            return _this;\n        }\n        return ComponentPortal;\n    }(Portal));\n    /**\n     * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n     */\n    var TemplatePortal = /** @class */ (function (_super) {\n        tslib_1.__extends(TemplatePortal, _super);\n        function TemplatePortal(template, viewContainerRef, context) {\n            var _this = _super.call(this) || this;\n            _this.templateRef = template;\n            _this.viewContainerRef = viewContainerRef;\n            _this.context = context;\n            return _this;\n        }\n        Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n            get: function () {\n                return this.templateRef.elementRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Attach the portal to the provided `PortalOutlet`.\n         * When a context is provided it will override the `context` property of the `TemplatePortal`\n         * instance.\n         */\n        TemplatePortal.prototype.attach = function (host, context) {\n            if (context === void 0) { context = this.context; }\n            this.context = context;\n            return _super.prototype.attach.call(this, host);\n        };\n        TemplatePortal.prototype.detach = function () {\n            this.context = undefined;\n            return _super.prototype.detach.call(this);\n        };\n        return TemplatePortal;\n    }(Portal));\n    /**\n     * Partial implementation of PortalOutlet that handles attaching\n     * ComponentPortal and TemplatePortal.\n     */\n    var BasePortalOutlet = /** @class */ (function () {\n        function BasePortalOutlet() {\n            /** Whether this host has already been permanently disposed. */\n            this._isDisposed = false;\n        }\n        /** Whether this host has an attached portal. */\n        BasePortalOutlet.prototype.hasAttached = function () {\n            return !!this._attachedPortal;\n        };\n        /** Attaches a portal. */\n        BasePortalOutlet.prototype.attach = function (portal) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n            if (portal instanceof ComponentPortal) {\n                this._attachedPortal = portal;\n                return this.attachComponentPortal(portal);\n            }\n            else if (portal instanceof TemplatePortal) {\n                this._attachedPortal = portal;\n                return this.attachTemplatePortal(portal);\n            }\n            throwUnknownPortalTypeError();\n        };\n        /** Detaches a previously attached portal. */\n        BasePortalOutlet.prototype.detach = function () {\n            if (this._attachedPortal) {\n                this._attachedPortal.setAttachedHost(null);\n                this._attachedPortal = null;\n            }\n            this._invokeDisposeFn();\n        };\n        /** Permanently dispose of this portal host. */\n        BasePortalOutlet.prototype.dispose = function () {\n            if (this.hasAttached()) {\n                this.detach();\n            }\n            this._invokeDisposeFn();\n            this._isDisposed = true;\n        };\n        /** @docs-private */\n        BasePortalOutlet.prototype.setDisposeFn = function (fn) {\n            this._disposeFn = fn;\n        };\n        BasePortalOutlet.prototype._invokeDisposeFn = function () {\n            if (this._disposeFn) {\n                this._disposeFn();\n                this._disposeFn = null;\n            }\n        };\n        return BasePortalOutlet;\n    }());\n    /**\n     * @deprecated Use `BasePortalOutlet` instead.\n     * @breaking-change 9.0.0\n     */\n    var BasePortalHost = /** @class */ (function (_super) {\n        tslib_1.__extends(BasePortalHost, _super);\n        function BasePortalHost() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return BasePortalHost;\n    }(BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n     * application context.\n     */\n    var DomPortalOutlet = /** @class */ (function (_super) {\n        tslib_1.__extends(DomPortalOutlet, _super);\n        function DomPortalOutlet(\n        /** Element into which the content is projected. */\n        outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n            var _this = _super.call(this) || this;\n            _this.outletElement = outletElement;\n            _this._componentFactoryResolver = _componentFactoryResolver;\n            _this._appRef = _appRef;\n            _this._defaultInjector = _defaultInjector;\n            return _this;\n        }\n        /**\n         * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n         * @param portal Portal to be attached\n         * @returns Reference to the created component.\n         */\n        DomPortalOutlet.prototype.attachComponentPortal = function (portal) {\n            var _this = this;\n            var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n            var componentFactory = resolver.resolveComponentFactory(portal.component);\n            var componentRef;\n            // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n            // for the component (in terms of Angular's component tree, not rendering).\n            // When the ViewContainerRef is missing, we use the factory to create the component directly\n            // and then manually attach the view to the application.\n            if (portal.viewContainerRef) {\n                componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n                this.setDisposeFn(function () { return componentRef.destroy(); });\n            }\n            else {\n                componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n                this._appRef.attachView(componentRef.hostView);\n                this.setDisposeFn(function () {\n                    _this._appRef.detachView(componentRef.hostView);\n                    componentRef.destroy();\n                });\n            }\n            // At this point the component has been instantiated, so we move it to the location in the DOM\n            // where we want it to be rendered.\n            this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n            return componentRef;\n        };\n        /**\n         * Attaches a template portal to the DOM as an embedded view.\n         * @param portal Portal to be attached.\n         * @returns Reference to the created embedded view.\n         */\n        DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n            var _this = this;\n            var viewContainer = portal.viewContainerRef;\n            var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n            viewRef.detectChanges();\n            // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n            // But for the DomPortalOutlet the view can be added everywhere in the DOM\n            // (e.g Overlay Container) To move the view to the specified host element. We just\n            // re-append the existing root nodes.\n            viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n            this.setDisposeFn((function () {\n                var index = viewContainer.indexOf(viewRef);\n                if (index !== -1) {\n                    viewContainer.remove(index);\n                }\n            }));\n            // TODO(jelbourn): Return locals from view.\n            return viewRef;\n        };\n        /**\n         * Clears out a portal from the DOM.\n         */\n        DomPortalOutlet.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            if (this.outletElement.parentNode != null) {\n                this.outletElement.parentNode.removeChild(this.outletElement);\n            }\n        };\n        /** Gets the root HTMLElement for an instantiated component. */\n        DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {\n            return componentRef.hostView.rootNodes[0];\n        };\n        return DomPortalOutlet;\n    }(BasePortalOutlet));\n    /**\n     * @deprecated Use `DomPortalOutlet` instead.\n     * @breaking-change 9.0.0\n     */\n    var DomPortalHost = /** @class */ (function (_super) {\n        tslib_1.__extends(DomPortalHost, _super);\n        function DomPortalHost() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return DomPortalHost;\n    }(DomPortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n     * the directive instance itself can be attached to a host, enabling declarative use of portals.\n     */\n    var CdkPortal = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkPortal, _super);\n        function CdkPortal(templateRef, viewContainerRef) {\n            return _super.call(this, templateRef, viewContainerRef) || this;\n        }\n        CdkPortal.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkPortal]',\n                        exportAs: 'cdkPortal',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkPortal.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.ViewContainerRef }\n        ]; };\n        return CdkPortal;\n    }(TemplatePortal));\n    /**\n     * @deprecated Use `CdkPortal` instead.\n     * @breaking-change 9.0.0\n     */\n    var TemplatePortalDirective = /** @class */ (function (_super) {\n        tslib_1.__extends(TemplatePortalDirective, _super);\n        function TemplatePortalDirective() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TemplatePortalDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdk-portal], [portal]',\n                        exportAs: 'cdkPortal',\n                        providers: [{\n                                provide: CdkPortal,\n                                useExisting: TemplatePortalDirective\n                            }]\n                    },] }\n        ];\n        return TemplatePortalDirective;\n    }(CdkPortal));\n    /**\n     * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n     * directly attached to it, enabling declarative use.\n     *\n     * Usage:\n     * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n     */\n    var CdkPortalOutlet = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkPortalOutlet, _super);\n        function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n            var _this = _super.call(this) || this;\n            _this._componentFactoryResolver = _componentFactoryResolver;\n            _this._viewContainerRef = _viewContainerRef;\n            /** Whether the portal component is initialized. */\n            _this._isInitialized = false;\n            /** Emits when a portal is attached to the outlet. */\n            _this.attached = new core.EventEmitter();\n            return _this;\n        }\n        Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n            /** Portal associated with the Portal outlet. */\n            get: function () {\n                return this._attachedPortal;\n            },\n            set: function (portal) {\n                // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n                // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n                // and attach a portal programmatically in the parent component. When Angular does the first CD\n                // round, it will fire the setter with empty string, causing the user's content to be cleared.\n                if (this.hasAttached() && !portal && !this._isInitialized) {\n                    return;\n                }\n                if (this.hasAttached()) {\n                    _super.prototype.detach.call(this);\n                }\n                if (portal) {\n                    _super.prototype.attach.call(this, portal);\n                }\n                this._attachedPortal = portal;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n            /** Component or view reference that is attached to the portal. */\n            get: function () {\n                return this._attachedRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkPortalOutlet.prototype.ngOnInit = function () {\n            this._isInitialized = true;\n        };\n        CdkPortalOutlet.prototype.ngOnDestroy = function () {\n            _super.prototype.dispose.call(this);\n            this._attachedPortal = null;\n            this._attachedRef = null;\n        };\n        /**\n         * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n         *\n         * @param portal Portal to be attached to the portal outlet.\n         * @returns Reference to the created component.\n         */\n        CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {\n            portal.setAttachedHost(this);\n            // If the portal specifies an origin, use that as the logical location of the component\n            // in the application tree. Otherwise use the location of this PortalOutlet.\n            var viewContainerRef = portal.viewContainerRef != null ?\n                portal.viewContainerRef :\n                this._viewContainerRef;\n            var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n            var componentFactory = resolver.resolveComponentFactory(portal.component);\n            var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n            _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n            this._attachedPortal = portal;\n            this._attachedRef = ref;\n            this.attached.emit(ref);\n            return ref;\n        };\n        /**\n         * Attach the given TemplatePortal to this PortlHost as an embedded View.\n         * @param portal Portal to be attached.\n         * @returns Reference to the created embedded view.\n         */\n        CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n            var _this = this;\n            portal.setAttachedHost(this);\n            var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n            _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n            this._attachedPortal = portal;\n            this._attachedRef = viewRef;\n            this.attached.emit(viewRef);\n            return viewRef;\n        };\n        CdkPortalOutlet.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkPortalOutlet]',\n                        exportAs: 'cdkPortalOutlet',\n                        inputs: ['portal: cdkPortalOutlet']\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkPortalOutlet.ctorParameters = function () { return [\n            { type: core.ComponentFactoryResolver },\n            { type: core.ViewContainerRef }\n        ]; };\n        CdkPortalOutlet.propDecorators = {\n            attached: [{ type: core.Output }]\n        };\n        return CdkPortalOutlet;\n    }(BasePortalOutlet));\n    /**\n     * @deprecated Use `CdkPortalOutlet` instead.\n     * @breaking-change 9.0.0\n     */\n    var PortalHostDirective = /** @class */ (function (_super) {\n        tslib_1.__extends(PortalHostDirective, _super);\n        function PortalHostDirective() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PortalHostDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkPortalHost], [portalHost]',\n                        exportAs: 'cdkPortalHost',\n                        inputs: ['portal: cdkPortalHost'],\n                        providers: [{\n                                provide: CdkPortalOutlet,\n                                useExisting: PortalHostDirective\n                            }]\n                    },] }\n        ];\n        return PortalHostDirective;\n    }(CdkPortalOutlet));\n    var PortalModule = /** @class */ (function () {\n        function PortalModule() {\n        }\n        PortalModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                        declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    },] }\n        ];\n        return PortalModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Custom injector to be used when providing custom\n     * injection tokens to components inside a portal.\n     * @docs-private\n     */\n    var PortalInjector = /** @class */ (function () {\n        function PortalInjector(_parentInjector, _customTokens) {\n            this._parentInjector = _parentInjector;\n            this._customTokens = _customTokens;\n        }\n        PortalInjector.prototype.get = function (token, notFoundValue) {\n            var value = this._customTokens.get(token);\n            if (typeof value !== 'undefined') {\n                return value;\n            }\n            return this._parentInjector.get(token, notFoundValue);\n        };\n        return PortalInjector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.Portal = Portal;\n    exports.ComponentPortal = ComponentPortal;\n    exports.TemplatePortal = TemplatePortal;\n    exports.BasePortalOutlet = BasePortalOutlet;\n    exports.BasePortalHost = BasePortalHost;\n    exports.DomPortalOutlet = DomPortalOutlet;\n    exports.DomPortalHost = DomPortalHost;\n    exports.CdkPortal = CdkPortal;\n    exports.TemplatePortalDirective = TemplatePortalDirective;\n    exports.CdkPortalOutlet = CdkPortalOutlet;\n    exports.PortalHostDirective = PortalHostDirective;\n    exports.PortalModule = PortalModule;\n    exports.PortalInjector = PortalInjector;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-portal.umd.js.map\n"]}
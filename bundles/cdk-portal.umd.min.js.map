{"version":3,"sources":["src/cdk/cdk-portal.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","portal","tslib","core","common","this","throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","ComponentPortal","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","__extends","TemplatePortal","template","context","templateRef","elementRef","undefined","DomPortal","element","ElementRef","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","BasePortalHost","apply","arguments","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","appendChild","replaceChild","componentRef","componentFactory","resolveComponentFactory","createComponent","length","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","removeChild","DomPortalHost","CdkPortal","decorators","type","Directive","args","selector","exportAs","ctorParameters","TemplateRef","ViewContainerRef","TemplatePortalDirective","providers","provide","useExisting","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","EventEmitter","_getRootNode","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","nodeType","ELEMENT_NODE","inputs","ComponentFactoryResolver","Inject","DOCUMENT","propDecorators","Output","PortalHostDirective","PortalModule","NgModule","declarations","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/portal', ['exports', 'tslib', '@angular/core', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.portal = {}), global.tslib, global.ng.core, global.ng.common));\n}(this, (function (exports, tslib, core, common) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Throws an exception when attempting to attach a null portal to a host.\n     * @docs-private\n     */\n    function throwNullPortalError() {\n        throw Error('Must provide a portal to attach');\n    }\n    /**\n     * Throws an exception when attempting to attach a portal to a host that is already attached.\n     * @docs-private\n     */\n    function throwPortalAlreadyAttachedError() {\n        throw Error('Host already has a portal attached');\n    }\n    /**\n     * Throws an exception when attempting to attach a portal to an already-disposed host.\n     * @docs-private\n     */\n    function throwPortalOutletAlreadyDisposedError() {\n        throw Error('This PortalOutlet has already been disposed');\n    }\n    /**\n     * Throws an exception when attempting to attach an unknown portal type.\n     * @docs-private\n     */\n    function throwUnknownPortalTypeError() {\n        throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n            'a ComponentPortal or a TemplatePortal.');\n    }\n    /**\n     * Throws an exception when attempting to attach a portal to a null host.\n     * @docs-private\n     */\n    function throwNullPortalOutletError() {\n        throw Error('Attempting to attach a portal to a null PortalOutlet');\n    }\n    /**\n     * Throws an exception when attempting to detach a portal that is not attached.\n     * @docs-private\n     */\n    function throwNoPortalAttachedError() {\n        throw Error('Attempting to detach a portal that is not attached to a host');\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `Portal` is something that you want to render somewhere else.\n     * It can be attach to / detached from a `PortalOutlet`.\n     */\n    var Portal = /** @class */ (function () {\n        function Portal() {\n        }\n        /** Attach this portal to a host. */\n        Portal.prototype.attach = function (host) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            this._attachedHost = host;\n            return host.attach(this);\n        };\n        /** Detach this portal from its host */\n        Portal.prototype.detach = function () {\n            var host = this._attachedHost;\n            if (host == null) {\n                throwNoPortalAttachedError();\n            }\n            else {\n                this._attachedHost = null;\n                host.detach();\n            }\n        };\n        Object.defineProperty(Portal.prototype, \"isAttached\", {\n            /** Whether this portal is attached to a host. */\n            get: function () {\n                return this._attachedHost != null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n         * the PortalOutlet when it is performing an `attach()` or `detach()`.\n         */\n        Portal.prototype.setAttachedHost = function (host) {\n            this._attachedHost = host;\n        };\n        return Portal;\n    }());\n    /**\n     * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n     */\n    var ComponentPortal = /** @class */ (function (_super) {\n        tslib.__extends(ComponentPortal, _super);\n        function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n            var _this = _super.call(this) || this;\n            _this.component = component;\n            _this.viewContainerRef = viewContainerRef;\n            _this.injector = injector;\n            _this.componentFactoryResolver = componentFactoryResolver;\n            return _this;\n        }\n        return ComponentPortal;\n    }(Portal));\n    /**\n     * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n     */\n    var TemplatePortal = /** @class */ (function (_super) {\n        tslib.__extends(TemplatePortal, _super);\n        function TemplatePortal(template, viewContainerRef, context) {\n            var _this = _super.call(this) || this;\n            _this.templateRef = template;\n            _this.viewContainerRef = viewContainerRef;\n            _this.context = context;\n            return _this;\n        }\n        Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n            get: function () {\n                return this.templateRef.elementRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Attach the portal to the provided `PortalOutlet`.\n         * When a context is provided it will override the `context` property of the `TemplatePortal`\n         * instance.\n         */\n        TemplatePortal.prototype.attach = function (host, context) {\n            if (context === void 0) { context = this.context; }\n            this.context = context;\n            return _super.prototype.attach.call(this, host);\n        };\n        TemplatePortal.prototype.detach = function () {\n            this.context = undefined;\n            return _super.prototype.detach.call(this);\n        };\n        return TemplatePortal;\n    }(Portal));\n    /**\n     * A `DomPortal` is a portal whose DOM element will be taken from its current position\n     * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n     * will be restored to its original position.\n     */\n    var DomPortal = /** @class */ (function (_super) {\n        tslib.__extends(DomPortal, _super);\n        function DomPortal(element) {\n            var _this = _super.call(this) || this;\n            _this.element = element instanceof core.ElementRef ? element.nativeElement : element;\n            return _this;\n        }\n        return DomPortal;\n    }(Portal));\n    /**\n     * Partial implementation of PortalOutlet that handles attaching\n     * ComponentPortal and TemplatePortal.\n     */\n    var BasePortalOutlet = /** @class */ (function () {\n        function BasePortalOutlet() {\n            /** Whether this host has already been permanently disposed. */\n            this._isDisposed = false;\n            // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n            this.attachDomPortal = null;\n        }\n        /** Whether this host has an attached portal. */\n        BasePortalOutlet.prototype.hasAttached = function () {\n            return !!this._attachedPortal;\n        };\n        /** Attaches a portal. */\n        BasePortalOutlet.prototype.attach = function (portal) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n            if (portal instanceof ComponentPortal) {\n                this._attachedPortal = portal;\n                return this.attachComponentPortal(portal);\n            }\n            else if (portal instanceof TemplatePortal) {\n                this._attachedPortal = portal;\n                return this.attachTemplatePortal(portal);\n                // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n            }\n            else if (this.attachDomPortal && portal instanceof DomPortal) {\n                this._attachedPortal = portal;\n                return this.attachDomPortal(portal);\n            }\n            throwUnknownPortalTypeError();\n        };\n        /** Detaches a previously attached portal. */\n        BasePortalOutlet.prototype.detach = function () {\n            if (this._attachedPortal) {\n                this._attachedPortal.setAttachedHost(null);\n                this._attachedPortal = null;\n            }\n            this._invokeDisposeFn();\n        };\n        /** Permanently dispose of this portal host. */\n        BasePortalOutlet.prototype.dispose = function () {\n            if (this.hasAttached()) {\n                this.detach();\n            }\n            this._invokeDisposeFn();\n            this._isDisposed = true;\n        };\n        /** @docs-private */\n        BasePortalOutlet.prototype.setDisposeFn = function (fn) {\n            this._disposeFn = fn;\n        };\n        BasePortalOutlet.prototype._invokeDisposeFn = function () {\n            if (this._disposeFn) {\n                this._disposeFn();\n                this._disposeFn = null;\n            }\n        };\n        return BasePortalOutlet;\n    }());\n    /**\n     * @deprecated Use `BasePortalOutlet` instead.\n     * @breaking-change 9.0.0\n     */\n    var BasePortalHost = /** @class */ (function (_super) {\n        tslib.__extends(BasePortalHost, _super);\n        function BasePortalHost() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return BasePortalHost;\n    }(BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n     * application context.\n     */\n    var DomPortalOutlet = /** @class */ (function (_super) {\n        tslib.__extends(DomPortalOutlet, _super);\n        function DomPortalOutlet(\n        /** Element into which the content is projected. */\n        outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n        /**\n         * @deprecated `_document` Parameter to be made required.\n         * @breaking-change 10.0.0\n         */\n        _document) {\n            var _this = _super.call(this) || this;\n            _this.outletElement = outletElement;\n            _this._componentFactoryResolver = _componentFactoryResolver;\n            _this._appRef = _appRef;\n            _this._defaultInjector = _defaultInjector;\n            /**\n             * Attaches a DOM portal by transferring its content into the outlet.\n             * @param portal Portal to be attached.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            _this.attachDomPortal = function (portal) {\n                // @breaking-change 10.0.0 Remove check and error once the\n                // `_document` constructor parameter is required.\n                if (!_this._document) {\n                    throw Error('Cannot attach DOM portal without _document constructor parameter');\n                }\n                var element = portal.element;\n                if (!element.parentNode) {\n                    throw Error('DOM portal content must be attached to a parent node.');\n                }\n                // Anchor used to save the element's previous position so\n                // that we can restore it when the portal is detached.\n                var anchorNode = _this._document.createComment('dom-portal');\n                element.parentNode.insertBefore(anchorNode, element);\n                _this.outletElement.appendChild(element);\n                _super.prototype.setDisposeFn.call(_this, function () {\n                    // We can't use `replaceWith` here because IE doesn't support it.\n                    if (anchorNode.parentNode) {\n                        anchorNode.parentNode.replaceChild(element, anchorNode);\n                    }\n                });\n            };\n            _this._document = _document;\n            return _this;\n        }\n        /**\n         * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n         * @param portal Portal to be attached\n         * @returns Reference to the created component.\n         */\n        DomPortalOutlet.prototype.attachComponentPortal = function (portal) {\n            var _this = this;\n            var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n            var componentFactory = resolver.resolveComponentFactory(portal.component);\n            var componentRef;\n            // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n            // for the component (in terms of Angular's component tree, not rendering).\n            // When the ViewContainerRef is missing, we use the factory to create the component directly\n            // and then manually attach the view to the application.\n            if (portal.viewContainerRef) {\n                componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n                this.setDisposeFn(function () { return componentRef.destroy(); });\n            }\n            else {\n                componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n                this._appRef.attachView(componentRef.hostView);\n                this.setDisposeFn(function () {\n                    _this._appRef.detachView(componentRef.hostView);\n                    componentRef.destroy();\n                });\n            }\n            // At this point the component has been instantiated, so we move it to the location in the DOM\n            // where we want it to be rendered.\n            this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n            return componentRef;\n        };\n        /**\n         * Attaches a template portal to the DOM as an embedded view.\n         * @param portal Portal to be attached.\n         * @returns Reference to the created embedded view.\n         */\n        DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n            var _this = this;\n            var viewContainer = portal.viewContainerRef;\n            var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n            viewRef.detectChanges();\n            // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n            // But for the DomPortalOutlet the view can be added everywhere in the DOM\n            // (e.g Overlay Container) To move the view to the specified host element. We just\n            // re-append the existing root nodes.\n            viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n            this.setDisposeFn((function () {\n                var index = viewContainer.indexOf(viewRef);\n                if (index !== -1) {\n                    viewContainer.remove(index);\n                }\n            }));\n            // TODO(jelbourn): Return locals from view.\n            return viewRef;\n        };\n        /**\n         * Clears out a portal from the DOM.\n         */\n        DomPortalOutlet.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            if (this.outletElement.parentNode != null) {\n                this.outletElement.parentNode.removeChild(this.outletElement);\n            }\n        };\n        /** Gets the root HTMLElement for an instantiated component. */\n        DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {\n            return componentRef.hostView.rootNodes[0];\n        };\n        return DomPortalOutlet;\n    }(BasePortalOutlet));\n    /**\n     * @deprecated Use `DomPortalOutlet` instead.\n     * @breaking-change 9.0.0\n     */\n    var DomPortalHost = /** @class */ (function (_super) {\n        tslib.__extends(DomPortalHost, _super);\n        function DomPortalHost() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return DomPortalHost;\n    }(DomPortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n     * the directive instance itself can be attached to a host, enabling declarative use of portals.\n     */\n    var CdkPortal = /** @class */ (function (_super) {\n        tslib.__extends(CdkPortal, _super);\n        function CdkPortal(templateRef, viewContainerRef) {\n            return _super.call(this, templateRef, viewContainerRef) || this;\n        }\n        CdkPortal.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkPortal]',\n                        exportAs: 'cdkPortal',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkPortal.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.ViewContainerRef }\n        ]; };\n        return CdkPortal;\n    }(TemplatePortal));\n    /**\n     * @deprecated Use `CdkPortal` instead.\n     * @breaking-change 9.0.0\n     */\n    var TemplatePortalDirective = /** @class */ (function (_super) {\n        tslib.__extends(TemplatePortalDirective, _super);\n        function TemplatePortalDirective() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TemplatePortalDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdk-portal], [portal]',\n                        exportAs: 'cdkPortal',\n                        providers: [{\n                                provide: CdkPortal,\n                                useExisting: TemplatePortalDirective\n                            }]\n                    },] }\n        ];\n        return TemplatePortalDirective;\n    }(CdkPortal));\n    /**\n     * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n     * directly attached to it, enabling declarative use.\n     *\n     * Usage:\n     * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n     */\n    var CdkPortalOutlet = /** @class */ (function (_super) {\n        tslib.__extends(CdkPortalOutlet, _super);\n        function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef, \n        /**\n         * @deprecated `_document` parameter to be made required.\n         * @breaking-change 9.0.0\n         */\n        _document) {\n            var _this = _super.call(this) || this;\n            _this._componentFactoryResolver = _componentFactoryResolver;\n            _this._viewContainerRef = _viewContainerRef;\n            /** Whether the portal component is initialized. */\n            _this._isInitialized = false;\n            /** Emits when a portal is attached to the outlet. */\n            _this.attached = new core.EventEmitter();\n            /**\n             * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n             * @param portal Portal to be attached.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            _this.attachDomPortal = function (portal) {\n                // @breaking-change 9.0.0 Remove check and error once the\n                // `_document` constructor parameter is required.\n                if (!_this._document) {\n                    throw Error('Cannot attach DOM portal without _document constructor parameter');\n                }\n                var element = portal.element;\n                if (!element.parentNode) {\n                    throw Error('DOM portal content must be attached to a parent node.');\n                }\n                // Anchor used to save the element's previous position so\n                // that we can restore it when the portal is detached.\n                var anchorNode = _this._document.createComment('dom-portal');\n                portal.setAttachedHost(_this);\n                element.parentNode.insertBefore(anchorNode, element);\n                _this._getRootNode().appendChild(element);\n                _super.prototype.setDisposeFn.call(_this, function () {\n                    if (anchorNode.parentNode) {\n                        anchorNode.parentNode.replaceChild(element, anchorNode);\n                    }\n                });\n            };\n            _this._document = _document;\n            return _this;\n        }\n        Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n            /** Portal associated with the Portal outlet. */\n            get: function () {\n                return this._attachedPortal;\n            },\n            set: function (portal) {\n                // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n                // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n                // and attach a portal programmatically in the parent component. When Angular does the first CD\n                // round, it will fire the setter with empty string, causing the user's content to be cleared.\n                if (this.hasAttached() && !portal && !this._isInitialized) {\n                    return;\n                }\n                if (this.hasAttached()) {\n                    _super.prototype.detach.call(this);\n                }\n                if (portal) {\n                    _super.prototype.attach.call(this, portal);\n                }\n                this._attachedPortal = portal;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n            /** Component or view reference that is attached to the portal. */\n            get: function () {\n                return this._attachedRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkPortalOutlet.prototype.ngOnInit = function () {\n            this._isInitialized = true;\n        };\n        CdkPortalOutlet.prototype.ngOnDestroy = function () {\n            _super.prototype.dispose.call(this);\n            this._attachedPortal = null;\n            this._attachedRef = null;\n        };\n        /**\n         * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n         *\n         * @param portal Portal to be attached to the portal outlet.\n         * @returns Reference to the created component.\n         */\n        CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {\n            portal.setAttachedHost(this);\n            // If the portal specifies an origin, use that as the logical location of the component\n            // in the application tree. Otherwise use the location of this PortalOutlet.\n            var viewContainerRef = portal.viewContainerRef != null ?\n                portal.viewContainerRef :\n                this._viewContainerRef;\n            var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n            var componentFactory = resolver.resolveComponentFactory(portal.component);\n            var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n            // If we're using a view container that's different from the injected one (e.g. when the portal\n            // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n            // inside of the alternate view container.\n            if (viewContainerRef !== this._viewContainerRef) {\n                this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n            }\n            _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n            this._attachedPortal = portal;\n            this._attachedRef = ref;\n            this.attached.emit(ref);\n            return ref;\n        };\n        /**\n         * Attach the given TemplatePortal to this PortalHost as an embedded View.\n         * @param portal Portal to be attached.\n         * @returns Reference to the created embedded view.\n         */\n        CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n            var _this = this;\n            portal.setAttachedHost(this);\n            var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n            _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n            this._attachedPortal = portal;\n            this._attachedRef = viewRef;\n            this.attached.emit(viewRef);\n            return viewRef;\n        };\n        /** Gets the root node of the portal outlet. */\n        CdkPortalOutlet.prototype._getRootNode = function () {\n            var nativeElement = this._viewContainerRef.element.nativeElement;\n            // The directive could be set on a template which will result in a comment\n            // node being the root. Use the comment's parent node if that is the case.\n            return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n                nativeElement : nativeElement.parentNode);\n        };\n        CdkPortalOutlet.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkPortalOutlet]',\n                        exportAs: 'cdkPortalOutlet',\n                        inputs: ['portal: cdkPortalOutlet']\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkPortalOutlet.ctorParameters = function () { return [\n            { type: core.ComponentFactoryResolver },\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        CdkPortalOutlet.propDecorators = {\n            attached: [{ type: core.Output }]\n        };\n        return CdkPortalOutlet;\n    }(BasePortalOutlet));\n    /**\n     * @deprecated Use `CdkPortalOutlet` instead.\n     * @breaking-change 9.0.0\n     */\n    var PortalHostDirective = /** @class */ (function (_super) {\n        tslib.__extends(PortalHostDirective, _super);\n        function PortalHostDirective() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PortalHostDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkPortalHost], [portalHost]',\n                        exportAs: 'cdkPortalHost',\n                        inputs: ['portal: cdkPortalHost'],\n                        providers: [{\n                                provide: CdkPortalOutlet,\n                                useExisting: PortalHostDirective\n                            }]\n                    },] }\n        ];\n        return PortalHostDirective;\n    }(CdkPortalOutlet));\n    var PortalModule = /** @class */ (function () {\n        function PortalModule() {\n        }\n        PortalModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                        declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    },] }\n        ];\n        return PortalModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Custom injector to be used when providing custom\n     * injection tokens to components inside a portal.\n     * @docs-private\n     */\n    var PortalInjector = /** @class */ (function () {\n        function PortalInjector(_parentInjector, _customTokens) {\n            this._parentInjector = _parentInjector;\n            this._customTokens = _customTokens;\n        }\n        PortalInjector.prototype.get = function (token, notFoundValue) {\n            var value = this._customTokens.get(token);\n            if (typeof value !== 'undefined') {\n                return value;\n            }\n            return this._parentInjector.get(token, notFoundValue);\n        };\n        return PortalInjector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.BasePortalHost = BasePortalHost;\n    exports.BasePortalOutlet = BasePortalOutlet;\n    exports.CdkPortal = CdkPortal;\n    exports.CdkPortalOutlet = CdkPortalOutlet;\n    exports.ComponentPortal = ComponentPortal;\n    exports.DomPortal = DomPortal;\n    exports.DomPortalHost = DomPortalHost;\n    exports.DomPortalOutlet = DomPortalOutlet;\n    exports.Portal = Portal;\n    exports.PortalHostDirective = PortalHostDirective;\n    exports.PortalInjector = PortalInjector;\n    exports.PortalModule = PortalModule;\n    exports.TemplatePortal = TemplatePortal;\n    exports.TemplatePortalDirective = TemplatePortalDirective;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-portal.umd.js.map\n"]}
{"version":3,"sources":["src/cdk/cdk-overlay.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","overlay","scrolling","common","core","coercion","bidi","portal","platform","rxjs","operators","keycodes","this","i1","i1$1","i0","i2","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","__values","o","m","Symbol","iterator","next","value","done","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_this","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","config","block","reposition","decorators","type","Injectable","args","providedIn","ctorParameters","ScrollDispatcher","ViewportRuler","NgZone","undefined","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","ScrollStrategyOptions_Factory","ɵɵinject","token","OverlayConfig","e_1","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","keys","configKeys_1","configKeys_1_1","key","e_1_1","error","return","ConnectionPositionPair","origin","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","Optional","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","_keydownEventSubscriptions","_keydownEvents","ngOnDestroy","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","SkipSelf","useFactory","isTestEnvironment","__karma__","jasmine","OverlayContainer","_platform","container","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","Platform","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","Observable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","defineProperty","get","enumerable","configurable","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","forEach","cssClass","takeUntil","merge","children","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","e_2","_b","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_c","_d","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","flexibleFits_1","flexibleFits_1_1","fit","score","weight","e_2_1","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","positions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","_i","reduce","currentValue","currentOverflow","axis","pair","ElementRef","Element","destination","source","input","__read","r","e","ar","split","units","parseFloat","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","overlayContainer","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","Directive","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","EventEmitter","positionChange","overlayKeydown","_templatePortal","TemplatePortal","_scrollStrategyFactory","set","_position","_updatePositionStrategy","coerceBooleanProperty","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","lockPosition","transformOriginSelector","emit","TemplateRef","ViewContainerRef","propDecorators","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollingModule","declarations","providers","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_super","__extends","__","constructor","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","CdkScrollable","ɵangular_material_src_cdk_overlay_overlay_a","ɵangular_material_src_cdk_overlay_overlay_b","ɵangular_material_src_cdk_overlay_overlay_c","ɵangular_material_src_cdk_overlay_overlay_d","ɵangular_material_src_cdk_overlay_overlay_e","ɵangular_material_src_cdk_overlay_overlay_f","ɵangular_material_src_cdk_overlay_overlay_g"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/bidi'), require('@angular/cdk/portal'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/keycodes')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/overlay', ['exports', '@angular/cdk/scrolling', '@angular/common', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/bidi', '@angular/cdk/portal', '@angular/cdk/platform', 'rxjs', 'rxjs/operators', '@angular/cdk/keycodes'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.overlay = {}), global.ng.cdk.scrolling, global.ng.common, global.ng.core, global.ng.cdk.coercion, global.ng.cdk.bidi, global.ng.cdk.portal, global.ng.cdk.platform, global.rxjs, global.rxjs.operators, global.ng.cdk.keycodes));\n}(this, (function (exports, i1, i1$1, i0, coercion, bidi, portal, i2, rxjs, operators, keycodes) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will prevent the user from scrolling while the overlay is visible.\n     */\n    var BlockScrollStrategy = /** @class */ (function () {\n        function BlockScrollStrategy(_viewportRuler, document) {\n            this._viewportRuler = _viewportRuler;\n            this._previousHTMLStyles = { top: '', left: '' };\n            this._isEnabled = false;\n            this._document = document;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        BlockScrollStrategy.prototype.attach = function () { };\n        /** Blocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.enable = function () {\n            if (this._canBeEnabled()) {\n                var root = this._document.documentElement;\n                this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n                // Cache the previous inline styles in case the user had set them.\n                this._previousHTMLStyles.left = root.style.left || '';\n                this._previousHTMLStyles.top = root.style.top || '';\n                // Note: we're using the `html` node, instead of the `body`, because the `body` may\n                // have the user agent margin, whereas the `html` is guaranteed not to have one.\n                root.style.left = coercion.coerceCssPixelValue(-this._previousScrollPosition.left);\n                root.style.top = coercion.coerceCssPixelValue(-this._previousScrollPosition.top);\n                root.classList.add('cdk-global-scrollblock');\n                this._isEnabled = true;\n            }\n        };\n        /** Unblocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.disable = function () {\n            if (this._isEnabled) {\n                var html = this._document.documentElement;\n                var body = this._document.body;\n                var htmlStyle = html.style;\n                var bodyStyle = body.style;\n                var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n                var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n                this._isEnabled = false;\n                htmlStyle.left = this._previousHTMLStyles.left;\n                htmlStyle.top = this._previousHTMLStyles.top;\n                html.classList.remove('cdk-global-scrollblock');\n                // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n                // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n                window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        };\n        BlockScrollStrategy.prototype._canBeEnabled = function () {\n            // Since the scroll strategies can't be singletons, we have to use a global CSS class\n            // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n            // scrolling multiple times.\n            var html = this._document.documentElement;\n            if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n                return false;\n            }\n            var body = this._document.body;\n            var viewport = this._viewportRuler.getViewportSize();\n            return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n        };\n        return BlockScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n     */\n    function getMatScrollStrategyAlreadyAttachedError() {\n        return Error(\"Scroll strategy has already been attached.\");\n    }\n\n    /**\n     * Strategy that will close the overlay as soon as the user starts scrolling.\n     */\n    var CloseScrollStrategy = /** @class */ (function () {\n        function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._config = _config;\n            this._scrollSubscription = null;\n            /** Detaches the overlay ref and disables the scroll strategy. */\n            this._detach = function () {\n                _this.disable();\n                if (_this._overlayRef.hasAttached()) {\n                    _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                }\n            };\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        CloseScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables the closing of the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (this._scrollSubscription) {\n                return;\n            }\n            var stream = this._scrollDispatcher.scrolled(0);\n            if (this._config && this._config.threshold && this._config.threshold > 1) {\n                this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                this._scrollSubscription = stream.subscribe(function () {\n                    var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                    if (Math.abs(scrollPosition - _this._initialScrollPosition) > _this._config.threshold) {\n                        _this._detach();\n                    }\n                    else {\n                        _this._overlayRef.updatePosition();\n                    }\n                });\n            }\n            else {\n                this._scrollSubscription = stream.subscribe(this._detach);\n            }\n        };\n        /** Disables the closing the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        CloseScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return CloseScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Scroll strategy that doesn't do anything. */\n    var NoopScrollStrategy = /** @class */ (function () {\n        function NoopScrollStrategy() {\n        }\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.enable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.disable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.attach = function () { };\n        return NoopScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): move this to live with the rest of the scrolling code\n    // TODO(jelbourn): someday replace this with IntersectionObservers\n    /**\n     * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is scrolled out of view\n     * @docs-private\n     */\n    function isElementScrolledOutsideView(element, scrollContainers) {\n        return scrollContainers.some(function (containerBounds) {\n            var outsideAbove = element.bottom < containerBounds.top;\n            var outsideBelow = element.top > containerBounds.bottom;\n            var outsideLeft = element.right < containerBounds.left;\n            var outsideRight = element.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    }\n    /**\n     * Gets whether an element is clipped by any of its scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is clipped\n     * @docs-private\n     */\n    function isElementClippedByScrolling(element, scrollContainers) {\n        return scrollContainers.some(function (scrollContainerRect) {\n            var clippedAbove = element.top < scrollContainerRect.top;\n            var clippedBelow = element.bottom > scrollContainerRect.bottom;\n            var clippedLeft = element.left < scrollContainerRect.left;\n            var clippedRight = element.right > scrollContainerRect.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will update the element position as the user is scrolling.\n     */\n    var RepositionScrollStrategy = /** @class */ (function () {\n        function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            this._config = _config;\n            this._scrollSubscription = null;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        RepositionScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (!this._scrollSubscription) {\n                var throttle = this._config ? this._config.scrollThrottle : 0;\n                this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                    _this._overlayRef.updatePosition();\n                    // TODO(crisbeto): make `close` on by default once all components can handle it.\n                    if (_this._config && _this._config.autoClose) {\n                        var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                        var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                        // TODO(crisbeto): include all ancestor scroll containers here once\n                        // we have a way of exposing the trigger element to the scroll strategy.\n                        var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                        if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                            _this.disable();\n                            _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                        }\n                    }\n                });\n            }\n        };\n        /** Disables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        RepositionScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return RepositionScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Options for how an overlay will handle scrolling.\n     *\n     * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n     * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n     */\n    var ScrollStrategyOptions = /** @class */ (function () {\n        function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            /** Do nothing on scroll. */\n            this.noop = function () { return new NoopScrollStrategy(); };\n            /**\n             * Close the overlay as soon as the user scrolls.\n             * @param config Configuration to be used inside the scroll strategy.\n             */\n            this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n            /** Block scrolling. */\n            this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n            /**\n             * Update the overlay's position on scroll.\n             * @param config Configuration to be used inside the scroll strategy.\n             * Allows debouncing the reposition calls.\n             */\n            this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n            this._document = document;\n        }\n        ScrollStrategyOptions.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollStrategyOptions.ctorParameters = function () { return [\n            { type: i1.ScrollDispatcher },\n            { type: i1.ViewportRuler },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        ScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n        return ScrollStrategyOptions;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Initial configuration used when creating an overlay. */\n    var OverlayConfig = /** @class */ (function () {\n        function OverlayConfig(config) {\n            var e_1, _a;\n            /** Strategy to be used when handling scroll events while the overlay is open. */\n            this.scrollStrategy = new NoopScrollStrategy();\n            /** Custom class to add to the overlay pane. */\n            this.panelClass = '';\n            /** Whether the overlay has a backdrop. */\n            this.hasBackdrop = false;\n            /** Custom class to add to the backdrop */\n            this.backdropClass = 'cdk-overlay-dark-backdrop';\n            /**\n             * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.disposeOnNavigation = false;\n            if (config) {\n                // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n                // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n                // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n                var configKeys = Object.keys(config);\n                try {\n                    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n                        var key = configKeys_1_1.value;\n                        if (config[key] !== undefined) {\n                            // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                            // as \"I don't know *which* key this is, so the only valid value is the intersection\n                            // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                            // is not smart enough to see that the right-hand-side is actually an access of the same\n                            // exact type with the same exact key, meaning that the value type must be identical.\n                            // So we use `any` to work around this.\n                            this[key] = config[key];\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        return OverlayConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The points of the origin element and the overlay element to connect. */\n    var ConnectionPositionPair = /** @class */ (function () {\n        function ConnectionPositionPair(origin, overlay, \n        /** Offset along the X axis. */\n        offsetX, \n        /** Offset along the Y axis. */\n        offsetY, \n        /** Class(es) to be applied to the panel while this position is active. */\n        panelClass) {\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            this.panelClass = panelClass;\n            this.originX = origin.originX;\n            this.originY = origin.originY;\n            this.overlayX = overlay.overlayX;\n            this.overlayY = overlay.overlayY;\n        }\n        return ConnectionPositionPair;\n    }());\n    /**\n     * Set of properties regarding the position of the origin and overlay relative to the viewport\n     * with respect to the containing Scrollable elements.\n     *\n     * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n     * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     * The overlay and origin are outside view if there is no overlap between their bounding client\n     * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     *       -----------                    -----------\n     *       | outside |                    | clipped |\n     *       |  view   |              --------------------------\n     *       |         |              |     |         |        |\n     *       ----------               |     -----------        |\n     *  --------------------------    |                        |\n     *  |                        |    |      Scrollable        |\n     *  |                        |    |                        |\n     *  |                        |     --------------------------\n     *  |      Scrollable        |\n     *  |                        |\n     *  --------------------------\n     *\n     *  @docs-private\n     */\n    var ScrollingVisibility = /** @class */ (function () {\n        function ScrollingVisibility() {\n        }\n        return ScrollingVisibility;\n    }());\n    /** The change event emitted by the strategy when a fallback position is used. */\n    var ConnectedOverlayPositionChange = /** @class */ (function () {\n        function ConnectedOverlayPositionChange(\n        /** The position used as a result of this change. */\n        connectionPair, \n        /** @docs-private */\n        scrollableViewProperties) {\n            this.connectionPair = connectionPair;\n            this.scrollableViewProperties = scrollableViewProperties;\n        }\n        /** @nocollapse */\n        ConnectedOverlayPositionChange.ctorParameters = function () { return [\n            { type: ConnectionPositionPair },\n            { type: ScrollingVisibility, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return ConnectedOverlayPositionChange;\n    }());\n    /**\n     * Validates whether a vertical position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateVerticalPosition(property, value) {\n        if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n        }\n    }\n    /**\n     * Validates whether a horizontal position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateHorizontalPosition(property, value) {\n        if (value !== 'start' && value !== 'end' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n     * if any. It maintains a list of attached overlays to determine best suited overlay based\n     * on event target and order of overlay opens.\n     */\n    var OverlayKeyboardDispatcher = /** @class */ (function () {\n        function OverlayKeyboardDispatcher(document) {\n            var _this = this;\n            /** Currently attached overlays in the order they were attached. */\n            this._attachedOverlays = [];\n            /** Keyboard event listener that will be attached to the body. */\n            this._keydownListener = function (event) {\n                var overlays = _this._attachedOverlays;\n                for (var i = overlays.length - 1; i > -1; i--) {\n                    // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                    // We want to target the most recent overlay, rather than trying to match where the event came\n                    // from, because some components might open an overlay, but keep focus on a trigger element\n                    // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                    // because we don't want overlays that don't handle keyboard events to block the ones below\n                    // them that do.\n                    if (overlays[i]._keydownEventSubscriptions > 0) {\n                        overlays[i]._keydownEvents.next(event);\n                        break;\n                    }\n                }\n            };\n            this._document = document;\n        }\n        OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {\n            this._detach();\n        };\n        /** Add a new overlay to the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {\n            // Ensure that we don't get the same overlay multiple times.\n            this.remove(overlayRef);\n            // Lazily start dispatcher once first overlay is added\n            if (!this._isAttached) {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n                this._isAttached = true;\n            }\n            this._attachedOverlays.push(overlayRef);\n        };\n        /** Remove an overlay from the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {\n            var index = this._attachedOverlays.indexOf(overlayRef);\n            if (index > -1) {\n                this._attachedOverlays.splice(index, 1);\n            }\n            // Remove the global listener once there are no more overlays.\n            if (this._attachedOverlays.length === 0) {\n                this._detach();\n            }\n        };\n        /** Detaches the global keyboard event listener. */\n        OverlayKeyboardDispatcher.prototype._detach = function () {\n            if (this._isAttached) {\n                this._document.body.removeEventListener('keydown', this._keydownListener);\n                this._isAttached = false;\n            }\n        };\n        OverlayKeyboardDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayKeyboardDispatcher.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        OverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n        return OverlayKeyboardDispatcher;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n        return dispatcher || new OverlayKeyboardDispatcher(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n        // If there is already an OverlayKeyboardDispatcher available, use that.\n        // Otherwise, provide a new one.\n        provide: OverlayKeyboardDispatcher,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayKeyboardDispatcher],\n            // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n            // of the type expected by Angular\n            i1$1.DOCUMENT\n        ],\n        useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Whether we're in a testing environment.\n     * TODO(crisbeto): remove this once we have an overlay testing module.\n     */\n    var isTestEnvironment = typeof window !== 'undefined' && !!window &&\n        !!(window.__karma__ || window.jasmine);\n    /** Container inside which all overlays will render. */\n    var OverlayContainer = /** @class */ (function () {\n        function OverlayContainer(document, \n        /**\n         * @deprecated `platform` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        _platform) {\n            this._platform = _platform;\n            this._document = document;\n        }\n        OverlayContainer.prototype.ngOnDestroy = function () {\n            var container = this._containerElement;\n            if (container && container.parentNode) {\n                container.parentNode.removeChild(container);\n            }\n        };\n        /**\n         * This method returns the overlay container element. It will lazily\n         * create the element the first time  it is called to facilitate using\n         * the container in non-browser environments.\n         * @returns the container element\n         */\n        OverlayContainer.prototype.getContainerElement = function () {\n            if (!this._containerElement) {\n                this._createContainer();\n            }\n            return this._containerElement;\n        };\n        /**\n         * Create the overlay container element, which is simply a div\n         * with the 'cdk-overlay-container' class on the document body.\n         */\n        OverlayContainer.prototype._createContainer = function () {\n            // @breaking-change 10.0.0 Remove null check for `_platform`.\n            var isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n            var containerClass = 'cdk-overlay-container';\n            if (isBrowser || isTestEnvironment) {\n                var oppositePlatformContainers = this._document.querySelectorAll(\".\" + containerClass + \"[platform=\\\"server\\\"], \" +\n                    (\".\" + containerClass + \"[platform=\\\"test\\\"]\"));\n                // Remove any old containers from the opposite platform.\n                // This can happen when transitioning from the server to the client.\n                for (var i = 0; i < oppositePlatformContainers.length; i++) {\n                    oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n                }\n            }\n            var container = this._document.createElement('div');\n            container.classList.add(containerClass);\n            // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n            // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n            // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n            // To mitigate the problem we made it so that only containers from a different platform are\n            // cleared, but the side-effect was that people started depending on the overly-aggressive\n            // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n            // module which does the cleanup, we try to detect that we're in a test environment and we\n            // always clear the container. See #17006.\n            // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n            if (isTestEnvironment) {\n                container.setAttribute('platform', 'test');\n            }\n            else if (!isBrowser) {\n                container.setAttribute('platform', 'server');\n            }\n            this._document.body.appendChild(container);\n            this._containerElement = container;\n        };\n        OverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i2.Platform }\n        ]; };\n        OverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\n        return OverlayContainer;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n        return parentContainer || new OverlayContainer(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_CONTAINER_PROVIDER = {\n        // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n        provide: OverlayContainer,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayContainer],\n            i1$1.DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ],\n        useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Reference to an overlay that has been created with the Overlay service.\n     * Used to manipulate or dispose of said overlay.\n     */\n    var OverlayRef = /** @class */ (function () {\n        function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            var _this = this;\n            this._portalOutlet = _portalOutlet;\n            this._host = _host;\n            this._pane = _pane;\n            this._config = _config;\n            this._ngZone = _ngZone;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._document = _document;\n            this._location = _location;\n            this._backdropElement = null;\n            this._backdropClick = new rxjs.Subject();\n            this._attachments = new rxjs.Subject();\n            this._detachments = new rxjs.Subject();\n            this._locationChanges = rxjs.Subscription.EMPTY;\n            this._backdropClickHandler = function (event) { return _this._backdropClick.next(event); };\n            this._keydownEventsObservable = new rxjs.Observable(function (observer) {\n                var subscription = _this._keydownEvents.subscribe(observer);\n                _this._keydownEventSubscriptions++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._keydownEventSubscriptions--;\n                };\n            });\n            /** Stream of keydown events dispatched to this overlay. */\n            this._keydownEvents = new rxjs.Subject();\n            /** Amount of subscriptions to the keydown events. */\n            this._keydownEventSubscriptions = 0;\n            if (_config.scrollStrategy) {\n                this._scrollStrategy = _config.scrollStrategy;\n                this._scrollStrategy.attach(this);\n            }\n            this._positionStrategy = _config.positionStrategy;\n        }\n        Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n            /** The overlay's HTML element */\n            get: function () {\n                return this._pane;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n            /** The overlay's backdrop HTML element. */\n            get: function () {\n                return this._backdropElement;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n            /**\n             * Wrapper around the panel element. Can be used for advanced\n             * positioning where a wrapper with specific styling is\n             * required around the overlay pane.\n             */\n            get: function () {\n                return this._host;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Attaches content, given via a Portal, to the overlay.\n         * If the overlay is configured to have a backdrop, it will be created.\n         *\n         * @param portal Portal instance to which to attach the overlay.\n         * @returns The portal attachment result.\n         */\n        OverlayRef.prototype.attach = function (portal) {\n            var _this = this;\n            var attachResult = this._portalOutlet.attach(portal);\n            // Update the pane element with the given configuration.\n            if (!this._host.parentElement && this._previousHostParent) {\n                this._previousHostParent.appendChild(this._host);\n            }\n            if (this._positionStrategy) {\n                this._positionStrategy.attach(this);\n            }\n            this._updateStackingOrder();\n            this._updateElementSize();\n            this._updateElementDirection();\n            if (this._scrollStrategy) {\n                this._scrollStrategy.enable();\n            }\n            // Update the position once the zone is stable so that the overlay will be fully rendered\n            // before attempting to position it, as the position may depend on the size of the rendered\n            // content.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                // The overlay could've been detached before the zone has stabilized.\n                if (_this.hasAttached()) {\n                    _this.updatePosition();\n                }\n            });\n            // Enable pointer events for the overlay pane element.\n            this._togglePointerEvents(true);\n            if (this._config.hasBackdrop) {\n                this._attachBackdrop();\n            }\n            if (this._config.panelClass) {\n                this._toggleClasses(this._pane, this._config.panelClass, true);\n            }\n            // Only emit the `attachments` event once all other setup is done.\n            this._attachments.next();\n            // Track this overlay by the keyboard dispatcher\n            this._keyboardDispatcher.add(this);\n            // @breaking-change 8.0.0 remove the null check for `_location`\n            // once the constructor parameter is made required.\n            if (this._config.disposeOnNavigation && this._location) {\n                this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n            }\n            return attachResult;\n        };\n        /**\n         * Detaches an overlay from a portal.\n         * @returns The portal detachment result.\n         */\n        OverlayRef.prototype.detach = function () {\n            if (!this.hasAttached()) {\n                return;\n            }\n            this.detachBackdrop();\n            // When the overlay is detached, the pane element should disable pointer events.\n            // This is necessary because otherwise the pane element will cover the page and disable\n            // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n            this._togglePointerEvents(false);\n            if (this._positionStrategy && this._positionStrategy.detach) {\n                this._positionStrategy.detach();\n            }\n            if (this._scrollStrategy) {\n                this._scrollStrategy.disable();\n            }\n            var detachmentResult = this._portalOutlet.detach();\n            // Only emit after everything is detached.\n            this._detachments.next();\n            // Remove this overlay from keyboard dispatcher tracking.\n            this._keyboardDispatcher.remove(this);\n            // Keeping the host element in the DOM can cause scroll jank, because it still gets\n            // rendered, even though it's transparent and unclickable which is why we remove it.\n            this._detachContentWhenStable();\n            // Stop listening for location changes.\n            this._locationChanges.unsubscribe();\n            return detachmentResult;\n        };\n        /** Cleans up the overlay from the DOM. */\n        OverlayRef.prototype.dispose = function () {\n            var isAttached = this.hasAttached();\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._disposeScrollStrategy();\n            this.detachBackdrop();\n            this._locationChanges.unsubscribe();\n            this._keyboardDispatcher.remove(this);\n            this._portalOutlet.dispose();\n            this._attachments.complete();\n            this._backdropClick.complete();\n            this._keydownEvents.complete();\n            if (this._host && this._host.parentNode) {\n                this._host.parentNode.removeChild(this._host);\n                this._host = null;\n            }\n            this._previousHostParent = this._pane = null;\n            if (isAttached) {\n                this._detachments.next();\n            }\n            this._detachments.complete();\n        };\n        /** Whether the overlay has attached content. */\n        OverlayRef.prototype.hasAttached = function () {\n            return this._portalOutlet.hasAttached();\n        };\n        /** Gets an observable that emits when the backdrop has been clicked. */\n        OverlayRef.prototype.backdropClick = function () {\n            return this._backdropClick.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been attached. */\n        OverlayRef.prototype.attachments = function () {\n            return this._attachments.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been detached. */\n        OverlayRef.prototype.detachments = function () {\n            return this._detachments.asObservable();\n        };\n        /** Gets an observable of keydown events targeted to this overlay. */\n        OverlayRef.prototype.keydownEvents = function () {\n            return this._keydownEventsObservable;\n        };\n        /** Gets the current overlay configuration, which is immutable. */\n        OverlayRef.prototype.getConfig = function () {\n            return this._config;\n        };\n        /** Updates the position of the overlay based on the position strategy. */\n        OverlayRef.prototype.updatePosition = function () {\n            if (this._positionStrategy) {\n                this._positionStrategy.apply();\n            }\n        };\n        /** Switches to a new position strategy and updates the overlay position. */\n        OverlayRef.prototype.updatePositionStrategy = function (strategy) {\n            if (strategy === this._positionStrategy) {\n                return;\n            }\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._positionStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                this.updatePosition();\n            }\n        };\n        /** Update the size properties of the overlay. */\n        OverlayRef.prototype.updateSize = function (sizeConfig) {\n            this._config = __assign(__assign({}, this._config), sizeConfig);\n            this._updateElementSize();\n        };\n        /** Sets the LTR/RTL direction for the overlay. */\n        OverlayRef.prototype.setDirection = function (dir) {\n            this._config = __assign(__assign({}, this._config), { direction: dir });\n            this._updateElementDirection();\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        OverlayRef.prototype.addPanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, true);\n            }\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        OverlayRef.prototype.removePanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, false);\n            }\n        };\n        /**\n         * Returns the layout direction of the overlay panel.\n         */\n        OverlayRef.prototype.getDirection = function () {\n            var direction = this._config.direction;\n            if (!direction) {\n                return 'ltr';\n            }\n            return typeof direction === 'string' ? direction : direction.value;\n        };\n        /** Switches to a new scroll strategy. */\n        OverlayRef.prototype.updateScrollStrategy = function (strategy) {\n            if (strategy === this._scrollStrategy) {\n                return;\n            }\n            this._disposeScrollStrategy();\n            this._scrollStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                strategy.enable();\n            }\n        };\n        /** Updates the text direction of the overlay panel. */\n        OverlayRef.prototype._updateElementDirection = function () {\n            this._host.setAttribute('dir', this.getDirection());\n        };\n        /** Updates the size of the overlay element based on the overlay config. */\n        OverlayRef.prototype._updateElementSize = function () {\n            if (!this._pane) {\n                return;\n            }\n            var style = this._pane.style;\n            style.width = coercion.coerceCssPixelValue(this._config.width);\n            style.height = coercion.coerceCssPixelValue(this._config.height);\n            style.minWidth = coercion.coerceCssPixelValue(this._config.minWidth);\n            style.minHeight = coercion.coerceCssPixelValue(this._config.minHeight);\n            style.maxWidth = coercion.coerceCssPixelValue(this._config.maxWidth);\n            style.maxHeight = coercion.coerceCssPixelValue(this._config.maxHeight);\n        };\n        /** Toggles the pointer events for the overlay pane element. */\n        OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n            this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n        };\n        /** Attaches a backdrop for this overlay. */\n        OverlayRef.prototype._attachBackdrop = function () {\n            var _this = this;\n            var showingClass = 'cdk-overlay-backdrop-showing';\n            this._backdropElement = this._document.createElement('div');\n            this._backdropElement.classList.add('cdk-overlay-backdrop');\n            if (this._config.backdropClass) {\n                this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n            }\n            // Insert the backdrop before the pane in the DOM order,\n            // in order to handle stacked overlays properly.\n            this._host.parentElement.insertBefore(this._backdropElement, this._host);\n            // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n            // action desired when such a click occurs (usually closing the overlay).\n            this._backdropElement.addEventListener('click', this._backdropClickHandler);\n            // Add class to fade-in the backdrop after one frame.\n            if (typeof requestAnimationFrame !== 'undefined') {\n                this._ngZone.runOutsideAngular(function () {\n                    requestAnimationFrame(function () {\n                        if (_this._backdropElement) {\n                            _this._backdropElement.classList.add(showingClass);\n                        }\n                    });\n                });\n            }\n            else {\n                this._backdropElement.classList.add(showingClass);\n            }\n        };\n        /**\n         * Updates the stacking order of the element, moving it to the top if necessary.\n         * This is required in cases where one overlay was detached, while another one,\n         * that should be behind it, was destroyed. The next time both of them are opened,\n         * the stacking will be wrong, because the detached element's pane will still be\n         * in its original DOM position.\n         */\n        OverlayRef.prototype._updateStackingOrder = function () {\n            if (this._host.nextSibling) {\n                this._host.parentNode.appendChild(this._host);\n            }\n        };\n        /** Detaches the backdrop (if any) associated with the overlay. */\n        OverlayRef.prototype.detachBackdrop = function () {\n            var _this = this;\n            var backdropToDetach = this._backdropElement;\n            if (!backdropToDetach) {\n                return;\n            }\n            var timeoutId;\n            var finishDetach = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach) {\n                    backdropToDetach.removeEventListener('click', _this._backdropClickHandler);\n                    backdropToDetach.removeEventListener('transitionend', finishDetach);\n                    if (backdropToDetach.parentNode) {\n                        backdropToDetach.parentNode.removeChild(backdropToDetach);\n                    }\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                if (_this._config.backdropClass) {\n                    _this._toggleClasses(backdropToDetach, _this._config.backdropClass, false);\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            this._ngZone.runOutsideAngular(function () {\n                backdropToDetach.addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach, 500); });\n        };\n        /** Toggles a single CSS class or an array of classes on an element. */\n        OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {\n            var classList = element.classList;\n            coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                // We can't do a spread here, because IE doesn't support setting multiple classes.\n                // Also trying to add an empty string to a DOMTokenList will throw.\n                if (cssClass) {\n                    isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n                }\n            });\n        };\n        /** Detaches the overlay content next time the zone stabilizes. */\n        OverlayRef.prototype._detachContentWhenStable = function () {\n            var _this = this;\n            // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n            // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n            // be patched to run inside the zone, which will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(function () {\n                // We can't remove the host here immediately, because the overlay pane's content\n                // might still be animating. This stream helps us avoid interrupting the animation\n                // by waiting for the pane to become empty.\n                var subscription = _this._ngZone.onStable\n                    .asObservable()\n                    .pipe(operators.takeUntil(rxjs.merge(_this._attachments, _this._detachments)))\n                    .subscribe(function () {\n                    // Needs a couple of checks for the pane and host, because\n                    // they may have been removed by the time the zone stabilizes.\n                    if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                        if (_this._pane && _this._config.panelClass) {\n                            _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                        }\n                        if (_this._host && _this._host.parentElement) {\n                            _this._previousHostParent = _this._host.parentElement;\n                            _this._previousHostParent.removeChild(_this._host);\n                        }\n                        subscription.unsubscribe();\n                    }\n                });\n            });\n        };\n        /** Disposes of a scroll strategy. */\n        OverlayRef.prototype._disposeScrollStrategy = function () {\n            var scrollStrategy = this._scrollStrategy;\n            if (scrollStrategy) {\n                scrollStrategy.disable();\n                if (scrollStrategy.detach) {\n                    scrollStrategy.detach();\n                }\n            }\n        };\n        return OverlayRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: refactor clipping detection into a separate thing (part of scrolling module)\n    // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n    /** Class to be added to the overlay bounding box. */\n    var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n    /** Regex used to split a string on its CSS units. */\n    var cssUnitPattern = /([A-Za-z%]+)$/;\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     */\n    var FlexibleConnectedPositionStrategy = /** @class */ (function () {\n        function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n            /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n            this._lastBoundingBoxSize = { width: 0, height: 0 };\n            /** Whether the overlay was pushed in a previous positioning. */\n            this._isPushed = false;\n            /** Whether the overlay can be pushed on-screen on the initial open. */\n            this._canPush = true;\n            /** Whether the overlay can grow via flexible width/height after the initial open. */\n            this._growAfterOpen = false;\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            this._hasFlexibleDimensions = true;\n            /** Whether the overlay position is locked. */\n            this._positionLocked = false;\n            /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n            this._viewportMargin = 0;\n            /** The Scrollable containers used to check scrollable view properties on position change. */\n            this._scrollables = [];\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            /** Subject that emits whenever the position changes. */\n            this._positionChanges = new rxjs.Subject();\n            /** Subscription to viewport size changes. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Default offset for the overlay along the x axis. */\n            this._offsetX = 0;\n            /** Default offset for the overlay along the y axis. */\n            this._offsetY = 0;\n            /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n            this._appliedPanelClasses = [];\n            /** Observable sequence of position changes. */\n            this.positionChanges = this._positionChanges.asObservable();\n            this.setOrigin(connectedTo);\n        }\n        Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attaches this position strategy to an overlay. */\n        FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            var _this = this;\n            if (this._overlayRef && overlayRef !== this._overlayRef) {\n                throw Error('This position strategy is already attached to an overlay');\n            }\n            this._validatePositions();\n            overlayRef.hostElement.classList.add(boundingBoxClass);\n            this._overlayRef = overlayRef;\n            this._boundingBox = overlayRef.hostElement;\n            this._pane = overlayRef.overlayElement;\n            this._isDisposed = false;\n            this._isInitialRender = true;\n            this._lastPosition = null;\n            this._resizeSubscription.unsubscribe();\n            this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n                // When the window is resized, we want to trigger the next reposition as if it\n                // was an initial render, in order for the strategy to pick a new optimal position,\n                // otherwise position locking will cause it to stay at the old one.\n                _this._isInitialRender = true;\n                _this.apply();\n            });\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin best fits on-screen.\n         *\n         * The selection of a position goes as follows:\n         *  - If any positions fit completely within the viewport as-is,\n         *      choose the first position that does so.\n         *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n         *      choose the position with the greatest available size modified by the positions' weight.\n         *  - If pushing is enabled, take the position that went off-screen the least and push it\n         *      on-screen.\n         *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n         * @docs-private\n         */\n        FlexibleConnectedPositionStrategy.prototype.apply = function () {\n            var e_1, _a, e_2, _b;\n            // We shouldn't do anything if the strategy was disposed or we're on the server.\n            if (this._isDisposed || !this._platform.isBrowser) {\n                return;\n            }\n            // If the position has been applied already (e.g. when the overlay was opened) and the\n            // consumer opted into locking in the position, re-use the old position, in order to\n            // prevent the overlay from jumping around.\n            if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n                this.reapplyLastPosition();\n                return;\n            }\n            this._clearPanelClasses();\n            this._resetOverlayElementStyles();\n            this._resetBoundingBoxStyles();\n            // We need the bounding rects for the origin and the overlay to determine how to position\n            // the overlay relative to the origin.\n            // We use the viewport rect to determine whether a position would go off-screen.\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            var originRect = this._originRect;\n            var overlayRect = this._overlayRect;\n            var viewportRect = this._viewportRect;\n            // Positions where the overlay will fit with flexible dimensions.\n            var flexibleFits = [];\n            // Fallback if none of the preferred positions fit within the viewport.\n            var fallback;\n            try {\n                // Go through each of the preferred positions looking for a good fit.\n                // If a good fit is found, it will be applied immediately.\n                for (var _c = __values(this._preferredPositions), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var pos = _d.value;\n                    // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n                    var originPoint = this._getOriginPoint(originRect, pos);\n                    // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n                    // overlay in this position. We use the top-left corner for calculations and later translate\n                    // this into an appropriate (top, left, bottom, right) style.\n                    var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n                    // Calculate how well the overlay would fit into the viewport with this point.\n                    var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n                    // If the overlay, without any further work, fits into the viewport, use this position.\n                    if (overlayFit.isCompletelyWithinViewport) {\n                        this._isPushed = false;\n                        this._applyPosition(pos, originPoint);\n                        return;\n                    }\n                    // If the overlay has flexible dimensions, we can use this position\n                    // so long as there's enough space for the minimum dimensions.\n                    if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                        // Save positions where the overlay will fit with flexible dimensions. We will use these\n                        // if none of the positions fit *without* flexible dimensions.\n                        flexibleFits.push({\n                            position: pos,\n                            origin: originPoint,\n                            overlayRect: overlayRect,\n                            boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                        });\n                        continue;\n                    }\n                    // If the current preferred position does not fit on the screen, remember the position\n                    // if it has more visible area on-screen than we've seen and move onto the next preferred\n                    // position.\n                    if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                        fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // If there are any positions where the overlay would fit with flexible dimensions, choose the\n            // one that has the greatest area available modified by the position's weight\n            if (flexibleFits.length) {\n                var bestFit = null;\n                var bestScore = -1;\n                try {\n                    for (var flexibleFits_1 = __values(flexibleFits), flexibleFits_1_1 = flexibleFits_1.next(); !flexibleFits_1_1.done; flexibleFits_1_1 = flexibleFits_1.next()) {\n                        var fit = flexibleFits_1_1.value;\n                        var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                        if (score > bestScore) {\n                            bestScore = score;\n                            bestFit = fit;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (flexibleFits_1_1 && !flexibleFits_1_1.done && (_b = flexibleFits_1.return)) _b.call(flexibleFits_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                this._isPushed = false;\n                this._applyPosition(bestFit.position, bestFit.origin);\n                return;\n            }\n            // When none of the preferred positions fit within the viewport, take the position\n            // that went off-screen the least and attempt to push it on-screen.\n            if (this._canPush) {\n                // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n                this._isPushed = true;\n                this._applyPosition(fallback.position, fallback.originPoint);\n                return;\n            }\n            // All options for getting the overlay within the viewport have been exhausted, so go with the\n            // position that went off-screen the least.\n            this._applyPosition(fallback.position, fallback.originPoint);\n        };\n        FlexibleConnectedPositionStrategy.prototype.detach = function () {\n            this._clearPanelClasses();\n            this._lastPosition = null;\n            this._previousPushAmount = null;\n            this._resizeSubscription.unsubscribe();\n        };\n        /** Cleanup after the element gets destroyed. */\n        FlexibleConnectedPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed) {\n                return;\n            }\n            // We can't use `_resetBoundingBoxStyles` here, because it resets\n            // some properties to zero, rather than removing them.\n            if (this._boundingBox) {\n                extendStyles(this._boundingBox.style, {\n                    top: '',\n                    left: '',\n                    right: '',\n                    bottom: '',\n                    height: '',\n                    width: '',\n                    alignItems: '',\n                    justifyContent: '',\n                });\n            }\n            if (this._pane) {\n                this._resetOverlayElementStyles();\n            }\n            if (this._overlayRef) {\n                this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n            }\n            this.detach();\n            this._positionChanges.complete();\n            this._overlayRef = this._boundingBox = null;\n            this._isDisposed = true;\n        };\n        /**\n         * This re-aligns the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {\n            if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n                this._originRect = this._getOriginRect();\n                this._overlayRect = this._pane.getBoundingClientRect();\n                this._viewportRect = this._getNarrowedViewportRect();\n                var lastPosition = this._lastPosition || this._preferredPositions[0];\n                var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n                this._applyPosition(lastPosition, originPoint);\n            }\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._scrollables = scrollables;\n            return this;\n        };\n        /**\n         * Adds new preferred positions.\n         * @param positions List of positions options for this overlay.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions;\n            // If the last calculated position object isn't part of the positions anymore, clear\n            // it in order to avoid it being picked up if the consumer tries to re-apply.\n            if (positions.indexOf(this._lastPosition) === -1) {\n                this._lastPosition = null;\n            }\n            this._validatePositions();\n            return this;\n        };\n        /**\n         * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n         * @param margin Required margin between the overlay and the viewport edge in pixels.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {\n            this._viewportMargin = margin;\n            return this;\n        };\n        /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {\n            if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n            this._hasFlexibleDimensions = flexibleDimensions;\n            return this;\n        };\n        /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n        FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {\n            if (growAfterOpen === void 0) { growAfterOpen = true; }\n            this._growAfterOpen = growAfterOpen;\n            return this;\n        };\n        /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {\n            if (canPush === void 0) { canPush = true; }\n            this._canPush = canPush;\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            if (isLocked === void 0) { isLocked = true; }\n            this._positionLocked = isLocked;\n            return this;\n        };\n        /**\n         * Sets the origin, relative to which to position the overlay.\n         * Using an element origin is useful for building components that need to be positioned\n         * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n         * used for cases like contextual menus which open relative to the user's pointer.\n         * @param origin Reference to the new origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._origin = origin;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the x-axis.\n         * @param offset New offset in the X axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {\n            this._offsetX = offset;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the y-axis.\n         * @param offset New offset in the Y axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {\n            this._offsetY = offset;\n            return this;\n        };\n        /**\n         * Configures that the position strategy should set a `transform-origin` on some elements\n         * inside the overlay, depending on the current position that is being applied. This is\n         * useful for the cases where the origin of an animation can change depending on the\n         * alignment of the overlay.\n         * @param selector CSS selector that will be used to find the target\n         *    elements onto which to set the transform origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {\n            this._transformOriginSelector = selector;\n            return this;\n        };\n        /**\n         * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {\n            var x;\n            if (pos.originX == 'center') {\n                // Note: when centering we should always use the `left`\n                // offset, otherwise the position will be wrong in RTL.\n                x = originRect.left + (originRect.width / 2);\n            }\n            else {\n                var startX = this._isRtl() ? originRect.right : originRect.left;\n                var endX = this._isRtl() ? originRect.left : originRect.right;\n                x = pos.originX == 'start' ? startX : endX;\n            }\n            var y;\n            if (pos.originY == 'center') {\n                y = originRect.top + (originRect.height / 2);\n            }\n            else {\n                y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n            }\n            return { x: x, y: y };\n        };\n        /**\n         * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n         * origin point to which the overlay should be connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n            // Calculate the (overlayStartX, overlayStartY), the start of the\n            // potential overlay position relative to the origin point.\n            var overlayStartX;\n            if (pos.overlayX == 'center') {\n                overlayStartX = -overlayRect.width / 2;\n            }\n            else if (pos.overlayX === 'start') {\n                overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n            }\n            else {\n                overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n            }\n            var overlayStartY;\n            if (pos.overlayY == 'center') {\n                overlayStartY = -overlayRect.height / 2;\n            }\n            else {\n                overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n            }\n            // The (x, y) coordinates of the overlay.\n            return {\n                x: originPoint.x + overlayStartX,\n                y: originPoint.y + overlayStartY,\n            };\n        };\n        /** Gets how well an overlay at the given point will fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {\n            var x = point.x, y = point.y;\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            // Account for the offsets since they could push the overlay out of the viewport.\n            if (offsetX) {\n                x += offsetX;\n            }\n            if (offsetY) {\n                y += offsetY;\n            }\n            // How much the overlay would overflow at this position, on each side.\n            var leftOverflow = 0 - x;\n            var rightOverflow = (x + overlay.width) - viewport.width;\n            var topOverflow = 0 - y;\n            var bottomOverflow = (y + overlay.height) - viewport.height;\n            // Visible parts of the element on each axis.\n            var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n            var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n            var visibleArea = visibleWidth * visibleHeight;\n            return {\n                visibleArea: visibleArea,\n                isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n                fitsInViewportVertically: visibleHeight === overlay.height,\n                fitsInViewportHorizontally: visibleWidth == overlay.width,\n            };\n        };\n        /**\n         * Whether the overlay can fit within the viewport when it may resize either its width or height.\n         * @param fit How well the overlay fits in the viewport at some position.\n         * @param point The (x, y) coordinates of the overlat at some position.\n         * @param viewport The geometry of the viewport.\n         */\n        FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {\n            if (this._hasFlexibleDimensions) {\n                var availableHeight = viewport.bottom - point.y;\n                var availableWidth = viewport.right - point.x;\n                var minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n                var minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n                var verticalFit = fit.fitsInViewportVertically ||\n                    (minHeight != null && minHeight <= availableHeight);\n                var horizontalFit = fit.fitsInViewportHorizontally ||\n                    (minWidth != null && minWidth <= availableWidth);\n                return verticalFit && horizontalFit;\n            }\n            return false;\n        };\n        /**\n         * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n         * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n         * right and bottom).\n         *\n         * @param start Starting point from which the overlay is pushed.\n         * @param overlay Dimensions of the overlay.\n         * @param scrollPosition Current viewport scroll position.\n         * @returns The point at which to position the overlay after pushing. This is effectively a new\n         *     originPoint.\n         */\n        FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {\n            // If the position is locked and we've pushed the overlay already, reuse the previous push\n            // amount, rather than pushing it again. If we were to continue pushing, the element would\n            // remain in the viewport, which goes against the expectations when position locking is enabled.\n            if (this._previousPushAmount && this._positionLocked) {\n                return {\n                    x: start.x + this._previousPushAmount.x,\n                    y: start.y + this._previousPushAmount.y\n                };\n            }\n            var viewport = this._viewportRect;\n            // Determine how much the overlay goes outside the viewport on each\n            // side, which we'll use to decide which direction to push it.\n            var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n            var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n            var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n            var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n            // Amount by which to push the overlay in each axis such that it remains on-screen.\n            var pushX = 0;\n            var pushY = 0;\n            // If the overlay fits completely within the bounds of the viewport, push it from whichever\n            // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n            // viewport and allow for the trailing end of the overlay to go out of bounds.\n            if (overlay.width <= viewport.width) {\n                pushX = overflowLeft || -overflowRight;\n            }\n            else {\n                pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n            }\n            if (overlay.height <= viewport.height) {\n                pushY = overflowTop || -overflowBottom;\n            }\n            else {\n                pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n            }\n            this._previousPushAmount = { x: pushX, y: pushY };\n            return {\n                x: start.x + pushX,\n                y: start.y + pushY,\n            };\n        };\n        /**\n         * Applies a computed position to the overlay and emits a position change.\n         * @param position The position preference\n         * @param originPoint The point on the origin element where the overlay is connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {\n            this._setTransformOrigin(position);\n            this._setOverlayElementStyles(originPoint, position);\n            this._setBoundingBoxStyles(originPoint, position);\n            if (position.panelClass) {\n                this._addPanelClasses(position.panelClass);\n            }\n            // Save the last connected position in case the position needs to be re-calculated.\n            this._lastPosition = position;\n            // Notify that the position has been changed along with its change properties.\n            // We only emit if we've got any subscriptions, because the scroll visibility\n            // calculcations can be somewhat expensive.\n            if (this._positionChanges.observers.length) {\n                var scrollableViewProperties = this._getScrollVisibility();\n                var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n                this._positionChanges.next(changeEvent);\n            }\n            this._isInitialRender = false;\n        };\n        /** Sets the transform origin based on the configured selector and the passed-in position.  */\n        FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {\n            if (!this._transformOriginSelector) {\n                return;\n            }\n            var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n            var xOrigin;\n            var yOrigin = position.overlayY;\n            if (position.overlayX === 'center') {\n                xOrigin = 'center';\n            }\n            else if (this._isRtl()) {\n                xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n            }\n            else {\n                xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n            }\n            for (var i = 0; i < elements.length; i++) {\n                elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n            }\n        };\n        /**\n         * Gets the position and size of the overlay's sizing container.\n         *\n         * This method does no measuring and applies no styles so that we can cheaply compute the\n         * bounds for all positions and choose the best fit based on these results.\n         */\n        FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {\n            var viewport = this._viewportRect;\n            var isRtl = this._isRtl();\n            var height, top, bottom;\n            if (position.overlayY === 'top') {\n                // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n                top = origin.y;\n                height = viewport.height - top + this._viewportMargin;\n            }\n            else if (position.overlayY === 'bottom') {\n                // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n                // the viewport margin back in, because the viewport rect is narrowed down to remove the\n                // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n                bottom = viewport.height - origin.y + this._viewportMargin * 2;\n                height = viewport.height - bottom + this._viewportMargin;\n            }\n            else {\n                // If neither top nor bottom, it means that the overlay is vertically centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n                // `origin.y - viewport.top`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n                var previousHeight = this._lastBoundingBoxSize.height;\n                height = smallestDistanceToViewportEdge * 2;\n                top = origin.y - smallestDistanceToViewportEdge;\n                if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                    top = origin.y - (previousHeight / 2);\n                }\n            }\n            // The overlay is opening 'right-ward' (the content flows to the right).\n            var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n                (position.overlayX === 'end' && isRtl);\n            // The overlay is opening 'left-ward' (the content flows to the left).\n            var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n                (position.overlayX === 'start' && isRtl);\n            var width, left, right;\n            if (isBoundedByLeftViewportEdge) {\n                right = viewport.width - origin.x + this._viewportMargin;\n                width = origin.x - this._viewportMargin;\n            }\n            else if (isBoundedByRightViewportEdge) {\n                left = origin.x;\n                width = viewport.right - origin.x;\n            }\n            else {\n                // If neither start nor end, it means that the overlay is horizontally centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.right - origin.x` and\n                // `origin.x - viewport.left`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n                var previousWidth = this._lastBoundingBoxSize.width;\n                width = smallestDistanceToViewportEdge * 2;\n                left = origin.x - smallestDistanceToViewportEdge;\n                if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                    left = origin.x - (previousWidth / 2);\n                }\n            }\n            return { top: top, left: left, bottom: bottom, right: right, width: width, height: height };\n        };\n        /**\n         * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n         * origin's connection point and stetches to the bounds of the viewport.\n         *\n         * @param origin The point on the origin element where the overlay is connected.\n         * @param position The position preference\n         */\n        FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {\n            var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n            // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n            // when applying a new size.\n            if (!this._isInitialRender && !this._growAfterOpen) {\n                boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n                boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n            }\n            var styles = {};\n            if (this._hasExactPosition()) {\n                styles.top = styles.left = '0';\n                styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n                styles.width = styles.height = '100%';\n            }\n            else {\n                var maxHeight = this._overlayRef.getConfig().maxHeight;\n                var maxWidth = this._overlayRef.getConfig().maxWidth;\n                styles.height = coercion.coerceCssPixelValue(boundingBoxRect.height);\n                styles.top = coercion.coerceCssPixelValue(boundingBoxRect.top);\n                styles.bottom = coercion.coerceCssPixelValue(boundingBoxRect.bottom);\n                styles.width = coercion.coerceCssPixelValue(boundingBoxRect.width);\n                styles.left = coercion.coerceCssPixelValue(boundingBoxRect.left);\n                styles.right = coercion.coerceCssPixelValue(boundingBoxRect.right);\n                // Push the pane content towards the proper direction.\n                if (position.overlayX === 'center') {\n                    styles.alignItems = 'center';\n                }\n                else {\n                    styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n                }\n                if (position.overlayY === 'center') {\n                    styles.justifyContent = 'center';\n                }\n                else {\n                    styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n                }\n                if (maxHeight) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(maxHeight);\n                }\n                if (maxWidth) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(maxWidth);\n                }\n            }\n            this._lastBoundingBoxSize = boundingBoxRect;\n            extendStyles(this._boundingBox.style, styles);\n        };\n        /** Resets the styles for the bounding box so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {\n            extendStyles(this._boundingBox.style, {\n                top: '0',\n                left: '0',\n                right: '0',\n                bottom: '0',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        };\n        /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {\n            extendStyles(this._pane.style, {\n                top: '',\n                left: '',\n                bottom: '',\n                right: '',\n                position: '',\n                transform: '',\n            });\n        };\n        /** Sets positioning styles to the overlay element. */\n        FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {\n            var styles = {};\n            var hasExactPosition = this._hasExactPosition();\n            var hasFlexibleDimensions = this._hasFlexibleDimensions;\n            var config = this._overlayRef.getConfig();\n            if (hasExactPosition) {\n                var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n                extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n                extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n            }\n            else {\n                styles.position = 'static';\n            }\n            // Use a transform to apply the offsets. We do this because the `center` positions rely on\n            // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n            // off the position. We also can't use margins, because they won't have an effect in some\n            // cases where the element doesn't have anything to \"push off of\". Finally, this works\n            // better both with flexible and non-flexible positioning.\n            var transformString = '';\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            if (offsetX) {\n                transformString += \"translateX(\" + offsetX + \"px) \";\n            }\n            if (offsetY) {\n                transformString += \"translateY(\" + offsetY + \"px)\";\n            }\n            styles.transform = transformString.trim();\n            // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n            // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n            // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n            // Note that this doesn't apply when we have an exact position, in which case we do want to\n            // apply them because they'll be cleared from the bounding box.\n            if (config.maxHeight) {\n                if (hasExactPosition) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(config.maxHeight);\n                }\n                else if (hasFlexibleDimensions) {\n                    styles.maxHeight = '';\n                }\n            }\n            if (config.maxWidth) {\n                if (hasExactPosition) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(config.maxWidth);\n                }\n                else if (hasFlexibleDimensions) {\n                    styles.maxWidth = '';\n                }\n            }\n            extendStyles(this._pane.style, styles);\n        };\n        /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the\n            // preferred position has changed since the last `apply`.\n            var styles = { top: '', bottom: '' };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n            // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n            // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n            // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n            // otherwise our positioning will be thrown off.\n            overlayPoint.y -= virtualKeyboardOffset;\n            // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n            // above or below the origin and the direction in which the element will expand.\n            if (position.overlayY === 'bottom') {\n                // When using `bottom`, we adjust the y position such that it is the distance\n                // from the bottom of the viewport rather than the top.\n                var documentHeight = this._document.documentElement.clientHeight;\n                styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n            }\n            else {\n                styles.top = coercion.coerceCssPixelValue(overlayPoint.y);\n            }\n            return styles;\n        };\n        /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the preferred position has\n            // changed since the last `apply`.\n            var styles = { left: '', right: '' };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n            // or \"after\" the origin, which determines the direction in which the element will expand.\n            // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n            // page is in RTL or LTR.\n            var horizontalStyleProperty;\n            if (this._isRtl()) {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n            }\n            else {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n            }\n            // When we're setting `right`, we adjust the x position such that it is the distance\n            // from the right edge of the viewport rather than the left edge.\n            if (horizontalStyleProperty === 'right') {\n                var documentWidth = this._document.documentElement.clientWidth;\n                styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n            }\n            else {\n                styles.left = coercion.coerceCssPixelValue(overlayPoint.x);\n            }\n            return styles;\n        };\n        /**\n         * Gets the view properties of the trigger and overlay, including whether they are clipped\n         * or completely outside the view of any of the strategy's scrollables.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {\n            // Note: needs fresh rects since the position could've changed.\n            var originBounds = this._getOriginRect();\n            var overlayBounds = this._pane.getBoundingClientRect();\n            // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n            // every time, we should be able to use the scrollTop of the containers if the size of those\n            // containers hasn't changed.\n            var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n                return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n            });\n            return {\n                isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n                isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n                isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n                isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n            };\n        };\n        /** Subtracts the amount that an element is overflowing on an axis from its length. */\n        FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n            var overflows = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                overflows[_i - 1] = arguments[_i];\n            }\n            return overflows.reduce(function (currentValue, currentOverflow) {\n                return currentValue - Math.max(currentOverflow, 0);\n            }, length);\n        };\n        /** Narrows the given viewport rect by the current _viewportMargin. */\n        FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {\n            // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n            // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n            // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n            // and `innerHeight` that do. This is necessary, because the overlay container uses\n            // 100% `width` and `height` which don't include the scrollbar either.\n            var width = this._document.documentElement.clientWidth;\n            var height = this._document.documentElement.clientHeight;\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            return {\n                top: scrollPosition.top + this._viewportMargin,\n                left: scrollPosition.left + this._viewportMargin,\n                right: scrollPosition.left + width - this._viewportMargin,\n                bottom: scrollPosition.top + height - this._viewportMargin,\n                width: width - (2 * this._viewportMargin),\n                height: height - (2 * this._viewportMargin),\n            };\n        };\n        /** Whether the we're dealing with an RTL context */\n        FlexibleConnectedPositionStrategy.prototype._isRtl = function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        };\n        /** Determines whether the overlay uses exact or flexible positioning. */\n        FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {\n            return !this._hasFlexibleDimensions || this._isPushed;\n        };\n        /** Retrieves the offset of a position along the x or y axis. */\n        FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {\n            if (axis === 'x') {\n                // We don't do something like `position['offset' + axis]` in\n                // order to avoid breking minifiers that rename properties.\n                return position.offsetX == null ? this._offsetX : position.offsetX;\n            }\n            return position.offsetY == null ? this._offsetY : position.offsetY;\n        };\n        /** Validates that the current position match the expected values. */\n        FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(function (pair) {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        };\n        /** Adds a single CSS class or an array of classes on the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {\n            var _this = this;\n            if (this._pane) {\n                coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                    if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                        _this._appliedPanelClasses.push(cssClass);\n                        _this._pane.classList.add(cssClass);\n                    }\n                });\n            }\n        };\n        /** Clears the classes that the position strategy has applied from the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {\n            var _this = this;\n            if (this._pane) {\n                this._appliedPanelClasses.forEach(function (cssClass) {\n                    _this._pane.classList.remove(cssClass);\n                });\n                this._appliedPanelClasses = [];\n            }\n        };\n        /** Returns the ClientRect of the current origin. */\n        FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {\n            var origin = this._origin;\n            if (origin instanceof i0.ElementRef) {\n                return origin.nativeElement.getBoundingClientRect();\n            }\n            // Check for Element so SVG elements are also supported.\n            if (origin instanceof Element) {\n                return origin.getBoundingClientRect();\n            }\n            var width = origin.width || 0;\n            var height = origin.height || 0;\n            // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n            return {\n                top: origin.y,\n                bottom: origin.y + height,\n                left: origin.x,\n                right: origin.x + width,\n                height: height,\n                width: width\n            };\n        };\n        return FlexibleConnectedPositionStrategy;\n    }());\n    /** Shallow-extends a stylesheet object with another stylesheet object. */\n    function extendStyles(destination, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                destination[key] = source[key];\n            }\n        }\n        return destination;\n    }\n    /**\n     * Extracts the pixel value as a number from a value, if it's a number\n     * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n     */\n    function getPixelValue(input) {\n        if (typeof input !== 'number' && input != null) {\n            var _a = __read(input.split(cssUnitPattern), 2), value = _a[0], units = _a[1];\n            return (!units || units === 'px') ? parseFloat(value) : null;\n        }\n        return input || null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative to some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n     * @breaking-change 8.0.0\n     */\n    var ConnectedPositionStrategy = /** @class */ (function () {\n        function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n            // the extra logic, we create an instance of the positioning strategy that has some\n            // defaults that make it behave as the old position strategy and to which we'll\n            // proxy all of the API calls.\n            this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n            this.withFallbackPosition(originPos, overlayPos);\n        }\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n            /** Whether the we're dealing with an RTL context */\n            get: function () {\n                return this._overlayRef.getDirection() === 'rtl';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n            /** Emits an event when the connection point changes. */\n            get: function () {\n                return this._positionStrategy.positionChanges;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attach this position strategy to an overlay. */\n        ConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            this._overlayRef = overlayRef;\n            this._positionStrategy.attach(overlayRef);\n            if (this._direction) {\n                overlayRef.setDirection(this._direction);\n                this._direction = null;\n            }\n        };\n        /** Disposes all resources used by the position strategy. */\n        ConnectedPositionStrategy.prototype.dispose = function () {\n            this._positionStrategy.dispose();\n        };\n        /** @docs-private */\n        ConnectedPositionStrategy.prototype.detach = function () {\n            this._positionStrategy.detach();\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin fits on-screen.\n         * @docs-private\n         */\n        ConnectedPositionStrategy.prototype.apply = function () {\n            this._positionStrategy.apply();\n        };\n        /**\n         * Re-positions the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n            this._positionStrategy.reapplyLastPosition();\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._positionStrategy.withScrollableContainers(scrollables);\n        };\n        /**\n         * Adds a new preferred fallback position.\n         * @param originPos\n         * @param overlayPos\n         */\n        ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {\n            var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n            this._preferredPositions.push(position);\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the layout direction so the overlay's position can be adjusted to match.\n         * @param dir New layout direction.\n         */\n        ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n            // Since the direction might be declared before the strategy is attached,\n            // we save the value in a temporary property and we'll transfer it to the\n            // overlay ref on attachment.\n            if (this._overlayRef) {\n                this._overlayRef.setDirection(dir);\n            }\n            else {\n                this._direction = dir;\n            }\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the x-axis\n         * @param offset New offset in the X axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n            this._positionStrategy.withDefaultOffsetX(offset);\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the y-axis\n         * @param  offset New offset in the Y axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n            this._positionStrategy.withDefaultOffsetY(offset);\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            this._positionStrategy.withLockedPosition(isLocked);\n            return this;\n        };\n        /**\n         * Overwrites the current set of positions with an array of new ones.\n         * @param positions Position pairs to be set on the strategy.\n         */\n        ConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions.slice();\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the origin element, relative to which to position the overlay.\n         * @param origin Reference to the new origin element.\n         */\n        ConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._positionStrategy.setOrigin(origin);\n            return this;\n        };\n        return ConnectedPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Class to be added to the overlay pane wrapper. */\n    var wrapperClass = 'cdk-global-overlay-wrapper';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * explicit position relative to the browser's viewport. We use flexbox, instead of\n     * transforms, in order to avoid issues with subpixel rendering which can cause the\n     * element to become blurry.\n     */\n    var GlobalPositionStrategy = /** @class */ (function () {\n        function GlobalPositionStrategy() {\n            this._cssPosition = 'static';\n            this._topOffset = '';\n            this._bottomOffset = '';\n            this._leftOffset = '';\n            this._rightOffset = '';\n            this._alignItems = '';\n            this._justifyContent = '';\n            this._width = '';\n            this._height = '';\n        }\n        GlobalPositionStrategy.prototype.attach = function (overlayRef) {\n            var config = overlayRef.getConfig();\n            this._overlayRef = overlayRef;\n            if (this._width && !config.width) {\n                overlayRef.updateSize({ width: this._width });\n            }\n            if (this._height && !config.height) {\n                overlayRef.updateSize({ height: this._height });\n            }\n            overlayRef.hostElement.classList.add(wrapperClass);\n            this._isDisposed = false;\n        };\n        /**\n         * Sets the top position of the overlay. Clears any previously set vertical position.\n         * @param value New top offset.\n         */\n        GlobalPositionStrategy.prototype.top = function (value) {\n            if (value === void 0) { value = ''; }\n            this._bottomOffset = '';\n            this._topOffset = value;\n            this._alignItems = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the left position of the overlay. Clears any previously set horizontal position.\n         * @param value New left offset.\n         */\n        GlobalPositionStrategy.prototype.left = function (value) {\n            if (value === void 0) { value = ''; }\n            this._rightOffset = '';\n            this._leftOffset = value;\n            this._justifyContent = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the bottom position of the overlay. Clears any previously set vertical position.\n         * @param value New bottom offset.\n         */\n        GlobalPositionStrategy.prototype.bottom = function (value) {\n            if (value === void 0) { value = ''; }\n            this._topOffset = '';\n            this._bottomOffset = value;\n            this._alignItems = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the right position of the overlay. Clears any previously set horizontal position.\n         * @param value New right offset.\n         */\n        GlobalPositionStrategy.prototype.right = function (value) {\n            if (value === void 0) { value = ''; }\n            this._leftOffset = '';\n            this._rightOffset = value;\n            this._justifyContent = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the overlay width and clears any previously set width.\n         * @param value New width for the overlay\n         * @deprecated Pass the `width` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.width = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ width: value });\n            }\n            else {\n                this._width = value;\n            }\n            return this;\n        };\n        /**\n         * Sets the overlay height and clears any previously set height.\n         * @param value New height for the overlay\n         * @deprecated Pass the `height` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.height = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ height: value });\n            }\n            else {\n                this._height = value;\n            }\n            return this;\n        };\n        /**\n         * Centers the overlay horizontally with an optional offset.\n         * Clears any previously set horizontal position.\n         *\n         * @param offset Overlay offset from the horizontal center.\n         */\n        GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.left(offset);\n            this._justifyContent = 'center';\n            return this;\n        };\n        /**\n         * Centers the overlay vertically with an optional offset.\n         * Clears any previously set vertical position.\n         *\n         * @param offset Overlay offset from the vertical center.\n         */\n        GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.top(offset);\n            this._alignItems = 'center';\n            return this;\n        };\n        /**\n         * Apply the position to the element.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.apply = function () {\n            // Since the overlay ref applies the strategy asynchronously, it could\n            // have been disposed before it ends up being applied. If that is the\n            // case, we shouldn't do anything.\n            if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parentStyles = this._overlayRef.hostElement.style;\n            var config = this._overlayRef.getConfig();\n            var width = config.width, height = config.height, maxWidth = config.maxWidth, maxHeight = config.maxHeight;\n            var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n                (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n            var shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n                (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n            styles.position = this._cssPosition;\n            styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n            styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n            styles.marginBottom = this._bottomOffset;\n            styles.marginRight = this._rightOffset;\n            if (shouldBeFlushHorizontally) {\n                parentStyles.justifyContent = 'flex-start';\n            }\n            else if (this._justifyContent === 'center') {\n                parentStyles.justifyContent = 'center';\n            }\n            else if (this._overlayRef.getConfig().direction === 'rtl') {\n                // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n                // don't want that because our positioning is explicitly `left` and `right`, hence\n                // why we do another inversion to ensure that the overlay stays in the same position.\n                // TODO: reconsider this if we add `start` and `end` methods.\n                if (this._justifyContent === 'flex-start') {\n                    parentStyles.justifyContent = 'flex-end';\n                }\n                else if (this._justifyContent === 'flex-end') {\n                    parentStyles.justifyContent = 'flex-start';\n                }\n            }\n            else {\n                parentStyles.justifyContent = this._justifyContent;\n            }\n            parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n        };\n        /**\n         * Cleans up the DOM changes from the position strategy.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed || !this._overlayRef) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parent = this._overlayRef.hostElement;\n            var parentStyles = parent.style;\n            parent.classList.remove(wrapperClass);\n            parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n                styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n            this._overlayRef = null;\n            this._isDisposed = true;\n        };\n        return GlobalPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Builder for overlay position strategy. */\n    var OverlayPositionBuilder = /** @class */ (function () {\n        function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n        }\n        /**\n         * Creates a global position strategy.\n         */\n        OverlayPositionBuilder.prototype.global = function () {\n            return new GlobalPositionStrategy();\n        };\n        /**\n         * Creates a relative position strategy.\n         * @param elementRef\n         * @param originPos\n         * @param overlayPos\n         * @deprecated Use `flexibleConnectedTo` instead.\n         * @breaking-change 8.0.0\n         */\n        OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n            return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        /**\n         * Creates a flexible position strategy.\n         * @param origin Origin relative to which to position the overlay.\n         */\n        OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {\n            return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        OverlayPositionBuilder.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayPositionBuilder.ctorParameters = function () { return [\n            { type: i1.ViewportRuler },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i2.Platform },\n            { type: OverlayContainer }\n        ]; };\n        OverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n        return OverlayPositionBuilder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Next overlay unique ID. */\n    var nextUniqueId = 0;\n    // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n    // which needs to be different depending on where OverlayModule is imported.\n    /**\n     * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n     * used as a low-level building block for other components. Dialogs, tooltips, menus,\n     * selects, etc. can all be built using overlays. The service should primarily be used by authors\n     * of re-usable components rather than developers building end-user applications.\n     *\n     * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n     */\n    var Overlay = /** @class */ (function () {\n        function Overlay(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            this.scrollStrategies = scrollStrategies;\n            this._overlayContainer = _overlayContainer;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._positionBuilder = _positionBuilder;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._injector = _injector;\n            this._ngZone = _ngZone;\n            this._document = _document;\n            this._directionality = _directionality;\n            this._location = _location;\n        }\n        /**\n         * Creates an overlay.\n         * @param config Configuration applied to the overlay.\n         * @returns Reference to the created overlay.\n         */\n        Overlay.prototype.create = function (config) {\n            var host = this._createHostElement();\n            var pane = this._createPaneElement(host);\n            var portalOutlet = this._createPortalOutlet(pane);\n            var overlayConfig = new OverlayConfig(config);\n            overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n            return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n        };\n        /**\n         * Gets a position builder that can be used, via fluent API,\n         * to construct and configure a position strategy.\n         * @returns An overlay position builder.\n         */\n        Overlay.prototype.position = function () {\n            return this._positionBuilder;\n        };\n        /**\n         * Creates the DOM element for an overlay and appends it to the overlay container.\n         * @returns Newly-created pane element\n         */\n        Overlay.prototype._createPaneElement = function (host) {\n            var pane = this._document.createElement('div');\n            pane.id = \"cdk-overlay-\" + nextUniqueId++;\n            pane.classList.add('cdk-overlay-pane');\n            host.appendChild(pane);\n            return pane;\n        };\n        /**\n         * Creates the host element that wraps around an overlay\n         * and can be used for advanced positioning.\n         * @returns Newly-create host element.\n         */\n        Overlay.prototype._createHostElement = function () {\n            var host = this._document.createElement('div');\n            this._overlayContainer.getContainerElement().appendChild(host);\n            return host;\n        };\n        /**\n         * Create a DomPortalOutlet into which the overlay content can be loaded.\n         * @param pane The DOM element to turn into a portal outlet.\n         * @returns A portal outlet for the given DOM element.\n         */\n        Overlay.prototype._createPortalOutlet = function (pane) {\n            // We have to resolve the ApplicationRef later in order to allow people\n            // to use overlay-based providers during app initialization.\n            if (!this._appRef) {\n                this._appRef = this._injector.get(i0.ApplicationRef);\n            }\n            return new portal.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n        };\n        Overlay.decorators = [\n            { type: i0.Injectable }\n        ];\n        /** @nocollapse */\n        Overlay.ctorParameters = function () { return [\n            { type: ScrollStrategyOptions },\n            { type: OverlayContainer },\n            { type: i0.ComponentFactoryResolver },\n            { type: OverlayPositionBuilder },\n            { type: OverlayKeyboardDispatcher },\n            { type: i0.Injector },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: bidi.Directionality },\n            { type: i1$1.Location, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return Overlay;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n    var defaultPositionList = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom'\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top'\n        }\n    ];\n    /** Injection token that determines the scroll handling while the connected overlay is open. */\n    var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new i0.InjectionToken('cdk-connected-overlay-scroll-strategy');\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function (config) { return overlay.scrollStrategies.reposition(config); };\n    }\n    /**\n     * Directive applied to an element to make it usable as an origin for an Overlay using a\n     * ConnectedPositionStrategy.\n     */\n    var CdkOverlayOrigin = /** @class */ (function () {\n        function CdkOverlayOrigin(\n        /** Reference to the element on which the directive is applied. */\n        elementRef) {\n            this.elementRef = elementRef;\n        }\n        CdkOverlayOrigin.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                        exportAs: 'cdkOverlayOrigin',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkOverlayOrigin.ctorParameters = function () { return [\n            { type: i0.ElementRef }\n        ]; };\n        return CdkOverlayOrigin;\n    }());\n    /**\n     * Directive to facilitate declarative creation of an\n     * Overlay using a FlexibleConnectedPositionStrategy.\n     */\n    var CdkConnectedOverlay = /** @class */ (function () {\n        // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n        function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n            this._overlay = _overlay;\n            this._dir = _dir;\n            this._hasBackdrop = false;\n            this._lockPosition = false;\n            this._growAfterOpen = false;\n            this._flexibleDimensions = false;\n            this._push = false;\n            this._backdropSubscription = rxjs.Subscription.EMPTY;\n            /** Margin between the overlay and the viewport edges. */\n            this.viewportMargin = 0;\n            /** Whether the overlay is open. */\n            this.open = false;\n            /** Event emitted when the backdrop is clicked. */\n            this.backdropClick = new i0.EventEmitter();\n            /** Event emitted when the position has changed. */\n            this.positionChange = new i0.EventEmitter();\n            /** Event emitted when the overlay has been attached. */\n            this.attach = new i0.EventEmitter();\n            /** Event emitted when the overlay has been detached. */\n            this.detach = new i0.EventEmitter();\n            /** Emits when there are keyboard events that are targeted at the overlay. */\n            this.overlayKeydown = new i0.EventEmitter();\n            this._templatePortal = new portal.TemplatePortal(templateRef, viewContainerRef);\n            this._scrollStrategyFactory = scrollStrategyFactory;\n            this.scrollStrategy = this._scrollStrategyFactory();\n        }\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n            /** The offset in pixels for the overlay connection point on the x-axis */\n            get: function () { return this._offsetX; },\n            set: function (offsetX) {\n                this._offsetX = offsetX;\n                if (this._position) {\n                    this._updatePositionStrategy(this._position);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n            /** The offset in pixels for the overlay connection point on the y-axis */\n            get: function () { return this._offsetY; },\n            set: function (offsetY) {\n                this._offsetY = offsetY;\n                if (this._position) {\n                    this._updatePositionStrategy(this._position);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n            /** Whether or not the overlay should attach a backdrop. */\n            get: function () { return this._hasBackdrop; },\n            set: function (value) { this._hasBackdrop = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n            /** Whether or not the overlay should be locked when scrolling. */\n            get: function () { return this._lockPosition; },\n            set: function (value) { this._lockPosition = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            get: function () { return this._flexibleDimensions; },\n            set: function (value) {\n                this._flexibleDimensions = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n            /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n            get: function () { return this._growAfterOpen; },\n            set: function (value) { this._growAfterOpen = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n            /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n            get: function () { return this._push; },\n            set: function (value) { this._push = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n            /** The associated overlay reference. */\n            get: function () {\n                return this._overlayRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n            /** The element's layout direction. */\n            get: function () {\n                return this._dir ? this._dir.value : 'ltr';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkConnectedOverlay.prototype.ngOnDestroy = function () {\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n            }\n            this._backdropSubscription.unsubscribe();\n        };\n        CdkConnectedOverlay.prototype.ngOnChanges = function (changes) {\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n                this._overlayRef.updateSize({\n                    width: this.width,\n                    minWidth: this.minWidth,\n                    height: this.height,\n                    minHeight: this.minHeight,\n                });\n                if (changes['origin'] && this.open) {\n                    this._position.apply();\n                }\n            }\n            if (changes['open']) {\n                this.open ? this._attachOverlay() : this._detachOverlay();\n            }\n        };\n        /** Creates an overlay */\n        CdkConnectedOverlay.prototype._createOverlay = function () {\n            var _this = this;\n            if (!this.positions || !this.positions.length) {\n                this.positions = defaultPositionList;\n            }\n            this._overlayRef = this._overlay.create(this._buildConfig());\n            this._overlayRef.keydownEvents().subscribe(function (event) {\n                _this.overlayKeydown.next(event);\n                if (event.keyCode === keycodes.ESCAPE && !keycodes.hasModifierKey(event)) {\n                    event.preventDefault();\n                    _this._detachOverlay();\n                }\n            });\n        };\n        /** Builds the overlay config based on the directive's inputs */\n        CdkConnectedOverlay.prototype._buildConfig = function () {\n            var positionStrategy = this._position =\n                this.positionStrategy || this._createPositionStrategy();\n            var overlayConfig = new OverlayConfig({\n                direction: this._dir,\n                positionStrategy: positionStrategy,\n                scrollStrategy: this.scrollStrategy,\n                hasBackdrop: this.hasBackdrop\n            });\n            if (this.width || this.width === 0) {\n                overlayConfig.width = this.width;\n            }\n            if (this.height || this.height === 0) {\n                overlayConfig.height = this.height;\n            }\n            if (this.minWidth || this.minWidth === 0) {\n                overlayConfig.minWidth = this.minWidth;\n            }\n            if (this.minHeight || this.minHeight === 0) {\n                overlayConfig.minHeight = this.minHeight;\n            }\n            if (this.backdropClass) {\n                overlayConfig.backdropClass = this.backdropClass;\n            }\n            if (this.panelClass) {\n                overlayConfig.panelClass = this.panelClass;\n            }\n            return overlayConfig;\n        };\n        /** Updates the state of a position strategy, based on the values of the directive inputs. */\n        CdkConnectedOverlay.prototype._updatePositionStrategy = function (positionStrategy) {\n            var _this = this;\n            var positions = this.positions.map(function (currentPosition) { return ({\n                originX: currentPosition.originX,\n                originY: currentPosition.originY,\n                overlayX: currentPosition.overlayX,\n                overlayY: currentPosition.overlayY,\n                offsetX: currentPosition.offsetX || _this.offsetX,\n                offsetY: currentPosition.offsetY || _this.offsetY,\n                panelClass: currentPosition.panelClass || undefined,\n            }); });\n            return positionStrategy\n                .setOrigin(this.origin.elementRef)\n                .withPositions(positions)\n                .withFlexibleDimensions(this.flexibleDimensions)\n                .withPush(this.push)\n                .withGrowAfterOpen(this.growAfterOpen)\n                .withViewportMargin(this.viewportMargin)\n                .withLockedPosition(this.lockPosition)\n                .withTransformOriginOn(this.transformOriginSelector);\n        };\n        /** Returns the position strategy of the overlay to be set on the overlay config */\n        CdkConnectedOverlay.prototype._createPositionStrategy = function () {\n            var _this = this;\n            var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n            this._updatePositionStrategy(strategy);\n            strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n            return strategy;\n        };\n        /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n        CdkConnectedOverlay.prototype._attachOverlay = function () {\n            var _this = this;\n            if (!this._overlayRef) {\n                this._createOverlay();\n            }\n            else {\n                // Update the overlay size, in case the directive's inputs have changed\n                this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n            }\n            if (!this._overlayRef.hasAttached()) {\n                this._overlayRef.attach(this._templatePortal);\n                this.attach.emit();\n            }\n            if (this.hasBackdrop) {\n                this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                    _this.backdropClick.emit(event);\n                });\n            }\n            else {\n                this._backdropSubscription.unsubscribe();\n            }\n        };\n        /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n        CdkConnectedOverlay.prototype._detachOverlay = function () {\n            if (this._overlayRef) {\n                this._overlayRef.detach();\n                this.detach.emit();\n            }\n            this._backdropSubscription.unsubscribe();\n        };\n        CdkConnectedOverlay.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                        exportAs: 'cdkConnectedOverlay'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkConnectedOverlay.ctorParameters = function () { return [\n            { type: Overlay },\n            { type: i0.TemplateRef },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }\n        ]; };\n        CdkConnectedOverlay.propDecorators = {\n            origin: [{ type: i0.Input, args: ['cdkConnectedOverlayOrigin',] }],\n            positions: [{ type: i0.Input, args: ['cdkConnectedOverlayPositions',] }],\n            positionStrategy: [{ type: i0.Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n            offsetX: [{ type: i0.Input, args: ['cdkConnectedOverlayOffsetX',] }],\n            offsetY: [{ type: i0.Input, args: ['cdkConnectedOverlayOffsetY',] }],\n            width: [{ type: i0.Input, args: ['cdkConnectedOverlayWidth',] }],\n            height: [{ type: i0.Input, args: ['cdkConnectedOverlayHeight',] }],\n            minWidth: [{ type: i0.Input, args: ['cdkConnectedOverlayMinWidth',] }],\n            minHeight: [{ type: i0.Input, args: ['cdkConnectedOverlayMinHeight',] }],\n            backdropClass: [{ type: i0.Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n            panelClass: [{ type: i0.Input, args: ['cdkConnectedOverlayPanelClass',] }],\n            viewportMargin: [{ type: i0.Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n            scrollStrategy: [{ type: i0.Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n            open: [{ type: i0.Input, args: ['cdkConnectedOverlayOpen',] }],\n            transformOriginSelector: [{ type: i0.Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n            hasBackdrop: [{ type: i0.Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n            lockPosition: [{ type: i0.Input, args: ['cdkConnectedOverlayLockPosition',] }],\n            flexibleDimensions: [{ type: i0.Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n            growAfterOpen: [{ type: i0.Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n            push: [{ type: i0.Input, args: ['cdkConnectedOverlayPush',] }],\n            backdropClick: [{ type: i0.Output }],\n            positionChange: [{ type: i0.Output }],\n            attach: [{ type: i0.Output }],\n            detach: [{ type: i0.Output }],\n            overlayKeydown: [{ type: i0.Output }]\n        };\n        return CdkConnectedOverlay;\n    }());\n    /** @docs-private */\n    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition(); };\n    }\n    /** @docs-private */\n    var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n        provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n        deps: [Overlay],\n        useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var OverlayModule = /** @class */ (function () {\n        function OverlayModule() {\n        }\n        OverlayModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [bidi.BidiModule, portal.PortalModule, i1.ScrollingModule],\n                        exports: [CdkConnectedOverlay, CdkOverlayOrigin, i1.ScrollingModule],\n                        declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                        providers: [\n                            Overlay,\n                            CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                        ],\n                    },] }\n        ];\n        return OverlayModule;\n    }());\n    /**\n     * @deprecated Use `OverlayModule` instead.\n     * @breaking-change 8.0.0\n     * @docs-private\n     */\n    var OVERLAY_PROVIDERS = [\n        Overlay,\n        OverlayPositionBuilder,\n        OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n        OVERLAY_CONTAINER_PROVIDER,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ];\n\n    /**\n     * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n     * Fullscreen mode\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n     *\n     * Should be provided in the root component.\n     */\n    var FullscreenOverlayContainer = /** @class */ (function (_super) {\n        __extends(FullscreenOverlayContainer, _super);\n        function FullscreenOverlayContainer(_document, \n        /**\n         * @deprecated `platform` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        platform) {\n            return _super.call(this, _document, platform) || this;\n        }\n        FullscreenOverlayContainer.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            if (this._fullScreenEventName && this._fullScreenListener) {\n                this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n            }\n        };\n        FullscreenOverlayContainer.prototype._createContainer = function () {\n            var _this = this;\n            _super.prototype._createContainer.call(this);\n            this._adjustParentForFullscreenChange();\n            this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n        };\n        FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n            if (!this._containerElement) {\n                return;\n            }\n            var fullscreenElement = this.getFullscreenElement();\n            var parent = fullscreenElement || this._document.body;\n            parent.appendChild(this._containerElement);\n        };\n        FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n            var eventName = this._getEventName();\n            if (eventName) {\n                if (this._fullScreenListener) {\n                    this._document.removeEventListener(eventName, this._fullScreenListener);\n                }\n                this._document.addEventListener(eventName, fn);\n                this._fullScreenListener = fn;\n            }\n        };\n        FullscreenOverlayContainer.prototype._getEventName = function () {\n            if (!this._fullScreenEventName) {\n                var _document = this._document;\n                if (_document.fullscreenEnabled) {\n                    this._fullScreenEventName = 'fullscreenchange';\n                }\n                else if (_document.webkitFullscreenEnabled) {\n                    this._fullScreenEventName = 'webkitfullscreenchange';\n                }\n                else if (_document.mozFullScreenEnabled) {\n                    this._fullScreenEventName = 'mozfullscreenchange';\n                }\n                else if (_document.msFullscreenEnabled) {\n                    this._fullScreenEventName = 'MSFullscreenChange';\n                }\n            }\n            return this._fullScreenEventName;\n        };\n        /**\n         * When the page is put into fullscreen mode, a specific element is specified.\n         * Only that element and its children are visible when in fullscreen mode.\n         */\n        FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n            var _document = this._document;\n            return _document.fullscreenElement ||\n                _document.webkitFullscreenElement ||\n                _document.mozFullScreenElement ||\n                _document.msFullscreenElement ||\n                null;\n        };\n        FullscreenOverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        FullscreenOverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i2.Platform }\n        ]; };\n        FullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n        return FullscreenOverlayContainer;\n    }(OverlayContainer));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    Object.defineProperty(exports, 'CdkScrollable', {\n        enumerable: true,\n        get: function () {\n            return i1.CdkScrollable;\n        }\n    });\n    Object.defineProperty(exports, 'ScrollDispatcher', {\n        enumerable: true,\n        get: function () {\n            return i1.ScrollDispatcher;\n        }\n    });\n    Object.defineProperty(exports, 'ViewportRuler', {\n        enumerable: true,\n        get: function () {\n            return i1.ViewportRuler;\n        }\n    });\n    exports.BlockScrollStrategy = BlockScrollStrategy;\n    exports.CdkConnectedOverlay = CdkConnectedOverlay;\n    exports.CdkOverlayOrigin = CdkOverlayOrigin;\n    exports.CloseScrollStrategy = CloseScrollStrategy;\n    exports.ConnectedOverlayPositionChange = ConnectedOverlayPositionChange;\n    exports.ConnectedPositionStrategy = ConnectedPositionStrategy;\n    exports.ConnectionPositionPair = ConnectionPositionPair;\n    exports.FlexibleConnectedPositionStrategy = FlexibleConnectedPositionStrategy;\n    exports.FullscreenOverlayContainer = FullscreenOverlayContainer;\n    exports.GlobalPositionStrategy = GlobalPositionStrategy;\n    exports.NoopScrollStrategy = NoopScrollStrategy;\n    exports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;\n    exports.Overlay = Overlay;\n    exports.OverlayConfig = OverlayConfig;\n    exports.OverlayContainer = OverlayContainer;\n    exports.OverlayKeyboardDispatcher = OverlayKeyboardDispatcher;\n    exports.OverlayModule = OverlayModule;\n    exports.OverlayPositionBuilder = OverlayPositionBuilder;\n    exports.OverlayRef = OverlayRef;\n    exports.RepositionScrollStrategy = RepositionScrollStrategy;\n    exports.ScrollStrategyOptions = ScrollStrategyOptions;\n    exports.ScrollingVisibility = ScrollingVisibility;\n    exports.validateHorizontalPosition = validateHorizontalPosition;\n    exports.validateVerticalPosition = validateVerticalPosition;\n    exports.ɵangular_material_src_cdk_overlay_overlay_a = OVERLAY_CONTAINER_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_b = OVERLAY_CONTAINER_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_c = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_d = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_e = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_f = OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_g = OVERLAY_KEYBOARD_DISPATCHER_PROVIDER;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-overlay.umd.js.map\n"]}
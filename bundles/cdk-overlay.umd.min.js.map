{"version":3,"sources":["src/cdk/cdk-overlay.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","overlay","tslib","scrolling","common","core","coercion","bidi","portal","rxjs","operators","platform","keycodes","this","tslib_1","i1","i1$1","i0","i3","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","prototype","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_this","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","config","block","reposition","decorators","type","Injectable","args","providedIn","ctorParameters","ScrollDispatcher","ViewportRuler","NgZone","undefined","Inject","DOCUMENT","ngInjectableDef","ɵɵdefineInjectable","ScrollStrategyOptions_Factory","ɵɵinject","token","OverlayConfig","e_1","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","configKeys_1","__values","configKeys_1_1","next","done","key","value","e_1_1","error","return","call","ConnectionPositionPair","origin","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","Optional","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","ngOnDestroy","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","SkipSelf","useFactory","OverlayContainer","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","previousContainers","getElementsByClassName","container","createElement","appendChild","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","Observable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","defineProperty","get","enumerable","configurable","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","__assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","forEach","cssClass","takeUntil","merge","children","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","e_2","_b","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_c","_d","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","flexibleFits_1","flexibleFits_1_1","fit","score","weight","e_2_1","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","positions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","_i","arguments","reduce","currentValue","currentOverflow","axis","pair","ElementRef","HTMLElement","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","overlayContainer","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","flexibleConnectedTo","Platform","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","Directive","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","EventEmitter","positionChange","overlayKeydown","_templatePortal","TemplatePortal","_scrollStrategyFactory","set","_position","_updatePositionStrategy","coerceBooleanProperty","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","lockPosition","p","emit","TemplateRef","ViewContainerRef","propDecorators","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollingModule","declarations","providers","OVERLAY_PROVIDERS","VIEWPORT_RULER_PROVIDER","FullscreenOverlayContainer","_super","__extends","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","CdkScrollable","ɵangular_material_src_cdk_overlay_overlay_g","ɵangular_material_src_cdk_overlay_overlay_f","ɵangular_material_src_cdk_overlay_overlay_b","ɵangular_material_src_cdk_overlay_overlay_a","ɵangular_material_src_cdk_overlay_overlay_c","ɵangular_material_src_cdk_overlay_overlay_e","ɵangular_material_src_cdk_overlay_overlay_d"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,SAAUA,QAAQ,0BAA2BA,QAAQ,mBAAoBA,QAAQ,iBAAkBA,QAAQ,yBAA0BA,QAAQ,qBAAsBA,QAAQ,uBAAwBA,QAAQ,QAASA,QAAQ,kBAAmBA,QAAQ,yBAA0BA,QAAQ,0BAC/V,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,uBAAwB,CAAC,UAAW,QAAS,yBAA0B,kBAAmB,gBAAiB,wBAAyB,oBAAqB,sBAAuB,OAAQ,iBAAkB,wBAAyB,yBAA0BJ,GACvRA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,IAAMT,EAAOQ,GAAGC,KAAO,GAAIT,EAAOQ,GAAGC,IAAIC,QAAU,IAAKV,EAAOW,MAAOX,EAAOQ,GAAGC,IAAIG,UAAWZ,EAAOQ,GAAGK,OAAQb,EAAOQ,GAAGM,KAAMd,EAAOQ,GAAGC,IAAIM,SAAUf,EAAOQ,GAAGC,IAAIO,KAAMhB,EAAOQ,GAAGC,IAAIQ,OAAQjB,EAAOkB,KAAMlB,EAAOkB,KAAKC,UAAWnB,EAAOQ,GAAGC,IAAIW,SAAUpB,EAAOQ,GAAGC,IAAIY,UAH3V,CAIEC,KAAM,SAAUpB,EAASqB,EAASC,EAAIC,EAAMC,EAAIX,EAAUC,EAAMC,EAAQC,EAAMC,EAAWQ,EAAIN,GAAY;;;;;;;OAYvG,IAAIO,EAAqC,WACrC,SAASA,EAAoBC,EAAgBC,GACzCR,KAAKO,eAAiBA,EACtBP,KAAKS,oBAAsB,CAAEC,IAAK,GAAIC,KAAM,IAC5CX,KAAKY,YAAa,EAClBZ,KAAKa,UAAYL,EAqDrB,OAlDAF,EAAoBQ,UAAUC,OAAS,aAEvCT,EAAoBQ,UAAUE,OAAS,WACnC,GAAIhB,KAAKiB,gBAAiB,CACtB,IAAIC,EAAOlB,KAAKa,UAAUM,gBAC1BnB,KAAKoB,wBAA0BpB,KAAKO,eAAec,4BAEnDrB,KAAKS,oBAAoBE,KAAOO,EAAKI,MAAMX,MAAQ,GACnDX,KAAKS,oBAAoBC,IAAMQ,EAAKI,MAAMZ,KAAO,GAGjDQ,EAAKI,MAAMX,KAAOlB,EAAS8B,qBAAqBvB,KAAKoB,wBAAwBT,MAC7EO,EAAKI,MAAMZ,IAAMjB,EAAS8B,qBAAqBvB,KAAKoB,wBAAwBV,KAC5EQ,EAAKM,UAAUC,IAAI,0BACnBzB,KAAKY,YAAa,IAI1BN,EAAoBQ,UAAUY,QAAU,WACpC,GAAI1B,KAAKY,WAAY,CACjB,IAAIe,EAAO3B,KAAKa,UAAUM,gBAEtBS,EAAYD,EAAKL,MACjBO,EAFO7B,KAAKa,UAAUiB,KAELR,MACjBS,EAA6BH,EAAUI,gBAAkB,GACzDC,EAA6BJ,EAAUG,gBAAkB,GAC7DhC,KAAKY,YAAa,EAClBgB,EAAUjB,KAAOX,KAAKS,oBAAoBE,KAC1CiB,EAAUlB,IAAMV,KAAKS,oBAAoBC,IACzCiB,EAAKH,UAAUU,OAAO,0BAGtBN,EAAUI,eAAiBH,EAAUG,eAAiB,OACtDG,OAAOC,OAAOpC,KAAKoB,wBAAwBT,KAAMX,KAAKoB,wBAAwBV,KAC9EkB,EAAUI,eAAiBD,EAC3BF,EAAUG,eAAiBC,IAGnC3B,EAAoBQ,UAAUG,cAAgB,WAK1C,GADWjB,KAAKa,UAAUM,gBACjBK,UAAUa,SAAS,2BAA6BrC,KAAKY,WAC1D,OAAO,EAEX,IAAIkB,EAAO9B,KAAKa,UAAUiB,KACtBQ,EAAWtC,KAAKO,eAAegC,kBACnC,OAAOT,EAAKU,aAAeF,EAASG,QAAUX,EAAKY,YAAcJ,EAASK,OAEvErC,EA1D6B;;;;;;;OAuExC,SAASsC,IACL,OAAOC,MAAM,8CAMjB,IAAIC,EAAqC,WACrC,SAASA,EAAoBC,EAAmBC,EAASzC,EAAgB0C,GACrE,IAAIC,EAAQlD,KACZA,KAAK+C,kBAAoBA,EACzB/C,KAAKgD,QAAUA,EACfhD,KAAKO,eAAiBA,EACtBP,KAAKiD,QAAUA,EACfjD,KAAKmD,oBAAsB,KAE3BnD,KAAKoD,QAAU,WACXF,EAAMxB,UACFwB,EAAMG,YAAYC,eAClBJ,EAAMF,QAAQO,IAAI,WAAc,OAAOL,EAAMG,YAAYG,YA6CrE,OAxCAV,EAAoBhC,UAAUC,OAAS,SAAU0C,GAC7C,GAAIzD,KAAKqD,YACL,MAAMT,IAEV5C,KAAKqD,YAAcI,GAGvBX,EAAoBhC,UAAUE,OAAS,WACnC,IAAIkC,EAAQlD,KACZ,IAAIA,KAAKmD,oBAAT,CAGA,IAAIO,EAAS1D,KAAK+C,kBAAkBY,SAAS,GACzC3D,KAAKiD,SAAWjD,KAAKiD,QAAQW,WAAa5D,KAAKiD,QAAQW,UAAY,GACnE5D,KAAK6D,uBAAyB7D,KAAKO,eAAec,4BAA4BX,IAC9EV,KAAKmD,oBAAsBO,EAAOI,UAAU,WACxC,IAAIC,EAAiBb,EAAM3C,eAAec,4BAA4BX,IAClEsD,KAAKC,IAAIF,EAAiBb,EAAMW,wBAA0BX,EAAMD,QAAQW,UACxEV,EAAME,UAGNF,EAAMG,YAAYa,oBAK1BlE,KAAKmD,oBAAsBO,EAAOI,UAAU9D,KAAKoD,WAIzDN,EAAoBhC,UAAUY,QAAU,WAChC1B,KAAKmD,sBACLnD,KAAKmD,oBAAoBgB,cACzBnE,KAAKmD,oBAAsB,OAGnCL,EAAoBhC,UAAU0C,OAAS,WACnCxD,KAAK0B,UACL1B,KAAKqD,YAAc,MAEhBP,EAzD6B,GAoEpCsB,EAAoC,WACpC,SAASA,KAQT,OALAA,EAAmBtD,UAAUE,OAAS,aAEtCoD,EAAmBtD,UAAUY,QAAU,aAEvC0C,EAAmBtD,UAAUC,OAAS,aAC/BqD,EAT4B;;;;;;;;;;;;;;;AA4BvC,SAASC,EAA6BC,EAASC,GAC3C,OAAOA,EAAiBC,KAAK,SAAUC,GAKnC,OAJmBH,EAAQI,OAASD,EAAgB/D,KACjC4D,EAAQ5D,IAAM+D,EAAgBC,QAC/BJ,EAAQK,MAAQF,EAAgB9D,MAC/B2D,EAAQ3D,KAAO8D,EAAgBE,QAW1D,SAASC,EAA4BN,EAASC,GAC1C,OAAOA,EAAiBC,KAAK,SAAUK,GAKnC,OAJmBP,EAAQ5D,IAAMmE,EAAoBnE,KAClC4D,EAAQI,OAASG,EAAoBH,QACtCJ,EAAQ3D,KAAOkE,EAAoBlE,MAClC2D,EAAQK,MAAQE,EAAoBF;;;;;;;OAe/D,IAAIG,EAA0C,WAC1C,SAASA,EAAyB/B,EAAmBxC,EAAgByC,EAASC,GAC1EjD,KAAK+C,kBAAoBA,EACzB/C,KAAKO,eAAiBA,EACtBP,KAAKgD,QAAUA,EACfhD,KAAKiD,QAAUA,EACfjD,KAAKmD,oBAAsB,KA0C/B,OAvCA2B,EAAyBhE,UAAUC,OAAS,SAAU0C,GAClD,GAAIzD,KAAKqD,YACL,MAAMT,IAEV5C,KAAKqD,YAAcI,GAGvBqB,EAAyBhE,UAAUE,OAAS,WACxC,IAAIkC,EAAQlD,KACPA,KAAKmD,sBAENnD,KAAKmD,oBAAsBnD,KAAK+C,kBAAkBY,SADnC3D,KAAKiD,QAAUjD,KAAKiD,QAAQ8B,eAAiB,GACSjB,UAAU,WAG3E,GAFAZ,EAAMG,YAAYa,iBAEdhB,EAAMD,SAAWC,EAAMD,QAAQ+B,UAAW,CAC1C,IAAIC,EAAc/B,EAAMG,YAAY6B,eAAeC,wBAC/CC,EAAKlC,EAAM3C,eAAegC,kBAAmBI,EAAQyC,EAAGzC,MAAOF,EAAS2C,EAAG3C,OAI3E4B,EAA6BY,EADf,CAAC,CAAEtC,MAAOA,EAAOF,OAAQA,EAAQiC,OAAQjC,EAAQkC,MAAOhC,EAAOjC,IAAK,EAAGC,KAAM,OAE3FuC,EAAMxB,UACNwB,EAAMF,QAAQO,IAAI,WAAc,OAAOL,EAAMG,YAAYG,iBAO7EsB,EAAyBhE,UAAUY,QAAU,WACrC1B,KAAKmD,sBACLnD,KAAKmD,oBAAoBgB,cACzBnE,KAAKmD,oBAAsB,OAGnC2B,EAAyBhE,UAAU0C,OAAS,WACxCxD,KAAK0B,UACL1B,KAAKqD,YAAc,MAEhByB,EAhDkC,GAgEzCO,EAAuC,WACvC,SAASA,EAAsBtC,EAAmBxC,EAAgByC,EAASxC,GACvE,IAAI0C,EAAQlD,KACZA,KAAK+C,kBAAoBA,EACzB/C,KAAKO,eAAiBA,EACtBP,KAAKgD,QAAUA,EAEfhD,KAAKsF,KAAO,WAAc,OAAO,IAAIlB,GAKrCpE,KAAKuF,MAAQ,SAAUC,GAAU,OAAO,IAAI1C,EAAoBI,EAAMH,kBAAmBG,EAAMF,QAASE,EAAM3C,eAAgBiF,IAE9HxF,KAAKyF,MAAQ,WAAc,OAAO,IAAInF,EAAoB4C,EAAM3C,eAAgB2C,EAAMrC,YAMtFb,KAAK0F,WAAa,SAAUF,GAAU,OAAO,IAAIV,EAAyB5B,EAAMH,kBAAmBG,EAAM3C,eAAgB2C,EAAMF,QAASwC,IACxIxF,KAAKa,UAAYL,EAarB,OAXA6E,EAAsBM,WAAa,CAC/B,CAAEC,KAAMxF,EAAGyF,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhDV,EAAsBW,eAAiB,WAAc,MAAO,CACxD,CAAEJ,KAAM1F,EAAG+F,kBACX,CAAEL,KAAM1F,EAAGgG,eACX,CAAEN,KAAMxF,EAAG+F,QACX,CAAEP,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAAC3F,EAAKmG,eAEnEjB,EAAsBkB,gBAAkBnG,EAAGoG,mBAAmB,CAAE7H,QAAS,SAAS8H,IAAkC,OAAO,IAAIpB,EAAsBjF,EAAGsG,SAASxG,EAAG+F,kBAAmB7F,EAAGsG,SAASxG,EAAGgG,eAAgB9F,EAAGsG,SAAStG,EAAG+F,QAAS/F,EAAGsG,SAASvG,EAAKmG,YAAeK,MAAOtB,EAAuBU,WAAY,SACjTV,EAlC+B,GAqDtCuB,EACA,SAASA,EAAcpB,GACnB,IAAIqB,EAAKzB,EAeT,GAbApF,KAAK8G,eAAiB,IAAI1C,EAE1BpE,KAAK+G,WAAa,GAElB/G,KAAKgH,aAAc,EAEnBhH,KAAKiH,cAAgB,4BAMrBjH,KAAKkH,qBAAsB,EACvB1B,EAAQ,CACR,IAAI2B,EAAaC,OAAOC,KAAK7B,GAC7B,IACI,IAAK,IAAI8B,EAAerH,EAAQsH,SAASJ,GAAaK,EAAiBF,EAAaG,QAASD,EAAeE,KAAMF,EAAiBF,EAAaG,OAAQ,CACpJ,IAAIE,EAAMH,EAAeI,WACLxB,IAAhBZ,EAAOmC,KAOP3H,KAAK2H,GAAOnC,EAAOmC,KAI/B,MAAOE,GAAShB,EAAM,CAAEiB,MAAOD,GAC/B,QACI,IACQL,IAAmBA,EAAeE,OAAStC,EAAKkC,EAAaS,SAAS3C,EAAG4C,KAAKV,GAEtF,QAAU,GAAIT,EAAK,MAAMA,EAAIiB,UAezCG,EACA,SAASA,EAAuBC,EAAQ9I,EAExC+I,EAEAC,EAEArB,GACI/G,KAAKmI,QAAUA,EACfnI,KAAKoI,QAAUA,EACfpI,KAAK+G,WAAaA,EAClB/G,KAAKqI,QAAUH,EAAOG,QACtBrI,KAAKsI,QAAUJ,EAAOI,QACtBtI,KAAKuI,SAAWnJ,EAAQmJ,SACxBvI,KAAKwI,SAAWpJ,EAAQoJ,UA6B5BC,EACA,SAASA,MAKTC,EAAgD,WAChD,SAASA,EAETC,EAEAC,GACI5I,KAAK2I,eAAiBA,EACtB3I,KAAK4I,yBAA2BA,EAOpC,OAJAF,EAA+B1C,eAAiB,WAAc,MAAO,CACjE,CAAEJ,KAAMqC,GACR,CAAErC,KAAM6C,EAAqB9C,WAAY,CAAC,CAAEC,KAAMxF,EAAGyI,cAElDH,EAdwC;;;;;;;OAsBnD,SAASI,EAAyBC,EAAUnB,GACxC,GAAc,QAAVA,GAA6B,WAAVA,GAAgC,WAAVA,EACzC,MAAM/E,MAAM,8BAAgCkG,EAAW,KAAQnB,EAAQ,4CAU/E,SAASoB,EAA2BD,EAAUnB,GAC1C,GAAc,UAAVA,GAA+B,QAAVA,GAA6B,WAAVA,EACxC,MAAM/E,MAAM,8BAAgCkG,EAAW,KAAQnB,EAAQ;;;;;;;OAiB/E,IAAIqB,EAA2C,WAC3C,SAASA,EAA0BzI,GAC/B,IAAI0C,EAAQlD,KAEZA,KAAKkJ,kBAAoB,GAEzBlJ,KAAKmJ,iBAAmB,SAAUC,GAE9B,IADA,IAAIC,EAAWnG,EAAMgG,kBACZI,EAAID,EAASE,OAAS,EAAGD,GAAK,EAAGA,IAOtC,GAAID,EAASC,GAAGE,2BAA6B,EAAG,CAC5CH,EAASC,GAAGG,eAAehC,KAAK2B,GAChC,QAIZpJ,KAAKa,UAAYL,EA0CrB,OAxCAyI,EAA0BnI,UAAU4I,YAAc,WAC9C1J,KAAKoD,WAGT6F,EAA0BnI,UAAUW,IAAM,SAAUgC,GAEhDzD,KAAKkC,OAAOuB,GAEPzD,KAAK2J,cACN3J,KAAKa,UAAUiB,KAAK8H,iBAAiB,UAAW5J,KAAKmJ,kBACrDnJ,KAAK2J,aAAc,GAEvB3J,KAAKkJ,kBAAkBW,KAAKpG,IAGhCwF,EAA0BnI,UAAUoB,OAAS,SAAUuB,GACnD,IAAIqG,EAAQ9J,KAAKkJ,kBAAkBa,QAAQtG,GACvCqG,GAAS,GACT9J,KAAKkJ,kBAAkBc,OAAOF,EAAO,GAGH,IAAlC9J,KAAKkJ,kBAAkBK,QACvBvJ,KAAKoD,WAIb6F,EAA0BnI,UAAUsC,QAAU,WACtCpD,KAAK2J,cACL3J,KAAKa,UAAUiB,KAAKmI,oBAAoB,UAAWjK,KAAKmJ,kBACxDnJ,KAAK2J,aAAc,IAG3BV,EAA0BtD,WAAa,CACnC,CAAEC,KAAMxF,EAAGyF,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhDkD,EAA0BjD,eAAiB,WAAc,MAAO,CAC5D,CAAEJ,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAAC3F,EAAKmG,eAEnE2C,EAA0B1C,gBAAkBnG,EAAGoG,mBAAmB,CAAE7H,QAAS,SAASuL,IAAsC,OAAO,IAAIjB,EAA0B7I,EAAGsG,SAASvG,EAAKmG,YAAeK,MAAOsC,EAA2BlD,WAAY,SACxOkD,EA/DmC,GAkE9C,SAASkB,EAA6CC,EAAYvJ,GAC9D,OAAOuJ,GAAc,IAAInB,EAA0BpI,GAGvD,IAAIwJ,EAAuC,CAGvCC,QAASrB,EACTsB,KAAM,CACF,CAAC,IAAInK,EAAGyI,SAAY,IAAIzI,EAAGoK,SAAYvB,GAGvC9I,EAAKmG,UAETmE,WAAYN,GAWZO,EAAkC,WAClC,SAASA,EAAiBlK,GACtBR,KAAKa,UAAYL,EA2CrB,OAzCAkK,EAAiB5J,UAAU4I,YAAc,WACjC1J,KAAK2K,mBAAqB3K,KAAK2K,kBAAkBC,YACjD5K,KAAK2K,kBAAkBC,WAAWC,YAAY7K,KAAK2K,oBAS3DD,EAAiB5J,UAAUgK,oBAAsB,WAI7C,OAHK9K,KAAK2K,mBACN3K,KAAK+K,mBAEF/K,KAAK2K,mBAMhBD,EAAiB5J,UAAUiK,iBAAmB,WAI1C,IAHA,IACIC,EAAqBhL,KAAKa,UAAUoK,uBADnB,yBAGZ3B,EAAI,EAAGA,EAAI0B,EAAmBzB,OAAQD,IAC3C0B,EAAmB1B,GAAGsB,WAAWC,YAAYG,EAAmB1B,IAEpE,IAAI4B,EAAYlL,KAAKa,UAAUsK,cAAc,OAC7CD,EAAU1J,UAAUC,IAPC,yBAQrBzB,KAAKa,UAAUiB,KAAKsJ,YAAYF,GAChClL,KAAK2K,kBAAoBO,GAE7BR,EAAiB/E,WAAa,CAC1B,CAAEC,KAAMxF,EAAGyF,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhD2E,EAAiB1E,eAAiB,WAAc,MAAO,CACnD,CAAEJ,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAAC3F,EAAKmG,eAEnEoE,EAAiBnE,gBAAkBnG,EAAGoG,mBAAmB,CAAE7H,QAAS,SAAS0M,IAA6B,OAAO,IAAIX,EAAiBtK,EAAGsG,SAASvG,EAAKmG,YAAeK,MAAO+D,EAAkB3E,WAAY,SACpM2E,EA7C0B;;;;;;;OAgDrC,SAASY,EAAmCC,EAAiB1K,GACzD,OAAO0K,GAAmB,IAAIb,EAAiB7J,GAGnD,IAAI2K,EAA6B,CAE7BlB,QAASI,EACTH,KAAM,CACF,CAAC,IAAInK,EAAGyI,SAAY,IAAIzI,EAAGoK,SAAYE,GACvCvK,EAAKmG,UAETmE,WAAYa,GAcZG,EAA4B,WAC5B,SAASA,EAAWC,EAAeC,EAAOC,EAAO3I,EAASD,EAAS6I,EAAqBhL,EAExFiL,GACI,IAAI5I,EAAQlD,KACZA,KAAK0L,cAAgBA,EACrB1L,KAAK2L,MAAQA,EACb3L,KAAK4L,MAAQA,EACb5L,KAAKiD,QAAUA,EACfjD,KAAKgD,QAAUA,EACfhD,KAAK6L,oBAAsBA,EAC3B7L,KAAKa,UAAYA,EACjBb,KAAK8L,UAAYA,EACjB9L,KAAK+L,iBAAmB,KACxB/L,KAAKgM,eAAiB,IAAIpM,EAAKqM,QAC/BjM,KAAKkM,aAAe,IAAItM,EAAKqM,QAC7BjM,KAAKmM,aAAe,IAAIvM,EAAKqM,QAC7BjM,KAAKoM,iBAAmBxM,EAAKyM,aAAaC,MAC1CtM,KAAKuM,sBAAwB,SAAUnD,GAAS,OAAOlG,EAAM8I,eAAevE,KAAK2B,IACjFpJ,KAAKwM,yBAA2B,IAAI5M,EAAK6M,WAAW,SAAUC,GAC1D,IAAIC,EAAezJ,EAAMuG,eAAe3F,UAAU4I,GAElD,OADAxJ,EAAMsG,6BACC,WACHmD,EAAaxI,cACbjB,EAAMsG,gCAIdxJ,KAAKyJ,eAAiB,IAAI7J,EAAKqM,QAE/BjM,KAAKwJ,2BAA6B,EAC9BvG,EAAQ6D,iBACR9G,KAAK4M,gBAAkB3J,EAAQ6D,eAC/B9G,KAAK4M,gBAAgB7L,OAAOf,OAEhCA,KAAK6M,kBAAoB5J,EAAQ6J,iBAwXrC,OAtXA1F,OAAO2F,eAAetB,EAAW3K,UAAW,iBAAkB,CAE1DkM,IAAK,WACD,OAAOhN,KAAK4L,OAEhBqB,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAetB,EAAW3K,UAAW,kBAAmB,CAE3DkM,IAAK,WACD,OAAOhN,KAAK+L,kBAEhBkB,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAetB,EAAW3K,UAAW,cAAe,CAMvDkM,IAAK,WACD,OAAOhN,KAAK2L,OAEhBsB,YAAY,EACZC,cAAc,IASlBzB,EAAW3K,UAAUC,OAAS,SAAUpB,GACpC,IAAIuD,EAAQlD,KACRmN,EAAenN,KAAK0L,cAAc3K,OAAOpB,GA2C7C,OA1CIK,KAAK6M,mBACL7M,KAAK6M,kBAAkB9L,OAAOf,OAG7BA,KAAK2L,MAAMyB,eAAiBpN,KAAKqN,qBAClCrN,KAAKqN,oBAAoBjC,YAAYpL,KAAK2L,OAE9C3L,KAAKsN,uBACLtN,KAAKuN,qBACLvN,KAAKwN,0BACDxN,KAAK4M,iBACL5M,KAAK4M,gBAAgB5L,SAKzBhB,KAAKgD,QAAQyK,SACRC,eACAC,KAAK9N,EAAU+N,KAAK,IACpB9J,UAAU,WAEPZ,EAAMI,eACNJ,EAAMgB,mBAIdlE,KAAK6N,sBAAqB,GACtB7N,KAAKiD,QAAQ+D,aACbhH,KAAK8N,kBAEL9N,KAAKiD,QAAQ8D,YACb/G,KAAK+N,eAAe/N,KAAK4L,MAAO5L,KAAKiD,QAAQ8D,YAAY,GAG7D/G,KAAKkM,aAAazE,OAElBzH,KAAK6L,oBAAoBpK,IAAIzB,MAGzBA,KAAKiD,QAAQiE,qBAAuBlH,KAAK8L,YACzC9L,KAAKoM,iBAAmBpM,KAAK8L,UAAUhI,UAAU,WAAc,OAAOZ,EAAM8K,aAEzEb,GAMX1B,EAAW3K,UAAU0C,OAAS,WAC1B,GAAKxD,KAAKsD,cAAV,CAGAtD,KAAKiO,iBAILjO,KAAK6N,sBAAqB,GACtB7N,KAAK6M,mBAAqB7M,KAAK6M,kBAAkBrJ,QACjDxD,KAAK6M,kBAAkBrJ,SAEvBxD,KAAK4M,iBACL5M,KAAK4M,gBAAgBlL,UAEzB,IAAIwM,EAAmBlO,KAAK0L,cAAclI,SAU1C,OARAxD,KAAKmM,aAAa1E,OAElBzH,KAAK6L,oBAAoB3J,OAAOlC,MAGhCA,KAAKmO,2BAELnO,KAAKoM,iBAAiBjI,cACf+J,IAGXzC,EAAW3K,UAAUkN,QAAU,WAC3B,IAAII,EAAapO,KAAKsD,cAClBtD,KAAK6M,mBACL7M,KAAK6M,kBAAkBmB,UAE3BhO,KAAKqO,yBACLrO,KAAKiO,iBACLjO,KAAKoM,iBAAiBjI,cACtBnE,KAAK6L,oBAAoB3J,OAAOlC,MAChCA,KAAK0L,cAAcsC,UACnBhO,KAAKkM,aAAaoC,WAClBtO,KAAKgM,eAAesC,WACpBtO,KAAKyJ,eAAe6E,WAChBtO,KAAK2L,OAAS3L,KAAK2L,MAAMf,aACzB5K,KAAK2L,MAAMf,WAAWC,YAAY7K,KAAK2L,OACvC3L,KAAK2L,MAAQ,MAEjB3L,KAAKqN,oBAAsBrN,KAAK4L,MAAQ,KACpCwC,GACApO,KAAKmM,aAAa1E,OAEtBzH,KAAKmM,aAAamC,YAGtB7C,EAAW3K,UAAUwC,YAAc,WAC/B,OAAOtD,KAAK0L,cAAcpI,eAG9BmI,EAAW3K,UAAUyN,cAAgB,WACjC,OAAOvO,KAAKgM,eAAe0B,gBAG/BjC,EAAW3K,UAAU0N,YAAc,WAC/B,OAAOxO,KAAKkM,aAAawB,gBAG7BjC,EAAW3K,UAAU2N,YAAc,WAC/B,OAAOzO,KAAKmM,aAAauB,gBAG7BjC,EAAW3K,UAAU4N,cAAgB,WACjC,OAAO1O,KAAKwM,0BAGhBf,EAAW3K,UAAU6N,UAAY,WAC7B,OAAO3O,KAAKiD,SAGhBwI,EAAW3K,UAAUoD,eAAiB,WAC9BlE,KAAK6M,mBACL7M,KAAK6M,kBAAkB+B,SAI/BnD,EAAW3K,UAAU+N,uBAAyB,SAAUC,GAChDA,IAAa9O,KAAK6M,oBAGlB7M,KAAK6M,mBACL7M,KAAK6M,kBAAkBmB,UAE3BhO,KAAK6M,kBAAoBiC,EACrB9O,KAAKsD,gBACLwL,EAAS/N,OAAOf,MAChBA,KAAKkE,oBAIbuH,EAAW3K,UAAUiO,WAAa,SAAUC,GACxChP,KAAKiD,QAAUhD,EAAQgP,SAAS,GAAIjP,KAAKiD,QAAS+L,GAClDhP,KAAKuN,sBAGT9B,EAAW3K,UAAUoO,aAAe,SAAUC,GAC1CnP,KAAKiD,QAAUhD,EAAQgP,SAAS,GAAIjP,KAAKiD,QAAS,CAAEmM,UAAWD,IAC/DnP,KAAKwN,2BAGT/B,EAAW3K,UAAUuO,cAAgB,SAAUC,GACvCtP,KAAK4L,OACL5L,KAAK+N,eAAe/N,KAAK4L,MAAO0D,GAAS,IAIjD7D,EAAW3K,UAAUyO,iBAAmB,SAAUD,GAC1CtP,KAAK4L,OACL5L,KAAK+N,eAAe/N,KAAK4L,MAAO0D,GAAS,IAMjD7D,EAAW3K,UAAU0O,aAAe,WAChC,IAAIJ,EAAYpP,KAAKiD,QAAQmM,UAC7B,OAAKA,EAGuB,iBAAdA,EAAyBA,EAAYA,EAAUxH,MAFlD,OAKf6D,EAAW3K,UAAU2O,qBAAuB,SAAUX,GAC9CA,IAAa9O,KAAK4M,kBAGtB5M,KAAKqO,yBACLrO,KAAK4M,gBAAkBkC,EACnB9O,KAAKsD,gBACLwL,EAAS/N,OAAOf,MAChB8O,EAAS9N,YAIjByK,EAAW3K,UAAU0M,wBAA0B,WAC3CxN,KAAK2L,MAAM+D,aAAa,MAAO1P,KAAKwP,iBAGxC/D,EAAW3K,UAAUyM,mBAAqB,WACtC,GAAKvN,KAAK4L,MAAV,CAGA,IAAItK,EAAQtB,KAAK4L,MAAMtK,MACvBA,EAAMqB,MAAQlD,EAAS8B,oBAAoBvB,KAAKiD,QAAQN,OACxDrB,EAAMmB,OAAShD,EAAS8B,oBAAoBvB,KAAKiD,QAAQR,QACzDnB,EAAMqO,SAAWlQ,EAAS8B,oBAAoBvB,KAAKiD,QAAQ0M,UAC3DrO,EAAMsO,UAAYnQ,EAAS8B,oBAAoBvB,KAAKiD,QAAQ2M,WAC5DtO,EAAMuO,SAAWpQ,EAAS8B,oBAAoBvB,KAAKiD,QAAQ4M,UAC3DvO,EAAMwO,UAAYrQ,EAAS8B,oBAAoBvB,KAAKiD,QAAQ6M,aAGhErE,EAAW3K,UAAU+M,qBAAuB,SAAUkC,GAClD/P,KAAK4L,MAAMtK,MAAM0O,cAAgBD,EAAgB,OAAS,QAG9DtE,EAAW3K,UAAUgN,gBAAkB,WACnC,IAAI5K,EAAQlD,KAEZA,KAAK+L,iBAAmB/L,KAAKa,UAAUsK,cAAc,OACrDnL,KAAK+L,iBAAiBvK,UAAUC,IAAI,wBAChCzB,KAAKiD,QAAQgE,eACbjH,KAAK+N,eAAe/N,KAAK+L,iBAAkB/L,KAAKiD,QAAQgE,eAAe,GAI3EjH,KAAK2L,MAAMyB,cAAc6C,aAAajQ,KAAK+L,iBAAkB/L,KAAK2L,OAGlE3L,KAAK+L,iBAAiBnC,iBAAiB,QAAS5J,KAAKuM,uBAEhB,oBAA1B2D,sBACPlQ,KAAKgD,QAAQmN,kBAAkB,WAC3BD,sBAAsB,WACdhN,EAAM6I,kBACN7I,EAAM6I,iBAAiBvK,UAAUC,IAjB9B,oCAuBfzB,KAAK+L,iBAAiBvK,UAAUC,IAvBjB,iCAiCvBgK,EAAW3K,UAAUwM,qBAAuB,WACpCtN,KAAK2L,MAAMyE,aACXpQ,KAAK2L,MAAMf,WAAWQ,YAAYpL,KAAK2L,QAI/CF,EAAW3K,UAAUmN,eAAiB,WAClC,IAAI/K,EAAQlD,KACRqQ,EAAmBrQ,KAAK+L,iBAC5B,GAAKsE,EAAL,CAGA,IAAIC,EACAC,EAAe,WAEXF,IACAA,EAAiBpG,oBAAoB,QAAS/G,EAAMqJ,uBACpD8D,EAAiBpG,oBAAoB,gBAAiBsG,GAClDF,EAAiBzF,YACjByF,EAAiBzF,WAAWC,YAAYwF,IAM5CnN,EAAM6I,kBAAoBsE,IAC1BnN,EAAM6I,iBAAmB,MAEzB7I,EAAMD,QAAQgE,eACd/D,EAAM6K,eAAesC,EAAkBnN,EAAMD,QAAQgE,eAAe,GAExEuJ,aAAaF,IAEjBD,EAAiB7O,UAAUU,OAAO,gCAClClC,KAAKgD,QAAQmN,kBAAkB,WAC3BE,EAAiBzG,iBAAiB,gBAAiB2G,KAIvDF,EAAiB/O,MAAM0O,cAAgB,OAIvCM,EAAYtQ,KAAKgD,QAAQmN,kBAAkB,WAAc,OAAOM,WAAWF,EAAc,SAG7F9E,EAAW3K,UAAUiN,eAAiB,SAAUzJ,EAASoM,EAAYC,GACjE,IAAInP,EAAY8C,EAAQ9C,UACxB/B,EAASmR,YAAYF,GAAYG,QAAQ,SAAUC,GAE/CH,EAAQnP,EAAUC,IAAIqP,GAAYtP,EAAUU,OAAO4O,MAI3DrF,EAAW3K,UAAUqN,yBAA2B,WAC5C,IAAIjL,EAAQlD,KAIZA,KAAKgD,QAAQmN,kBAAkB,WAI3B,IAAIxD,EAAezJ,EAAMF,QAAQyK,SAC5BC,eACAC,KAAK9N,EAAUkR,UAAUnR,EAAKoR,MAAM9N,EAAMgJ,aAAchJ,EAAMiJ,gBAC9DrI,UAAU,WAGNZ,EAAM0I,OAAU1I,EAAMyI,OAAyC,IAAhCzI,EAAM0I,MAAMqF,SAAS1H,SACjDrG,EAAM0I,OAAS1I,EAAMD,QAAQ8D,YAC7B7D,EAAM6K,eAAe7K,EAAM0I,MAAO1I,EAAMD,QAAQ8D,YAAY,GAE5D7D,EAAMyI,OAASzI,EAAMyI,MAAMyB,gBAC3BlK,EAAMmK,oBAAsBnK,EAAMyI,MAAMyB,cACxClK,EAAMmK,oBAAoBxC,YAAY3H,EAAMyI,QAEhDgB,EAAaxI,oBAM7BsH,EAAW3K,UAAUuN,uBAAyB,WAC1C,IAAIvH,EAAiB9G,KAAK4M,gBACtB9F,IACAA,EAAepF,UACXoF,EAAetD,QACfsD,EAAetD,WAIpBiI,EA3ZoB,GAgb3ByF,EAAmD,WACnD,SAASA,EAAkCC,EAAa5Q,EAAgBM,EAAWuQ,EAAWC,GAC1FrR,KAAKO,eAAiBA,EACtBP,KAAKa,UAAYA,EACjBb,KAAKoR,UAAYA,EACjBpR,KAAKqR,kBAAoBA,EAEzBrR,KAAKsR,qBAAuB,CAAE3O,MAAO,EAAGF,OAAQ,GAEhDzC,KAAKuR,WAAY,EAEjBvR,KAAKwR,UAAW,EAEhBxR,KAAKyR,gBAAiB,EAEtBzR,KAAK0R,wBAAyB,EAE9B1R,KAAK2R,iBAAkB,EAEvB3R,KAAK4R,gBAAkB,EAEvB5R,KAAK6R,aAAe,GAEpB7R,KAAK8R,oBAAsB,GAE3B9R,KAAK+R,iBAAmB,IAAInS,EAAKqM,QAEjCjM,KAAKgS,oBAAsBpS,EAAKyM,aAAaC,MAE7CtM,KAAKiS,SAAW,EAEhBjS,KAAKkS,SAAW,EAEhBlS,KAAKmS,qBAAuB,GAE5BnS,KAAKoS,gBAAkBpS,KAAK+R,iBAAiBrE,eAC7C1N,KAAKqS,UAAUlB,GAw2BnB,OAt2BA/J,OAAO2F,eAAemE,EAAkCpQ,UAAW,YAAa,CAE5EkM,IAAK,WACD,OAAOhN,KAAK8R,qBAEhB7E,YAAY,EACZC,cAAc,IAGlBgE,EAAkCpQ,UAAUC,OAAS,SAAU0C,GAC3D,IAAIP,EAAQlD,KACZ,GAAIA,KAAKqD,aAAeI,IAAezD,KAAKqD,YACxC,MAAMR,MAAM,4DAEhB7C,KAAKsS,qBACL7O,EAAW8O,YAAY/Q,UAAUC,IA7DlB,+CA8DfzB,KAAKqD,YAAcI,EACnBzD,KAAKwS,aAAe/O,EAAW8O,YAC/BvS,KAAK4L,MAAQnI,EAAWyB,eACxBlF,KAAKyS,aAAc,EACnBzS,KAAK0S,kBAAmB,EACxB1S,KAAK2S,cAAgB,KACrB3S,KAAKgS,oBAAoB7N,cACzBnE,KAAKgS,oBAAsBhS,KAAKO,eAAeqS,SAAS9O,UAAU,WAI9DZ,EAAMwP,kBAAmB,EACzBxP,EAAM0L,WAiBdsC,EAAkCpQ,UAAU8N,MAAQ,WAChD,IAAI/H,EAAKzB,EAAIyN,EAAKC,EAElB,IAAI9S,KAAKyS,aAAgBzS,KAAKoR,UAAU2B,UAMxC,IAAK/S,KAAK0S,kBAAoB1S,KAAK2R,iBAAmB3R,KAAK2S,cACvD3S,KAAKgT,0BADT,CAIAhT,KAAKiT,qBACLjT,KAAKkT,6BACLlT,KAAKmT,0BAILnT,KAAKoT,cAAgBpT,KAAKqT,2BAC1BrT,KAAKsT,YAActT,KAAKuT,iBACxBvT,KAAKwT,aAAexT,KAAK4L,MAAMzG,wBAC/B,IAMIsO,EANAC,EAAa1T,KAAKsT,YAClBrO,EAAcjF,KAAKwT,aACnBG,EAAe3T,KAAKoT,cAEpBQ,EAAe,GAGnB,IAGI,IAAK,IAAIC,EAAK5T,EAAQsH,SAASvH,KAAK8R,qBAAsBgC,EAAKD,EAAGpM,QAASqM,EAAGpM,KAAMoM,EAAKD,EAAGpM,OAAQ,CAChG,IAAIsM,EAAMD,EAAGlM,MAEToM,EAAchU,KAAKiU,gBAAgBP,EAAYK,GAI/CG,EAAelU,KAAKmU,iBAAiBH,EAAa/O,EAAa8O,GAE/DK,EAAapU,KAAKqU,eAAeH,EAAcjP,EAAa0O,EAAcI,GAE9E,GAAIK,EAAWE,2BAGX,OAFAtU,KAAKuR,WAAY,OACjBvR,KAAKuU,eAAeR,EAAKC,GAKzBhU,KAAKwU,8BAA8BJ,EAAYF,EAAcP,GAG7DC,EAAa/J,KAAK,CACd4K,SAAUV,EACV7L,OAAQ8L,EACR/O,YAAaA,EACbyP,gBAAiB1U,KAAK2U,0BAA0BX,EAAaD,OAOhEN,GAAYA,EAASW,WAAWQ,YAAcR,EAAWQ,eAC1DnB,EAAW,CAAEW,WAAYA,EAAYF,aAAcA,EAAcF,YAAaA,EAAaS,SAAUV,EAAK9O,YAAaA,KAInI,MAAO4C,GAAShB,EAAM,CAAEiB,MAAOD,GAC/B,QACI,IACQiM,IAAOA,EAAGpM,OAAStC,EAAKyO,EAAG9L,SAAS3C,EAAG4C,KAAK6L,GAEpD,QAAU,GAAIhN,EAAK,MAAMA,EAAIiB,OAIjC,GAAI8L,EAAarK,OAAQ,CACrB,IAAIsL,EAAU,KACVC,GAAa,EACjB,IACI,IAAK,IAAIC,EAAiB9U,EAAQsH,SAASqM,GAAeoB,EAAmBD,EAAetN,QAASuN,EAAiBtN,KAAMsN,EAAmBD,EAAetN,OAAQ,CAClK,IAAIwN,EAAMD,EAAiBpN,MACvBsN,EAAQD,EAAIP,gBAAgB/R,MAAQsS,EAAIP,gBAAgBjS,QAAUwS,EAAIR,SAASU,QAAU,GACzFD,EAAQJ,IACRA,EAAYI,EACZL,EAAUI,IAItB,MAAOG,GAASvC,EAAM,CAAE/K,MAAOsN,GAC/B,QACI,IACQJ,IAAqBA,EAAiBtN,OAASoL,EAAKiC,EAAehN,SAAS+K,EAAG9K,KAAK+M,GAE5F,QAAU,GAAIlC,EAAK,MAAMA,EAAI/K,OAIjC,OAFA9H,KAAKuR,WAAY,OACjBvR,KAAKuU,eAAeM,EAAQJ,SAAUI,EAAQ3M,QAKlD,GAAIlI,KAAKwR,SAIL,OAFAxR,KAAKuR,WAAY,OACjBvR,KAAKuU,eAAed,EAASgB,SAAUhB,EAASO,aAKpDhU,KAAKuU,eAAed,EAASgB,SAAUhB,EAASO,eAEpD9C,EAAkCpQ,UAAU0C,OAAS,WACjDxD,KAAKiT,qBACLjT,KAAK2S,cAAgB,KACrB3S,KAAKqV,oBAAsB,KAC3BrV,KAAKgS,oBAAoB7N,eAG7B+M,EAAkCpQ,UAAUkN,QAAU,WAC9ChO,KAAKyS,cAKLzS,KAAKwS,cACL8C,EAAatV,KAAKwS,aAAalR,MAAO,CAClCZ,IAAK,GACLC,KAAM,GACNgE,MAAO,GACPD,OAAQ,GACRjC,OAAQ,GACRE,MAAO,GACP4S,WAAY,GACZC,eAAgB,KAGpBxV,KAAK4L,OACL5L,KAAKkT,6BAELlT,KAAKqD,aACLrD,KAAKqD,YAAYkP,YAAY/Q,UAAUU,OA1O5B,+CA4OflC,KAAKwD,SACLxD,KAAK+R,iBAAiBzD,WACtBtO,KAAKqD,YAAcrD,KAAKwS,aAAe,KACvCxS,KAAKyS,aAAc,IAOvBvB,EAAkCpQ,UAAUkS,oBAAsB,WAC9D,IAAKhT,KAAKyS,eAAiBzS,KAAKoR,WAAapR,KAAKoR,UAAU2B,WAAY,CACpE/S,KAAKsT,YAActT,KAAKuT,iBACxBvT,KAAKwT,aAAexT,KAAK4L,MAAMzG,wBAC/BnF,KAAKoT,cAAgBpT,KAAKqT,2BAC1B,IAAIoC,EAAezV,KAAK2S,eAAiB3S,KAAK8R,oBAAoB,GAC9DkC,EAAchU,KAAKiU,gBAAgBjU,KAAKsT,YAAamC,GACzDzV,KAAKuU,eAAekB,EAAczB,KAQ1C9C,EAAkCpQ,UAAU4U,yBAA2B,SAAUC,GAE7E,OADA3V,KAAK6R,aAAe8D,EACb3V,MAMXkR,EAAkCpQ,UAAU8U,cAAgB,SAAUC,GAQlE,OAPA7V,KAAK8R,oBAAsB+D,GAGoB,IAA3CA,EAAU9L,QAAQ/J,KAAK2S,iBACvB3S,KAAK2S,cAAgB,MAEzB3S,KAAKsS,qBACEtS,MAMXkR,EAAkCpQ,UAAUgV,mBAAqB,SAAUC,GAEvE,OADA/V,KAAK4R,gBAAkBmE,EAChB/V,MAGXkR,EAAkCpQ,UAAUkV,uBAAyB,SAAUC,GAG3E,YAF2B,IAAvBA,IAAiCA,GAAqB,GAC1DjW,KAAK0R,uBAAyBuE,EACvBjW,MAGXkR,EAAkCpQ,UAAUoV,kBAAoB,SAAUC,GAGtE,YAFsB,IAAlBA,IAA4BA,GAAgB,GAChDnW,KAAKyR,eAAiB0E,EACfnW,MAGXkR,EAAkCpQ,UAAUsV,SAAW,SAAUC,GAG7D,YAFgB,IAAZA,IAAsBA,GAAU,GACpCrW,KAAKwR,SAAW6E,EACTrW,MAQXkR,EAAkCpQ,UAAUwV,mBAAqB,SAAUC,GAGvE,YAFiB,IAAbA,IAAuBA,GAAW,GACtCvW,KAAK2R,gBAAkB4E,EAChBvW,MASXkR,EAAkCpQ,UAAUuR,UAAY,SAAUnK,GAE9D,OADAlI,KAAKwW,QAAUtO,EACRlI,MAMXkR,EAAkCpQ,UAAU2V,mBAAqB,SAAUC,GAEvE,OADA1W,KAAKiS,SAAWyE,EACT1W,MAMXkR,EAAkCpQ,UAAU6V,mBAAqB,SAAUD,GAEvE,OADA1W,KAAKkS,SAAWwE,EACT1W,MAUXkR,EAAkCpQ,UAAU8V,sBAAwB,SAAUC,GAE1E,OADA7W,KAAK8W,yBAA2BD,EACzB7W,MAKXkR,EAAkCpQ,UAAUmT,gBAAkB,SAAUP,EAAYK,GAChF,IAAIgD,EACJ,GAAmB,UAAfhD,EAAI1L,QAGJ0O,EAAIrD,EAAW/S,KAAQ+S,EAAW/Q,MAAQ,MAEzC,CACD,IAAIqU,EAAShX,KAAKiX,SAAWvD,EAAW/O,MAAQ+O,EAAW/S,KACvDuW,EAAOlX,KAAKiX,SAAWvD,EAAW/S,KAAO+S,EAAW/O,MACxDoS,EAAmB,SAAfhD,EAAI1L,QAAqB2O,EAASE,EAS1C,MAAO,CAAEH,EAAGA,EAAGI,EANI,UAAfpD,EAAIzL,QACAoL,EAAWhT,IAAOgT,EAAWjR,OAAS,EAGvB,OAAfsR,EAAIzL,QAAmBoL,EAAWhT,IAAMgT,EAAWhP,SAQ/DwM,EAAkCpQ,UAAUqT,iBAAmB,SAAUH,EAAa/O,EAAa8O,GAG/F,IAAIqD,EAkBJ,OAhBIA,EADgB,UAAhBrD,EAAIxL,UACatD,EAAYtC,MAAQ,EAEf,UAAjBoR,EAAIxL,SACOvI,KAAKiX,UAAYhS,EAAYtC,MAAQ,EAGrC3C,KAAKiX,SAAW,GAAKhS,EAAYtC,MAU9C,CACHoU,EAAG/C,EAAY+C,EAAIK,EACnBD,EAAGnD,EAAYmD,GATC,UAAhBpD,EAAIvL,UACavD,EAAYxC,OAAS,EAGN,OAAhBsR,EAAIvL,SAAoB,GAAKvD,EAAYxC,UASjEyO,EAAkCpQ,UAAUuT,eAAiB,SAAUgD,EAAOjY,EAASkD,EAAUmS,GAC7F,IAAIsC,EAAIM,EAAMN,EAAGI,EAAIE,EAAMF,EACvBhP,EAAUnI,KAAKsX,WAAW7C,EAAU,KACpCrM,EAAUpI,KAAKsX,WAAW7C,EAAU,KAEpCtM,IACA4O,GAAK5O,GAELC,IACA+O,GAAK/O,GAGT,IAEImP,EAAc,EAAIJ,EAClBK,EAAkBL,EAAI/X,EAAQqD,OAAUH,EAASG,OAEjDgV,EAAezX,KAAK0X,mBAAmBtY,EAAQuD,MALhC,EAAIoU,EACFA,EAAI3X,EAAQuD,MAASL,EAASK,OAK/CgV,EAAgB3X,KAAK0X,mBAAmBtY,EAAQqD,OAAQ8U,EAAaC,GACrE5C,EAAc6C,EAAeE,EACjC,MAAO,CACH/C,YAAaA,EACbN,2BAA6BlV,EAAQuD,MAAQvD,EAAQqD,SAAYmS,EACjEgD,yBAA0BD,IAAkBvY,EAAQqD,OACpDoV,2BAA4BJ,GAAgBrY,EAAQuD,QAS5DuO,EAAkCpQ,UAAU0T,8BAAgC,SAAUS,EAAKoC,EAAO/U,GAC9F,GAAItC,KAAK0R,uBAAwB,CAC7B,IAAIoG,EAAkBxV,EAASoC,OAAS2S,EAAMF,EAC1CY,EAAiBzV,EAASqC,MAAQ0S,EAAMN,EACxCnH,EAAY5P,KAAKqD,YAAYsL,YAAYiB,UACzCD,EAAW3P,KAAKqD,YAAYsL,YAAYgB,SAK5C,OAJkBsF,EAAI2C,0BACJ,MAAbhI,GAAqBA,GAAakI,KACnB7C,EAAI4C,4BACP,MAAZlI,GAAoBA,GAAYoI,GAGzC,OAAO,GAaX7G,EAAkCpQ,UAAUkX,qBAAuB,SAAUC,EAAO7Y,EAAS2E,GAIzF,GAAI/D,KAAKqV,qBAAuBrV,KAAK2R,gBACjC,MAAO,CACHoF,EAAGkB,EAAMlB,EAAI/W,KAAKqV,oBAAoB0B,EACtCI,EAAGc,EAAMd,EAAInX,KAAKqV,oBAAoB8B,GAG9C,IAQIe,EACAC,EATA7V,EAAWtC,KAAKoT,cAGhBgF,EAAgBpU,KAAKqU,IAAIJ,EAAMlB,EAAI3X,EAAQuD,MAAQL,EAASqC,MAAO,GACnE2T,EAAiBtU,KAAKqU,IAAIJ,EAAMd,EAAI/X,EAAQqD,OAASH,EAASoC,OAAQ,GACtE6T,EAAcvU,KAAKqU,IAAI/V,EAAS5B,IAAMqD,EAAerD,IAAMuX,EAAMd,EAAG,GACpEqB,EAAexU,KAAKqU,IAAI/V,EAAS3B,KAAOoD,EAAepD,KAAOsX,EAAMlB,EAAG,GAoB3E,OADA/W,KAAKqV,oBAAsB,CAAE0B,EAXzBmB,EADA9Y,EAAQuD,OAASL,EAASK,MAClB6V,IAAiBJ,EAGjBH,EAAMlB,EAAI/W,KAAK4R,gBAAmBtP,EAAS3B,KAAOoD,EAAepD,KAAQsX,EAAMlB,EAAI,EAQxDI,EALnCgB,EADA/Y,EAAQqD,QAAUH,EAASG,OACnB8V,IAAgBD,EAGhBL,EAAMd,EAAInX,KAAK4R,gBAAmBtP,EAAS5B,IAAMqD,EAAerD,IAAOuX,EAAMd,EAAI,GAGtF,CACHJ,EAAGkB,EAAMlB,EAAImB,EACbf,EAAGc,EAAMd,EAAIgB,IAQrBjH,EAAkCpQ,UAAUyT,eAAiB,SAAUE,EAAUT,GAY7E,GAXAhU,KAAKyY,oBAAoBhE,GACzBzU,KAAK0Y,yBAAyB1E,EAAaS,GAC3CzU,KAAK2Y,sBAAsB3E,EAAaS,GACpCA,EAAS1N,YACT/G,KAAK4Y,iBAAiBnE,EAAS1N,YAGnC/G,KAAK2S,cAAgB8B,EAIjBzU,KAAK+R,iBAAiB8G,UAAUtP,OAAQ,CACxC,IAAIX,EAA2B5I,KAAK8Y,uBAChCC,EAAc,IAAIrQ,EAA+B+L,EAAU7L,GAC/D5I,KAAK+R,iBAAiBtK,KAAKsR,GAE/B/Y,KAAK0S,kBAAmB,GAG5BxB,EAAkCpQ,UAAU2X,oBAAsB,SAAUhE,GACxE,GAAKzU,KAAK8W,yBAAV,CAGA,IACIkC,EADAC,EAAWjZ,KAAKwS,aAAa0G,iBAAiBlZ,KAAK8W,0BAEnDqC,EAAU1E,EAASjM,SAEnBwQ,EADsB,WAAtBvE,EAASlM,SACC,SAELvI,KAAKiX,SACsB,UAAtBxC,EAASlM,SAAuB,QAAU,OAGpB,UAAtBkM,EAASlM,SAAuB,OAAS,QAEvD,IAAK,IAAIe,EAAI,EAAGA,EAAI2P,EAAS1P,OAAQD,IACjC2P,EAAS3P,GAAGhI,MAAM8X,gBAAkBJ,EAAU,IAAMG,IAS5DjI,EAAkCpQ,UAAU6T,0BAA4B,SAAUzM,EAAQuM,GACtF,IAEIhS,EAAQ/B,EAAKgE,EAgCb/B,EAAOhC,EAAMgE,EAlCbrC,EAAWtC,KAAKoT,cAChBiG,EAAQrZ,KAAKiX,SAEjB,GAA0B,QAAtBxC,EAASjM,SAGT/F,EAASH,EAASG,QADlB/B,EAAMwH,EAAOiP,GACoBnX,KAAK4R,qBAErC,GAA0B,WAAtB6C,EAASjM,SAKd/F,EAASH,EAASG,QADlBiC,EAASpC,EAASG,OAASyF,EAAOiP,EAA2B,EAAvBnX,KAAK4R,iBACP5R,KAAK4R,oBAExC,CAKD,IAAI0H,EAAiCtV,KAAKuV,IAAIjX,EAASoC,OAASwD,EAAOiP,EAAI7U,EAAS5B,IAAKwH,EAAOiP,GAC5FqC,EAAiBxZ,KAAKsR,qBAAqB7O,OAE/C/B,EAAMwH,EAAOiP,EAAImC,GADjB7W,EAA0C,EAAjC6W,GAEIE,IAAmBxZ,KAAK0S,mBAAqB1S,KAAKyR,iBAC3D/Q,EAAMwH,EAAOiP,EAAKqC,EAAiB,GAU3C,GAHyD,QAAtB/E,EAASlM,WAAuB8Q,GACxC,UAAtB5E,EAASlM,UAAwB8Q,EAGlC1U,EAAQrC,EAASK,MAAQuF,EAAO6O,EAAI/W,KAAK4R,gBACzCjP,EAAQuF,EAAO6O,EAAI/W,KAAK4R,qBAEvB,GAVqD,UAAtB6C,EAASlM,WAAyB8Q,GAC3C,QAAtB5E,EAASlM,UAAsB8Q,EAUhC1Y,EAAOuH,EAAO6O,EACdpU,EAAQL,EAASqC,MAAQuD,EAAO6O,MAE/B,CAKGuC,EAAiCtV,KAAKuV,IAAIjX,EAASqC,MAAQuD,EAAO6O,EAAIzU,EAAS3B,KAAMuH,EAAO6O,GAAhG,IACI0C,EAAgBzZ,KAAKsR,qBAAqB3O,MAE9ChC,EAAOuH,EAAO6O,EAAIuC,GADlB3W,EAAyC,EAAjC2W,GAEIG,IAAkBzZ,KAAK0S,mBAAqB1S,KAAKyR,iBACzD9Q,EAAOuH,EAAO6O,EAAK0C,EAAgB,GAG3C,MAAO,CAAE/Y,IAAKA,EAAKC,KAAMA,EAAM+D,OAAQA,EAAQC,MAAOA,EAAOhC,MAAOA,EAAOF,OAAQA,IASvFyO,EAAkCpQ,UAAU6X,sBAAwB,SAAUzQ,EAAQuM,GAClF,IAAIC,EAAkB1U,KAAK2U,0BAA0BzM,EAAQuM,GAGxDzU,KAAK0S,kBAAqB1S,KAAKyR,iBAChCiD,EAAgBjS,OAASuB,KAAKuV,IAAI7E,EAAgBjS,OAAQzC,KAAKsR,qBAAqB7O,QACpFiS,EAAgB/R,MAAQqB,KAAKuV,IAAI7E,EAAgB/R,MAAO3C,KAAKsR,qBAAqB3O,QAEtF,IAAI+W,EAAS,GACb,GAAI1Z,KAAK2Z,oBACLD,EAAOhZ,IAAMgZ,EAAO/Y,KAAO,IAC3B+Y,EAAOhV,OAASgV,EAAO/U,MAAQ,GAC/B+U,EAAO/W,MAAQ+W,EAAOjX,OAAS,WAE9B,CACD,IAAIqN,EAAY9P,KAAKqD,YAAYsL,YAAYmB,UACzCD,EAAW7P,KAAKqD,YAAYsL,YAAYkB,SAC5C6J,EAAOjX,OAAShD,EAAS8B,oBAAoBmT,EAAgBjS,QAC7DiX,EAAOhZ,IAAMjB,EAAS8B,oBAAoBmT,EAAgBhU,KAC1DgZ,EAAOhV,OAASjF,EAAS8B,oBAAoBmT,EAAgBhQ,QAC7DgV,EAAO/W,MAAQlD,EAAS8B,oBAAoBmT,EAAgB/R,OAC5D+W,EAAO/Y,KAAOlB,EAAS8B,oBAAoBmT,EAAgB/T,MAC3D+Y,EAAO/U,MAAQlF,EAAS8B,oBAAoBmT,EAAgB/P,OAGxD+U,EAAOnE,WADe,WAAtBd,EAASlM,SACW,SAGsB,QAAtBkM,EAASlM,SAAqB,WAAa,aAG/DmR,EAAOlE,eADe,WAAtBf,EAASjM,SACe,SAGsB,WAAtBiM,EAASjM,SAAwB,WAAa,aAEtEsH,IACA4J,EAAO5J,UAAYrQ,EAAS8B,oBAAoBuO,IAEhDD,IACA6J,EAAO7J,SAAWpQ,EAAS8B,oBAAoBsO,IAGvD7P,KAAKsR,qBAAuBoD,EAC5BY,EAAatV,KAAKwS,aAAalR,MAAOoY,IAG1CxI,EAAkCpQ,UAAUqS,wBAA0B,WAClEmC,EAAatV,KAAKwS,aAAalR,MAAO,CAClCZ,IAAK,IACLC,KAAM,IACNgE,MAAO,IACPD,OAAQ,IACRjC,OAAQ,GACRE,MAAO,GACP4S,WAAY,GACZC,eAAgB,MAIxBtE,EAAkCpQ,UAAUoS,2BAA6B,WACrEoC,EAAatV,KAAK4L,MAAMtK,MAAO,CAC3BZ,IAAK,GACLC,KAAM,GACN+D,OAAQ,GACRC,MAAO,GACP8P,SAAU,GACVmF,UAAW,MAInB1I,EAAkCpQ,UAAU4X,yBAA2B,SAAU1E,EAAaS,GAC1F,IAAIiF,EAAS,GACb,GAAI1Z,KAAK2Z,oBAAqB,CAC1B,IAAI5V,EAAiB/D,KAAKO,eAAec,4BACzCiU,EAAaoE,EAAQ1Z,KAAK6Z,kBAAkBpF,EAAUT,EAAajQ,IACnEuR,EAAaoE,EAAQ1Z,KAAK8Z,kBAAkBrF,EAAUT,EAAajQ,SAGnE2V,EAAOjF,SAAW,SAOtB,IAAIsF,EAAkB,GAClB5R,EAAUnI,KAAKsX,WAAW7C,EAAU,KACpCrM,EAAUpI,KAAKsX,WAAW7C,EAAU,KACpCtM,IACA4R,GAAmB,cAAgB5R,EAAU,QAE7CC,IACA2R,GAAmB,cAAgB3R,EAAU,OAEjDsR,EAAOE,UAAYG,EAAgBC,OAI/Bha,KAAK0R,wBAA0B1R,KAAKqD,YAAYsL,YAAYmB,YAC5D4J,EAAO5J,UAAY,IAEnB9P,KAAK0R,wBAA0B1R,KAAKqD,YAAYsL,YAAYkB,WAC5D6J,EAAO7J,SAAW,IAEtByF,EAAatV,KAAK4L,MAAMtK,MAAOoY,IAGnCxI,EAAkCpQ,UAAU+Y,kBAAoB,SAAUpF,EAAUT,EAAajQ,GAG7F,IAAI2V,EAAS,CAAEhZ,IAAK,KAAMgE,OAAQ,MAC9BwP,EAAelU,KAAKmU,iBAAiBH,EAAahU,KAAKwT,aAAciB,GACrEzU,KAAKuR,YACL2C,EAAelU,KAAKgY,qBAAqB9D,EAAclU,KAAKwT,aAAczP,IAE9E,IAAIkW,EAAwBja,KAAKqR,kBAAkBvG,sBAAsB3F,wBAAwBzE,IAiBjG,OAZAwT,EAAaiD,GAAK8C,EAGQ,WAAtBxF,EAASjM,SAITkR,EAAOhV,OADc1E,KAAKa,UAAUM,gBAAgB+Y,cAClBhG,EAAaiD,EAAInX,KAAKwT,aAAa/Q,QAAU,KAG/EiX,EAAOhZ,IAAMjB,EAAS8B,oBAAoB2S,EAAaiD,GAEpDuC,GAGXxI,EAAkCpQ,UAAUgZ,kBAAoB,SAAUrF,EAAUT,EAAajQ,GAG7F,IAAI2V,EAAS,CAAE/Y,KAAM,KAAMgE,MAAO,MAC9BuP,EAAelU,KAAKmU,iBAAiBH,EAAahU,KAAKwT,aAAciB,GAwBzE,OAvBIzU,KAAKuR,YACL2C,EAAelU,KAAKgY,qBAAqB9D,EAAclU,KAAKwT,aAAczP,IAe9C,UAR5B/D,KAAKiX,SAC2C,QAAtBxC,EAASlM,SAAqB,OAAS,QAGjB,QAAtBkM,EAASlM,SAAqB,QAAU,QAMlEmR,EAAO/U,MADa3E,KAAKa,UAAUM,gBAAgBgZ,aACnBjG,EAAa6C,EAAI/W,KAAKwT,aAAa7Q,OAAS,KAG5E+W,EAAO/Y,KAAOlB,EAAS8B,oBAAoB2S,EAAa6C,GAErD2C,GAMXxI,EAAkCpQ,UAAUgY,qBAAuB,WAE/D,IAAIsB,EAAepa,KAAKuT,iBACpB8G,EAAgBra,KAAK4L,MAAMzG,wBAI3BmV,EAAwBta,KAAK6R,aAAa0I,IAAI,SAAUC,GACxD,OAAOA,EAAWC,gBAAgBC,cAAcvV,0BAEpD,MAAO,CACHwV,gBAAiB/V,EAA4BwV,EAAcE,GAC3DM,oBAAqBvW,EAA6B+V,EAAcE,GAChEO,iBAAkBjW,EAA4ByV,EAAeC,GAC7DQ,qBAAsBzW,EAA6BgW,EAAeC,KAI1EpJ,EAAkCpQ,UAAU4W,mBAAqB,SAAUnO,GAEvE,IADA,IAAIwR,EAAY,GACPC,EAAK,EAAGA,EAAKC,UAAU1R,OAAQyR,IACpCD,EAAUC,EAAK,GAAKC,UAAUD,GAElC,OAAOD,EAAUG,OAAO,SAAUC,EAAcC,GAC5C,OAAOD,EAAenX,KAAKqU,IAAI+C,EAAiB,IACjD7R,IAGP2H,EAAkCpQ,UAAUuS,yBAA2B,WAMnE,IAAI1Q,EAAQ3C,KAAKa,UAAUM,gBAAgBgZ,YACvC1X,EAASzC,KAAKa,UAAUM,gBAAgB+Y,aACxCnW,EAAiB/D,KAAKO,eAAec,4BACzC,MAAO,CACHX,IAAKqD,EAAerD,IAAMV,KAAK4R,gBAC/BjR,KAAMoD,EAAepD,KAAOX,KAAK4R,gBACjCjN,MAAOZ,EAAepD,KAAOgC,EAAQ3C,KAAK4R,gBAC1ClN,OAAQX,EAAerD,IAAM+B,EAASzC,KAAK4R,gBAC3CjP,MAAOA,EAAS,EAAI3C,KAAK4R,gBACzBnP,OAAQA,EAAU,EAAIzC,KAAK4R,kBAInCV,EAAkCpQ,UAAUmW,OAAS,WACjD,MAA2C,QAApCjX,KAAKqD,YAAYmM,gBAG5B0B,EAAkCpQ,UAAU6Y,kBAAoB,WAC5D,OAAQ3Z,KAAK0R,wBAA0B1R,KAAKuR,WAGhDL,EAAkCpQ,UAAUwW,WAAa,SAAU7C,EAAU4G,GACzE,MAAa,MAATA,EAG2B,MAApB5G,EAAStM,QAAkBnI,KAAKiS,SAAWwC,EAAStM,QAEpC,MAApBsM,EAASrM,QAAkBpI,KAAKkS,SAAWuC,EAASrM,SAG/D8I,EAAkCpQ,UAAUwR,mBAAqB,WAC7D,IAAKtS,KAAK8R,oBAAoBvI,OAC1B,MAAM1G,MAAM,yEAIhB7C,KAAK8R,oBAAoBjB,QAAQ,SAAUyK,GACvCtS,EAA2B,UAAWsS,EAAKjT,SAC3CS,EAAyB,UAAWwS,EAAKhT,SACzCU,EAA2B,WAAYsS,EAAK/S,UAC5CO,EAAyB,WAAYwS,EAAK9S,aAIlD0I,EAAkCpQ,UAAU8X,iBAAmB,SAAUlI,GACrE,IAAIxN,EAAQlD,KACRA,KAAK4L,OACLnM,EAASmR,YAAYF,GAAYG,QAAQ,SAAUC,GAC9B,KAAbA,IAAqE,IAAlD5N,EAAMiP,qBAAqBpI,QAAQ+G,KACtD5N,EAAMiP,qBAAqBtI,KAAKiH,GAChC5N,EAAM0I,MAAMpK,UAAUC,IAAIqP,OAM1CI,EAAkCpQ,UAAUmS,mBAAqB,WAC7D,IAAI/P,EAAQlD,KACRA,KAAK4L,QACL5L,KAAKmS,qBAAqBtB,QAAQ,SAAUC,GACxC5N,EAAM0I,MAAMpK,UAAUU,OAAO4O,KAEjC9Q,KAAKmS,qBAAuB,KAIpCjB,EAAkCpQ,UAAUyS,eAAiB,WACzD,IAAIrL,EAASlI,KAAKwW,QAClB,GAAItO,aAAkB9H,EAAGmb,WACrB,OAAOrT,EAAOwS,cAAcvV,wBAEhC,GAAI+C,aAAkBsT,YAClB,OAAOtT,EAAO/C,wBAElB,IAAIxC,EAAQuF,EAAOvF,OAAS,EACxBF,EAASyF,EAAOzF,QAAU,EAE9B,MAAO,CACH/B,IAAKwH,EAAOiP,EACZzS,OAAQwD,EAAOiP,EAAI1U,EACnB9B,KAAMuH,EAAO6O,EACbpS,MAAOuD,EAAO6O,EAAIpU,EAClBF,OAAQA,EACRE,MAAOA,IAGRuO,EA54B2C;;;;;;;OA+4BtD,SAASoE,EAAamG,EAAMC,GACxB,IAAK,IAAI/T,KAAO+T,EACRA,EAAOC,eAAehU,KACtB8T,EAAK9T,GAAO+T,EAAO/T,IAG3B,OAAO8T;;;;;;;OAmBX,IAAIG,EAA2C,WAC3C,SAASA,EAA0BC,EAAWC,EAAY3K,EAAa4K,EAAevb,EAAUV,EAAUkc,GAEtGhc,KAAK8R,oBAAsB,GAK3B9R,KAAK6M,kBAAoB,IAAIqE,EAAkCC,EAAa4K,EAAevb,EAAUV,EAAUkc,GAC1GhG,wBAAuB,GACvBI,UAAS,GACTN,mBAAmB,GACxB9V,KAAKic,qBAAqBJ,EAAWC,GAyIzC,OAvIA1U,OAAO2F,eAAe6O,EAA0B9a,UAAW,SAAU,CAEjEkM,IAAK,WACD,MAA2C,QAApChN,KAAKqD,YAAYmM,gBAE5BvC,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6O,EAA0B9a,UAAW,mBAAoB,CAE3EkM,IAAK,WACD,OAAOhN,KAAK6M,kBAAkBuF,iBAElCnF,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6O,EAA0B9a,UAAW,YAAa,CAEpEkM,IAAK,WACD,OAAOhN,KAAK8R,qBAEhB7E,YAAY,EACZC,cAAc,IAGlB0O,EAA0B9a,UAAUC,OAAS,SAAU0C,GACnDzD,KAAKqD,YAAcI,EACnBzD,KAAK6M,kBAAkB9L,OAAO0C,GAC1BzD,KAAKkc,aACLzY,EAAWyL,aAAalP,KAAKkc,YAC7Blc,KAAKkc,WAAa,OAI1BN,EAA0B9a,UAAUkN,QAAU,WAC1ChO,KAAK6M,kBAAkBmB,WAG3B4N,EAA0B9a,UAAU0C,OAAS,WACzCxD,KAAK6M,kBAAkBrJ,UAO3BoY,EAA0B9a,UAAU8N,MAAQ,WACxC5O,KAAK6M,kBAAkB+B,SAO3BgN,EAA0B9a,UAAUqb,wBAA0B,WAC1Dnc,KAAK6M,kBAAkBmG,uBAO3B4I,EAA0B9a,UAAU4U,yBAA2B,SAAUC,GACrE3V,KAAK6M,kBAAkB6I,yBAAyBC,IAOpDiG,EAA0B9a,UAAUmb,qBAAuB,SAAUJ,EAAWC,EAAY3T,EAASC,GACjG,IAAIqM,EAAW,IAAIxM,EAAuB4T,EAAWC,EAAY3T,EAASC,GAG1E,OAFApI,KAAK8R,oBAAoBjI,KAAK4K,GAC9BzU,KAAK6M,kBAAkB+I,cAAc5V,KAAK8R,qBACnC9R,MAMX4b,EAA0B9a,UAAUsb,cAAgB,SAAUjN,GAU1D,OANInP,KAAKqD,YACLrD,KAAKqD,YAAY6L,aAAaC,GAG9BnP,KAAKkc,WAAa/M,EAEfnP,MAMX4b,EAA0B9a,UAAUub,YAAc,SAAU3F,GAExD,OADA1W,KAAK6M,kBAAkB4J,mBAAmBC,GACnC1W,MAMX4b,EAA0B9a,UAAUwb,YAAc,SAAU5F,GAExD,OADA1W,KAAK6M,kBAAkB8J,mBAAmBD,GACnC1W,MAQX4b,EAA0B9a,UAAUwV,mBAAqB,SAAUC,GAE/D,OADAvW,KAAK6M,kBAAkByJ,mBAAmBC,GACnCvW,MAMX4b,EAA0B9a,UAAU8U,cAAgB,SAAUC,GAG1D,OAFA7V,KAAK8R,oBAAsB+D,EAAU0G,QACrCvc,KAAK6M,kBAAkB+I,cAAc5V,KAAK8R,qBACnC9R,MAMX4b,EAA0B9a,UAAUuR,UAAY,SAAUnK,GAEtD,OADAlI,KAAK6M,kBAAkBwF,UAAUnK,GAC1BlI,MAEJ4b,EArJmC,GAuK1CY,EAAwC,WACxC,SAASA,IACLxc,KAAKyc,aAAe,SACpBzc,KAAK0c,WAAa,GAClB1c,KAAK2c,cAAgB,GACrB3c,KAAK4c,YAAc,GACnB5c,KAAK6c,aAAe,GACpB7c,KAAK8c,YAAc,GACnB9c,KAAK+c,gBAAkB,GACvB/c,KAAKgd,OAAS,GACdhd,KAAKid,QAAU,GA6KnB,OA3KAT,EAAuB1b,UAAUC,OAAS,SAAU0C,GAChD,IAAI+B,EAAS/B,EAAWkL,YACxB3O,KAAKqD,YAAcI,EACfzD,KAAKgd,SAAWxX,EAAO7C,OACvBc,EAAWsL,WAAW,CAAEpM,MAAO3C,KAAKgd,SAEpChd,KAAKid,UAAYzX,EAAO/C,QACxBgB,EAAWsL,WAAW,CAAEtM,OAAQzC,KAAKid,UAEzCxZ,EAAW8O,YAAY/Q,UAAUC,IA5BtB,8BA6BXzB,KAAKyS,aAAc,GAMvB+J,EAAuB1b,UAAUJ,IAAM,SAAUkH,GAK7C,YAJc,IAAVA,IAAoBA,EAAQ,IAChC5H,KAAK2c,cAAgB,GACrB3c,KAAK0c,WAAa9U,EAClB5H,KAAK8c,YAAc,aACZ9c,MAMXwc,EAAuB1b,UAAUH,KAAO,SAAUiH,GAK9C,YAJc,IAAVA,IAAoBA,EAAQ,IAChC5H,KAAK6c,aAAe,GACpB7c,KAAK4c,YAAchV,EACnB5H,KAAK+c,gBAAkB,aAChB/c,MAMXwc,EAAuB1b,UAAU4D,OAAS,SAAUkD,GAKhD,YAJc,IAAVA,IAAoBA,EAAQ,IAChC5H,KAAK0c,WAAa,GAClB1c,KAAK2c,cAAgB/U,EACrB5H,KAAK8c,YAAc,WACZ9c,MAMXwc,EAAuB1b,UAAU6D,MAAQ,SAAUiD,GAK/C,YAJc,IAAVA,IAAoBA,EAAQ,IAChC5H,KAAK4c,YAAc,GACnB5c,KAAK6c,aAAejV,EACpB5H,KAAK+c,gBAAkB,WAChB/c,MAQXwc,EAAuB1b,UAAU6B,MAAQ,SAAUiF,GAQ/C,YAPc,IAAVA,IAAoBA,EAAQ,IAC5B5H,KAAKqD,YACLrD,KAAKqD,YAAY0L,WAAW,CAAEpM,MAAOiF,IAGrC5H,KAAKgd,OAASpV,EAEX5H,MAQXwc,EAAuB1b,UAAU2B,OAAS,SAAUmF,GAQhD,YAPc,IAAVA,IAAoBA,EAAQ,IAC5B5H,KAAKqD,YACLrD,KAAKqD,YAAY0L,WAAW,CAAEtM,OAAQmF,IAGtC5H,KAAKid,QAAUrV,EAEZ5H,MAQXwc,EAAuB1b,UAAUoc,mBAAqB,SAAUxG,GAI5D,YAHe,IAAXA,IAAqBA,EAAS,IAClC1W,KAAKW,KAAK+V,GACV1W,KAAK+c,gBAAkB,SAChB/c,MAQXwc,EAAuB1b,UAAUqc,iBAAmB,SAAUzG,GAI1D,YAHe,IAAXA,IAAqBA,EAAS,IAClC1W,KAAKU,IAAIgW,GACT1W,KAAK8c,YAAc,SACZ9c,MAMXwc,EAAuB1b,UAAU8N,MAAQ,WAIrC,GAAK5O,KAAKqD,aAAgBrD,KAAKqD,YAAYC,cAA3C,CAGA,IAAIoW,EAAS1Z,KAAKqD,YAAY6B,eAAe5D,MACzC8b,EAAepd,KAAKqD,YAAYkP,YAAYjR,MAC5CkE,EAASxF,KAAKqD,YAAYsL,YAC9B+K,EAAOjF,SAAWzU,KAAKyc,aACvB/C,EAAO2D,WAA8B,SAAjB7X,EAAO7C,MAAmB,IAAM3C,KAAK4c,YACzDlD,EAAO4D,UAA8B,SAAlB9X,EAAO/C,OAAoB,IAAMzC,KAAK0c,WACzDhD,EAAO6D,aAAevd,KAAK2c,cAC3BjD,EAAO8D,YAAcxd,KAAK6c,aACL,SAAjBrX,EAAO7C,MACPya,EAAa5H,eAAiB,aAEA,WAAzBxV,KAAK+c,gBACVK,EAAa5H,eAAiB,SAEkB,QAA3CxV,KAAKqD,YAAYsL,YAAYS,UAKL,eAAzBpP,KAAK+c,gBACLK,EAAa5H,eAAiB,WAEA,aAAzBxV,KAAK+c,kBACVK,EAAa5H,eAAiB,cAIlC4H,EAAa5H,eAAiBxV,KAAK+c,gBAEvCK,EAAa7H,WAA+B,SAAlB/P,EAAO/C,OAAoB,aAAezC,KAAK8c,cAM7EN,EAAuB1b,UAAUkN,QAAU,WACvC,IAAIhO,KAAKyS,aAAgBzS,KAAKqD,YAA9B,CAGA,IAAIqW,EAAS1Z,KAAKqD,YAAY6B,eAAe5D,MACzCmc,EAASzd,KAAKqD,YAAYkP,YAC1B6K,EAAeK,EAAOnc,MAC1Bmc,EAAOjc,UAAUU,OAxLN,8BAyLXkb,EAAa5H,eAAiB4H,EAAa7H,WAAamE,EAAO4D,UAC3D5D,EAAO6D,aAAe7D,EAAO2D,WAAa3D,EAAO8D,YAAc9D,EAAOjF,SAAW,GACrFzU,KAAKqD,YAAc,KACnBrD,KAAKyS,aAAc,IAEhB+J,EAvLgC,GAkMvCkB,EAAwC,WACxC,SAASA,EAAuBnd,EAAgBM,EAAWuQ,EAAWC,GAClErR,KAAKO,eAAiBA,EACtBP,KAAKa,UAAYA,EACjBb,KAAKoR,UAAYA,EACjBpR,KAAKqR,kBAAoBA,EAqC7B,OAhCAqM,EAAuB5c,UAAUpC,OAAS,WACtC,OAAO,IAAI8d,GAUfkB,EAAuB5c,UAAUqQ,YAAc,SAAUwM,EAAY9B,EAAWC,GAC5E,OAAO,IAAIF,EAA0BC,EAAWC,EAAY6B,EAAY3d,KAAKO,eAAgBP,KAAKa,UAAWb,KAAKoR,UAAWpR,KAAKqR,oBAMtIqM,EAAuB5c,UAAU8c,oBAAsB,SAAU1V,GAC7D,OAAO,IAAIgJ,EAAkChJ,EAAQlI,KAAKO,eAAgBP,KAAKa,UAAWb,KAAKoR,UAAWpR,KAAKqR,oBAEnHqM,EAAuB/X,WAAa,CAChC,CAAEC,KAAMxF,EAAGyF,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhD2X,EAAuB1X,eAAiB,WAAc,MAAO,CACzD,CAAEJ,KAAM1F,EAAGgG,eACX,CAAEN,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAAC3F,EAAKmG,aAC/D,CAAEV,KAAMvF,EAAGwd,UACX,CAAEjY,KAAM8E,KAEZgT,EAAuBnX,gBAAkBnG,EAAGoG,mBAAmB,CAAE7H,QAAS,SAASmf,IAAmC,OAAO,IAAIJ,EAAuBtd,EAAGsG,SAASxG,EAAGgG,eAAgB9F,EAAGsG,SAASvG,EAAKmG,UAAWlG,EAAGsG,SAASrG,EAAGwd,UAAWzd,EAAGsG,SAASgE,KAAuB/D,MAAO+W,EAAwB3X,WAAY,SACpT2X,EA1CgC,GAqDvCK,EAAe,EAWfC,EAAyB,WACzB,SAASA,EAETC,EAAkB5M,EAAmB6M,EAA2BC,EAAkBtS,EAAqBuS,EAAWpb,EAASnC,EAAWwd,EAEtIvS,GACI9L,KAAKie,iBAAmBA,EACxBje,KAAKqR,kBAAoBA,EACzBrR,KAAKke,0BAA4BA,EACjCle,KAAKme,iBAAmBA,EACxBne,KAAK6L,oBAAsBA,EAC3B7L,KAAKoe,UAAYA,EACjBpe,KAAKgD,QAAUA,EACfhD,KAAKa,UAAYA,EACjBb,KAAKqe,gBAAkBA,EACvBre,KAAK8L,UAAYA,EAyErB,OAlEAkS,EAAQld,UAAUwd,OAAS,SAAU9Y,GACjC,IAAI+Y,EAAOve,KAAKwe,qBACZC,EAAOze,KAAK0e,mBAAmBH,GAC/BI,EAAe3e,KAAK4e,oBAAoBH,GACxCI,EAAgB,IAAIjY,EAAcpB,GAEtC,OADAqZ,EAAczP,UAAYyP,EAAczP,WAAapP,KAAKqe,gBAAgBzW,MACnE,IAAI6D,EAAWkT,EAAcJ,EAAME,EAAMI,EAAe7e,KAAKgD,QAAShD,KAAK6L,oBAAqB7L,KAAKa,UAAWb,KAAK8L,YAOhIkS,EAAQld,UAAU2T,SAAW,WACzB,OAAOzU,KAAKme,kBAMhBH,EAAQld,UAAU4d,mBAAqB,SAAUH,GAC7C,IAAIE,EAAOze,KAAKa,UAAUsK,cAAc,OAIxC,OAHAsT,EAAKK,GAAK,eAAiBf,IAC3BU,EAAKjd,UAAUC,IAAI,oBACnB8c,EAAKnT,YAAYqT,GACVA,GAOXT,EAAQld,UAAU0d,mBAAqB,WACnC,IAAID,EAAOve,KAAKa,UAAUsK,cAAc,OAExC,OADAnL,KAAKqR,kBAAkBvG,sBAAsBM,YAAYmT,GAClDA,GAOXP,EAAQld,UAAU8d,oBAAsB,SAAUH,GAM9C,OAHKze,KAAK+e,UACN/e,KAAK+e,QAAU/e,KAAKoe,UAAUpR,IAAI5M,EAAG4e,iBAElC,IAAIrf,EAAOsf,gBAAgBR,EAAMze,KAAKke,0BAA2Ble,KAAK+e,QAAS/e,KAAKoe,YAE/FJ,EAAQrY,WAAa,CACjB,CAAEC,KAAMxF,EAAGyF,aAGfmY,EAAQhY,eAAiB,WAAc,MAAO,CAC1C,CAAEJ,KAAMP,GACR,CAAEO,KAAM8E,GACR,CAAE9E,KAAMxF,EAAG8e,0BACX,CAAEtZ,KAAM8X,GACR,CAAE9X,KAAMqD,GACR,CAAErD,KAAMxF,EAAG+e,UACX,CAAEvZ,KAAMxF,EAAG+F,QACX,CAAEP,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAAC3F,EAAKmG,aAC/D,CAAEV,KAAMlG,EAAK0f,gBACb,CAAExZ,KAAMzF,EAAKkf,SAAU1Z,WAAY,CAAC,CAAEC,KAAMxF,EAAGyI,cAE5CmV,EAxFiB,GAmGxBsB,EAAsB,CACtB,CACIjX,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,OAEd,CACIH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,UAEd,CACIH,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,UAEd,CACIH,QAAS,MACTC,QAAS,SACTC,SAAU,MACVC,SAAU,QAId+W,EAAwC,IAAInf,EAAGof,eAAe,yCAS9DC,EAAkC,WAClC,SAASA,EAET9B,GACI3d,KAAK2d,WAAaA,EAYtB,OAVA8B,EAAiB9Z,WAAa,CAC1B,CAAEC,KAAMxF,EAAGsf,UAAW5Z,KAAM,CAAC,CACjB+Q,SAAU,6DACV8I,SAAU,uBAI1BF,EAAiBzZ,eAAiB,WAAc,MAAO,CACnD,CAAEJ,KAAMxF,EAAGmb,cAERkE,EAhB0B,GAsBjCG,EAAqC,WAErC,SAASA,EAAoBC,EAAUC,EAAaC,EAAkBC,EAAuBC,GACzFjgB,KAAK6f,SAAWA,EAChB7f,KAAKigB,KAAOA,EACZjgB,KAAKkgB,cAAe,EACpBlgB,KAAKmgB,eAAgB,EACrBngB,KAAKyR,gBAAiB,EACtBzR,KAAKogB,qBAAsB,EAC3BpgB,KAAKqgB,OAAQ,EACbrgB,KAAKsgB,sBAAwB1gB,EAAKyM,aAAaC,MAE/CtM,KAAKugB,eAAiB,EAEtBvgB,KAAKwgB,MAAO,EAEZxgB,KAAKuO,cAAgB,IAAInO,EAAGqgB,aAE5BzgB,KAAK0gB,eAAiB,IAAItgB,EAAGqgB,aAE7BzgB,KAAKe,OAAS,IAAIX,EAAGqgB,aAErBzgB,KAAKwD,OAAS,IAAIpD,EAAGqgB,aAErBzgB,KAAK2gB,eAAiB,IAAIvgB,EAAGqgB,aAC7BzgB,KAAK4gB,gBAAkB,IAAIjhB,EAAOkhB,eAAef,EAAaC,GAC9D/f,KAAK8gB,uBAAyBd,EAC9BhgB,KAAK8G,eAAiB9G,KAAK8gB,yBAqP/B,OAnPA1Z,OAAO2F,eAAe6S,EAAoB9e,UAAW,UAAW,CAE5DkM,IAAK,WAAc,OAAOhN,KAAKiS,UAC/B8O,IAAK,SAAU5Y,GACXnI,KAAKiS,SAAW9J,EACZnI,KAAKghB,WACLhhB,KAAKihB,wBAAwBjhB,KAAKghB,YAG1C/T,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,UAAW,CAE5DkM,IAAK,WAAc,OAAOhN,KAAKkS,UAC/B6O,IAAK,SAAU3Y,GACXpI,KAAKkS,SAAW9J,EACZpI,KAAKghB,WACLhhB,KAAKihB,wBAAwBjhB,KAAKghB,YAG1C/T,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,cAAe,CAEhEkM,IAAK,WAAc,OAAOhN,KAAKkgB,cAC/Ba,IAAK,SAAUnZ,GAAS5H,KAAKkgB,aAAezgB,EAASyhB,sBAAsBtZ,IAC3EqF,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,eAAgB,CAEjEkM,IAAK,WAAc,OAAOhN,KAAKmgB,eAC/BY,IAAK,SAAUnZ,GAAS5H,KAAKmgB,cAAgB1gB,EAASyhB,sBAAsBtZ,IAC5EqF,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,qBAAsB,CAEvEkM,IAAK,WAAc,OAAOhN,KAAKogB,qBAC/BW,IAAK,SAAUnZ,GACX5H,KAAKogB,oBAAsB3gB,EAASyhB,sBAAsBtZ,IAE9DqF,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,gBAAiB,CAElEkM,IAAK,WAAc,OAAOhN,KAAKyR,gBAC/BsP,IAAK,SAAUnZ,GAAS5H,KAAKyR,eAAiBhS,EAASyhB,sBAAsBtZ,IAC7EqF,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,OAAQ,CAEzDkM,IAAK,WAAc,OAAOhN,KAAKqgB,OAC/BU,IAAK,SAAUnZ,GAAS5H,KAAKqgB,MAAQ5gB,EAASyhB,sBAAsBtZ,IACpEqF,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,aAAc,CAE/DkM,IAAK,WACD,OAAOhN,KAAKqD,aAEhB4J,YAAY,EACZC,cAAc,IAElB9F,OAAO2F,eAAe6S,EAAoB9e,UAAW,MAAO,CAExDkM,IAAK,WACD,OAAOhN,KAAKigB,KAAOjgB,KAAKigB,KAAKrY,MAAQ,OAEzCqF,YAAY,EACZC,cAAc,IAElB0S,EAAoB9e,UAAU4I,YAAc,WACpC1J,KAAKqD,aACLrD,KAAKqD,YAAY2K,UAErBhO,KAAKsgB,sBAAsBnc,eAE/Byb,EAAoB9e,UAAUqgB,YAAc,SAAUC,GAC9CphB,KAAKghB,YACLhhB,KAAKihB,wBAAwBjhB,KAAKghB,WAClChhB,KAAKqD,YAAY0L,WAAW,CACxBpM,MAAO3C,KAAK2C,MACZgN,SAAU3P,KAAK2P,SACflN,OAAQzC,KAAKyC,OACbmN,UAAW5P,KAAK4P,YAEhBwR,EAAgB,QAAKphB,KAAKwgB,MAC1BxgB,KAAKghB,UAAUpS,SAGnBwS,EAAc,OACdphB,KAAKwgB,KAAOxgB,KAAKqhB,iBAAmBrhB,KAAKshB,mBAIjD1B,EAAoB9e,UAAUygB,eAAiB,WAC3C,IAAIre,EAAQlD,KACPA,KAAK6V,WAAc7V,KAAK6V,UAAUtM,SACnCvJ,KAAK6V,UAAYyJ,GAErBtf,KAAKqD,YAAcrD,KAAK6f,SAASvB,OAAOte,KAAKwhB,gBAC7CxhB,KAAKqD,YAAYqL,gBAAgB5K,UAAU,SAAUsF,GACjDlG,EAAMyd,eAAelZ,KAAK2B,GACtBA,EAAMqY,UAAY1hB,EAAS2hB,QAAW3hB,EAAS4hB,eAAevY,KAC9DA,EAAMwY,iBACN1e,EAAMoe,qBAKlB1B,EAAoB9e,UAAU0gB,aAAe,WACzC,IAAI1U,EAAmB9M,KAAKghB,UAAYhhB,KAAK6hB,0BACzChD,EAAgB,IAAIjY,EAAc,CAClCwI,UAAWpP,KAAKigB,KAChBnT,iBAAkBA,EAClBhG,eAAgB9G,KAAK8G,eACrBE,YAAahH,KAAKgH,cAoBtB,OAlBIhH,KAAK2C,OAAwB,IAAf3C,KAAK2C,SACnBkc,EAAclc,MAAQ3C,KAAK2C,QAE3B3C,KAAKyC,QAA0B,IAAhBzC,KAAKyC,UACpBoc,EAAcpc,OAASzC,KAAKyC,SAE5BzC,KAAK2P,UAA8B,IAAlB3P,KAAK2P,YACtBkP,EAAclP,SAAW3P,KAAK2P,WAE9B3P,KAAK4P,WAAgC,IAAnB5P,KAAK4P,aACvBiP,EAAcjP,UAAY5P,KAAK4P,WAE/B5P,KAAKiH,gBACL4X,EAAc5X,cAAgBjH,KAAKiH,eAEnCjH,KAAK+G,aACL8X,EAAc9X,WAAa/G,KAAK+G,YAE7B8X,GAGXe,EAAoB9e,UAAUmgB,wBAA0B,SAAUnU,GAC9D,IAAI5J,EAAQlD,KACR6V,EAAY7V,KAAK6V,UAAU0E,IAAI,SAAUuH,GAAmB,MAAO,CACnEzZ,QAASyZ,EAAgBzZ,QACzBC,QAASwZ,EAAgBxZ,QACzBC,SAAUuZ,EAAgBvZ,SAC1BC,SAAUsZ,EAAgBtZ,SAC1BL,QAAS2Z,EAAgB3Z,SAAWjF,EAAMiF,QAC1CC,QAAS0Z,EAAgB1Z,SAAWlF,EAAMkF,QAC1CrB,WAAY+a,EAAgB/a,iBAAcX,KAE9C,OAAO0G,EACFuF,UAAUrS,KAAKkI,OAAOyV,YACtB/H,cAAcC,GACdG,uBAAuBhW,KAAKiW,oBAC5BG,SAASpW,KAAK6J,MACdqM,kBAAkBlW,KAAKmW,eACvBL,mBAAmB9V,KAAKugB,gBACxBjK,mBAAmBtW,KAAK+hB,eAGjCnC,EAAoB9e,UAAU+gB,wBAA0B,WACpD,IAAI3e,EAAQlD,KACR8O,EAAW9O,KAAK6f,SAASpL,WAAWmJ,oBAAoB5d,KAAKkI,OAAOyV,YAGxE,OAFA3d,KAAKihB,wBAAwBnS,GAC7BA,EAASsD,gBAAgBtO,UAAU,SAAUke,GAAK,OAAO9e,EAAMwd,eAAeuB,KAAKD,KAC5ElT,GAGX8Q,EAAoB9e,UAAUugB,eAAiB,WAC3C,IAAIne,EAAQlD,KACPA,KAAKqD,YAKNrD,KAAKqD,YAAYsL,YAAY3H,YAAchH,KAAKgH,YAJhDhH,KAAKuhB,iBAMJvhB,KAAKqD,YAAYC,gBAClBtD,KAAKqD,YAAYtC,OAAOf,KAAK4gB,iBAC7B5gB,KAAKe,OAAOkhB,QAEZjiB,KAAKgH,YACLhH,KAAKsgB,sBAAwBtgB,KAAKqD,YAAYkL,gBAAgBzK,UAAU,SAAUsF,GAC9ElG,EAAMqL,cAAc0T,KAAK7Y,KAI7BpJ,KAAKsgB,sBAAsBnc,eAInCyb,EAAoB9e,UAAUwgB,eAAiB,WACvCthB,KAAKqD,cACLrD,KAAKqD,YAAYG,SACjBxD,KAAKwD,OAAOye,QAEhBjiB,KAAKsgB,sBAAsBnc,eAE/Byb,EAAoBja,WAAa,CAC7B,CAAEC,KAAMxF,EAAGsf,UAAW5Z,KAAM,CAAC,CACjB+Q,SAAU,sEACV8I,SAAU,0BAI1BC,EAAoB5Z,eAAiB,WAAc,MAAO,CACtD,CAAEJ,KAAMoY,GACR,CAAEpY,KAAMxF,EAAG8hB,aACX,CAAEtc,KAAMxF,EAAG+hB,kBACX,CAAEvc,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAACyZ,MAC1D,CAAE3Z,KAAMlG,EAAK0f,eAAgBzZ,WAAY,CAAC,CAAEC,KAAMxF,EAAGyI,cAEzD+W,EAAoBwC,eAAiB,CACjCla,OAAQ,CAAC,CAAEtC,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,+BAClC+P,UAAW,CAAC,CAAEjQ,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,kCACrCqC,QAAS,CAAC,CAAEvC,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,gCACnCsC,QAAS,CAAC,CAAExC,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,gCACnCnD,MAAO,CAAC,CAAEiD,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,8BACjCrD,OAAQ,CAAC,CAAEmD,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,+BAClC6J,SAAU,CAAC,CAAE/J,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,iCACpC8J,UAAW,CAAC,CAAEhK,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,kCACrCmB,cAAe,CAAC,CAAErB,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,sCACzCiB,WAAY,CAAC,CAAEnB,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,mCACtCya,eAAgB,CAAC,CAAE3a,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,uCAC1CgB,eAAgB,CAAC,CAAElB,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,uCAC1C0a,KAAM,CAAC,CAAE5a,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,6BAChCkB,YAAa,CAAC,CAAEpB,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,oCACvCic,aAAc,CAAC,CAAEnc,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,qCACxCmQ,mBAAoB,CAAC,CAAErQ,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,2CAC9CqQ,cAAe,CAAC,CAAEvQ,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,sCACzC+D,KAAM,CAAC,CAAEjE,KAAMxF,EAAGiiB,MAAOvc,KAAM,CAAC,6BAChCyI,cAAe,CAAC,CAAE3I,KAAMxF,EAAGkiB,SAC3B5B,eAAgB,CAAC,CAAE9a,KAAMxF,EAAGkiB,SAC5BvhB,OAAQ,CAAC,CAAE6E,KAAMxF,EAAGkiB,SACpB9e,OAAQ,CAAC,CAAEoC,KAAMxF,EAAGkiB,SACpB3B,eAAgB,CAAC,CAAE/a,KAAMxF,EAAGkiB,UAEzB1C,EAhR6B;;;;;;;OAmRxC,SAAS2C,EAAuDnjB,GAC5D,OAAO,WAAc,OAAOA,EAAQ6e,iBAAiBvY,cAGzD,IAAI8c,EAAiD,CACjDlY,QAASiV,EACThV,KAAM,CAACyT,GACPvT,WAAY8X,GAUZE,EAA+B,WAC/B,SAASA,KAaT,OAXAA,EAAc9c,WAAa,CACvB,CAAEC,KAAMxF,EAAGsiB,SAAU5c,KAAM,CAAC,CAChB6c,QAAS,CAACjjB,EAAKkjB,WAAYjjB,EAAOkjB,aAAc3iB,EAAG4iB,iBACnDlkB,QAAS,CAACghB,EAAqBH,EAAkBvf,EAAG4iB,iBACpDC,aAAc,CAACnD,EAAqBH,GACpCuD,UAAW,CACPhF,EACAwE,OAIbC,EAduB,GAqB9BQ,EAAoB,CACpBjF,EACAN,EACArT,EACAnK,EAAGgjB,wBACH1X,EACAgX,GAUAW,EAA4C,SAAUC,GAEtD,SAASD,EAA2BtiB,GAChC,OAAOuiB,EAAOpb,KAAKhI,KAAMa,IAAcb,KAsE3C,OAxEAC,EAAQojB,UAAUF,EAA4BC,GAI9CD,EAA2BriB,UAAU4I,YAAc,WAC/C0Z,EAAOtiB,UAAU4I,YAAY1B,KAAKhI,MAC9BA,KAAKsjB,sBAAwBtjB,KAAKujB,qBAClCvjB,KAAKa,UAAUoJ,oBAAoBjK,KAAKsjB,qBAAsBtjB,KAAKujB,sBAG3EJ,EAA2BriB,UAAUiK,iBAAmB,WACpD,IAAI7H,EAAQlD,KACZojB,EAAOtiB,UAAUiK,iBAAiB/C,KAAKhI,MACvCA,KAAKwjB,mCACLxjB,KAAKyjB,6BAA6B,WAAc,OAAOvgB,EAAMsgB,sCAEjEL,EAA2BriB,UAAU0iB,iCAAmC,WAC/DxjB,KAAK2K,oBAGc3K,KAAK0jB,wBACK1jB,KAAKa,UAAUiB,MAC1CsJ,YAAYpL,KAAK2K,oBAE5BwY,EAA2BriB,UAAU2iB,6BAA+B,SAAUE,GAC1E,IAAIC,EAAY5jB,KAAK6jB,gBACjBD,IACI5jB,KAAKujB,qBACLvjB,KAAKa,UAAUoJ,oBAAoB2Z,EAAW5jB,KAAKujB,qBAEvDvjB,KAAKa,UAAU+I,iBAAiBga,EAAWD,GAC3C3jB,KAAKujB,oBAAsBI,IAGnCR,EAA2BriB,UAAU+iB,cAAgB,WACjD,IAAK7jB,KAAKsjB,qBAAsB,CAC5B,IAAIziB,EAAYb,KAAKa,UACjBA,EAAUijB,kBACV9jB,KAAKsjB,qBAAuB,mBAEvBziB,EAAUkjB,wBACf/jB,KAAKsjB,qBAAuB,yBAEvBziB,EAAUmjB,qBACfhkB,KAAKsjB,qBAAuB,sBAEvBziB,EAAUojB,sBACfjkB,KAAKsjB,qBAAuB,sBAGpC,OAAOtjB,KAAKsjB,sBAMhBH,EAA2BriB,UAAU4iB,qBAAuB,WACxD,IAAI7iB,EAAYb,KAAKa,UACrB,OAAOA,EAAUqjB,mBACbrjB,EAAUsjB,yBACVtjB,EAAUujB,sBACVvjB,EAAUwjB,qBACV,MAERlB,EAA2Bxd,WAAa,CACpC,CAAEC,KAAMxF,EAAGyF,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhDod,EAA2Bnd,eAAiB,WAAc,MAAO,CAC7D,CAAEJ,UAAMQ,EAAWT,WAAY,CAAC,CAAEC,KAAMxF,EAAGiG,OAAQP,KAAM,CAAC3F,EAAKmG,eAEnE6c,EAA2B5c,gBAAkBnG,EAAGoG,mBAAmB,CAAE7H,QAAS,SAAS2lB,IAAuC,OAAO,IAAInB,EAA2B/iB,EAAGsG,SAASvG,EAAKmG,YAAeK,MAAOwc,EAA4Bpd,WAAY,SAC5Ood,EAzEoC,CA0E7CzY;;;;;;;;;;;;;;;AAcF9L,EAAQsH,cAAgBhG,EAAGgG,cAC3BtH,EAAQskB,wBAA0BhjB,EAAGgjB,wBACrCtkB,EAAQ2lB,cAAgBrkB,EAAGqkB,cAC3B3lB,EAAQqH,iBAAmB/F,EAAG+F,iBAC9BrH,EAAQ4lB,4CAA8Cna,EACtDzL,EAAQ6lB,4CAA8Cta,EACtDvL,EAAQ8lB,4CAA8ClZ,EACtD5M,EAAQ+lB,4CAA8CrZ,EACtD1M,EAAQgmB,4CAA8CrF,EACtD3gB,EAAQimB,4CAA8CrC,EACtD5jB,EAAQkmB,4CAA8CvC,EACtD3jB,EAAQof,QAAUA,EAClBpf,EAAQ8L,iBAAmBA,EAC3B9L,EAAQ6gB,iBAAmBA,EAC3B7gB,EAAQghB,oBAAsBA,EAC9BhhB,EAAQukB,2BAA6BA,EACrCvkB,EAAQ6M,WAAaA,EACrB7M,EAAQqK,0BAA4BA,EACpCrK,EAAQ8e,uBAAyBA,EACjC9e,EAAQ4d,uBAAyBA,EACjC5d,EAAQgd,0BAA4BA,EACpChd,EAAQsS,kCAAoCA,EAC5CtS,EAAQgI,cAAgBA,EACxBhI,EAAQqJ,uBAAyBA,EACjCrJ,EAAQ6J,oBAAsBA,EAC9B7J,EAAQ8J,+BAAiCA,EACzC9J,EAAQkK,yBAA2BA,EACnClK,EAAQoK,2BAA6BA,EACrCpK,EAAQyG,sBAAwBA,EAChCzG,EAAQkG,yBAA2BA,EACnClG,EAAQkE,oBAAsBA,EAC9BlE,EAAQwF,mBAAqBA,EAC7BxF,EAAQ0B,oBAAsBA,EAC9B1B,EAAQ6jB,cAAgBA,EACxB7jB,EAAQqkB,kBAAoBA,EAE5B7b,OAAO2F,eAAenO,EAAS,aAAc,CAAEgJ,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/bidi'), require('@angular/cdk/portal'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/platform'), require('@angular/cdk/keycodes')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/overlay', ['exports', 'tslib', '@angular/cdk/scrolling', '@angular/common', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/bidi', '@angular/cdk/portal', 'rxjs', 'rxjs/operators', '@angular/cdk/platform', '@angular/cdk/keycodes'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.overlay = {}), global.tslib, global.ng.cdk.scrolling, global.ng.common, global.ng.core, global.ng.cdk.coercion, global.ng.cdk.bidi, global.ng.cdk.portal, global.rxjs, global.rxjs.operators, global.ng.cdk.platform, global.ng.cdk.keycodes));\n}(this, function (exports, tslib_1, i1, i1$1, i0, coercion, bidi, portal, rxjs, operators, i3, keycodes) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will prevent the user from scrolling while the overlay is visible.\n     */\n    var BlockScrollStrategy = /** @class */ (function () {\n        function BlockScrollStrategy(_viewportRuler, document) {\n            this._viewportRuler = _viewportRuler;\n            this._previousHTMLStyles = { top: '', left: '' };\n            this._isEnabled = false;\n            this._document = document;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        BlockScrollStrategy.prototype.attach = function () { };\n        /** Blocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.enable = function () {\n            if (this._canBeEnabled()) {\n                var root = this._document.documentElement;\n                this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n                // Cache the previous inline styles in case the user had set them.\n                this._previousHTMLStyles.left = root.style.left || '';\n                this._previousHTMLStyles.top = root.style.top || '';\n                // Note: we're using the `html` node, instead of the `body`, because the `body` may\n                // have the user agent margin, whereas the `html` is guaranteed not to have one.\n                root.style.left = coercion.coerceCssPixelValue(-this._previousScrollPosition.left);\n                root.style.top = coercion.coerceCssPixelValue(-this._previousScrollPosition.top);\n                root.classList.add('cdk-global-scrollblock');\n                this._isEnabled = true;\n            }\n        };\n        /** Unblocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.disable = function () {\n            if (this._isEnabled) {\n                var html = this._document.documentElement;\n                var body = this._document.body;\n                var htmlStyle = html.style;\n                var bodyStyle = body.style;\n                var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n                var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n                this._isEnabled = false;\n                htmlStyle.left = this._previousHTMLStyles.left;\n                htmlStyle.top = this._previousHTMLStyles.top;\n                html.classList.remove('cdk-global-scrollblock');\n                // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n                // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n                window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        };\n        BlockScrollStrategy.prototype._canBeEnabled = function () {\n            // Since the scroll strategies can't be singletons, we have to use a global CSS class\n            // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n            // scrolling multiple times.\n            var html = this._document.documentElement;\n            if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n                return false;\n            }\n            var body = this._document.body;\n            var viewport = this._viewportRuler.getViewportSize();\n            return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n        };\n        return BlockScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n     */\n    function getMatScrollStrategyAlreadyAttachedError() {\n        return Error(\"Scroll strategy has already been attached.\");\n    }\n\n    /**\n     * Strategy that will close the overlay as soon as the user starts scrolling.\n     */\n    var CloseScrollStrategy = /** @class */ (function () {\n        function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._config = _config;\n            this._scrollSubscription = null;\n            /** Detaches the overlay ref and disables the scroll strategy. */\n            this._detach = function () {\n                _this.disable();\n                if (_this._overlayRef.hasAttached()) {\n                    _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                }\n            };\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        CloseScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables the closing of the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (this._scrollSubscription) {\n                return;\n            }\n            var stream = this._scrollDispatcher.scrolled(0);\n            if (this._config && this._config.threshold && this._config.threshold > 1) {\n                this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                this._scrollSubscription = stream.subscribe(function () {\n                    var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                    if (Math.abs(scrollPosition - _this._initialScrollPosition) > _this._config.threshold) {\n                        _this._detach();\n                    }\n                    else {\n                        _this._overlayRef.updatePosition();\n                    }\n                });\n            }\n            else {\n                this._scrollSubscription = stream.subscribe(this._detach);\n            }\n        };\n        /** Disables the closing the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        CloseScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return CloseScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Scroll strategy that doesn't do anything. */\n    var NoopScrollStrategy = /** @class */ (function () {\n        function NoopScrollStrategy() {\n        }\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.enable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.disable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.attach = function () { };\n        return NoopScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): move this to live with the rest of the scrolling code\n    // TODO(jelbourn): someday replace this with IntersectionObservers\n    /**\n     * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is scrolled out of view\n     * @docs-private\n     */\n    function isElementScrolledOutsideView(element, scrollContainers) {\n        return scrollContainers.some(function (containerBounds) {\n            var outsideAbove = element.bottom < containerBounds.top;\n            var outsideBelow = element.top > containerBounds.bottom;\n            var outsideLeft = element.right < containerBounds.left;\n            var outsideRight = element.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    }\n    /**\n     * Gets whether an element is clipped by any of its scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is clipped\n     * @docs-private\n     */\n    function isElementClippedByScrolling(element, scrollContainers) {\n        return scrollContainers.some(function (scrollContainerRect) {\n            var clippedAbove = element.top < scrollContainerRect.top;\n            var clippedBelow = element.bottom > scrollContainerRect.bottom;\n            var clippedLeft = element.left < scrollContainerRect.left;\n            var clippedRight = element.right > scrollContainerRect.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will update the element position as the user is scrolling.\n     */\n    var RepositionScrollStrategy = /** @class */ (function () {\n        function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            this._config = _config;\n            this._scrollSubscription = null;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        RepositionScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (!this._scrollSubscription) {\n                var throttle = this._config ? this._config.scrollThrottle : 0;\n                this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                    _this._overlayRef.updatePosition();\n                    // TODO(crisbeto): make `close` on by default once all components can handle it.\n                    if (_this._config && _this._config.autoClose) {\n                        var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                        var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                        // TODO(crisbeto): include all ancestor scroll containers here once\n                        // we have a way of exposing the trigger element to the scroll strategy.\n                        var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                        if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                            _this.disable();\n                            _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                        }\n                    }\n                });\n            }\n        };\n        /** Disables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        RepositionScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return RepositionScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Options for how an overlay will handle scrolling.\n     *\n     * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n     * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n     */\n    var ScrollStrategyOptions = /** @class */ (function () {\n        function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            /** Do nothing on scroll. */\n            this.noop = function () { return new NoopScrollStrategy(); };\n            /**\n             * Close the overlay as soon as the user scrolls.\n             * @param config Configuration to be used inside the scroll strategy.\n             */\n            this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n            /** Block scrolling. */\n            this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n            /**\n             * Update the overlay's position on scroll.\n             * @param config Configuration to be used inside the scroll strategy.\n             * Allows debouncing the reposition calls.\n             */\n            this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n            this._document = document;\n        }\n        ScrollStrategyOptions.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollStrategyOptions.ctorParameters = function () { return [\n            { type: i1.ScrollDispatcher },\n            { type: i1.ViewportRuler },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        ScrollStrategyOptions.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n        return ScrollStrategyOptions;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Initial configuration used when creating an overlay. */\n    var OverlayConfig = /** @class */ (function () {\n        function OverlayConfig(config) {\n            var e_1, _a;\n            /** Strategy to be used when handling scroll events while the overlay is open. */\n            this.scrollStrategy = new NoopScrollStrategy();\n            /** Custom class to add to the overlay pane. */\n            this.panelClass = '';\n            /** Whether the overlay has a backdrop. */\n            this.hasBackdrop = false;\n            /** Custom class to add to the backdrop */\n            this.backdropClass = 'cdk-overlay-dark-backdrop';\n            /**\n             * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.disposeOnNavigation = false;\n            if (config) {\n                var configKeys = Object.keys(config);\n                try {\n                    for (var configKeys_1 = tslib_1.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n                        var key = configKeys_1_1.value;\n                        if (config[key] !== undefined) {\n                            // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                            // as \"I don't know *which* key this is, so the only valid value is the intersection\n                            // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                            // is not smart enough to see that the right-hand-side is actually an access of the same\n                            // exact type with the same exact key, meaning that the value type must be identical.\n                            // So we use `any` to work around this.\n                            this[key] = config[key];\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        return OverlayConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The points of the origin element and the overlay element to connect. */\n    var ConnectionPositionPair = /** @class */ (function () {\n        function ConnectionPositionPair(origin, overlay, \n        /** Offset along the X axis. */\n        offsetX, \n        /** Offset along the Y axis. */\n        offsetY, \n        /** Class(es) to be applied to the panel while this position is active. */\n        panelClass) {\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            this.panelClass = panelClass;\n            this.originX = origin.originX;\n            this.originY = origin.originY;\n            this.overlayX = overlay.overlayX;\n            this.overlayY = overlay.overlayY;\n        }\n        return ConnectionPositionPair;\n    }());\n    /**\n     * Set of properties regarding the position of the origin and overlay relative to the viewport\n     * with respect to the containing Scrollable elements.\n     *\n     * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n     * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     * The overlay and origin are outside view if there is no overlap between their bounding client\n     * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     *       -----------                    -----------\n     *       | outside |                    | clipped |\n     *       |  view   |              --------------------------\n     *       |         |              |     |         |        |\n     *       ----------               |     -----------        |\n     *  --------------------------    |                        |\n     *  |                        |    |      Scrollable        |\n     *  |                        |    |                        |\n     *  |                        |     --------------------------\n     *  |      Scrollable        |\n     *  |                        |\n     *  --------------------------\n     *\n     *  @docs-private\n     */\n    var ScrollingVisibility = /** @class */ (function () {\n        function ScrollingVisibility() {\n        }\n        return ScrollingVisibility;\n    }());\n    /** The change event emitted by the strategy when a fallback position is used. */\n    var ConnectedOverlayPositionChange = /** @class */ (function () {\n        function ConnectedOverlayPositionChange(\n        /** The position used as a result of this change. */\n        connectionPair, \n        /** @docs-private */\n        scrollableViewProperties) {\n            this.connectionPair = connectionPair;\n            this.scrollableViewProperties = scrollableViewProperties;\n        }\n        /** @nocollapse */\n        ConnectedOverlayPositionChange.ctorParameters = function () { return [\n            { type: ConnectionPositionPair },\n            { type: ScrollingVisibility, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return ConnectedOverlayPositionChange;\n    }());\n    /**\n     * Validates whether a vertical position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateVerticalPosition(property, value) {\n        if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n        }\n    }\n    /**\n     * Validates whether a horizontal position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateHorizontalPosition(property, value) {\n        if (value !== 'start' && value !== 'end' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n     * if any. It maintains a list of attached overlays to determine best suited overlay based\n     * on event target and order of overlay opens.\n     */\n    var OverlayKeyboardDispatcher = /** @class */ (function () {\n        function OverlayKeyboardDispatcher(document) {\n            var _this = this;\n            /** Currently attached overlays in the order they were attached. */\n            this._attachedOverlays = [];\n            /** Keyboard event listener that will be attached to the body. */\n            this._keydownListener = function (event) {\n                var overlays = _this._attachedOverlays;\n                for (var i = overlays.length - 1; i > -1; i--) {\n                    // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                    // We want to target the most recent overlay, rather than trying to match where the event came\n                    // from, because some components might open an overlay, but keep focus on a trigger element\n                    // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                    // because we don't want overlays that don't handle keyboard events to block the ones below\n                    // them that do.\n                    if (overlays[i]._keydownEventSubscriptions > 0) {\n                        overlays[i]._keydownEvents.next(event);\n                        break;\n                    }\n                }\n            };\n            this._document = document;\n        }\n        OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {\n            this._detach();\n        };\n        /** Add a new overlay to the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {\n            // Ensure that we don't get the same overlay multiple times.\n            this.remove(overlayRef);\n            // Lazily start dispatcher once first overlay is added\n            if (!this._isAttached) {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n                this._isAttached = true;\n            }\n            this._attachedOverlays.push(overlayRef);\n        };\n        /** Remove an overlay from the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {\n            var index = this._attachedOverlays.indexOf(overlayRef);\n            if (index > -1) {\n                this._attachedOverlays.splice(index, 1);\n            }\n            // Remove the global listener once there are no more overlays.\n            if (this._attachedOverlays.length === 0) {\n                this._detach();\n            }\n        };\n        /** Detaches the global keyboard event listener. */\n        OverlayKeyboardDispatcher.prototype._detach = function () {\n            if (this._isAttached) {\n                this._document.body.removeEventListener('keydown', this._keydownListener);\n                this._isAttached = false;\n            }\n        };\n        OverlayKeyboardDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayKeyboardDispatcher.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        OverlayKeyboardDispatcher.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n        return OverlayKeyboardDispatcher;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n        return dispatcher || new OverlayKeyboardDispatcher(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n        // If there is already an OverlayKeyboardDispatcher available, use that.\n        // Otherwise, provide a new one.\n        provide: OverlayKeyboardDispatcher,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayKeyboardDispatcher],\n            // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n            // of the type expected by Angular\n            i1$1.DOCUMENT\n        ],\n        useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Container inside which all overlays will render. */\n    var OverlayContainer = /** @class */ (function () {\n        function OverlayContainer(document) {\n            this._document = document;\n        }\n        OverlayContainer.prototype.ngOnDestroy = function () {\n            if (this._containerElement && this._containerElement.parentNode) {\n                this._containerElement.parentNode.removeChild(this._containerElement);\n            }\n        };\n        /**\n         * This method returns the overlay container element. It will lazily\n         * create the element the first time  it is called to facilitate using\n         * the container in non-browser environments.\n         * @returns the container element\n         */\n        OverlayContainer.prototype.getContainerElement = function () {\n            if (!this._containerElement) {\n                this._createContainer();\n            }\n            return this._containerElement;\n        };\n        /**\n         * Create the overlay container element, which is simply a div\n         * with the 'cdk-overlay-container' class on the document body.\n         */\n        OverlayContainer.prototype._createContainer = function () {\n            var containerClass = 'cdk-overlay-container';\n            var previousContainers = this._document.getElementsByClassName(containerClass);\n            // Remove any old containers. This can happen when transitioning from the server to the client.\n            for (var i = 0; i < previousContainers.length; i++) {\n                previousContainers[i].parentNode.removeChild(previousContainers[i]);\n            }\n            var container = this._document.createElement('div');\n            container.classList.add(containerClass);\n            this._document.body.appendChild(container);\n            this._containerElement = container;\n        };\n        OverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        OverlayContainer.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n        return OverlayContainer;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n        return parentContainer || new OverlayContainer(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_CONTAINER_PROVIDER = {\n        // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n        provide: OverlayContainer,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayContainer],\n            i1$1.DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ],\n        useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Reference to an overlay that has been created with the Overlay service.\n     * Used to manipulate or dispose of said overlay.\n     */\n    var OverlayRef = /** @class */ (function () {\n        function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            var _this = this;\n            this._portalOutlet = _portalOutlet;\n            this._host = _host;\n            this._pane = _pane;\n            this._config = _config;\n            this._ngZone = _ngZone;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._document = _document;\n            this._location = _location;\n            this._backdropElement = null;\n            this._backdropClick = new rxjs.Subject();\n            this._attachments = new rxjs.Subject();\n            this._detachments = new rxjs.Subject();\n            this._locationChanges = rxjs.Subscription.EMPTY;\n            this._backdropClickHandler = function (event) { return _this._backdropClick.next(event); };\n            this._keydownEventsObservable = new rxjs.Observable(function (observer) {\n                var subscription = _this._keydownEvents.subscribe(observer);\n                _this._keydownEventSubscriptions++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._keydownEventSubscriptions--;\n                };\n            });\n            /** Stream of keydown events dispatched to this overlay. */\n            this._keydownEvents = new rxjs.Subject();\n            /** Amount of subscriptions to the keydown events. */\n            this._keydownEventSubscriptions = 0;\n            if (_config.scrollStrategy) {\n                this._scrollStrategy = _config.scrollStrategy;\n                this._scrollStrategy.attach(this);\n            }\n            this._positionStrategy = _config.positionStrategy;\n        }\n        Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n            /** The overlay's HTML element */\n            get: function () {\n                return this._pane;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n            /** The overlay's backdrop HTML element. */\n            get: function () {\n                return this._backdropElement;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n            /**\n             * Wrapper around the panel element. Can be used for advanced\n             * positioning where a wrapper with specific styling is\n             * required around the overlay pane.\n             */\n            get: function () {\n                return this._host;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Attaches content, given via a Portal, to the overlay.\n         * If the overlay is configured to have a backdrop, it will be created.\n         *\n         * @param portal Portal instance to which to attach the overlay.\n         * @returns The portal attachment result.\n         */\n        OverlayRef.prototype.attach = function (portal) {\n            var _this = this;\n            var attachResult = this._portalOutlet.attach(portal);\n            if (this._positionStrategy) {\n                this._positionStrategy.attach(this);\n            }\n            // Update the pane element with the given configuration.\n            if (!this._host.parentElement && this._previousHostParent) {\n                this._previousHostParent.appendChild(this._host);\n            }\n            this._updateStackingOrder();\n            this._updateElementSize();\n            this._updateElementDirection();\n            if (this._scrollStrategy) {\n                this._scrollStrategy.enable();\n            }\n            // Update the position once the zone is stable so that the overlay will be fully rendered\n            // before attempting to position it, as the position may depend on the size of the rendered\n            // content.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                // The overlay could've been detached before the zone has stabilized.\n                if (_this.hasAttached()) {\n                    _this.updatePosition();\n                }\n            });\n            // Enable pointer events for the overlay pane element.\n            this._togglePointerEvents(true);\n            if (this._config.hasBackdrop) {\n                this._attachBackdrop();\n            }\n            if (this._config.panelClass) {\n                this._toggleClasses(this._pane, this._config.panelClass, true);\n            }\n            // Only emit the `attachments` event once all other setup is done.\n            this._attachments.next();\n            // Track this overlay by the keyboard dispatcher\n            this._keyboardDispatcher.add(this);\n            // @breaking-change 8.0.0 remove the null check for `_location`\n            // once the constructor parameter is made required.\n            if (this._config.disposeOnNavigation && this._location) {\n                this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n            }\n            return attachResult;\n        };\n        /**\n         * Detaches an overlay from a portal.\n         * @returns The portal detachment result.\n         */\n        OverlayRef.prototype.detach = function () {\n            if (!this.hasAttached()) {\n                return;\n            }\n            this.detachBackdrop();\n            // When the overlay is detached, the pane element should disable pointer events.\n            // This is necessary because otherwise the pane element will cover the page and disable\n            // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n            this._togglePointerEvents(false);\n            if (this._positionStrategy && this._positionStrategy.detach) {\n                this._positionStrategy.detach();\n            }\n            if (this._scrollStrategy) {\n                this._scrollStrategy.disable();\n            }\n            var detachmentResult = this._portalOutlet.detach();\n            // Only emit after everything is detached.\n            this._detachments.next();\n            // Remove this overlay from keyboard dispatcher tracking.\n            this._keyboardDispatcher.remove(this);\n            // Keeping the host element in DOM the can cause scroll jank, because it still gets\n            // rendered, even though it's transparent and unclickable which is why we remove it.\n            this._detachContentWhenStable();\n            // Stop listening for location changes.\n            this._locationChanges.unsubscribe();\n            return detachmentResult;\n        };\n        /** Cleans up the overlay from the DOM. */\n        OverlayRef.prototype.dispose = function () {\n            var isAttached = this.hasAttached();\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._disposeScrollStrategy();\n            this.detachBackdrop();\n            this._locationChanges.unsubscribe();\n            this._keyboardDispatcher.remove(this);\n            this._portalOutlet.dispose();\n            this._attachments.complete();\n            this._backdropClick.complete();\n            this._keydownEvents.complete();\n            if (this._host && this._host.parentNode) {\n                this._host.parentNode.removeChild(this._host);\n                this._host = null;\n            }\n            this._previousHostParent = this._pane = null;\n            if (isAttached) {\n                this._detachments.next();\n            }\n            this._detachments.complete();\n        };\n        /** Whether the overlay has attached content. */\n        OverlayRef.prototype.hasAttached = function () {\n            return this._portalOutlet.hasAttached();\n        };\n        /** Gets an observable that emits when the backdrop has been clicked. */\n        OverlayRef.prototype.backdropClick = function () {\n            return this._backdropClick.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been attached. */\n        OverlayRef.prototype.attachments = function () {\n            return this._attachments.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been detached. */\n        OverlayRef.prototype.detachments = function () {\n            return this._detachments.asObservable();\n        };\n        /** Gets an observable of keydown events targeted to this overlay. */\n        OverlayRef.prototype.keydownEvents = function () {\n            return this._keydownEventsObservable;\n        };\n        /** Gets the current overlay configuration, which is immutable. */\n        OverlayRef.prototype.getConfig = function () {\n            return this._config;\n        };\n        /** Updates the position of the overlay based on the position strategy. */\n        OverlayRef.prototype.updatePosition = function () {\n            if (this._positionStrategy) {\n                this._positionStrategy.apply();\n            }\n        };\n        /** Switches to a new position strategy and updates the overlay position. */\n        OverlayRef.prototype.updatePositionStrategy = function (strategy) {\n            if (strategy === this._positionStrategy) {\n                return;\n            }\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._positionStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                this.updatePosition();\n            }\n        };\n        /** Update the size properties of the overlay. */\n        OverlayRef.prototype.updateSize = function (sizeConfig) {\n            this._config = tslib_1.__assign({}, this._config, sizeConfig);\n            this._updateElementSize();\n        };\n        /** Sets the LTR/RTL direction for the overlay. */\n        OverlayRef.prototype.setDirection = function (dir) {\n            this._config = tslib_1.__assign({}, this._config, { direction: dir });\n            this._updateElementDirection();\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        OverlayRef.prototype.addPanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, true);\n            }\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        OverlayRef.prototype.removePanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, false);\n            }\n        };\n        /**\n         * Returns the layout direction of the overlay panel.\n         */\n        OverlayRef.prototype.getDirection = function () {\n            var direction = this._config.direction;\n            if (!direction) {\n                return 'ltr';\n            }\n            return typeof direction === 'string' ? direction : direction.value;\n        };\n        /** Switches to a new scroll strategy. */\n        OverlayRef.prototype.updateScrollStrategy = function (strategy) {\n            if (strategy === this._scrollStrategy) {\n                return;\n            }\n            this._disposeScrollStrategy();\n            this._scrollStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                strategy.enable();\n            }\n        };\n        /** Updates the text direction of the overlay panel. */\n        OverlayRef.prototype._updateElementDirection = function () {\n            this._host.setAttribute('dir', this.getDirection());\n        };\n        /** Updates the size of the overlay element based on the overlay config. */\n        OverlayRef.prototype._updateElementSize = function () {\n            if (!this._pane) {\n                return;\n            }\n            var style = this._pane.style;\n            style.width = coercion.coerceCssPixelValue(this._config.width);\n            style.height = coercion.coerceCssPixelValue(this._config.height);\n            style.minWidth = coercion.coerceCssPixelValue(this._config.minWidth);\n            style.minHeight = coercion.coerceCssPixelValue(this._config.minHeight);\n            style.maxWidth = coercion.coerceCssPixelValue(this._config.maxWidth);\n            style.maxHeight = coercion.coerceCssPixelValue(this._config.maxHeight);\n        };\n        /** Toggles the pointer events for the overlay pane element. */\n        OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n            this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n        };\n        /** Attaches a backdrop for this overlay. */\n        OverlayRef.prototype._attachBackdrop = function () {\n            var _this = this;\n            var showingClass = 'cdk-overlay-backdrop-showing';\n            this._backdropElement = this._document.createElement('div');\n            this._backdropElement.classList.add('cdk-overlay-backdrop');\n            if (this._config.backdropClass) {\n                this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n            }\n            // Insert the backdrop before the pane in the DOM order,\n            // in order to handle stacked overlays properly.\n            this._host.parentElement.insertBefore(this._backdropElement, this._host);\n            // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n            // action desired when such a click occurs (usually closing the overlay).\n            this._backdropElement.addEventListener('click', this._backdropClickHandler);\n            // Add class to fade-in the backdrop after one frame.\n            if (typeof requestAnimationFrame !== 'undefined') {\n                this._ngZone.runOutsideAngular(function () {\n                    requestAnimationFrame(function () {\n                        if (_this._backdropElement) {\n                            _this._backdropElement.classList.add(showingClass);\n                        }\n                    });\n                });\n            }\n            else {\n                this._backdropElement.classList.add(showingClass);\n            }\n        };\n        /**\n         * Updates the stacking order of the element, moving it to the top if necessary.\n         * This is required in cases where one overlay was detached, while another one,\n         * that should be behind it, was destroyed. The next time both of them are opened,\n         * the stacking will be wrong, because the detached element's pane will still be\n         * in its original DOM position.\n         */\n        OverlayRef.prototype._updateStackingOrder = function () {\n            if (this._host.nextSibling) {\n                this._host.parentNode.appendChild(this._host);\n            }\n        };\n        /** Detaches the backdrop (if any) associated with the overlay. */\n        OverlayRef.prototype.detachBackdrop = function () {\n            var _this = this;\n            var backdropToDetach = this._backdropElement;\n            if (!backdropToDetach) {\n                return;\n            }\n            var timeoutId;\n            var finishDetach = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach) {\n                    backdropToDetach.removeEventListener('click', _this._backdropClickHandler);\n                    backdropToDetach.removeEventListener('transitionend', finishDetach);\n                    if (backdropToDetach.parentNode) {\n                        backdropToDetach.parentNode.removeChild(backdropToDetach);\n                    }\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                if (_this._config.backdropClass) {\n                    _this._toggleClasses(backdropToDetach, _this._config.backdropClass, false);\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            this._ngZone.runOutsideAngular(function () {\n                backdropToDetach.addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach, 500); });\n        };\n        /** Toggles a single CSS class or an array of classes on an element. */\n        OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {\n            var classList = element.classList;\n            coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                // We can't do a spread here, because IE doesn't support setting multiple classes.\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            });\n        };\n        /** Detaches the overlay content next time the zone stabilizes. */\n        OverlayRef.prototype._detachContentWhenStable = function () {\n            var _this = this;\n            // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n            // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n            // be patched to run inside the zone, which will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(function () {\n                // We can't remove the host here immediately, because the overlay pane's content\n                // might still be animating. This stream helps us avoid interrupting the animation\n                // by waiting for the pane to become empty.\n                var subscription = _this._ngZone.onStable\n                    .asObservable()\n                    .pipe(operators.takeUntil(rxjs.merge(_this._attachments, _this._detachments)))\n                    .subscribe(function () {\n                    // Needs a couple of checks for the pane and host, because\n                    // they may have been removed by the time the zone stabilizes.\n                    if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                        if (_this._pane && _this._config.panelClass) {\n                            _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                        }\n                        if (_this._host && _this._host.parentElement) {\n                            _this._previousHostParent = _this._host.parentElement;\n                            _this._previousHostParent.removeChild(_this._host);\n                        }\n                        subscription.unsubscribe();\n                    }\n                });\n            });\n        };\n        /** Disposes of a scroll strategy. */\n        OverlayRef.prototype._disposeScrollStrategy = function () {\n            var scrollStrategy = this._scrollStrategy;\n            if (scrollStrategy) {\n                scrollStrategy.disable();\n                if (scrollStrategy.detach) {\n                    scrollStrategy.detach();\n                }\n            }\n        };\n        return OverlayRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: refactor clipping detection into a separate thing (part of scrolling module)\n    // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n    /** Class to be added to the overlay bounding box. */\n    var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     */\n    var FlexibleConnectedPositionStrategy = /** @class */ (function () {\n        function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n            /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n            this._lastBoundingBoxSize = { width: 0, height: 0 };\n            /** Whether the overlay was pushed in a previous positioning. */\n            this._isPushed = false;\n            /** Whether the overlay can be pushed on-screen on the initial open. */\n            this._canPush = true;\n            /** Whether the overlay can grow via flexible width/height after the initial open. */\n            this._growAfterOpen = false;\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            this._hasFlexibleDimensions = true;\n            /** Whether the overlay position is locked. */\n            this._positionLocked = false;\n            /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n            this._viewportMargin = 0;\n            /** The Scrollable containers used to check scrollable view properties on position change. */\n            this._scrollables = [];\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            /** Subject that emits whenever the position changes. */\n            this._positionChanges = new rxjs.Subject();\n            /** Subscription to viewport size changes. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Default offset for the overlay along the x axis. */\n            this._offsetX = 0;\n            /** Default offset for the overlay along the y axis. */\n            this._offsetY = 0;\n            /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n            this._appliedPanelClasses = [];\n            /** Observable sequence of position changes. */\n            this.positionChanges = this._positionChanges.asObservable();\n            this.setOrigin(connectedTo);\n        }\n        Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attaches this position strategy to an overlay. */\n        FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            var _this = this;\n            if (this._overlayRef && overlayRef !== this._overlayRef) {\n                throw Error('This position strategy is already attached to an overlay');\n            }\n            this._validatePositions();\n            overlayRef.hostElement.classList.add(boundingBoxClass);\n            this._overlayRef = overlayRef;\n            this._boundingBox = overlayRef.hostElement;\n            this._pane = overlayRef.overlayElement;\n            this._isDisposed = false;\n            this._isInitialRender = true;\n            this._lastPosition = null;\n            this._resizeSubscription.unsubscribe();\n            this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n                // When the window is resized, we want to trigger the next reposition as if it\n                // was an initial render, in order for the strategy to pick a new optimal position,\n                // otherwise position locking will cause it to stay at the old one.\n                _this._isInitialRender = true;\n                _this.apply();\n            });\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin best fits on-screen.\n         *\n         * The selection of a position goes as follows:\n         *  - If any positions fit completely within the viewport as-is,\n         *      choose the first position that does so.\n         *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n         *      choose the position with the greatest available size modified by the positions' weight.\n         *  - If pushing is enabled, take the position that went off-screen the least and push it\n         *      on-screen.\n         *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n         * @docs-private\n         */\n        FlexibleConnectedPositionStrategy.prototype.apply = function () {\n            var e_1, _a, e_2, _b;\n            // We shouldn't do anything if the strategy was disposed or we're on the server.\n            if (this._isDisposed || !this._platform.isBrowser) {\n                return;\n            }\n            // If the position has been applied already (e.g. when the overlay was opened) and the\n            // consumer opted into locking in the position, re-use the old position, in order to\n            // prevent the overlay from jumping around.\n            if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n                this.reapplyLastPosition();\n                return;\n            }\n            this._clearPanelClasses();\n            this._resetOverlayElementStyles();\n            this._resetBoundingBoxStyles();\n            // We need the bounding rects for the origin and the overlay to determine how to position\n            // the overlay relative to the origin.\n            // We use the viewport rect to determine whether a position would go off-screen.\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            var originRect = this._originRect;\n            var overlayRect = this._overlayRect;\n            var viewportRect = this._viewportRect;\n            // Positions where the overlay will fit with flexible dimensions.\n            var flexibleFits = [];\n            // Fallback if none of the preferred positions fit within the viewport.\n            var fallback;\n            try {\n                // Go through each of the preferred positions looking for a good fit.\n                // If a good fit is found, it will be applied immediately.\n                for (var _c = tslib_1.__values(this._preferredPositions), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var pos = _d.value;\n                    // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n                    var originPoint = this._getOriginPoint(originRect, pos);\n                    // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n                    // overlay in this position. We use the top-left corner for calculations and later translate\n                    // this into an appropriate (top, left, bottom, right) style.\n                    var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n                    // Calculate how well the overlay would fit into the viewport with this point.\n                    var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n                    // If the overlay, without any further work, fits into the viewport, use this position.\n                    if (overlayFit.isCompletelyWithinViewport) {\n                        this._isPushed = false;\n                        this._applyPosition(pos, originPoint);\n                        return;\n                    }\n                    // If the overlay has flexible dimensions, we can use this position\n                    // so long as there's enough space for the minimum dimensions.\n                    if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                        // Save positions where the overlay will fit with flexible dimensions. We will use these\n                        // if none of the positions fit *without* flexible dimensions.\n                        flexibleFits.push({\n                            position: pos,\n                            origin: originPoint,\n                            overlayRect: overlayRect,\n                            boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                        });\n                        continue;\n                    }\n                    // If the current preferred position does not fit on the screen, remember the position\n                    // if it has more visible area on-screen than we've seen and move onto the next preferred\n                    // position.\n                    if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                        fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // If there are any positions where the overlay would fit with flexible dimensions, choose the\n            // one that has the greatest area available modified by the position's weight\n            if (flexibleFits.length) {\n                var bestFit = null;\n                var bestScore = -1;\n                try {\n                    for (var flexibleFits_1 = tslib_1.__values(flexibleFits), flexibleFits_1_1 = flexibleFits_1.next(); !flexibleFits_1_1.done; flexibleFits_1_1 = flexibleFits_1.next()) {\n                        var fit = flexibleFits_1_1.value;\n                        var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                        if (score > bestScore) {\n                            bestScore = score;\n                            bestFit = fit;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (flexibleFits_1_1 && !flexibleFits_1_1.done && (_b = flexibleFits_1.return)) _b.call(flexibleFits_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                this._isPushed = false;\n                this._applyPosition(bestFit.position, bestFit.origin);\n                return;\n            }\n            // When none of the preferred positions fit within the viewport, take the position\n            // that went off-screen the least and attempt to push it on-screen.\n            if (this._canPush) {\n                // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n                this._isPushed = true;\n                this._applyPosition(fallback.position, fallback.originPoint);\n                return;\n            }\n            // All options for getting the overlay within the viewport have been exhausted, so go with the\n            // position that went off-screen the least.\n            this._applyPosition(fallback.position, fallback.originPoint);\n        };\n        FlexibleConnectedPositionStrategy.prototype.detach = function () {\n            this._clearPanelClasses();\n            this._lastPosition = null;\n            this._previousPushAmount = null;\n            this._resizeSubscription.unsubscribe();\n        };\n        /** Cleanup after the element gets destroyed. */\n        FlexibleConnectedPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed) {\n                return;\n            }\n            // We can't use `_resetBoundingBoxStyles` here, because it resets\n            // some properties to zero, rather than removing them.\n            if (this._boundingBox) {\n                extendStyles(this._boundingBox.style, {\n                    top: '',\n                    left: '',\n                    right: '',\n                    bottom: '',\n                    height: '',\n                    width: '',\n                    alignItems: '',\n                    justifyContent: '',\n                });\n            }\n            if (this._pane) {\n                this._resetOverlayElementStyles();\n            }\n            if (this._overlayRef) {\n                this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n            }\n            this.detach();\n            this._positionChanges.complete();\n            this._overlayRef = this._boundingBox = null;\n            this._isDisposed = true;\n        };\n        /**\n         * This re-aligns the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {\n            if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n                this._originRect = this._getOriginRect();\n                this._overlayRect = this._pane.getBoundingClientRect();\n                this._viewportRect = this._getNarrowedViewportRect();\n                var lastPosition = this._lastPosition || this._preferredPositions[0];\n                var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n                this._applyPosition(lastPosition, originPoint);\n            }\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._scrollables = scrollables;\n            return this;\n        };\n        /**\n         * Adds new preferred positions.\n         * @param positions List of positions options for this overlay.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions;\n            // If the last calculated position object isn't part of the positions anymore, clear\n            // it in order to avoid it being picked up if the consumer tries to re-apply.\n            if (positions.indexOf(this._lastPosition) === -1) {\n                this._lastPosition = null;\n            }\n            this._validatePositions();\n            return this;\n        };\n        /**\n         * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n         * @param margin Required margin between the overlay and the viewport edge in pixels.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {\n            this._viewportMargin = margin;\n            return this;\n        };\n        /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {\n            if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n            this._hasFlexibleDimensions = flexibleDimensions;\n            return this;\n        };\n        /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n        FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {\n            if (growAfterOpen === void 0) { growAfterOpen = true; }\n            this._growAfterOpen = growAfterOpen;\n            return this;\n        };\n        /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {\n            if (canPush === void 0) { canPush = true; }\n            this._canPush = canPush;\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            if (isLocked === void 0) { isLocked = true; }\n            this._positionLocked = isLocked;\n            return this;\n        };\n        /**\n         * Sets the origin, relative to which to position the overlay.\n         * Using an element origin is useful for building components that need to be positioned\n         * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n         * used for cases like contextual menus which open relative to the user's pointer.\n         * @param origin Reference to the new origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._origin = origin;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the x-axis.\n         * @param offset New offset in the X axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {\n            this._offsetX = offset;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the y-axis.\n         * @param offset New offset in the Y axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {\n            this._offsetY = offset;\n            return this;\n        };\n        /**\n         * Configures that the position strategy should set a `transform-origin` on some elements\n         * inside the overlay, depending on the current position that is being applied. This is\n         * useful for the cases where the origin of an animation can change depending on the\n         * alignment of the overlay.\n         * @param selector CSS selector that will be used to find the target\n         *    elements onto which to set the transform origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {\n            this._transformOriginSelector = selector;\n            return this;\n        };\n        /**\n         * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {\n            var x;\n            if (pos.originX == 'center') {\n                // Note: when centering we should always use the `left`\n                // offset, otherwise the position will be wrong in RTL.\n                x = originRect.left + (originRect.width / 2);\n            }\n            else {\n                var startX = this._isRtl() ? originRect.right : originRect.left;\n                var endX = this._isRtl() ? originRect.left : originRect.right;\n                x = pos.originX == 'start' ? startX : endX;\n            }\n            var y;\n            if (pos.originY == 'center') {\n                y = originRect.top + (originRect.height / 2);\n            }\n            else {\n                y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n            }\n            return { x: x, y: y };\n        };\n        /**\n         * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n         * origin point to which the overlay should be connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n            // Calculate the (overlayStartX, overlayStartY), the start of the\n            // potential overlay position relative to the origin point.\n            var overlayStartX;\n            if (pos.overlayX == 'center') {\n                overlayStartX = -overlayRect.width / 2;\n            }\n            else if (pos.overlayX === 'start') {\n                overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n            }\n            else {\n                overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n            }\n            var overlayStartY;\n            if (pos.overlayY == 'center') {\n                overlayStartY = -overlayRect.height / 2;\n            }\n            else {\n                overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n            }\n            // The (x, y) coordinates of the overlay.\n            return {\n                x: originPoint.x + overlayStartX,\n                y: originPoint.y + overlayStartY,\n            };\n        };\n        /** Gets how well an overlay at the given point will fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {\n            var x = point.x, y = point.y;\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            // Account for the offsets since they could push the overlay out of the viewport.\n            if (offsetX) {\n                x += offsetX;\n            }\n            if (offsetY) {\n                y += offsetY;\n            }\n            // How much the overlay would overflow at this position, on each side.\n            var leftOverflow = 0 - x;\n            var rightOverflow = (x + overlay.width) - viewport.width;\n            var topOverflow = 0 - y;\n            var bottomOverflow = (y + overlay.height) - viewport.height;\n            // Visible parts of the element on each axis.\n            var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n            var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n            var visibleArea = visibleWidth * visibleHeight;\n            return {\n                visibleArea: visibleArea,\n                isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n                fitsInViewportVertically: visibleHeight === overlay.height,\n                fitsInViewportHorizontally: visibleWidth == overlay.width,\n            };\n        };\n        /**\n         * Whether the overlay can fit within the viewport when it may resize either its width or height.\n         * @param fit How well the overlay fits in the viewport at some position.\n         * @param point The (x, y) coordinates of the overlat at some position.\n         * @param viewport The geometry of the viewport.\n         */\n        FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {\n            if (this._hasFlexibleDimensions) {\n                var availableHeight = viewport.bottom - point.y;\n                var availableWidth = viewport.right - point.x;\n                var minHeight = this._overlayRef.getConfig().minHeight;\n                var minWidth = this._overlayRef.getConfig().minWidth;\n                var verticalFit = fit.fitsInViewportVertically ||\n                    (minHeight != null && minHeight <= availableHeight);\n                var horizontalFit = fit.fitsInViewportHorizontally ||\n                    (minWidth != null && minWidth <= availableWidth);\n                return verticalFit && horizontalFit;\n            }\n            return false;\n        };\n        /**\n         * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n         * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n         * right and bottom).\n         *\n         * @param start Starting point from which the overlay is pushed.\n         * @param overlay Dimensions of the overlay.\n         * @param scrollPosition Current viewport scroll position.\n         * @returns The point at which to position the overlay after pushing. This is effectively a new\n         *     originPoint.\n         */\n        FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {\n            // If the position is locked and we've pushed the overlay already, reuse the previous push\n            // amount, rather than pushing it again. If we were to continue pushing, the element would\n            // remain in the viewport, which goes against the expectations when position locking is enabled.\n            if (this._previousPushAmount && this._positionLocked) {\n                return {\n                    x: start.x + this._previousPushAmount.x,\n                    y: start.y + this._previousPushAmount.y\n                };\n            }\n            var viewport = this._viewportRect;\n            // Determine how much the overlay goes outside the viewport on each\n            // side, which we'll use to decide which direction to push it.\n            var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n            var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n            var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n            var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n            // Amount by which to push the overlay in each axis such that it remains on-screen.\n            var pushX = 0;\n            var pushY = 0;\n            // If the overlay fits completely within the bounds of the viewport, push it from whichever\n            // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n            // viewport and allow for the trailing end of the overlay to go out of bounds.\n            if (overlay.width <= viewport.width) {\n                pushX = overflowLeft || -overflowRight;\n            }\n            else {\n                pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n            }\n            if (overlay.height <= viewport.height) {\n                pushY = overflowTop || -overflowBottom;\n            }\n            else {\n                pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n            }\n            this._previousPushAmount = { x: pushX, y: pushY };\n            return {\n                x: start.x + pushX,\n                y: start.y + pushY,\n            };\n        };\n        /**\n         * Applies a computed position to the overlay and emits a position change.\n         * @param position The position preference\n         * @param originPoint The point on the origin element where the overlay is connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {\n            this._setTransformOrigin(position);\n            this._setOverlayElementStyles(originPoint, position);\n            this._setBoundingBoxStyles(originPoint, position);\n            if (position.panelClass) {\n                this._addPanelClasses(position.panelClass);\n            }\n            // Save the last connected position in case the position needs to be re-calculated.\n            this._lastPosition = position;\n            // Notify that the position has been changed along with its change properties.\n            // We only emit if we've got any subscriptions, because the scroll visibility\n            // calculcations can be somewhat expensive.\n            if (this._positionChanges.observers.length) {\n                var scrollableViewProperties = this._getScrollVisibility();\n                var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n                this._positionChanges.next(changeEvent);\n            }\n            this._isInitialRender = false;\n        };\n        /** Sets the transform origin based on the configured selector and the passed-in position.  */\n        FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {\n            if (!this._transformOriginSelector) {\n                return;\n            }\n            var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n            var xOrigin;\n            var yOrigin = position.overlayY;\n            if (position.overlayX === 'center') {\n                xOrigin = 'center';\n            }\n            else if (this._isRtl()) {\n                xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n            }\n            else {\n                xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n            }\n            for (var i = 0; i < elements.length; i++) {\n                elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n            }\n        };\n        /**\n         * Gets the position and size of the overlay's sizing container.\n         *\n         * This method does no measuring and applies no styles so that we can cheaply compute the\n         * bounds for all positions and choose the best fit based on these results.\n         */\n        FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {\n            var viewport = this._viewportRect;\n            var isRtl = this._isRtl();\n            var height, top, bottom;\n            if (position.overlayY === 'top') {\n                // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n                top = origin.y;\n                height = viewport.height - top + this._viewportMargin;\n            }\n            else if (position.overlayY === 'bottom') {\n                // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n                // the viewport margin back in, because the viewport rect is narrowed down to remove the\n                // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n                bottom = viewport.height - origin.y + this._viewportMargin * 2;\n                height = viewport.height - bottom + this._viewportMargin;\n            }\n            else {\n                // If neither top nor bottom, it means that the overlay is vertically centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n                // `origin.y - viewport.top`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n                var previousHeight = this._lastBoundingBoxSize.height;\n                height = smallestDistanceToViewportEdge * 2;\n                top = origin.y - smallestDistanceToViewportEdge;\n                if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                    top = origin.y - (previousHeight / 2);\n                }\n            }\n            // The overlay is opening 'right-ward' (the content flows to the right).\n            var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n                (position.overlayX === 'end' && isRtl);\n            // The overlay is opening 'left-ward' (the content flows to the left).\n            var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n                (position.overlayX === 'start' && isRtl);\n            var width, left, right;\n            if (isBoundedByLeftViewportEdge) {\n                right = viewport.width - origin.x + this._viewportMargin;\n                width = origin.x - this._viewportMargin;\n            }\n            else if (isBoundedByRightViewportEdge) {\n                left = origin.x;\n                width = viewport.right - origin.x;\n            }\n            else {\n                // If neither start nor end, it means that the overlay is horizontally centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.right - origin.x` and\n                // `origin.x - viewport.left`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n                var previousWidth = this._lastBoundingBoxSize.width;\n                width = smallestDistanceToViewportEdge * 2;\n                left = origin.x - smallestDistanceToViewportEdge;\n                if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                    left = origin.x - (previousWidth / 2);\n                }\n            }\n            return { top: top, left: left, bottom: bottom, right: right, width: width, height: height };\n        };\n        /**\n         * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n         * origin's connection point and stetches to the bounds of the viewport.\n         *\n         * @param origin The point on the origin element where the overlay is connected.\n         * @param position The position preference\n         */\n        FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {\n            var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n            // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n            // when applying a new size.\n            if (!this._isInitialRender && !this._growAfterOpen) {\n                boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n                boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n            }\n            var styles = {};\n            if (this._hasExactPosition()) {\n                styles.top = styles.left = '0';\n                styles.bottom = styles.right = '';\n                styles.width = styles.height = '100%';\n            }\n            else {\n                var maxHeight = this._overlayRef.getConfig().maxHeight;\n                var maxWidth = this._overlayRef.getConfig().maxWidth;\n                styles.height = coercion.coerceCssPixelValue(boundingBoxRect.height);\n                styles.top = coercion.coerceCssPixelValue(boundingBoxRect.top);\n                styles.bottom = coercion.coerceCssPixelValue(boundingBoxRect.bottom);\n                styles.width = coercion.coerceCssPixelValue(boundingBoxRect.width);\n                styles.left = coercion.coerceCssPixelValue(boundingBoxRect.left);\n                styles.right = coercion.coerceCssPixelValue(boundingBoxRect.right);\n                // Push the pane content towards the proper direction.\n                if (position.overlayX === 'center') {\n                    styles.alignItems = 'center';\n                }\n                else {\n                    styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n                }\n                if (position.overlayY === 'center') {\n                    styles.justifyContent = 'center';\n                }\n                else {\n                    styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n                }\n                if (maxHeight) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(maxHeight);\n                }\n                if (maxWidth) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(maxWidth);\n                }\n            }\n            this._lastBoundingBoxSize = boundingBoxRect;\n            extendStyles(this._boundingBox.style, styles);\n        };\n        /** Resets the styles for the bounding box so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {\n            extendStyles(this._boundingBox.style, {\n                top: '0',\n                left: '0',\n                right: '0',\n                bottom: '0',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        };\n        /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {\n            extendStyles(this._pane.style, {\n                top: '',\n                left: '',\n                bottom: '',\n                right: '',\n                position: '',\n                transform: '',\n            });\n        };\n        /** Sets positioning styles to the overlay element. */\n        FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {\n            var styles = {};\n            if (this._hasExactPosition()) {\n                var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n                extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n                extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n            }\n            else {\n                styles.position = 'static';\n            }\n            // Use a transform to apply the offsets. We do this because the `center` positions rely on\n            // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n            // off the position. We also can't use margins, because they won't have an effect in some\n            // cases where the element doesn't have anything to \"push off of\". Finally, this works\n            // better both with flexible and non-flexible positioning.\n            var transformString = '';\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            if (offsetX) {\n                transformString += \"translateX(\" + offsetX + \"px) \";\n            }\n            if (offsetY) {\n                transformString += \"translateY(\" + offsetY + \"px)\";\n            }\n            styles.transform = transformString.trim();\n            // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n            // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n            // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n            if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n                styles.maxHeight = '';\n            }\n            if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n                styles.maxWidth = '';\n            }\n            extendStyles(this._pane.style, styles);\n        };\n        /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the\n            // preferred position has changed since the last `apply`.\n            var styles = { top: null, bottom: null };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n            // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n            // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n            // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n            // otherwise our positioning will be thrown off.\n            overlayPoint.y -= virtualKeyboardOffset;\n            // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n            // above or below the origin and the direction in which the element will expand.\n            if (position.overlayY === 'bottom') {\n                // When using `bottom`, we adjust the y position such that it is the distance\n                // from the bottom of the viewport rather than the top.\n                var documentHeight = this._document.documentElement.clientHeight;\n                styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n            }\n            else {\n                styles.top = coercion.coerceCssPixelValue(overlayPoint.y);\n            }\n            return styles;\n        };\n        /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the preferred position has\n            // changed since the last `apply`.\n            var styles = { left: null, right: null };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n            // or \"after\" the origin, which determines the direction in which the element will expand.\n            // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n            // page is in RTL or LTR.\n            var horizontalStyleProperty;\n            if (this._isRtl()) {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n            }\n            else {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n            }\n            // When we're setting `right`, we adjust the x position such that it is the distance\n            // from the right edge of the viewport rather than the left edge.\n            if (horizontalStyleProperty === 'right') {\n                var documentWidth = this._document.documentElement.clientWidth;\n                styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n            }\n            else {\n                styles.left = coercion.coerceCssPixelValue(overlayPoint.x);\n            }\n            return styles;\n        };\n        /**\n         * Gets the view properties of the trigger and overlay, including whether they are clipped\n         * or completely outside the view of any of the strategy's scrollables.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {\n            // Note: needs fresh rects since the position could've changed.\n            var originBounds = this._getOriginRect();\n            var overlayBounds = this._pane.getBoundingClientRect();\n            // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n            // every time, we should be able to use the scrollTop of the containers if the size of those\n            // containers hasn't changed.\n            var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n                return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n            });\n            return {\n                isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n                isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n                isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n                isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n            };\n        };\n        /** Subtracts the amount that an element is overflowing on an axis from its length. */\n        FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n            var overflows = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                overflows[_i - 1] = arguments[_i];\n            }\n            return overflows.reduce(function (currentValue, currentOverflow) {\n                return currentValue - Math.max(currentOverflow, 0);\n            }, length);\n        };\n        /** Narrows the given viewport rect by the current _viewportMargin. */\n        FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {\n            // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n            // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n            // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n            // and `innerHeight` that do. This is necessary, because the overlay container uses\n            // 100% `width` and `height` which don't include the scrollbar either.\n            var width = this._document.documentElement.clientWidth;\n            var height = this._document.documentElement.clientHeight;\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            return {\n                top: scrollPosition.top + this._viewportMargin,\n                left: scrollPosition.left + this._viewportMargin,\n                right: scrollPosition.left + width - this._viewportMargin,\n                bottom: scrollPosition.top + height - this._viewportMargin,\n                width: width - (2 * this._viewportMargin),\n                height: height - (2 * this._viewportMargin),\n            };\n        };\n        /** Whether the we're dealing with an RTL context */\n        FlexibleConnectedPositionStrategy.prototype._isRtl = function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        };\n        /** Determines whether the overlay uses exact or flexible positioning. */\n        FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {\n            return !this._hasFlexibleDimensions || this._isPushed;\n        };\n        /** Retrieves the offset of a position along the x or y axis. */\n        FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {\n            if (axis === 'x') {\n                // We don't do something like `position['offset' + axis]` in\n                // order to avoid breking minifiers that rename properties.\n                return position.offsetX == null ? this._offsetX : position.offsetX;\n            }\n            return position.offsetY == null ? this._offsetY : position.offsetY;\n        };\n        /** Validates that the current position match the expected values. */\n        FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(function (pair) {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        };\n        /** Adds a single CSS class or an array of classes on the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {\n            var _this = this;\n            if (this._pane) {\n                coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                    if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                        _this._appliedPanelClasses.push(cssClass);\n                        _this._pane.classList.add(cssClass);\n                    }\n                });\n            }\n        };\n        /** Clears the classes that the position strategy has applied from the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {\n            var _this = this;\n            if (this._pane) {\n                this._appliedPanelClasses.forEach(function (cssClass) {\n                    _this._pane.classList.remove(cssClass);\n                });\n                this._appliedPanelClasses = [];\n            }\n        };\n        /** Returns the ClientRect of the current origin. */\n        FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {\n            var origin = this._origin;\n            if (origin instanceof i0.ElementRef) {\n                return origin.nativeElement.getBoundingClientRect();\n            }\n            if (origin instanceof HTMLElement) {\n                return origin.getBoundingClientRect();\n            }\n            var width = origin.width || 0;\n            var height = origin.height || 0;\n            // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n            return {\n                top: origin.y,\n                bottom: origin.y + height,\n                left: origin.x,\n                right: origin.x + width,\n                height: height,\n                width: width\n            };\n        };\n        return FlexibleConnectedPositionStrategy;\n    }());\n    /** Shallow-extends a stylesheet object with another stylesheet object. */\n    function extendStyles(dest, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n        return dest;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative to some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n     * @breaking-change 8.0.0\n     */\n    var ConnectedPositionStrategy = /** @class */ (function () {\n        function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n            // the extra logic, we create an instance of the positioning strategy that has some\n            // defaults that make it behave as the old position strategy and to which we'll\n            // proxy all of the API calls.\n            this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n            this.withFallbackPosition(originPos, overlayPos);\n        }\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n            /** Whether the we're dealing with an RTL context */\n            get: function () {\n                return this._overlayRef.getDirection() === 'rtl';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n            /** Emits an event when the connection point changes. */\n            get: function () {\n                return this._positionStrategy.positionChanges;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attach this position strategy to an overlay. */\n        ConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            this._overlayRef = overlayRef;\n            this._positionStrategy.attach(overlayRef);\n            if (this._direction) {\n                overlayRef.setDirection(this._direction);\n                this._direction = null;\n            }\n        };\n        /** Disposes all resources used by the position strategy. */\n        ConnectedPositionStrategy.prototype.dispose = function () {\n            this._positionStrategy.dispose();\n        };\n        /** @docs-private */\n        ConnectedPositionStrategy.prototype.detach = function () {\n            this._positionStrategy.detach();\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin fits on-screen.\n         * @docs-private\n         */\n        ConnectedPositionStrategy.prototype.apply = function () {\n            this._positionStrategy.apply();\n        };\n        /**\n         * Re-positions the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n            this._positionStrategy.reapplyLastPosition();\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._positionStrategy.withScrollableContainers(scrollables);\n        };\n        /**\n         * Adds a new preferred fallback position.\n         * @param originPos\n         * @param overlayPos\n         */\n        ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {\n            var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n            this._preferredPositions.push(position);\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the layout direction so the overlay's position can be adjusted to match.\n         * @param dir New layout direction.\n         */\n        ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n            // Since the direction might be declared before the strategy is attached,\n            // we save the value in a temporary property and we'll transfer it to the\n            // overlay ref on attachment.\n            if (this._overlayRef) {\n                this._overlayRef.setDirection(dir);\n            }\n            else {\n                this._direction = dir;\n            }\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the x-axis\n         * @param offset New offset in the X axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n            this._positionStrategy.withDefaultOffsetX(offset);\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the y-axis\n         * @param  offset New offset in the Y axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n            this._positionStrategy.withDefaultOffsetY(offset);\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            this._positionStrategy.withLockedPosition(isLocked);\n            return this;\n        };\n        /**\n         * Overwrites the current set of positions with an array of new ones.\n         * @param positions Position pairs to be set on the strategy.\n         */\n        ConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions.slice();\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the origin element, relative to which to position the overlay.\n         * @param origin Reference to the new origin element.\n         */\n        ConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._positionStrategy.setOrigin(origin);\n            return this;\n        };\n        return ConnectedPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Class to be added to the overlay pane wrapper. */\n    var wrapperClass = 'cdk-global-overlay-wrapper';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * explicit position relative to the browser's viewport. We use flexbox, instead of\n     * transforms, in order to avoid issues with subpixel rendering which can cause the\n     * element to become blurry.\n     */\n    var GlobalPositionStrategy = /** @class */ (function () {\n        function GlobalPositionStrategy() {\n            this._cssPosition = 'static';\n            this._topOffset = '';\n            this._bottomOffset = '';\n            this._leftOffset = '';\n            this._rightOffset = '';\n            this._alignItems = '';\n            this._justifyContent = '';\n            this._width = '';\n            this._height = '';\n        }\n        GlobalPositionStrategy.prototype.attach = function (overlayRef) {\n            var config = overlayRef.getConfig();\n            this._overlayRef = overlayRef;\n            if (this._width && !config.width) {\n                overlayRef.updateSize({ width: this._width });\n            }\n            if (this._height && !config.height) {\n                overlayRef.updateSize({ height: this._height });\n            }\n            overlayRef.hostElement.classList.add(wrapperClass);\n            this._isDisposed = false;\n        };\n        /**\n         * Sets the top position of the overlay. Clears any previously set vertical position.\n         * @param value New top offset.\n         */\n        GlobalPositionStrategy.prototype.top = function (value) {\n            if (value === void 0) { value = ''; }\n            this._bottomOffset = '';\n            this._topOffset = value;\n            this._alignItems = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the left position of the overlay. Clears any previously set horizontal position.\n         * @param value New left offset.\n         */\n        GlobalPositionStrategy.prototype.left = function (value) {\n            if (value === void 0) { value = ''; }\n            this._rightOffset = '';\n            this._leftOffset = value;\n            this._justifyContent = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the bottom position of the overlay. Clears any previously set vertical position.\n         * @param value New bottom offset.\n         */\n        GlobalPositionStrategy.prototype.bottom = function (value) {\n            if (value === void 0) { value = ''; }\n            this._topOffset = '';\n            this._bottomOffset = value;\n            this._alignItems = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the right position of the overlay. Clears any previously set horizontal position.\n         * @param value New right offset.\n         */\n        GlobalPositionStrategy.prototype.right = function (value) {\n            if (value === void 0) { value = ''; }\n            this._leftOffset = '';\n            this._rightOffset = value;\n            this._justifyContent = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the overlay width and clears any previously set width.\n         * @param value New width for the overlay\n         * @deprecated Pass the `width` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.width = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ width: value });\n            }\n            else {\n                this._width = value;\n            }\n            return this;\n        };\n        /**\n         * Sets the overlay height and clears any previously set height.\n         * @param value New height for the overlay\n         * @deprecated Pass the `height` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.height = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ height: value });\n            }\n            else {\n                this._height = value;\n            }\n            return this;\n        };\n        /**\n         * Centers the overlay horizontally with an optional offset.\n         * Clears any previously set horizontal position.\n         *\n         * @param offset Overlay offset from the horizontal center.\n         */\n        GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.left(offset);\n            this._justifyContent = 'center';\n            return this;\n        };\n        /**\n         * Centers the overlay vertically with an optional offset.\n         * Clears any previously set vertical position.\n         *\n         * @param offset Overlay offset from the vertical center.\n         */\n        GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.top(offset);\n            this._alignItems = 'center';\n            return this;\n        };\n        /**\n         * Apply the position to the element.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.apply = function () {\n            // Since the overlay ref applies the strategy asynchronously, it could\n            // have been disposed before it ends up being applied. If that is the\n            // case, we shouldn't do anything.\n            if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parentStyles = this._overlayRef.hostElement.style;\n            var config = this._overlayRef.getConfig();\n            styles.position = this._cssPosition;\n            styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n            styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n            styles.marginBottom = this._bottomOffset;\n            styles.marginRight = this._rightOffset;\n            if (config.width === '100%') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n            else if (this._justifyContent === 'center') {\n                parentStyles.justifyContent = 'center';\n            }\n            else if (this._overlayRef.getConfig().direction === 'rtl') {\n                // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n                // don't want that because our positioning is explicitly `left` and `right`, hence\n                // why we do another inversion to ensure that the overlay stays in the same position.\n                // TODO: reconsider this if we add `start` and `end` methods.\n                if (this._justifyContent === 'flex-start') {\n                    parentStyles.justifyContent = 'flex-end';\n                }\n                else if (this._justifyContent === 'flex-end') {\n                    parentStyles.justifyContent = 'flex-start';\n                }\n            }\n            else {\n                parentStyles.justifyContent = this._justifyContent;\n            }\n            parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n        };\n        /**\n         * Cleans up the DOM changes from the position strategy.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed || !this._overlayRef) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parent = this._overlayRef.hostElement;\n            var parentStyles = parent.style;\n            parent.classList.remove(wrapperClass);\n            parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n                styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n            this._overlayRef = null;\n            this._isDisposed = true;\n        };\n        return GlobalPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Builder for overlay position strategy. */\n    var OverlayPositionBuilder = /** @class */ (function () {\n        function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n        }\n        /**\n         * Creates a global position strategy.\n         */\n        OverlayPositionBuilder.prototype.global = function () {\n            return new GlobalPositionStrategy();\n        };\n        /**\n         * Creates a relative position strategy.\n         * @param elementRef\n         * @param originPos\n         * @param overlayPos\n         * @deprecated Use `flexibleConnectedTo` instead.\n         * @breaking-change 8.0.0\n         */\n        OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n            return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        /**\n         * Creates a flexible position strategy.\n         * @param origin Origin relative to which to position the overlay.\n         */\n        OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {\n            return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        OverlayPositionBuilder.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayPositionBuilder.ctorParameters = function () { return [\n            { type: i1.ViewportRuler },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i3.Platform },\n            { type: OverlayContainer }\n        ]; };\n        OverlayPositionBuilder.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i3.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n        return OverlayPositionBuilder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Next overlay unique ID. */\n    var nextUniqueId = 0;\n    // Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n    // it needs is different based on where OverlayModule is imported.\n    /**\n     * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n     * used as a low-level building block for other components. Dialogs, tooltips, menus,\n     * selects, etc. can all be built using overlays. The service should primarily be used by authors\n     * of re-usable components rather than developers building end-user applications.\n     *\n     * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n     */\n    var Overlay = /** @class */ (function () {\n        function Overlay(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            this.scrollStrategies = scrollStrategies;\n            this._overlayContainer = _overlayContainer;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._positionBuilder = _positionBuilder;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._injector = _injector;\n            this._ngZone = _ngZone;\n            this._document = _document;\n            this._directionality = _directionality;\n            this._location = _location;\n        }\n        /**\n         * Creates an overlay.\n         * @param config Configuration applied to the overlay.\n         * @returns Reference to the created overlay.\n         */\n        Overlay.prototype.create = function (config) {\n            var host = this._createHostElement();\n            var pane = this._createPaneElement(host);\n            var portalOutlet = this._createPortalOutlet(pane);\n            var overlayConfig = new OverlayConfig(config);\n            overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n            return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n        };\n        /**\n         * Gets a position builder that can be used, via fluent API,\n         * to construct and configure a position strategy.\n         * @returns An overlay position builder.\n         */\n        Overlay.prototype.position = function () {\n            return this._positionBuilder;\n        };\n        /**\n         * Creates the DOM element for an overlay and appends it to the overlay container.\n         * @returns Newly-created pane element\n         */\n        Overlay.prototype._createPaneElement = function (host) {\n            var pane = this._document.createElement('div');\n            pane.id = \"cdk-overlay-\" + nextUniqueId++;\n            pane.classList.add('cdk-overlay-pane');\n            host.appendChild(pane);\n            return pane;\n        };\n        /**\n         * Creates the host element that wraps around an overlay\n         * and can be used for advanced positioning.\n         * @returns Newly-create host element.\n         */\n        Overlay.prototype._createHostElement = function () {\n            var host = this._document.createElement('div');\n            this._overlayContainer.getContainerElement().appendChild(host);\n            return host;\n        };\n        /**\n         * Create a DomPortalOutlet into which the overlay content can be loaded.\n         * @param pane The DOM element to turn into a portal outlet.\n         * @returns A portal outlet for the given DOM element.\n         */\n        Overlay.prototype._createPortalOutlet = function (pane) {\n            // We have to resolve the ApplicationRef later in order to allow people\n            // to use overlay-based providers during app initialization.\n            if (!this._appRef) {\n                this._appRef = this._injector.get(i0.ApplicationRef);\n            }\n            return new portal.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n        };\n        Overlay.decorators = [\n            { type: i0.Injectable }\n        ];\n        /** @nocollapse */\n        Overlay.ctorParameters = function () { return [\n            { type: ScrollStrategyOptions },\n            { type: OverlayContainer },\n            { type: i0.ComponentFactoryResolver },\n            { type: OverlayPositionBuilder },\n            { type: OverlayKeyboardDispatcher },\n            { type: i0.Injector },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: bidi.Directionality },\n            { type: i1$1.Location, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return Overlay;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n    var defaultPositionList = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom'\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top'\n        }\n    ];\n    /** Injection token that determines the scroll handling while the connected overlay is open. */\n    var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new i0.InjectionToken('cdk-connected-overlay-scroll-strategy');\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function (config) { return overlay.scrollStrategies.reposition(config); };\n    }\n    /**\n     * Directive applied to an element to make it usable as an origin for an Overlay using a\n     * ConnectedPositionStrategy.\n     */\n    var CdkOverlayOrigin = /** @class */ (function () {\n        function CdkOverlayOrigin(\n        /** Reference to the element on which the directive is applied. */\n        elementRef) {\n            this.elementRef = elementRef;\n        }\n        CdkOverlayOrigin.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                        exportAs: 'cdkOverlayOrigin',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkOverlayOrigin.ctorParameters = function () { return [\n            { type: i0.ElementRef }\n        ]; };\n        return CdkOverlayOrigin;\n    }());\n    /**\n     * Directive to facilitate declarative creation of an\n     * Overlay using a FlexibleConnectedPositionStrategy.\n     */\n    var CdkConnectedOverlay = /** @class */ (function () {\n        // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n        function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n            this._overlay = _overlay;\n            this._dir = _dir;\n            this._hasBackdrop = false;\n            this._lockPosition = false;\n            this._growAfterOpen = false;\n            this._flexibleDimensions = false;\n            this._push = false;\n            this._backdropSubscription = rxjs.Subscription.EMPTY;\n            /** Margin between the overlay and the viewport edges. */\n            this.viewportMargin = 0;\n            /** Whether the overlay is open. */\n            this.open = false;\n            /** Event emitted when the backdrop is clicked. */\n            this.backdropClick = new i0.EventEmitter();\n            /** Event emitted when the position has changed. */\n            this.positionChange = new i0.EventEmitter();\n            /** Event emitted when the overlay has been attached. */\n            this.attach = new i0.EventEmitter();\n            /** Event emitted when the overlay has been detached. */\n            this.detach = new i0.EventEmitter();\n            /** Emits when there are keyboard events that are targeted at the overlay. */\n            this.overlayKeydown = new i0.EventEmitter();\n            this._templatePortal = new portal.TemplatePortal(templateRef, viewContainerRef);\n            this._scrollStrategyFactory = scrollStrategyFactory;\n            this.scrollStrategy = this._scrollStrategyFactory();\n        }\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n            /** The offset in pixels for the overlay connection point on the x-axis */\n            get: function () { return this._offsetX; },\n            set: function (offsetX) {\n                this._offsetX = offsetX;\n                if (this._position) {\n                    this._updatePositionStrategy(this._position);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n            /** The offset in pixels for the overlay connection point on the y-axis */\n            get: function () { return this._offsetY; },\n            set: function (offsetY) {\n                this._offsetY = offsetY;\n                if (this._position) {\n                    this._updatePositionStrategy(this._position);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n            /** Whether or not the overlay should attach a backdrop. */\n            get: function () { return this._hasBackdrop; },\n            set: function (value) { this._hasBackdrop = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n            /** Whether or not the overlay should be locked when scrolling. */\n            get: function () { return this._lockPosition; },\n            set: function (value) { this._lockPosition = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            get: function () { return this._flexibleDimensions; },\n            set: function (value) {\n                this._flexibleDimensions = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n            /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n            get: function () { return this._growAfterOpen; },\n            set: function (value) { this._growAfterOpen = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n            /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n            get: function () { return this._push; },\n            set: function (value) { this._push = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n            /** The associated overlay reference. */\n            get: function () {\n                return this._overlayRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n            /** The element's layout direction. */\n            get: function () {\n                return this._dir ? this._dir.value : 'ltr';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkConnectedOverlay.prototype.ngOnDestroy = function () {\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n            }\n            this._backdropSubscription.unsubscribe();\n        };\n        CdkConnectedOverlay.prototype.ngOnChanges = function (changes) {\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n                this._overlayRef.updateSize({\n                    width: this.width,\n                    minWidth: this.minWidth,\n                    height: this.height,\n                    minHeight: this.minHeight,\n                });\n                if (changes['origin'] && this.open) {\n                    this._position.apply();\n                }\n            }\n            if (changes['open']) {\n                this.open ? this._attachOverlay() : this._detachOverlay();\n            }\n        };\n        /** Creates an overlay */\n        CdkConnectedOverlay.prototype._createOverlay = function () {\n            var _this = this;\n            if (!this.positions || !this.positions.length) {\n                this.positions = defaultPositionList;\n            }\n            this._overlayRef = this._overlay.create(this._buildConfig());\n            this._overlayRef.keydownEvents().subscribe(function (event) {\n                _this.overlayKeydown.next(event);\n                if (event.keyCode === keycodes.ESCAPE && !keycodes.hasModifierKey(event)) {\n                    event.preventDefault();\n                    _this._detachOverlay();\n                }\n            });\n        };\n        /** Builds the overlay config based on the directive's inputs */\n        CdkConnectedOverlay.prototype._buildConfig = function () {\n            var positionStrategy = this._position = this._createPositionStrategy();\n            var overlayConfig = new OverlayConfig({\n                direction: this._dir,\n                positionStrategy: positionStrategy,\n                scrollStrategy: this.scrollStrategy,\n                hasBackdrop: this.hasBackdrop\n            });\n            if (this.width || this.width === 0) {\n                overlayConfig.width = this.width;\n            }\n            if (this.height || this.height === 0) {\n                overlayConfig.height = this.height;\n            }\n            if (this.minWidth || this.minWidth === 0) {\n                overlayConfig.minWidth = this.minWidth;\n            }\n            if (this.minHeight || this.minHeight === 0) {\n                overlayConfig.minHeight = this.minHeight;\n            }\n            if (this.backdropClass) {\n                overlayConfig.backdropClass = this.backdropClass;\n            }\n            if (this.panelClass) {\n                overlayConfig.panelClass = this.panelClass;\n            }\n            return overlayConfig;\n        };\n        /** Updates the state of a position strategy, based on the values of the directive inputs. */\n        CdkConnectedOverlay.prototype._updatePositionStrategy = function (positionStrategy) {\n            var _this = this;\n            var positions = this.positions.map(function (currentPosition) { return ({\n                originX: currentPosition.originX,\n                originY: currentPosition.originY,\n                overlayX: currentPosition.overlayX,\n                overlayY: currentPosition.overlayY,\n                offsetX: currentPosition.offsetX || _this.offsetX,\n                offsetY: currentPosition.offsetY || _this.offsetY,\n                panelClass: currentPosition.panelClass || undefined,\n            }); });\n            return positionStrategy\n                .setOrigin(this.origin.elementRef)\n                .withPositions(positions)\n                .withFlexibleDimensions(this.flexibleDimensions)\n                .withPush(this.push)\n                .withGrowAfterOpen(this.growAfterOpen)\n                .withViewportMargin(this.viewportMargin)\n                .withLockedPosition(this.lockPosition);\n        };\n        /** Returns the position strategy of the overlay to be set on the overlay config */\n        CdkConnectedOverlay.prototype._createPositionStrategy = function () {\n            var _this = this;\n            var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n            this._updatePositionStrategy(strategy);\n            strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n            return strategy;\n        };\n        /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n        CdkConnectedOverlay.prototype._attachOverlay = function () {\n            var _this = this;\n            if (!this._overlayRef) {\n                this._createOverlay();\n            }\n            else {\n                // Update the overlay size, in case the directive's inputs have changed\n                this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n            }\n            if (!this._overlayRef.hasAttached()) {\n                this._overlayRef.attach(this._templatePortal);\n                this.attach.emit();\n            }\n            if (this.hasBackdrop) {\n                this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                    _this.backdropClick.emit(event);\n                });\n            }\n            else {\n                this._backdropSubscription.unsubscribe();\n            }\n        };\n        /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n        CdkConnectedOverlay.prototype._detachOverlay = function () {\n            if (this._overlayRef) {\n                this._overlayRef.detach();\n                this.detach.emit();\n            }\n            this._backdropSubscription.unsubscribe();\n        };\n        CdkConnectedOverlay.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                        exportAs: 'cdkConnectedOverlay'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkConnectedOverlay.ctorParameters = function () { return [\n            { type: Overlay },\n            { type: i0.TemplateRef },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }\n        ]; };\n        CdkConnectedOverlay.propDecorators = {\n            origin: [{ type: i0.Input, args: ['cdkConnectedOverlayOrigin',] }],\n            positions: [{ type: i0.Input, args: ['cdkConnectedOverlayPositions',] }],\n            offsetX: [{ type: i0.Input, args: ['cdkConnectedOverlayOffsetX',] }],\n            offsetY: [{ type: i0.Input, args: ['cdkConnectedOverlayOffsetY',] }],\n            width: [{ type: i0.Input, args: ['cdkConnectedOverlayWidth',] }],\n            height: [{ type: i0.Input, args: ['cdkConnectedOverlayHeight',] }],\n            minWidth: [{ type: i0.Input, args: ['cdkConnectedOverlayMinWidth',] }],\n            minHeight: [{ type: i0.Input, args: ['cdkConnectedOverlayMinHeight',] }],\n            backdropClass: [{ type: i0.Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n            panelClass: [{ type: i0.Input, args: ['cdkConnectedOverlayPanelClass',] }],\n            viewportMargin: [{ type: i0.Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n            scrollStrategy: [{ type: i0.Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n            open: [{ type: i0.Input, args: ['cdkConnectedOverlayOpen',] }],\n            hasBackdrop: [{ type: i0.Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n            lockPosition: [{ type: i0.Input, args: ['cdkConnectedOverlayLockPosition',] }],\n            flexibleDimensions: [{ type: i0.Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n            growAfterOpen: [{ type: i0.Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n            push: [{ type: i0.Input, args: ['cdkConnectedOverlayPush',] }],\n            backdropClick: [{ type: i0.Output }],\n            positionChange: [{ type: i0.Output }],\n            attach: [{ type: i0.Output }],\n            detach: [{ type: i0.Output }],\n            overlayKeydown: [{ type: i0.Output }]\n        };\n        return CdkConnectedOverlay;\n    }());\n    /** @docs-private */\n    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition(); };\n    }\n    /** @docs-private */\n    var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n        provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n        deps: [Overlay],\n        useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var OverlayModule = /** @class */ (function () {\n        function OverlayModule() {\n        }\n        OverlayModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [bidi.BidiModule, portal.PortalModule, i1.ScrollingModule],\n                        exports: [CdkConnectedOverlay, CdkOverlayOrigin, i1.ScrollingModule],\n                        declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                        providers: [\n                            Overlay,\n                            CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                        ],\n                    },] }\n        ];\n        return OverlayModule;\n    }());\n    /**\n     * @deprecated Use `OverlayModule` instead.\n     * @breaking-change 8.0.0\n     * @docs-private\n     */\n    var OVERLAY_PROVIDERS = [\n        Overlay,\n        OverlayPositionBuilder,\n        OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n        i1.VIEWPORT_RULER_PROVIDER,\n        OVERLAY_CONTAINER_PROVIDER,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ];\n\n    /**\n     * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n     * Fullscreen mode\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n     *\n     * Should be provided in the root component.\n     */\n    var FullscreenOverlayContainer = /** @class */ (function (_super) {\n        tslib_1.__extends(FullscreenOverlayContainer, _super);\n        function FullscreenOverlayContainer(_document) {\n            return _super.call(this, _document) || this;\n        }\n        FullscreenOverlayContainer.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            if (this._fullScreenEventName && this._fullScreenListener) {\n                this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n            }\n        };\n        FullscreenOverlayContainer.prototype._createContainer = function () {\n            var _this = this;\n            _super.prototype._createContainer.call(this);\n            this._adjustParentForFullscreenChange();\n            this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n        };\n        FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n            if (!this._containerElement) {\n                return;\n            }\n            var fullscreenElement = this.getFullscreenElement();\n            var parent = fullscreenElement || this._document.body;\n            parent.appendChild(this._containerElement);\n        };\n        FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n            var eventName = this._getEventName();\n            if (eventName) {\n                if (this._fullScreenListener) {\n                    this._document.removeEventListener(eventName, this._fullScreenListener);\n                }\n                this._document.addEventListener(eventName, fn);\n                this._fullScreenListener = fn;\n            }\n        };\n        FullscreenOverlayContainer.prototype._getEventName = function () {\n            if (!this._fullScreenEventName) {\n                var _document = this._document;\n                if (_document.fullscreenEnabled) {\n                    this._fullScreenEventName = 'fullscreenchange';\n                }\n                else if (_document.webkitFullscreenEnabled) {\n                    this._fullScreenEventName = 'webkitfullscreenchange';\n                }\n                else if (_document.mozFullScreenEnabled) {\n                    this._fullScreenEventName = 'mozfullscreenchange';\n                }\n                else if (_document.msFullscreenEnabled) {\n                    this._fullScreenEventName = 'MSFullscreenChange';\n                }\n            }\n            return this._fullScreenEventName;\n        };\n        /**\n         * When the page is put into fullscreen mode, a specific element is specified.\n         * Only that element and its children are visible when in fullscreen mode.\n         */\n        FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n            var _document = this._document;\n            return _document.fullscreenElement ||\n                _document.webkitFullscreenElement ||\n                _document.mozFullScreenElement ||\n                _document.msFullscreenElement ||\n                null;\n        };\n        FullscreenOverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        FullscreenOverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        FullscreenOverlayContainer.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n        return FullscreenOverlayContainer;\n    }(OverlayContainer));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ViewportRuler = i1.ViewportRuler;\n    exports.VIEWPORT_RULER_PROVIDER = i1.VIEWPORT_RULER_PROVIDER;\n    exports.CdkScrollable = i1.CdkScrollable;\n    exports.ScrollDispatcher = i1.ScrollDispatcher;\n    exports.ɵangular_material_src_cdk_overlay_overlay_g = OVERLAY_KEYBOARD_DISPATCHER_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_f = OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_b = OVERLAY_CONTAINER_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_a = OVERLAY_CONTAINER_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_c = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_e = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_d = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.Overlay = Overlay;\n    exports.OverlayContainer = OverlayContainer;\n    exports.CdkOverlayOrigin = CdkOverlayOrigin;\n    exports.CdkConnectedOverlay = CdkConnectedOverlay;\n    exports.FullscreenOverlayContainer = FullscreenOverlayContainer;\n    exports.OverlayRef = OverlayRef;\n    exports.OverlayKeyboardDispatcher = OverlayKeyboardDispatcher;\n    exports.OverlayPositionBuilder = OverlayPositionBuilder;\n    exports.GlobalPositionStrategy = GlobalPositionStrategy;\n    exports.ConnectedPositionStrategy = ConnectedPositionStrategy;\n    exports.FlexibleConnectedPositionStrategy = FlexibleConnectedPositionStrategy;\n    exports.OverlayConfig = OverlayConfig;\n    exports.ConnectionPositionPair = ConnectionPositionPair;\n    exports.ScrollingVisibility = ScrollingVisibility;\n    exports.ConnectedOverlayPositionChange = ConnectedOverlayPositionChange;\n    exports.validateVerticalPosition = validateVerticalPosition;\n    exports.validateHorizontalPosition = validateHorizontalPosition;\n    exports.ScrollStrategyOptions = ScrollStrategyOptions;\n    exports.RepositionScrollStrategy = RepositionScrollStrategy;\n    exports.CloseScrollStrategy = CloseScrollStrategy;\n    exports.NoopScrollStrategy = NoopScrollStrategy;\n    exports.BlockScrollStrategy = BlockScrollStrategy;\n    exports.OverlayModule = OverlayModule;\n    exports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-overlay.umd.js.map\n"]}
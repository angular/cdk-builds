{"version":3,"sources":["src/cdk/cdk-overlay.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","overlay","tslib","scrolling","common","core","coercion","bidi","portal","platform","rxjs","operators","keycodes","this","i1","i1$1","i0","i2","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","prototype","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","coerceCssPixelValue","classList","add","disable","html","htmlStyle","bodyStyle","body","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_this","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","ScrollStrategyOptions","noop","close","config","block","reposition","decorators","type","Injectable","args","providedIn","ctorParameters","ScrollDispatcher","ViewportRuler","NgZone","undefined","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","ScrollStrategyOptions_Factory","ɵɵinject","token","OverlayConfig","e_1","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","configKeys_1","__values","configKeys_1_1","next","done","key","value","e_1_1","error","return","call","ConnectionPositionPair","origin","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","Optional","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","length","_keydownEventSubscriptions","_keydownEvents","ngOnDestroy","_isAttached","addEventListener","push","index","indexOf","splice","removeEventListener","OverlayKeyboardDispatcher_Factory","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY","dispatcher","OVERLAY_KEYBOARD_DISPATCHER_PROVIDER","provide","deps","SkipSelf","useFactory","isTestEnvironment","__karma__","jasmine","OverlayContainer","_platform","container","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","Platform","OverlayContainer_Factory","OVERLAY_CONTAINER_PROVIDER_FACTORY","parentContainer","OVERLAY_CONTAINER_PROVIDER","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","Observable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","defineProperty","get","enumerable","configurable","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","__assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","coerceArray","forEach","cssClass","takeUntil","merge","children","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","e_2","_b","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_c","_d","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","flexibleFits_1","flexibleFits_1_1","fit","score","weight","e_2_1","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","positions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","_i","arguments","reduce","currentValue","currentOverflow","axis","pair","ElementRef","HTMLElement","destination","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","overlayContainer","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","elementRef","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","ApplicationRef","DomPortalOutlet","ComponentFactoryResolver","Injector","Directionality","Location","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","InjectionToken","CdkOverlayOrigin","Directive","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","viewportMargin","open","EventEmitter","positionChange","overlayKeydown","_templatePortal","TemplatePortal","_scrollStrategyFactory","set","_position","_updatePositionStrategy","coerceBooleanProperty","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","keyCode","ESCAPE","hasModifierKey","preventDefault","_createPositionStrategy","currentPosition","lockPosition","transformOriginSelector","p","emit","TemplateRef","ViewContainerRef","propDecorators","Input","Output","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","NgModule","imports","BidiModule","PortalModule","ScrollingModule","declarations","providers","OVERLAY_PROVIDERS","FullscreenOverlayContainer","_super","__extends","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","CdkScrollable","ɵangular_material_src_cdk_overlay_overlay_a","ɵangular_material_src_cdk_overlay_overlay_b","ɵangular_material_src_cdk_overlay_overlay_c","ɵangular_material_src_cdk_overlay_overlay_d","ɵangular_material_src_cdk_overlay_overlay_e","ɵangular_material_src_cdk_overlay_overlay_f","ɵangular_material_src_cdk_overlay_overlay_g"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/scrolling'), require('@angular/common'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/bidi'), require('@angular/cdk/portal'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/keycodes')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/overlay', ['exports', 'tslib', '@angular/cdk/scrolling', '@angular/common', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/bidi', '@angular/cdk/portal', '@angular/cdk/platform', 'rxjs', 'rxjs/operators', '@angular/cdk/keycodes'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.overlay = {}), global.tslib, global.ng.cdk.scrolling, global.ng.common, global.ng.core, global.ng.cdk.coercion, global.ng.cdk.bidi, global.ng.cdk.portal, global.ng.cdk.platform, global.rxjs, global.rxjs.operators, global.ng.cdk.keycodes));\n}(this, (function (exports, tslib, i1, i1$1, i0, coercion, bidi, portal, i2, rxjs, operators, keycodes) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will prevent the user from scrolling while the overlay is visible.\n     */\n    var BlockScrollStrategy = /** @class */ (function () {\n        function BlockScrollStrategy(_viewportRuler, document) {\n            this._viewportRuler = _viewportRuler;\n            this._previousHTMLStyles = { top: '', left: '' };\n            this._isEnabled = false;\n            this._document = document;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        BlockScrollStrategy.prototype.attach = function () { };\n        /** Blocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.enable = function () {\n            if (this._canBeEnabled()) {\n                var root = this._document.documentElement;\n                this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n                // Cache the previous inline styles in case the user had set them.\n                this._previousHTMLStyles.left = root.style.left || '';\n                this._previousHTMLStyles.top = root.style.top || '';\n                // Note: we're using the `html` node, instead of the `body`, because the `body` may\n                // have the user agent margin, whereas the `html` is guaranteed not to have one.\n                root.style.left = coercion.coerceCssPixelValue(-this._previousScrollPosition.left);\n                root.style.top = coercion.coerceCssPixelValue(-this._previousScrollPosition.top);\n                root.classList.add('cdk-global-scrollblock');\n                this._isEnabled = true;\n            }\n        };\n        /** Unblocks page-level scroll while the attached overlay is open. */\n        BlockScrollStrategy.prototype.disable = function () {\n            if (this._isEnabled) {\n                var html = this._document.documentElement;\n                var body = this._document.body;\n                var htmlStyle = html.style;\n                var bodyStyle = body.style;\n                var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n                var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n                this._isEnabled = false;\n                htmlStyle.left = this._previousHTMLStyles.left;\n                htmlStyle.top = this._previousHTMLStyles.top;\n                html.classList.remove('cdk-global-scrollblock');\n                // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n                // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n                window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        };\n        BlockScrollStrategy.prototype._canBeEnabled = function () {\n            // Since the scroll strategies can't be singletons, we have to use a global CSS class\n            // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n            // scrolling multiple times.\n            var html = this._document.documentElement;\n            if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n                return false;\n            }\n            var body = this._document.body;\n            var viewport = this._viewportRuler.getViewportSize();\n            return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n        };\n        return BlockScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n     */\n    function getMatScrollStrategyAlreadyAttachedError() {\n        return Error(\"Scroll strategy has already been attached.\");\n    }\n\n    /**\n     * Strategy that will close the overlay as soon as the user starts scrolling.\n     */\n    var CloseScrollStrategy = /** @class */ (function () {\n        function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._config = _config;\n            this._scrollSubscription = null;\n            /** Detaches the overlay ref and disables the scroll strategy. */\n            this._detach = function () {\n                _this.disable();\n                if (_this._overlayRef.hasAttached()) {\n                    _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                }\n            };\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        CloseScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables the closing of the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (this._scrollSubscription) {\n                return;\n            }\n            var stream = this._scrollDispatcher.scrolled(0);\n            if (this._config && this._config.threshold && this._config.threshold > 1) {\n                this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                this._scrollSubscription = stream.subscribe(function () {\n                    var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                    if (Math.abs(scrollPosition - _this._initialScrollPosition) > _this._config.threshold) {\n                        _this._detach();\n                    }\n                    else {\n                        _this._overlayRef.updatePosition();\n                    }\n                });\n            }\n            else {\n                this._scrollSubscription = stream.subscribe(this._detach);\n            }\n        };\n        /** Disables the closing the attached overlay on scroll. */\n        CloseScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        CloseScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return CloseScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Scroll strategy that doesn't do anything. */\n    var NoopScrollStrategy = /** @class */ (function () {\n        function NoopScrollStrategy() {\n        }\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.enable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.disable = function () { };\n        /** Does nothing, as this scroll strategy is a no-op. */\n        NoopScrollStrategy.prototype.attach = function () { };\n        return NoopScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): move this to live with the rest of the scrolling code\n    // TODO(jelbourn): someday replace this with IntersectionObservers\n    /**\n     * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is scrolled out of view\n     * @docs-private\n     */\n    function isElementScrolledOutsideView(element, scrollContainers) {\n        return scrollContainers.some(function (containerBounds) {\n            var outsideAbove = element.bottom < containerBounds.top;\n            var outsideBelow = element.top > containerBounds.bottom;\n            var outsideLeft = element.right < containerBounds.left;\n            var outsideRight = element.left > containerBounds.right;\n            return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n        });\n    }\n    /**\n     * Gets whether an element is clipped by any of its scrolling containers.\n     * @param element Dimensions of the element (from getBoundingClientRect)\n     * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n     * @returns Whether the element is clipped\n     * @docs-private\n     */\n    function isElementClippedByScrolling(element, scrollContainers) {\n        return scrollContainers.some(function (scrollContainerRect) {\n            var clippedAbove = element.top < scrollContainerRect.top;\n            var clippedBelow = element.bottom > scrollContainerRect.bottom;\n            var clippedLeft = element.left < scrollContainerRect.left;\n            var clippedRight = element.right > scrollContainerRect.right;\n            return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Strategy that will update the element position as the user is scrolling.\n     */\n    var RepositionScrollStrategy = /** @class */ (function () {\n        function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            this._config = _config;\n            this._scrollSubscription = null;\n        }\n        /** Attaches this scroll strategy to an overlay. */\n        RepositionScrollStrategy.prototype.attach = function (overlayRef) {\n            if (this._overlayRef) {\n                throw getMatScrollStrategyAlreadyAttachedError();\n            }\n            this._overlayRef = overlayRef;\n        };\n        /** Enables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.enable = function () {\n            var _this = this;\n            if (!this._scrollSubscription) {\n                var throttle = this._config ? this._config.scrollThrottle : 0;\n                this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                    _this._overlayRef.updatePosition();\n                    // TODO(crisbeto): make `close` on by default once all components can handle it.\n                    if (_this._config && _this._config.autoClose) {\n                        var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                        var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                        // TODO(crisbeto): include all ancestor scroll containers here once\n                        // we have a way of exposing the trigger element to the scroll strategy.\n                        var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                        if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                            _this.disable();\n                            _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                        }\n                    }\n                });\n            }\n        };\n        /** Disables repositioning of the attached overlay on scroll. */\n        RepositionScrollStrategy.prototype.disable = function () {\n            if (this._scrollSubscription) {\n                this._scrollSubscription.unsubscribe();\n                this._scrollSubscription = null;\n            }\n        };\n        RepositionScrollStrategy.prototype.detach = function () {\n            this.disable();\n            this._overlayRef = null;\n        };\n        return RepositionScrollStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Options for how an overlay will handle scrolling.\n     *\n     * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n     * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n     */\n    var ScrollStrategyOptions = /** @class */ (function () {\n        function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n            var _this = this;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            /** Do nothing on scroll. */\n            this.noop = function () { return new NoopScrollStrategy(); };\n            /**\n             * Close the overlay as soon as the user scrolls.\n             * @param config Configuration to be used inside the scroll strategy.\n             */\n            this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n            /** Block scrolling. */\n            this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n            /**\n             * Update the overlay's position on scroll.\n             * @param config Configuration to be used inside the scroll strategy.\n             * Allows debouncing the reposition calls.\n             */\n            this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n            this._document = document;\n        }\n        ScrollStrategyOptions.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        ScrollStrategyOptions.ctorParameters = function () { return [\n            { type: i1.ScrollDispatcher },\n            { type: i1.ViewportRuler },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        ScrollStrategyOptions.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(i0.ɵɵinject(i1.ScrollDispatcher), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1$1.DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n        return ScrollStrategyOptions;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Initial configuration used when creating an overlay. */\n    var OverlayConfig = /** @class */ (function () {\n        function OverlayConfig(config) {\n            var e_1, _a;\n            /** Strategy to be used when handling scroll events while the overlay is open. */\n            this.scrollStrategy = new NoopScrollStrategy();\n            /** Custom class to add to the overlay pane. */\n            this.panelClass = '';\n            /** Whether the overlay has a backdrop. */\n            this.hasBackdrop = false;\n            /** Custom class to add to the backdrop */\n            this.backdropClass = 'cdk-overlay-dark-backdrop';\n            /**\n             * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.disposeOnNavigation = false;\n            if (config) {\n                // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n                // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n                // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n                var configKeys = Object.keys(config);\n                try {\n                    for (var configKeys_1 = tslib.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {\n                        var key = configKeys_1_1.value;\n                        if (config[key] !== undefined) {\n                            // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                            // as \"I don't know *which* key this is, so the only valid value is the intersection\n                            // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                            // is not smart enough to see that the right-hand-side is actually an access of the same\n                            // exact type with the same exact key, meaning that the value type must be identical.\n                            // So we use `any` to work around this.\n                            this[key] = config[key];\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        return OverlayConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** The points of the origin element and the overlay element to connect. */\n    var ConnectionPositionPair = /** @class */ (function () {\n        function ConnectionPositionPair(origin, overlay, \n        /** Offset along the X axis. */\n        offsetX, \n        /** Offset along the Y axis. */\n        offsetY, \n        /** Class(es) to be applied to the panel while this position is active. */\n        panelClass) {\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            this.panelClass = panelClass;\n            this.originX = origin.originX;\n            this.originY = origin.originY;\n            this.overlayX = overlay.overlayX;\n            this.overlayY = overlay.overlayY;\n        }\n        return ConnectionPositionPair;\n    }());\n    /**\n     * Set of properties regarding the position of the origin and overlay relative to the viewport\n     * with respect to the containing Scrollable elements.\n     *\n     * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n     * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     * The overlay and origin are outside view if there is no overlap between their bounding client\n     * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n     *\n     *       -----------                    -----------\n     *       | outside |                    | clipped |\n     *       |  view   |              --------------------------\n     *       |         |              |     |         |        |\n     *       ----------               |     -----------        |\n     *  --------------------------    |                        |\n     *  |                        |    |      Scrollable        |\n     *  |                        |    |                        |\n     *  |                        |     --------------------------\n     *  |      Scrollable        |\n     *  |                        |\n     *  --------------------------\n     *\n     *  @docs-private\n     */\n    var ScrollingVisibility = /** @class */ (function () {\n        function ScrollingVisibility() {\n        }\n        return ScrollingVisibility;\n    }());\n    /** The change event emitted by the strategy when a fallback position is used. */\n    var ConnectedOverlayPositionChange = /** @class */ (function () {\n        function ConnectedOverlayPositionChange(\n        /** The position used as a result of this change. */\n        connectionPair, \n        /** @docs-private */\n        scrollableViewProperties) {\n            this.connectionPair = connectionPair;\n            this.scrollableViewProperties = scrollableViewProperties;\n        }\n        /** @nocollapse */\n        ConnectedOverlayPositionChange.ctorParameters = function () { return [\n            { type: ConnectionPositionPair },\n            { type: ScrollingVisibility, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return ConnectedOverlayPositionChange;\n    }());\n    /**\n     * Validates whether a vertical position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateVerticalPosition(property, value) {\n        if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n        }\n    }\n    /**\n     * Validates whether a horizontal position property matches the expected values.\n     * @param property Name of the property being validated.\n     * @param value Value of the property being validated.\n     * @docs-private\n     */\n    function validateHorizontalPosition(property, value) {\n        if (value !== 'start' && value !== 'end' && value !== 'center') {\n            throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n                \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n     * if any. It maintains a list of attached overlays to determine best suited overlay based\n     * on event target and order of overlay opens.\n     */\n    var OverlayKeyboardDispatcher = /** @class */ (function () {\n        function OverlayKeyboardDispatcher(document) {\n            var _this = this;\n            /** Currently attached overlays in the order they were attached. */\n            this._attachedOverlays = [];\n            /** Keyboard event listener that will be attached to the body. */\n            this._keydownListener = function (event) {\n                var overlays = _this._attachedOverlays;\n                for (var i = overlays.length - 1; i > -1; i--) {\n                    // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                    // We want to target the most recent overlay, rather than trying to match where the event came\n                    // from, because some components might open an overlay, but keep focus on a trigger element\n                    // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                    // because we don't want overlays that don't handle keyboard events to block the ones below\n                    // them that do.\n                    if (overlays[i]._keydownEventSubscriptions > 0) {\n                        overlays[i]._keydownEvents.next(event);\n                        break;\n                    }\n                }\n            };\n            this._document = document;\n        }\n        OverlayKeyboardDispatcher.prototype.ngOnDestroy = function () {\n            this._detach();\n        };\n        /** Add a new overlay to the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.add = function (overlayRef) {\n            // Ensure that we don't get the same overlay multiple times.\n            this.remove(overlayRef);\n            // Lazily start dispatcher once first overlay is added\n            if (!this._isAttached) {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n                this._isAttached = true;\n            }\n            this._attachedOverlays.push(overlayRef);\n        };\n        /** Remove an overlay from the list of attached overlay refs. */\n        OverlayKeyboardDispatcher.prototype.remove = function (overlayRef) {\n            var index = this._attachedOverlays.indexOf(overlayRef);\n            if (index > -1) {\n                this._attachedOverlays.splice(index, 1);\n            }\n            // Remove the global listener once there are no more overlays.\n            if (this._attachedOverlays.length === 0) {\n                this._detach();\n            }\n        };\n        /** Detaches the global keyboard event listener. */\n        OverlayKeyboardDispatcher.prototype._detach = function () {\n            if (this._isAttached) {\n                this._document.body.removeEventListener('keydown', this._keydownListener);\n                this._isAttached = false;\n            }\n        };\n        OverlayKeyboardDispatcher.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayKeyboardDispatcher.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] }\n        ]; };\n        OverlayKeyboardDispatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(i0.ɵɵinject(i1$1.DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n        return OverlayKeyboardDispatcher;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n        return dispatcher || new OverlayKeyboardDispatcher(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n        // If there is already an OverlayKeyboardDispatcher available, use that.\n        // Otherwise, provide a new one.\n        provide: OverlayKeyboardDispatcher,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayKeyboardDispatcher],\n            // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n            // of the type expected by Angular\n            i1$1.DOCUMENT\n        ],\n        useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Whether we're in a testing environment.\n     * TODO(crisbeto): remove this once we have an overlay testing module.\n     */\n    var isTestEnvironment = typeof window !== 'undefined' && !!window &&\n        !!(window.__karma__ || window.jasmine);\n    /** Container inside which all overlays will render. */\n    var OverlayContainer = /** @class */ (function () {\n        function OverlayContainer(document, \n        /**\n         * @deprecated `platform` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        _platform) {\n            this._platform = _platform;\n            this._document = document;\n        }\n        OverlayContainer.prototype.ngOnDestroy = function () {\n            var container = this._containerElement;\n            if (container && container.parentNode) {\n                container.parentNode.removeChild(container);\n            }\n        };\n        /**\n         * This method returns the overlay container element. It will lazily\n         * create the element the first time  it is called to facilitate using\n         * the container in non-browser environments.\n         * @returns the container element\n         */\n        OverlayContainer.prototype.getContainerElement = function () {\n            if (!this._containerElement) {\n                this._createContainer();\n            }\n            return this._containerElement;\n        };\n        /**\n         * Create the overlay container element, which is simply a div\n         * with the 'cdk-overlay-container' class on the document body.\n         */\n        OverlayContainer.prototype._createContainer = function () {\n            // @breaking-change 10.0.0 Remove null check for `_platform`.\n            var isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n            var containerClass = 'cdk-overlay-container';\n            if (isBrowser || isTestEnvironment) {\n                var oppositePlatformContainers = this._document.querySelectorAll(\".\" + containerClass + \"[platform=\\\"server\\\"], \" +\n                    (\".\" + containerClass + \"[platform=\\\"test\\\"]\"));\n                // Remove any old containers from the opposite platform.\n                // This can happen when transitioning from the server to the client.\n                for (var i = 0; i < oppositePlatformContainers.length; i++) {\n                    oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n                }\n            }\n            var container = this._document.createElement('div');\n            container.classList.add(containerClass);\n            // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n            // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n            // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n            // To mitigate the problem we made it so that only containers from a different platform are\n            // cleared, but the side-effect was that people started depending on the overly-aggressive\n            // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n            // module which does the cleanup, we try to detect that we're in a test environment and we\n            // always clear the container. See #17006.\n            // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n            if (isTestEnvironment) {\n                container.setAttribute('platform', 'test');\n            }\n            else if (!isBrowser) {\n                container.setAttribute('platform', 'server');\n            }\n            this._document.body.appendChild(container);\n            this._containerElement = container;\n        };\n        OverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i2.Platform }\n        ]; };\n        OverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: OverlayContainer, providedIn: \"root\" });\n        return OverlayContainer;\n    }());\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n        return parentContainer || new OverlayContainer(_document);\n    }\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    var OVERLAY_CONTAINER_PROVIDER = {\n        // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n        provide: OverlayContainer,\n        deps: [\n            [new i0.Optional(), new i0.SkipSelf(), OverlayContainer],\n            i1$1.DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ],\n        useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Reference to an overlay that has been created with the Overlay service.\n     * Used to manipulate or dispose of said overlay.\n     */\n    var OverlayRef = /** @class */ (function () {\n        function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            var _this = this;\n            this._portalOutlet = _portalOutlet;\n            this._host = _host;\n            this._pane = _pane;\n            this._config = _config;\n            this._ngZone = _ngZone;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._document = _document;\n            this._location = _location;\n            this._backdropElement = null;\n            this._backdropClick = new rxjs.Subject();\n            this._attachments = new rxjs.Subject();\n            this._detachments = new rxjs.Subject();\n            this._locationChanges = rxjs.Subscription.EMPTY;\n            this._backdropClickHandler = function (event) { return _this._backdropClick.next(event); };\n            this._keydownEventsObservable = new rxjs.Observable(function (observer) {\n                var subscription = _this._keydownEvents.subscribe(observer);\n                _this._keydownEventSubscriptions++;\n                return function () {\n                    subscription.unsubscribe();\n                    _this._keydownEventSubscriptions--;\n                };\n            });\n            /** Stream of keydown events dispatched to this overlay. */\n            this._keydownEvents = new rxjs.Subject();\n            /** Amount of subscriptions to the keydown events. */\n            this._keydownEventSubscriptions = 0;\n            if (_config.scrollStrategy) {\n                this._scrollStrategy = _config.scrollStrategy;\n                this._scrollStrategy.attach(this);\n            }\n            this._positionStrategy = _config.positionStrategy;\n        }\n        Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n            /** The overlay's HTML element */\n            get: function () {\n                return this._pane;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n            /** The overlay's backdrop HTML element. */\n            get: function () {\n                return this._backdropElement;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n            /**\n             * Wrapper around the panel element. Can be used for advanced\n             * positioning where a wrapper with specific styling is\n             * required around the overlay pane.\n             */\n            get: function () {\n                return this._host;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Attaches content, given via a Portal, to the overlay.\n         * If the overlay is configured to have a backdrop, it will be created.\n         *\n         * @param portal Portal instance to which to attach the overlay.\n         * @returns The portal attachment result.\n         */\n        OverlayRef.prototype.attach = function (portal) {\n            var _this = this;\n            var attachResult = this._portalOutlet.attach(portal);\n            if (this._positionStrategy) {\n                this._positionStrategy.attach(this);\n            }\n            // Update the pane element with the given configuration.\n            if (!this._host.parentElement && this._previousHostParent) {\n                this._previousHostParent.appendChild(this._host);\n            }\n            this._updateStackingOrder();\n            this._updateElementSize();\n            this._updateElementDirection();\n            if (this._scrollStrategy) {\n                this._scrollStrategy.enable();\n            }\n            // Update the position once the zone is stable so that the overlay will be fully rendered\n            // before attempting to position it, as the position may depend on the size of the rendered\n            // content.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                // The overlay could've been detached before the zone has stabilized.\n                if (_this.hasAttached()) {\n                    _this.updatePosition();\n                }\n            });\n            // Enable pointer events for the overlay pane element.\n            this._togglePointerEvents(true);\n            if (this._config.hasBackdrop) {\n                this._attachBackdrop();\n            }\n            if (this._config.panelClass) {\n                this._toggleClasses(this._pane, this._config.panelClass, true);\n            }\n            // Only emit the `attachments` event once all other setup is done.\n            this._attachments.next();\n            // Track this overlay by the keyboard dispatcher\n            this._keyboardDispatcher.add(this);\n            // @breaking-change 8.0.0 remove the null check for `_location`\n            // once the constructor parameter is made required.\n            if (this._config.disposeOnNavigation && this._location) {\n                this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n            }\n            return attachResult;\n        };\n        /**\n         * Detaches an overlay from a portal.\n         * @returns The portal detachment result.\n         */\n        OverlayRef.prototype.detach = function () {\n            if (!this.hasAttached()) {\n                return;\n            }\n            this.detachBackdrop();\n            // When the overlay is detached, the pane element should disable pointer events.\n            // This is necessary because otherwise the pane element will cover the page and disable\n            // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n            this._togglePointerEvents(false);\n            if (this._positionStrategy && this._positionStrategy.detach) {\n                this._positionStrategy.detach();\n            }\n            if (this._scrollStrategy) {\n                this._scrollStrategy.disable();\n            }\n            var detachmentResult = this._portalOutlet.detach();\n            // Only emit after everything is detached.\n            this._detachments.next();\n            // Remove this overlay from keyboard dispatcher tracking.\n            this._keyboardDispatcher.remove(this);\n            // Keeping the host element in the DOM can cause scroll jank, because it still gets\n            // rendered, even though it's transparent and unclickable which is why we remove it.\n            this._detachContentWhenStable();\n            // Stop listening for location changes.\n            this._locationChanges.unsubscribe();\n            return detachmentResult;\n        };\n        /** Cleans up the overlay from the DOM. */\n        OverlayRef.prototype.dispose = function () {\n            var isAttached = this.hasAttached();\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._disposeScrollStrategy();\n            this.detachBackdrop();\n            this._locationChanges.unsubscribe();\n            this._keyboardDispatcher.remove(this);\n            this._portalOutlet.dispose();\n            this._attachments.complete();\n            this._backdropClick.complete();\n            this._keydownEvents.complete();\n            if (this._host && this._host.parentNode) {\n                this._host.parentNode.removeChild(this._host);\n                this._host = null;\n            }\n            this._previousHostParent = this._pane = null;\n            if (isAttached) {\n                this._detachments.next();\n            }\n            this._detachments.complete();\n        };\n        /** Whether the overlay has attached content. */\n        OverlayRef.prototype.hasAttached = function () {\n            return this._portalOutlet.hasAttached();\n        };\n        /** Gets an observable that emits when the backdrop has been clicked. */\n        OverlayRef.prototype.backdropClick = function () {\n            return this._backdropClick.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been attached. */\n        OverlayRef.prototype.attachments = function () {\n            return this._attachments.asObservable();\n        };\n        /** Gets an observable that emits when the overlay has been detached. */\n        OverlayRef.prototype.detachments = function () {\n            return this._detachments.asObservable();\n        };\n        /** Gets an observable of keydown events targeted to this overlay. */\n        OverlayRef.prototype.keydownEvents = function () {\n            return this._keydownEventsObservable;\n        };\n        /** Gets the current overlay configuration, which is immutable. */\n        OverlayRef.prototype.getConfig = function () {\n            return this._config;\n        };\n        /** Updates the position of the overlay based on the position strategy. */\n        OverlayRef.prototype.updatePosition = function () {\n            if (this._positionStrategy) {\n                this._positionStrategy.apply();\n            }\n        };\n        /** Switches to a new position strategy and updates the overlay position. */\n        OverlayRef.prototype.updatePositionStrategy = function (strategy) {\n            if (strategy === this._positionStrategy) {\n                return;\n            }\n            if (this._positionStrategy) {\n                this._positionStrategy.dispose();\n            }\n            this._positionStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                this.updatePosition();\n            }\n        };\n        /** Update the size properties of the overlay. */\n        OverlayRef.prototype.updateSize = function (sizeConfig) {\n            this._config = tslib.__assign(tslib.__assign({}, this._config), sizeConfig);\n            this._updateElementSize();\n        };\n        /** Sets the LTR/RTL direction for the overlay. */\n        OverlayRef.prototype.setDirection = function (dir) {\n            this._config = tslib.__assign(tslib.__assign({}, this._config), { direction: dir });\n            this._updateElementDirection();\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        OverlayRef.prototype.addPanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, true);\n            }\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        OverlayRef.prototype.removePanelClass = function (classes) {\n            if (this._pane) {\n                this._toggleClasses(this._pane, classes, false);\n            }\n        };\n        /**\n         * Returns the layout direction of the overlay panel.\n         */\n        OverlayRef.prototype.getDirection = function () {\n            var direction = this._config.direction;\n            if (!direction) {\n                return 'ltr';\n            }\n            return typeof direction === 'string' ? direction : direction.value;\n        };\n        /** Switches to a new scroll strategy. */\n        OverlayRef.prototype.updateScrollStrategy = function (strategy) {\n            if (strategy === this._scrollStrategy) {\n                return;\n            }\n            this._disposeScrollStrategy();\n            this._scrollStrategy = strategy;\n            if (this.hasAttached()) {\n                strategy.attach(this);\n                strategy.enable();\n            }\n        };\n        /** Updates the text direction of the overlay panel. */\n        OverlayRef.prototype._updateElementDirection = function () {\n            this._host.setAttribute('dir', this.getDirection());\n        };\n        /** Updates the size of the overlay element based on the overlay config. */\n        OverlayRef.prototype._updateElementSize = function () {\n            if (!this._pane) {\n                return;\n            }\n            var style = this._pane.style;\n            style.width = coercion.coerceCssPixelValue(this._config.width);\n            style.height = coercion.coerceCssPixelValue(this._config.height);\n            style.minWidth = coercion.coerceCssPixelValue(this._config.minWidth);\n            style.minHeight = coercion.coerceCssPixelValue(this._config.minHeight);\n            style.maxWidth = coercion.coerceCssPixelValue(this._config.maxWidth);\n            style.maxHeight = coercion.coerceCssPixelValue(this._config.maxHeight);\n        };\n        /** Toggles the pointer events for the overlay pane element. */\n        OverlayRef.prototype._togglePointerEvents = function (enablePointer) {\n            this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n        };\n        /** Attaches a backdrop for this overlay. */\n        OverlayRef.prototype._attachBackdrop = function () {\n            var _this = this;\n            var showingClass = 'cdk-overlay-backdrop-showing';\n            this._backdropElement = this._document.createElement('div');\n            this._backdropElement.classList.add('cdk-overlay-backdrop');\n            if (this._config.backdropClass) {\n                this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n            }\n            // Insert the backdrop before the pane in the DOM order,\n            // in order to handle stacked overlays properly.\n            this._host.parentElement.insertBefore(this._backdropElement, this._host);\n            // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n            // action desired when such a click occurs (usually closing the overlay).\n            this._backdropElement.addEventListener('click', this._backdropClickHandler);\n            // Add class to fade-in the backdrop after one frame.\n            if (typeof requestAnimationFrame !== 'undefined') {\n                this._ngZone.runOutsideAngular(function () {\n                    requestAnimationFrame(function () {\n                        if (_this._backdropElement) {\n                            _this._backdropElement.classList.add(showingClass);\n                        }\n                    });\n                });\n            }\n            else {\n                this._backdropElement.classList.add(showingClass);\n            }\n        };\n        /**\n         * Updates the stacking order of the element, moving it to the top if necessary.\n         * This is required in cases where one overlay was detached, while another one,\n         * that should be behind it, was destroyed. The next time both of them are opened,\n         * the stacking will be wrong, because the detached element's pane will still be\n         * in its original DOM position.\n         */\n        OverlayRef.prototype._updateStackingOrder = function () {\n            if (this._host.nextSibling) {\n                this._host.parentNode.appendChild(this._host);\n            }\n        };\n        /** Detaches the backdrop (if any) associated with the overlay. */\n        OverlayRef.prototype.detachBackdrop = function () {\n            var _this = this;\n            var backdropToDetach = this._backdropElement;\n            if (!backdropToDetach) {\n                return;\n            }\n            var timeoutId;\n            var finishDetach = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach) {\n                    backdropToDetach.removeEventListener('click', _this._backdropClickHandler);\n                    backdropToDetach.removeEventListener('transitionend', finishDetach);\n                    if (backdropToDetach.parentNode) {\n                        backdropToDetach.parentNode.removeChild(backdropToDetach);\n                    }\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                if (_this._config.backdropClass) {\n                    _this._toggleClasses(backdropToDetach, _this._config.backdropClass, false);\n                }\n                clearTimeout(timeoutId);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            this._ngZone.runOutsideAngular(function () {\n                backdropToDetach.addEventListener('transitionend', finishDetach);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach, 500); });\n        };\n        /** Toggles a single CSS class or an array of classes on an element. */\n        OverlayRef.prototype._toggleClasses = function (element, cssClasses, isAdd) {\n            var classList = element.classList;\n            coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                // We can't do a spread here, because IE doesn't support setting multiple classes.\n                // Also trying to add an empty string to a DOMTokenList will throw.\n                if (cssClass) {\n                    isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n                }\n            });\n        };\n        /** Detaches the overlay content next time the zone stabilizes. */\n        OverlayRef.prototype._detachContentWhenStable = function () {\n            var _this = this;\n            // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n            // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n            // be patched to run inside the zone, which will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(function () {\n                // We can't remove the host here immediately, because the overlay pane's content\n                // might still be animating. This stream helps us avoid interrupting the animation\n                // by waiting for the pane to become empty.\n                var subscription = _this._ngZone.onStable\n                    .asObservable()\n                    .pipe(operators.takeUntil(rxjs.merge(_this._attachments, _this._detachments)))\n                    .subscribe(function () {\n                    // Needs a couple of checks for the pane and host, because\n                    // they may have been removed by the time the zone stabilizes.\n                    if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                        if (_this._pane && _this._config.panelClass) {\n                            _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                        }\n                        if (_this._host && _this._host.parentElement) {\n                            _this._previousHostParent = _this._host.parentElement;\n                            _this._previousHostParent.removeChild(_this._host);\n                        }\n                        subscription.unsubscribe();\n                    }\n                });\n            });\n        };\n        /** Disposes of a scroll strategy. */\n        OverlayRef.prototype._disposeScrollStrategy = function () {\n            var scrollStrategy = this._scrollStrategy;\n            if (scrollStrategy) {\n                scrollStrategy.disable();\n                if (scrollStrategy.detach) {\n                    scrollStrategy.detach();\n                }\n            }\n        };\n        return OverlayRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO: refactor clipping detection into a separate thing (part of scrolling module)\n    // TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n    /** Class to be added to the overlay bounding box. */\n    var boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     */\n    var FlexibleConnectedPositionStrategy = /** @class */ (function () {\n        function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n            /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n            this._lastBoundingBoxSize = { width: 0, height: 0 };\n            /** Whether the overlay was pushed in a previous positioning. */\n            this._isPushed = false;\n            /** Whether the overlay can be pushed on-screen on the initial open. */\n            this._canPush = true;\n            /** Whether the overlay can grow via flexible width/height after the initial open. */\n            this._growAfterOpen = false;\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            this._hasFlexibleDimensions = true;\n            /** Whether the overlay position is locked. */\n            this._positionLocked = false;\n            /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n            this._viewportMargin = 0;\n            /** The Scrollable containers used to check scrollable view properties on position change. */\n            this._scrollables = [];\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            /** Subject that emits whenever the position changes. */\n            this._positionChanges = new rxjs.Subject();\n            /** Subscription to viewport size changes. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Default offset for the overlay along the x axis. */\n            this._offsetX = 0;\n            /** Default offset for the overlay along the y axis. */\n            this._offsetY = 0;\n            /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n            this._appliedPanelClasses = [];\n            /** Observable sequence of position changes. */\n            this.positionChanges = this._positionChanges.asObservable();\n            this.setOrigin(connectedTo);\n        }\n        Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attaches this position strategy to an overlay. */\n        FlexibleConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            var _this = this;\n            if (this._overlayRef && overlayRef !== this._overlayRef) {\n                throw Error('This position strategy is already attached to an overlay');\n            }\n            this._validatePositions();\n            overlayRef.hostElement.classList.add(boundingBoxClass);\n            this._overlayRef = overlayRef;\n            this._boundingBox = overlayRef.hostElement;\n            this._pane = overlayRef.overlayElement;\n            this._isDisposed = false;\n            this._isInitialRender = true;\n            this._lastPosition = null;\n            this._resizeSubscription.unsubscribe();\n            this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n                // When the window is resized, we want to trigger the next reposition as if it\n                // was an initial render, in order for the strategy to pick a new optimal position,\n                // otherwise position locking will cause it to stay at the old one.\n                _this._isInitialRender = true;\n                _this.apply();\n            });\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin best fits on-screen.\n         *\n         * The selection of a position goes as follows:\n         *  - If any positions fit completely within the viewport as-is,\n         *      choose the first position that does so.\n         *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n         *      choose the position with the greatest available size modified by the positions' weight.\n         *  - If pushing is enabled, take the position that went off-screen the least and push it\n         *      on-screen.\n         *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n         * @docs-private\n         */\n        FlexibleConnectedPositionStrategy.prototype.apply = function () {\n            var e_1, _a, e_2, _b;\n            // We shouldn't do anything if the strategy was disposed or we're on the server.\n            if (this._isDisposed || !this._platform.isBrowser) {\n                return;\n            }\n            // If the position has been applied already (e.g. when the overlay was opened) and the\n            // consumer opted into locking in the position, re-use the old position, in order to\n            // prevent the overlay from jumping around.\n            if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n                this.reapplyLastPosition();\n                return;\n            }\n            this._clearPanelClasses();\n            this._resetOverlayElementStyles();\n            this._resetBoundingBoxStyles();\n            // We need the bounding rects for the origin and the overlay to determine how to position\n            // the overlay relative to the origin.\n            // We use the viewport rect to determine whether a position would go off-screen.\n            this._viewportRect = this._getNarrowedViewportRect();\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            var originRect = this._originRect;\n            var overlayRect = this._overlayRect;\n            var viewportRect = this._viewportRect;\n            // Positions where the overlay will fit with flexible dimensions.\n            var flexibleFits = [];\n            // Fallback if none of the preferred positions fit within the viewport.\n            var fallback;\n            try {\n                // Go through each of the preferred positions looking for a good fit.\n                // If a good fit is found, it will be applied immediately.\n                for (var _c = tslib.__values(this._preferredPositions), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var pos = _d.value;\n                    // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n                    var originPoint = this._getOriginPoint(originRect, pos);\n                    // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n                    // overlay in this position. We use the top-left corner for calculations and later translate\n                    // this into an appropriate (top, left, bottom, right) style.\n                    var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n                    // Calculate how well the overlay would fit into the viewport with this point.\n                    var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n                    // If the overlay, without any further work, fits into the viewport, use this position.\n                    if (overlayFit.isCompletelyWithinViewport) {\n                        this._isPushed = false;\n                        this._applyPosition(pos, originPoint);\n                        return;\n                    }\n                    // If the overlay has flexible dimensions, we can use this position\n                    // so long as there's enough space for the minimum dimensions.\n                    if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                        // Save positions where the overlay will fit with flexible dimensions. We will use these\n                        // if none of the positions fit *without* flexible dimensions.\n                        flexibleFits.push({\n                            position: pos,\n                            origin: originPoint,\n                            overlayRect: overlayRect,\n                            boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                        });\n                        continue;\n                    }\n                    // If the current preferred position does not fit on the screen, remember the position\n                    // if it has more visible area on-screen than we've seen and move onto the next preferred\n                    // position.\n                    if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                        fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // If there are any positions where the overlay would fit with flexible dimensions, choose the\n            // one that has the greatest area available modified by the position's weight\n            if (flexibleFits.length) {\n                var bestFit = null;\n                var bestScore = -1;\n                try {\n                    for (var flexibleFits_1 = tslib.__values(flexibleFits), flexibleFits_1_1 = flexibleFits_1.next(); !flexibleFits_1_1.done; flexibleFits_1_1 = flexibleFits_1.next()) {\n                        var fit = flexibleFits_1_1.value;\n                        var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                        if (score > bestScore) {\n                            bestScore = score;\n                            bestFit = fit;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (flexibleFits_1_1 && !flexibleFits_1_1.done && (_b = flexibleFits_1.return)) _b.call(flexibleFits_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                this._isPushed = false;\n                this._applyPosition(bestFit.position, bestFit.origin);\n                return;\n            }\n            // When none of the preferred positions fit within the viewport, take the position\n            // that went off-screen the least and attempt to push it on-screen.\n            if (this._canPush) {\n                // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n                this._isPushed = true;\n                this._applyPosition(fallback.position, fallback.originPoint);\n                return;\n            }\n            // All options for getting the overlay within the viewport have been exhausted, so go with the\n            // position that went off-screen the least.\n            this._applyPosition(fallback.position, fallback.originPoint);\n        };\n        FlexibleConnectedPositionStrategy.prototype.detach = function () {\n            this._clearPanelClasses();\n            this._lastPosition = null;\n            this._previousPushAmount = null;\n            this._resizeSubscription.unsubscribe();\n        };\n        /** Cleanup after the element gets destroyed. */\n        FlexibleConnectedPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed) {\n                return;\n            }\n            // We can't use `_resetBoundingBoxStyles` here, because it resets\n            // some properties to zero, rather than removing them.\n            if (this._boundingBox) {\n                extendStyles(this._boundingBox.style, {\n                    top: '',\n                    left: '',\n                    right: '',\n                    bottom: '',\n                    height: '',\n                    width: '',\n                    alignItems: '',\n                    justifyContent: '',\n                });\n            }\n            if (this._pane) {\n                this._resetOverlayElementStyles();\n            }\n            if (this._overlayRef) {\n                this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n            }\n            this.detach();\n            this._positionChanges.complete();\n            this._overlayRef = this._boundingBox = null;\n            this._isDisposed = true;\n        };\n        /**\n         * This re-aligns the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = function () {\n            if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n                this._originRect = this._getOriginRect();\n                this._overlayRect = this._pane.getBoundingClientRect();\n                this._viewportRect = this._getNarrowedViewportRect();\n                var lastPosition = this._lastPosition || this._preferredPositions[0];\n                var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n                this._applyPosition(lastPosition, originPoint);\n            }\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._scrollables = scrollables;\n            return this;\n        };\n        /**\n         * Adds new preferred positions.\n         * @param positions List of positions options for this overlay.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions;\n            // If the last calculated position object isn't part of the positions anymore, clear\n            // it in order to avoid it being picked up if the consumer tries to re-apply.\n            if (positions.indexOf(this._lastPosition) === -1) {\n                this._lastPosition = null;\n            }\n            this._validatePositions();\n            return this;\n        };\n        /**\n         * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n         * @param margin Required margin between the overlay and the viewport edge in pixels.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withViewportMargin = function (margin) {\n            this._viewportMargin = margin;\n            return this;\n        };\n        /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = function (flexibleDimensions) {\n            if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n            this._hasFlexibleDimensions = flexibleDimensions;\n            return this;\n        };\n        /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n        FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = function (growAfterOpen) {\n            if (growAfterOpen === void 0) { growAfterOpen = true; }\n            this._growAfterOpen = growAfterOpen;\n            return this;\n        };\n        /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        FlexibleConnectedPositionStrategy.prototype.withPush = function (canPush) {\n            if (canPush === void 0) { canPush = true; }\n            this._canPush = canPush;\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            if (isLocked === void 0) { isLocked = true; }\n            this._positionLocked = isLocked;\n            return this;\n        };\n        /**\n         * Sets the origin, relative to which to position the overlay.\n         * Using an element origin is useful for building components that need to be positioned\n         * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n         * used for cases like contextual menus which open relative to the user's pointer.\n         * @param origin Reference to the new origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._origin = origin;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the x-axis.\n         * @param offset New offset in the X axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = function (offset) {\n            this._offsetX = offset;\n            return this;\n        };\n        /**\n         * Sets the default offset for the overlay's connection point on the y-axis.\n         * @param offset New offset in the Y axis.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = function (offset) {\n            this._offsetY = offset;\n            return this;\n        };\n        /**\n         * Configures that the position strategy should set a `transform-origin` on some elements\n         * inside the overlay, depending on the current position that is being applied. This is\n         * useful for the cases where the origin of an animation can change depending on the\n         * alignment of the overlay.\n         * @param selector CSS selector that will be used to find the target\n         *    elements onto which to set the transform origin.\n         */\n        FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = function (selector) {\n            this._transformOriginSelector = selector;\n            return this;\n        };\n        /**\n         * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOriginPoint = function (originRect, pos) {\n            var x;\n            if (pos.originX == 'center') {\n                // Note: when centering we should always use the `left`\n                // offset, otherwise the position will be wrong in RTL.\n                x = originRect.left + (originRect.width / 2);\n            }\n            else {\n                var startX = this._isRtl() ? originRect.right : originRect.left;\n                var endX = this._isRtl() ? originRect.left : originRect.right;\n                x = pos.originX == 'start' ? startX : endX;\n            }\n            var y;\n            if (pos.originY == 'center') {\n                y = originRect.top + (originRect.height / 2);\n            }\n            else {\n                y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n            }\n            return { x: x, y: y };\n        };\n        /**\n         * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n         * origin point to which the overlay should be connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, pos) {\n            // Calculate the (overlayStartX, overlayStartY), the start of the\n            // potential overlay position relative to the origin point.\n            var overlayStartX;\n            if (pos.overlayX == 'center') {\n                overlayStartX = -overlayRect.width / 2;\n            }\n            else if (pos.overlayX === 'start') {\n                overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n            }\n            else {\n                overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n            }\n            var overlayStartY;\n            if (pos.overlayY == 'center') {\n                overlayStartY = -overlayRect.height / 2;\n            }\n            else {\n                overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n            }\n            // The (x, y) coordinates of the overlay.\n            return {\n                x: originPoint.x + overlayStartX,\n                y: originPoint.y + overlayStartY,\n            };\n        };\n        /** Gets how well an overlay at the given point will fit within the viewport. */\n        FlexibleConnectedPositionStrategy.prototype._getOverlayFit = function (point, overlay, viewport, position) {\n            var x = point.x, y = point.y;\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            // Account for the offsets since they could push the overlay out of the viewport.\n            if (offsetX) {\n                x += offsetX;\n            }\n            if (offsetY) {\n                y += offsetY;\n            }\n            // How much the overlay would overflow at this position, on each side.\n            var leftOverflow = 0 - x;\n            var rightOverflow = (x + overlay.width) - viewport.width;\n            var topOverflow = 0 - y;\n            var bottomOverflow = (y + overlay.height) - viewport.height;\n            // Visible parts of the element on each axis.\n            var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n            var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n            var visibleArea = visibleWidth * visibleHeight;\n            return {\n                visibleArea: visibleArea,\n                isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n                fitsInViewportVertically: visibleHeight === overlay.height,\n                fitsInViewportHorizontally: visibleWidth == overlay.width,\n            };\n        };\n        /**\n         * Whether the overlay can fit within the viewport when it may resize either its width or height.\n         * @param fit How well the overlay fits in the viewport at some position.\n         * @param point The (x, y) coordinates of the overlat at some position.\n         * @param viewport The geometry of the viewport.\n         */\n        FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = function (fit, point, viewport) {\n            if (this._hasFlexibleDimensions) {\n                var availableHeight = viewport.bottom - point.y;\n                var availableWidth = viewport.right - point.x;\n                var minHeight = this._overlayRef.getConfig().minHeight;\n                var minWidth = this._overlayRef.getConfig().minWidth;\n                var verticalFit = fit.fitsInViewportVertically ||\n                    (minHeight != null && minHeight <= availableHeight);\n                var horizontalFit = fit.fitsInViewportHorizontally ||\n                    (minWidth != null && minWidth <= availableWidth);\n                return verticalFit && horizontalFit;\n            }\n            return false;\n        };\n        /**\n         * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n         * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n         * right and bottom).\n         *\n         * @param start Starting point from which the overlay is pushed.\n         * @param overlay Dimensions of the overlay.\n         * @param scrollPosition Current viewport scroll position.\n         * @returns The point at which to position the overlay after pushing. This is effectively a new\n         *     originPoint.\n         */\n        FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = function (start, overlay, scrollPosition) {\n            // If the position is locked and we've pushed the overlay already, reuse the previous push\n            // amount, rather than pushing it again. If we were to continue pushing, the element would\n            // remain in the viewport, which goes against the expectations when position locking is enabled.\n            if (this._previousPushAmount && this._positionLocked) {\n                return {\n                    x: start.x + this._previousPushAmount.x,\n                    y: start.y + this._previousPushAmount.y\n                };\n            }\n            var viewport = this._viewportRect;\n            // Determine how much the overlay goes outside the viewport on each\n            // side, which we'll use to decide which direction to push it.\n            var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n            var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n            var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n            var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n            // Amount by which to push the overlay in each axis such that it remains on-screen.\n            var pushX = 0;\n            var pushY = 0;\n            // If the overlay fits completely within the bounds of the viewport, push it from whichever\n            // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n            // viewport and allow for the trailing end of the overlay to go out of bounds.\n            if (overlay.width <= viewport.width) {\n                pushX = overflowLeft || -overflowRight;\n            }\n            else {\n                pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n            }\n            if (overlay.height <= viewport.height) {\n                pushY = overflowTop || -overflowBottom;\n            }\n            else {\n                pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n            }\n            this._previousPushAmount = { x: pushX, y: pushY };\n            return {\n                x: start.x + pushX,\n                y: start.y + pushY,\n            };\n        };\n        /**\n         * Applies a computed position to the overlay and emits a position change.\n         * @param position The position preference\n         * @param originPoint The point on the origin element where the overlay is connected.\n         */\n        FlexibleConnectedPositionStrategy.prototype._applyPosition = function (position, originPoint) {\n            this._setTransformOrigin(position);\n            this._setOverlayElementStyles(originPoint, position);\n            this._setBoundingBoxStyles(originPoint, position);\n            if (position.panelClass) {\n                this._addPanelClasses(position.panelClass);\n            }\n            // Save the last connected position in case the position needs to be re-calculated.\n            this._lastPosition = position;\n            // Notify that the position has been changed along with its change properties.\n            // We only emit if we've got any subscriptions, because the scroll visibility\n            // calculcations can be somewhat expensive.\n            if (this._positionChanges.observers.length) {\n                var scrollableViewProperties = this._getScrollVisibility();\n                var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n                this._positionChanges.next(changeEvent);\n            }\n            this._isInitialRender = false;\n        };\n        /** Sets the transform origin based on the configured selector and the passed-in position.  */\n        FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = function (position) {\n            if (!this._transformOriginSelector) {\n                return;\n            }\n            var elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n            var xOrigin;\n            var yOrigin = position.overlayY;\n            if (position.overlayX === 'center') {\n                xOrigin = 'center';\n            }\n            else if (this._isRtl()) {\n                xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n            }\n            else {\n                xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n            }\n            for (var i = 0; i < elements.length; i++) {\n                elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n            }\n        };\n        /**\n         * Gets the position and size of the overlay's sizing container.\n         *\n         * This method does no measuring and applies no styles so that we can cheaply compute the\n         * bounds for all positions and choose the best fit based on these results.\n         */\n        FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = function (origin, position) {\n            var viewport = this._viewportRect;\n            var isRtl = this._isRtl();\n            var height, top, bottom;\n            if (position.overlayY === 'top') {\n                // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n                top = origin.y;\n                height = viewport.height - top + this._viewportMargin;\n            }\n            else if (position.overlayY === 'bottom') {\n                // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n                // the viewport margin back in, because the viewport rect is narrowed down to remove the\n                // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n                bottom = viewport.height - origin.y + this._viewportMargin * 2;\n                height = viewport.height - bottom + this._viewportMargin;\n            }\n            else {\n                // If neither top nor bottom, it means that the overlay is vertically centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n                // `origin.y - viewport.top`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n                var previousHeight = this._lastBoundingBoxSize.height;\n                height = smallestDistanceToViewportEdge * 2;\n                top = origin.y - smallestDistanceToViewportEdge;\n                if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                    top = origin.y - (previousHeight / 2);\n                }\n            }\n            // The overlay is opening 'right-ward' (the content flows to the right).\n            var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n                (position.overlayX === 'end' && isRtl);\n            // The overlay is opening 'left-ward' (the content flows to the left).\n            var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n                (position.overlayX === 'start' && isRtl);\n            var width, left, right;\n            if (isBoundedByLeftViewportEdge) {\n                right = viewport.width - origin.x + this._viewportMargin;\n                width = origin.x - this._viewportMargin;\n            }\n            else if (isBoundedByRightViewportEdge) {\n                left = origin.x;\n                width = viewport.right - origin.x;\n            }\n            else {\n                // If neither start nor end, it means that the overlay is horizontally centered on the\n                // origin point. Note that we want the position relative to the viewport, rather than\n                // the page, which is why we don't use something like `viewport.right - origin.x` and\n                // `origin.x - viewport.left`.\n                var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n                var previousWidth = this._lastBoundingBoxSize.width;\n                width = smallestDistanceToViewportEdge * 2;\n                left = origin.x - smallestDistanceToViewportEdge;\n                if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                    left = origin.x - (previousWidth / 2);\n                }\n            }\n            return { top: top, left: left, bottom: bottom, right: right, width: width, height: height };\n        };\n        /**\n         * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n         * origin's connection point and stetches to the bounds of the viewport.\n         *\n         * @param origin The point on the origin element where the overlay is connected.\n         * @param position The position preference\n         */\n        FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = function (origin, position) {\n            var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n            // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n            // when applying a new size.\n            if (!this._isInitialRender && !this._growAfterOpen) {\n                boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n                boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n            }\n            var styles = {};\n            if (this._hasExactPosition()) {\n                styles.top = styles.left = '0';\n                styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n                styles.width = styles.height = '100%';\n            }\n            else {\n                var maxHeight = this._overlayRef.getConfig().maxHeight;\n                var maxWidth = this._overlayRef.getConfig().maxWidth;\n                styles.height = coercion.coerceCssPixelValue(boundingBoxRect.height);\n                styles.top = coercion.coerceCssPixelValue(boundingBoxRect.top);\n                styles.bottom = coercion.coerceCssPixelValue(boundingBoxRect.bottom);\n                styles.width = coercion.coerceCssPixelValue(boundingBoxRect.width);\n                styles.left = coercion.coerceCssPixelValue(boundingBoxRect.left);\n                styles.right = coercion.coerceCssPixelValue(boundingBoxRect.right);\n                // Push the pane content towards the proper direction.\n                if (position.overlayX === 'center') {\n                    styles.alignItems = 'center';\n                }\n                else {\n                    styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n                }\n                if (position.overlayY === 'center') {\n                    styles.justifyContent = 'center';\n                }\n                else {\n                    styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n                }\n                if (maxHeight) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(maxHeight);\n                }\n                if (maxWidth) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(maxWidth);\n                }\n            }\n            this._lastBoundingBoxSize = boundingBoxRect;\n            extendStyles(this._boundingBox.style, styles);\n        };\n        /** Resets the styles for the bounding box so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = function () {\n            extendStyles(this._boundingBox.style, {\n                top: '0',\n                left: '0',\n                right: '0',\n                bottom: '0',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        };\n        /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n        FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = function () {\n            extendStyles(this._pane.style, {\n                top: '',\n                left: '',\n                bottom: '',\n                right: '',\n                position: '',\n                transform: '',\n            });\n        };\n        /** Sets positioning styles to the overlay element. */\n        FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = function (originPoint, position) {\n            var styles = {};\n            var hasExactPosition = this._hasExactPosition();\n            var hasFlexibleDimensions = this._hasFlexibleDimensions;\n            var config = this._overlayRef.getConfig();\n            if (hasExactPosition) {\n                var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n                extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n                extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n            }\n            else {\n                styles.position = 'static';\n            }\n            // Use a transform to apply the offsets. We do this because the `center` positions rely on\n            // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n            // off the position. We also can't use margins, because they won't have an effect in some\n            // cases where the element doesn't have anything to \"push off of\". Finally, this works\n            // better both with flexible and non-flexible positioning.\n            var transformString = '';\n            var offsetX = this._getOffset(position, 'x');\n            var offsetY = this._getOffset(position, 'y');\n            if (offsetX) {\n                transformString += \"translateX(\" + offsetX + \"px) \";\n            }\n            if (offsetY) {\n                transformString += \"translateY(\" + offsetY + \"px)\";\n            }\n            styles.transform = transformString.trim();\n            // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n            // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n            // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n            // Note that this doesn't apply when we have an exact position, in which case we do want to\n            // apply them because they'll be cleared from the bounding box.\n            if (config.maxHeight) {\n                if (hasExactPosition) {\n                    styles.maxHeight = coercion.coerceCssPixelValue(config.maxHeight);\n                }\n                else if (hasFlexibleDimensions) {\n                    styles.maxHeight = '';\n                }\n            }\n            if (config.maxWidth) {\n                if (hasExactPosition) {\n                    styles.maxWidth = coercion.coerceCssPixelValue(config.maxWidth);\n                }\n                else if (hasFlexibleDimensions) {\n                    styles.maxWidth = '';\n                }\n            }\n            extendStyles(this._pane.style, styles);\n        };\n        /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the\n            // preferred position has changed since the last `apply`.\n            var styles = { top: '', bottom: '' };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n            // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n            // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n            // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n            // otherwise our positioning will be thrown off.\n            overlayPoint.y -= virtualKeyboardOffset;\n            // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n            // above or below the origin and the direction in which the element will expand.\n            if (position.overlayY === 'bottom') {\n                // When using `bottom`, we adjust the y position such that it is the distance\n                // from the bottom of the viewport rather than the top.\n                var documentHeight = this._document.documentElement.clientHeight;\n                styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n            }\n            else {\n                styles.top = coercion.coerceCssPixelValue(overlayPoint.y);\n            }\n            return styles;\n        };\n        /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n        FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = function (position, originPoint, scrollPosition) {\n            // Reset any existing styles. This is necessary in case the preferred position has\n            // changed since the last `apply`.\n            var styles = { left: '', right: '' };\n            var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n            if (this._isPushed) {\n                overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n            }\n            // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n            // or \"after\" the origin, which determines the direction in which the element will expand.\n            // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n            // page is in RTL or LTR.\n            var horizontalStyleProperty;\n            if (this._isRtl()) {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n            }\n            else {\n                horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n            }\n            // When we're setting `right`, we adjust the x position such that it is the distance\n            // from the right edge of the viewport rather than the left edge.\n            if (horizontalStyleProperty === 'right') {\n                var documentWidth = this._document.documentElement.clientWidth;\n                styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n            }\n            else {\n                styles.left = coercion.coerceCssPixelValue(overlayPoint.x);\n            }\n            return styles;\n        };\n        /**\n         * Gets the view properties of the trigger and overlay, including whether they are clipped\n         * or completely outside the view of any of the strategy's scrollables.\n         */\n        FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = function () {\n            // Note: needs fresh rects since the position could've changed.\n            var originBounds = this._getOriginRect();\n            var overlayBounds = this._pane.getBoundingClientRect();\n            // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n            // every time, we should be able to use the scrollTop of the containers if the size of those\n            // containers hasn't changed.\n            var scrollContainerBounds = this._scrollables.map(function (scrollable) {\n                return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n            });\n            return {\n                isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n                isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n                isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n                isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n            };\n        };\n        /** Subtracts the amount that an element is overflowing on an axis from its length. */\n        FlexibleConnectedPositionStrategy.prototype._subtractOverflows = function (length) {\n            var overflows = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                overflows[_i - 1] = arguments[_i];\n            }\n            return overflows.reduce(function (currentValue, currentOverflow) {\n                return currentValue - Math.max(currentOverflow, 0);\n            }, length);\n        };\n        /** Narrows the given viewport rect by the current _viewportMargin. */\n        FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = function () {\n            // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n            // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n            // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n            // and `innerHeight` that do. This is necessary, because the overlay container uses\n            // 100% `width` and `height` which don't include the scrollbar either.\n            var width = this._document.documentElement.clientWidth;\n            var height = this._document.documentElement.clientHeight;\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            return {\n                top: scrollPosition.top + this._viewportMargin,\n                left: scrollPosition.left + this._viewportMargin,\n                right: scrollPosition.left + width - this._viewportMargin,\n                bottom: scrollPosition.top + height - this._viewportMargin,\n                width: width - (2 * this._viewportMargin),\n                height: height - (2 * this._viewportMargin),\n            };\n        };\n        /** Whether the we're dealing with an RTL context */\n        FlexibleConnectedPositionStrategy.prototype._isRtl = function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        };\n        /** Determines whether the overlay uses exact or flexible positioning. */\n        FlexibleConnectedPositionStrategy.prototype._hasExactPosition = function () {\n            return !this._hasFlexibleDimensions || this._isPushed;\n        };\n        /** Retrieves the offset of a position along the x or y axis. */\n        FlexibleConnectedPositionStrategy.prototype._getOffset = function (position, axis) {\n            if (axis === 'x') {\n                // We don't do something like `position['offset' + axis]` in\n                // order to avoid breking minifiers that rename properties.\n                return position.offsetX == null ? this._offsetX : position.offsetX;\n            }\n            return position.offsetY == null ? this._offsetY : position.offsetY;\n        };\n        /** Validates that the current position match the expected values. */\n        FlexibleConnectedPositionStrategy.prototype._validatePositions = function () {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(function (pair) {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        };\n        /** Adds a single CSS class or an array of classes on the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._addPanelClasses = function (cssClasses) {\n            var _this = this;\n            if (this._pane) {\n                coercion.coerceArray(cssClasses).forEach(function (cssClass) {\n                    if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                        _this._appliedPanelClasses.push(cssClass);\n                        _this._pane.classList.add(cssClass);\n                    }\n                });\n            }\n        };\n        /** Clears the classes that the position strategy has applied from the overlay panel. */\n        FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = function () {\n            var _this = this;\n            if (this._pane) {\n                this._appliedPanelClasses.forEach(function (cssClass) {\n                    _this._pane.classList.remove(cssClass);\n                });\n                this._appliedPanelClasses = [];\n            }\n        };\n        /** Returns the ClientRect of the current origin. */\n        FlexibleConnectedPositionStrategy.prototype._getOriginRect = function () {\n            var origin = this._origin;\n            if (origin instanceof i0.ElementRef) {\n                return origin.nativeElement.getBoundingClientRect();\n            }\n            if (origin instanceof HTMLElement) {\n                return origin.getBoundingClientRect();\n            }\n            var width = origin.width || 0;\n            var height = origin.height || 0;\n            // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n            return {\n                top: origin.y,\n                bottom: origin.y + height,\n                left: origin.x,\n                right: origin.x + width,\n                height: height,\n                width: width\n            };\n        };\n        return FlexibleConnectedPositionStrategy;\n    }());\n    /** Shallow-extends a stylesheet object with another stylesheet object. */\n    function extendStyles(destination, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                destination[key] = source[key];\n            }\n        }\n        return destination;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * implicit position relative to some origin element. The relative position is defined in terms of\n     * a point on the origin element that is connected to a point on the overlay element. For example,\n     * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n     * of the overlay.\n     * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n     * @breaking-change 8.0.0\n     */\n    var ConnectedPositionStrategy = /** @class */ (function () {\n        function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            this._preferredPositions = [];\n            // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n            // the extra logic, we create an instance of the positioning strategy that has some\n            // defaults that make it behave as the old position strategy and to which we'll\n            // proxy all of the API calls.\n            this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n            this.withFallbackPosition(originPos, overlayPos);\n        }\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n            /** Whether the we're dealing with an RTL context */\n            get: function () {\n                return this._overlayRef.getDirection() === 'rtl';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n            /** Emits an event when the connection point changes. */\n            get: function () {\n                return this._positionStrategy.positionChanges;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n            /** Ordered list of preferred positions, from most to least desirable. */\n            get: function () {\n                return this._preferredPositions;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Attach this position strategy to an overlay. */\n        ConnectedPositionStrategy.prototype.attach = function (overlayRef) {\n            this._overlayRef = overlayRef;\n            this._positionStrategy.attach(overlayRef);\n            if (this._direction) {\n                overlayRef.setDirection(this._direction);\n                this._direction = null;\n            }\n        };\n        /** Disposes all resources used by the position strategy. */\n        ConnectedPositionStrategy.prototype.dispose = function () {\n            this._positionStrategy.dispose();\n        };\n        /** @docs-private */\n        ConnectedPositionStrategy.prototype.detach = function () {\n            this._positionStrategy.detach();\n        };\n        /**\n         * Updates the position of the overlay element, using whichever preferred position relative\n         * to the origin fits on-screen.\n         * @docs-private\n         */\n        ConnectedPositionStrategy.prototype.apply = function () {\n            this._positionStrategy.apply();\n        };\n        /**\n         * Re-positions the overlay element with the trigger in its last calculated position,\n         * even if a position higher in the \"preferred positions\" list would now fit. This\n         * allows one to re-align the panel without changing the orientation of the panel.\n         */\n        ConnectedPositionStrategy.prototype.recalculateLastPosition = function () {\n            this._positionStrategy.reapplyLastPosition();\n        };\n        /**\n         * Sets the list of Scrollable containers that host the origin element so that\n         * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n         * Scrollable must be an ancestor element of the strategy's origin element.\n         */\n        ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {\n            this._positionStrategy.withScrollableContainers(scrollables);\n        };\n        /**\n         * Adds a new preferred fallback position.\n         * @param originPos\n         * @param overlayPos\n         */\n        ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos, offsetX, offsetY) {\n            var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n            this._preferredPositions.push(position);\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the layout direction so the overlay's position can be adjusted to match.\n         * @param dir New layout direction.\n         */\n        ConnectedPositionStrategy.prototype.withDirection = function (dir) {\n            // Since the direction might be declared before the strategy is attached,\n            // we save the value in a temporary property and we'll transfer it to the\n            // overlay ref on attachment.\n            if (this._overlayRef) {\n                this._overlayRef.setDirection(dir);\n            }\n            else {\n                this._direction = dir;\n            }\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the x-axis\n         * @param offset New offset in the X axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {\n            this._positionStrategy.withDefaultOffsetX(offset);\n            return this;\n        };\n        /**\n         * Sets an offset for the overlay's connection point on the y-axis\n         * @param  offset New offset in the Y axis.\n         */\n        ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {\n            this._positionStrategy.withDefaultOffsetY(offset);\n            return this;\n        };\n        /**\n         * Sets whether the overlay's position should be locked in after it is positioned\n         * initially. When an overlay is locked in, it won't attempt to reposition itself\n         * when the position is re-applied (e.g. when the user scrolls away).\n         * @param isLocked Whether the overlay should locked in.\n         */\n        ConnectedPositionStrategy.prototype.withLockedPosition = function (isLocked) {\n            this._positionStrategy.withLockedPosition(isLocked);\n            return this;\n        };\n        /**\n         * Overwrites the current set of positions with an array of new ones.\n         * @param positions Position pairs to be set on the strategy.\n         */\n        ConnectedPositionStrategy.prototype.withPositions = function (positions) {\n            this._preferredPositions = positions.slice();\n            this._positionStrategy.withPositions(this._preferredPositions);\n            return this;\n        };\n        /**\n         * Sets the origin element, relative to which to position the overlay.\n         * @param origin Reference to the new origin element.\n         */\n        ConnectedPositionStrategy.prototype.setOrigin = function (origin) {\n            this._positionStrategy.setOrigin(origin);\n            return this;\n        };\n        return ConnectedPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Class to be added to the overlay pane wrapper. */\n    var wrapperClass = 'cdk-global-overlay-wrapper';\n    /**\n     * A strategy for positioning overlays. Using this strategy, an overlay is given an\n     * explicit position relative to the browser's viewport. We use flexbox, instead of\n     * transforms, in order to avoid issues with subpixel rendering which can cause the\n     * element to become blurry.\n     */\n    var GlobalPositionStrategy = /** @class */ (function () {\n        function GlobalPositionStrategy() {\n            this._cssPosition = 'static';\n            this._topOffset = '';\n            this._bottomOffset = '';\n            this._leftOffset = '';\n            this._rightOffset = '';\n            this._alignItems = '';\n            this._justifyContent = '';\n            this._width = '';\n            this._height = '';\n        }\n        GlobalPositionStrategy.prototype.attach = function (overlayRef) {\n            var config = overlayRef.getConfig();\n            this._overlayRef = overlayRef;\n            if (this._width && !config.width) {\n                overlayRef.updateSize({ width: this._width });\n            }\n            if (this._height && !config.height) {\n                overlayRef.updateSize({ height: this._height });\n            }\n            overlayRef.hostElement.classList.add(wrapperClass);\n            this._isDisposed = false;\n        };\n        /**\n         * Sets the top position of the overlay. Clears any previously set vertical position.\n         * @param value New top offset.\n         */\n        GlobalPositionStrategy.prototype.top = function (value) {\n            if (value === void 0) { value = ''; }\n            this._bottomOffset = '';\n            this._topOffset = value;\n            this._alignItems = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the left position of the overlay. Clears any previously set horizontal position.\n         * @param value New left offset.\n         */\n        GlobalPositionStrategy.prototype.left = function (value) {\n            if (value === void 0) { value = ''; }\n            this._rightOffset = '';\n            this._leftOffset = value;\n            this._justifyContent = 'flex-start';\n            return this;\n        };\n        /**\n         * Sets the bottom position of the overlay. Clears any previously set vertical position.\n         * @param value New bottom offset.\n         */\n        GlobalPositionStrategy.prototype.bottom = function (value) {\n            if (value === void 0) { value = ''; }\n            this._topOffset = '';\n            this._bottomOffset = value;\n            this._alignItems = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the right position of the overlay. Clears any previously set horizontal position.\n         * @param value New right offset.\n         */\n        GlobalPositionStrategy.prototype.right = function (value) {\n            if (value === void 0) { value = ''; }\n            this._leftOffset = '';\n            this._rightOffset = value;\n            this._justifyContent = 'flex-end';\n            return this;\n        };\n        /**\n         * Sets the overlay width and clears any previously set width.\n         * @param value New width for the overlay\n         * @deprecated Pass the `width` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.width = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ width: value });\n            }\n            else {\n                this._width = value;\n            }\n            return this;\n        };\n        /**\n         * Sets the overlay height and clears any previously set height.\n         * @param value New height for the overlay\n         * @deprecated Pass the `height` through the `OverlayConfig`.\n         * @breaking-change 8.0.0\n         */\n        GlobalPositionStrategy.prototype.height = function (value) {\n            if (value === void 0) { value = ''; }\n            if (this._overlayRef) {\n                this._overlayRef.updateSize({ height: value });\n            }\n            else {\n                this._height = value;\n            }\n            return this;\n        };\n        /**\n         * Centers the overlay horizontally with an optional offset.\n         * Clears any previously set horizontal position.\n         *\n         * @param offset Overlay offset from the horizontal center.\n         */\n        GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.left(offset);\n            this._justifyContent = 'center';\n            return this;\n        };\n        /**\n         * Centers the overlay vertically with an optional offset.\n         * Clears any previously set vertical position.\n         *\n         * @param offset Overlay offset from the vertical center.\n         */\n        GlobalPositionStrategy.prototype.centerVertically = function (offset) {\n            if (offset === void 0) { offset = ''; }\n            this.top(offset);\n            this._alignItems = 'center';\n            return this;\n        };\n        /**\n         * Apply the position to the element.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.apply = function () {\n            // Since the overlay ref applies the strategy asynchronously, it could\n            // have been disposed before it ends up being applied. If that is the\n            // case, we shouldn't do anything.\n            if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parentStyles = this._overlayRef.hostElement.style;\n            var config = this._overlayRef.getConfig();\n            var width = config.width, height = config.height, maxWidth = config.maxWidth, maxHeight = config.maxHeight;\n            var shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n                (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n            var shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n                (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n            styles.position = this._cssPosition;\n            styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n            styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n            styles.marginBottom = this._bottomOffset;\n            styles.marginRight = this._rightOffset;\n            if (shouldBeFlushHorizontally) {\n                parentStyles.justifyContent = 'flex-start';\n            }\n            else if (this._justifyContent === 'center') {\n                parentStyles.justifyContent = 'center';\n            }\n            else if (this._overlayRef.getConfig().direction === 'rtl') {\n                // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n                // don't want that because our positioning is explicitly `left` and `right`, hence\n                // why we do another inversion to ensure that the overlay stays in the same position.\n                // TODO: reconsider this if we add `start` and `end` methods.\n                if (this._justifyContent === 'flex-start') {\n                    parentStyles.justifyContent = 'flex-end';\n                }\n                else if (this._justifyContent === 'flex-end') {\n                    parentStyles.justifyContent = 'flex-start';\n                }\n            }\n            else {\n                parentStyles.justifyContent = this._justifyContent;\n            }\n            parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n        };\n        /**\n         * Cleans up the DOM changes from the position strategy.\n         * @docs-private\n         */\n        GlobalPositionStrategy.prototype.dispose = function () {\n            if (this._isDisposed || !this._overlayRef) {\n                return;\n            }\n            var styles = this._overlayRef.overlayElement.style;\n            var parent = this._overlayRef.hostElement;\n            var parentStyles = parent.style;\n            parent.classList.remove(wrapperClass);\n            parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n                styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n            this._overlayRef = null;\n            this._isDisposed = true;\n        };\n        return GlobalPositionStrategy;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Builder for overlay position strategy. */\n    var OverlayPositionBuilder = /** @class */ (function () {\n        function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n        }\n        /**\n         * Creates a global position strategy.\n         */\n        OverlayPositionBuilder.prototype.global = function () {\n            return new GlobalPositionStrategy();\n        };\n        /**\n         * Creates a relative position strategy.\n         * @param elementRef\n         * @param originPos\n         * @param overlayPos\n         * @deprecated Use `flexibleConnectedTo` instead.\n         * @breaking-change 8.0.0\n         */\n        OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {\n            return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        /**\n         * Creates a flexible position strategy.\n         * @param origin Origin relative to which to position the overlay.\n         */\n        OverlayPositionBuilder.prototype.flexibleConnectedTo = function (origin) {\n            return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        };\n        OverlayPositionBuilder.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        OverlayPositionBuilder.ctorParameters = function () { return [\n            { type: i1.ViewportRuler },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i2.Platform },\n            { type: OverlayContainer }\n        ]; };\n        OverlayPositionBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform), i0.ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n        return OverlayPositionBuilder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Next overlay unique ID. */\n    var nextUniqueId = 0;\n    // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n    // which needs to be different depending on where OverlayModule is imported.\n    /**\n     * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n     * used as a low-level building block for other components. Dialogs, tooltips, menus,\n     * selects, etc. can all be built using overlays. The service should primarily be used by authors\n     * of re-usable components rather than developers building end-user applications.\n     *\n     * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n     */\n    var Overlay = /** @class */ (function () {\n        function Overlay(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            this.scrollStrategies = scrollStrategies;\n            this._overlayContainer = _overlayContainer;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._positionBuilder = _positionBuilder;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._injector = _injector;\n            this._ngZone = _ngZone;\n            this._document = _document;\n            this._directionality = _directionality;\n            this._location = _location;\n        }\n        /**\n         * Creates an overlay.\n         * @param config Configuration applied to the overlay.\n         * @returns Reference to the created overlay.\n         */\n        Overlay.prototype.create = function (config) {\n            var host = this._createHostElement();\n            var pane = this._createPaneElement(host);\n            var portalOutlet = this._createPortalOutlet(pane);\n            var overlayConfig = new OverlayConfig(config);\n            overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n            return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n        };\n        /**\n         * Gets a position builder that can be used, via fluent API,\n         * to construct and configure a position strategy.\n         * @returns An overlay position builder.\n         */\n        Overlay.prototype.position = function () {\n            return this._positionBuilder;\n        };\n        /**\n         * Creates the DOM element for an overlay and appends it to the overlay container.\n         * @returns Newly-created pane element\n         */\n        Overlay.prototype._createPaneElement = function (host) {\n            var pane = this._document.createElement('div');\n            pane.id = \"cdk-overlay-\" + nextUniqueId++;\n            pane.classList.add('cdk-overlay-pane');\n            host.appendChild(pane);\n            return pane;\n        };\n        /**\n         * Creates the host element that wraps around an overlay\n         * and can be used for advanced positioning.\n         * @returns Newly-create host element.\n         */\n        Overlay.prototype._createHostElement = function () {\n            var host = this._document.createElement('div');\n            this._overlayContainer.getContainerElement().appendChild(host);\n            return host;\n        };\n        /**\n         * Create a DomPortalOutlet into which the overlay content can be loaded.\n         * @param pane The DOM element to turn into a portal outlet.\n         * @returns A portal outlet for the given DOM element.\n         */\n        Overlay.prototype._createPortalOutlet = function (pane) {\n            // We have to resolve the ApplicationRef later in order to allow people\n            // to use overlay-based providers during app initialization.\n            if (!this._appRef) {\n                this._appRef = this._injector.get(i0.ApplicationRef);\n            }\n            return new portal.DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n        };\n        Overlay.decorators = [\n            { type: i0.Injectable }\n        ];\n        /** @nocollapse */\n        Overlay.ctorParameters = function () { return [\n            { type: ScrollStrategyOptions },\n            { type: OverlayContainer },\n            { type: i0.ComponentFactoryResolver },\n            { type: OverlayPositionBuilder },\n            { type: OverlayKeyboardDispatcher },\n            { type: i0.Injector },\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: bidi.Directionality },\n            { type: i1$1.Location, decorators: [{ type: i0.Optional }] }\n        ]; };\n        return Overlay;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n    var defaultPositionList = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom'\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top'\n        }\n    ];\n    /** Injection token that determines the scroll handling while the connected overlay is open. */\n    var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new i0.InjectionToken('cdk-connected-overlay-scroll-strategy');\n    /** @docs-private @deprecated @breaking-change 8.0.0 */\n    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function (config) { return overlay.scrollStrategies.reposition(config); };\n    }\n    /**\n     * Directive applied to an element to make it usable as an origin for an Overlay using a\n     * ConnectedPositionStrategy.\n     */\n    var CdkOverlayOrigin = /** @class */ (function () {\n        function CdkOverlayOrigin(\n        /** Reference to the element on which the directive is applied. */\n        elementRef) {\n            this.elementRef = elementRef;\n        }\n        CdkOverlayOrigin.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                        exportAs: 'cdkOverlayOrigin',\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkOverlayOrigin.ctorParameters = function () { return [\n            { type: i0.ElementRef }\n        ]; };\n        return CdkOverlayOrigin;\n    }());\n    /**\n     * Directive to facilitate declarative creation of an\n     * Overlay using a FlexibleConnectedPositionStrategy.\n     */\n    var CdkConnectedOverlay = /** @class */ (function () {\n        // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n        function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n            this._overlay = _overlay;\n            this._dir = _dir;\n            this._hasBackdrop = false;\n            this._lockPosition = false;\n            this._growAfterOpen = false;\n            this._flexibleDimensions = false;\n            this._push = false;\n            this._backdropSubscription = rxjs.Subscription.EMPTY;\n            /** Margin between the overlay and the viewport edges. */\n            this.viewportMargin = 0;\n            /** Whether the overlay is open. */\n            this.open = false;\n            /** Event emitted when the backdrop is clicked. */\n            this.backdropClick = new i0.EventEmitter();\n            /** Event emitted when the position has changed. */\n            this.positionChange = new i0.EventEmitter();\n            /** Event emitted when the overlay has been attached. */\n            this.attach = new i0.EventEmitter();\n            /** Event emitted when the overlay has been detached. */\n            this.detach = new i0.EventEmitter();\n            /** Emits when there are keyboard events that are targeted at the overlay. */\n            this.overlayKeydown = new i0.EventEmitter();\n            this._templatePortal = new portal.TemplatePortal(templateRef, viewContainerRef);\n            this._scrollStrategyFactory = scrollStrategyFactory;\n            this.scrollStrategy = this._scrollStrategyFactory();\n        }\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n            /** The offset in pixels for the overlay connection point on the x-axis */\n            get: function () { return this._offsetX; },\n            set: function (offsetX) {\n                this._offsetX = offsetX;\n                if (this._position) {\n                    this._updatePositionStrategy(this._position);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n            /** The offset in pixels for the overlay connection point on the y-axis */\n            get: function () { return this._offsetY; },\n            set: function (offsetY) {\n                this._offsetY = offsetY;\n                if (this._position) {\n                    this._updatePositionStrategy(this._position);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n            /** Whether or not the overlay should attach a backdrop. */\n            get: function () { return this._hasBackdrop; },\n            set: function (value) { this._hasBackdrop = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n            /** Whether or not the overlay should be locked when scrolling. */\n            get: function () { return this._lockPosition; },\n            set: function (value) { this._lockPosition = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n            /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n            get: function () { return this._flexibleDimensions; },\n            set: function (value) {\n                this._flexibleDimensions = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n            /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n            get: function () { return this._growAfterOpen; },\n            set: function (value) { this._growAfterOpen = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n            /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n            get: function () { return this._push; },\n            set: function (value) { this._push = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n            /** The associated overlay reference. */\n            get: function () {\n                return this._overlayRef;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n            /** The element's layout direction. */\n            get: function () {\n                return this._dir ? this._dir.value : 'ltr';\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkConnectedOverlay.prototype.ngOnDestroy = function () {\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n            }\n            this._backdropSubscription.unsubscribe();\n        };\n        CdkConnectedOverlay.prototype.ngOnChanges = function (changes) {\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n                this._overlayRef.updateSize({\n                    width: this.width,\n                    minWidth: this.minWidth,\n                    height: this.height,\n                    minHeight: this.minHeight,\n                });\n                if (changes['origin'] && this.open) {\n                    this._position.apply();\n                }\n            }\n            if (changes['open']) {\n                this.open ? this._attachOverlay() : this._detachOverlay();\n            }\n        };\n        /** Creates an overlay */\n        CdkConnectedOverlay.prototype._createOverlay = function () {\n            var _this = this;\n            if (!this.positions || !this.positions.length) {\n                this.positions = defaultPositionList;\n            }\n            this._overlayRef = this._overlay.create(this._buildConfig());\n            this._overlayRef.keydownEvents().subscribe(function (event) {\n                _this.overlayKeydown.next(event);\n                if (event.keyCode === keycodes.ESCAPE && !keycodes.hasModifierKey(event)) {\n                    event.preventDefault();\n                    _this._detachOverlay();\n                }\n            });\n        };\n        /** Builds the overlay config based on the directive's inputs */\n        CdkConnectedOverlay.prototype._buildConfig = function () {\n            var positionStrategy = this._position =\n                this.positionStrategy || this._createPositionStrategy();\n            var overlayConfig = new OverlayConfig({\n                direction: this._dir,\n                positionStrategy: positionStrategy,\n                scrollStrategy: this.scrollStrategy,\n                hasBackdrop: this.hasBackdrop\n            });\n            if (this.width || this.width === 0) {\n                overlayConfig.width = this.width;\n            }\n            if (this.height || this.height === 0) {\n                overlayConfig.height = this.height;\n            }\n            if (this.minWidth || this.minWidth === 0) {\n                overlayConfig.minWidth = this.minWidth;\n            }\n            if (this.minHeight || this.minHeight === 0) {\n                overlayConfig.minHeight = this.minHeight;\n            }\n            if (this.backdropClass) {\n                overlayConfig.backdropClass = this.backdropClass;\n            }\n            if (this.panelClass) {\n                overlayConfig.panelClass = this.panelClass;\n            }\n            return overlayConfig;\n        };\n        /** Updates the state of a position strategy, based on the values of the directive inputs. */\n        CdkConnectedOverlay.prototype._updatePositionStrategy = function (positionStrategy) {\n            var _this = this;\n            var positions = this.positions.map(function (currentPosition) { return ({\n                originX: currentPosition.originX,\n                originY: currentPosition.originY,\n                overlayX: currentPosition.overlayX,\n                overlayY: currentPosition.overlayY,\n                offsetX: currentPosition.offsetX || _this.offsetX,\n                offsetY: currentPosition.offsetY || _this.offsetY,\n                panelClass: currentPosition.panelClass || undefined,\n            }); });\n            return positionStrategy\n                .setOrigin(this.origin.elementRef)\n                .withPositions(positions)\n                .withFlexibleDimensions(this.flexibleDimensions)\n                .withPush(this.push)\n                .withGrowAfterOpen(this.growAfterOpen)\n                .withViewportMargin(this.viewportMargin)\n                .withLockedPosition(this.lockPosition)\n                .withTransformOriginOn(this.transformOriginSelector);\n        };\n        /** Returns the position strategy of the overlay to be set on the overlay config */\n        CdkConnectedOverlay.prototype._createPositionStrategy = function () {\n            var _this = this;\n            var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n            this._updatePositionStrategy(strategy);\n            strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n            return strategy;\n        };\n        /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n        CdkConnectedOverlay.prototype._attachOverlay = function () {\n            var _this = this;\n            if (!this._overlayRef) {\n                this._createOverlay();\n            }\n            else {\n                // Update the overlay size, in case the directive's inputs have changed\n                this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n            }\n            if (!this._overlayRef.hasAttached()) {\n                this._overlayRef.attach(this._templatePortal);\n                this.attach.emit();\n            }\n            if (this.hasBackdrop) {\n                this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                    _this.backdropClick.emit(event);\n                });\n            }\n            else {\n                this._backdropSubscription.unsubscribe();\n            }\n        };\n        /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n        CdkConnectedOverlay.prototype._detachOverlay = function () {\n            if (this._overlayRef) {\n                this._overlayRef.detach();\n                this.detach.emit();\n            }\n            this._backdropSubscription.unsubscribe();\n        };\n        CdkConnectedOverlay.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                        exportAs: 'cdkConnectedOverlay'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkConnectedOverlay.ctorParameters = function () { return [\n            { type: Overlay },\n            { type: i0.TemplateRef },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] }\n        ]; };\n        CdkConnectedOverlay.propDecorators = {\n            origin: [{ type: i0.Input, args: ['cdkConnectedOverlayOrigin',] }],\n            positions: [{ type: i0.Input, args: ['cdkConnectedOverlayPositions',] }],\n            positionStrategy: [{ type: i0.Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n            offsetX: [{ type: i0.Input, args: ['cdkConnectedOverlayOffsetX',] }],\n            offsetY: [{ type: i0.Input, args: ['cdkConnectedOverlayOffsetY',] }],\n            width: [{ type: i0.Input, args: ['cdkConnectedOverlayWidth',] }],\n            height: [{ type: i0.Input, args: ['cdkConnectedOverlayHeight',] }],\n            minWidth: [{ type: i0.Input, args: ['cdkConnectedOverlayMinWidth',] }],\n            minHeight: [{ type: i0.Input, args: ['cdkConnectedOverlayMinHeight',] }],\n            backdropClass: [{ type: i0.Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n            panelClass: [{ type: i0.Input, args: ['cdkConnectedOverlayPanelClass',] }],\n            viewportMargin: [{ type: i0.Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n            scrollStrategy: [{ type: i0.Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n            open: [{ type: i0.Input, args: ['cdkConnectedOverlayOpen',] }],\n            transformOriginSelector: [{ type: i0.Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n            hasBackdrop: [{ type: i0.Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n            lockPosition: [{ type: i0.Input, args: ['cdkConnectedOverlayLockPosition',] }],\n            flexibleDimensions: [{ type: i0.Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n            growAfterOpen: [{ type: i0.Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n            push: [{ type: i0.Input, args: ['cdkConnectedOverlayPush',] }],\n            backdropClick: [{ type: i0.Output }],\n            positionChange: [{ type: i0.Output }],\n            attach: [{ type: i0.Output }],\n            detach: [{ type: i0.Output }],\n            overlayKeydown: [{ type: i0.Output }]\n        };\n        return CdkConnectedOverlay;\n    }());\n    /** @docs-private */\n    function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition(); };\n    }\n    /** @docs-private */\n    var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n        provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n        deps: [Overlay],\n        useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var OverlayModule = /** @class */ (function () {\n        function OverlayModule() {\n        }\n        OverlayModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [bidi.BidiModule, portal.PortalModule, i1.ScrollingModule],\n                        exports: [CdkConnectedOverlay, CdkOverlayOrigin, i1.ScrollingModule],\n                        declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                        providers: [\n                            Overlay,\n                            CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                        ],\n                    },] }\n        ];\n        return OverlayModule;\n    }());\n    /**\n     * @deprecated Use `OverlayModule` instead.\n     * @breaking-change 8.0.0\n     * @docs-private\n     */\n    var OVERLAY_PROVIDERS = [\n        Overlay,\n        OverlayPositionBuilder,\n        OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n        OVERLAY_CONTAINER_PROVIDER,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ];\n\n    /**\n     * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n     * Fullscreen mode\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n     *\n     * Should be provided in the root component.\n     */\n    var FullscreenOverlayContainer = /** @class */ (function (_super) {\n        tslib.__extends(FullscreenOverlayContainer, _super);\n        function FullscreenOverlayContainer(_document, \n        /**\n         * @deprecated `platform` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        platform) {\n            return _super.call(this, _document, platform) || this;\n        }\n        FullscreenOverlayContainer.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            if (this._fullScreenEventName && this._fullScreenListener) {\n                this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n            }\n        };\n        FullscreenOverlayContainer.prototype._createContainer = function () {\n            var _this = this;\n            _super.prototype._createContainer.call(this);\n            this._adjustParentForFullscreenChange();\n            this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n        };\n        FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = function () {\n            if (!this._containerElement) {\n                return;\n            }\n            var fullscreenElement = this.getFullscreenElement();\n            var parent = fullscreenElement || this._document.body;\n            parent.appendChild(this._containerElement);\n        };\n        FullscreenOverlayContainer.prototype._addFullscreenChangeListener = function (fn) {\n            var eventName = this._getEventName();\n            if (eventName) {\n                if (this._fullScreenListener) {\n                    this._document.removeEventListener(eventName, this._fullScreenListener);\n                }\n                this._document.addEventListener(eventName, fn);\n                this._fullScreenListener = fn;\n            }\n        };\n        FullscreenOverlayContainer.prototype._getEventName = function () {\n            if (!this._fullScreenEventName) {\n                var _document = this._document;\n                if (_document.fullscreenEnabled) {\n                    this._fullScreenEventName = 'fullscreenchange';\n                }\n                else if (_document.webkitFullscreenEnabled) {\n                    this._fullScreenEventName = 'webkitfullscreenchange';\n                }\n                else if (_document.mozFullScreenEnabled) {\n                    this._fullScreenEventName = 'mozfullscreenchange';\n                }\n                else if (_document.msFullscreenEnabled) {\n                    this._fullScreenEventName = 'MSFullscreenChange';\n                }\n            }\n            return this._fullScreenEventName;\n        };\n        /**\n         * When the page is put into fullscreen mode, a specific element is specified.\n         * Only that element and its children are visible when in fullscreen mode.\n         */\n        FullscreenOverlayContainer.prototype.getFullscreenElement = function () {\n            var _document = this._document;\n            return _document.fullscreenElement ||\n                _document.webkitFullscreenElement ||\n                _document.mozFullScreenElement ||\n                _document.msFullscreenElement ||\n                null;\n        };\n        FullscreenOverlayContainer.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        FullscreenOverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1$1.DOCUMENT,] }] },\n            { type: i2.Platform }\n        ]; };\n        FullscreenOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(i0.ɵɵinject(i1$1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n        return FullscreenOverlayContainer;\n    }(OverlayContainer));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    Object.defineProperty(exports, 'CdkScrollable', {\n        enumerable: true,\n        get: function () {\n            return i1.CdkScrollable;\n        }\n    });\n    Object.defineProperty(exports, 'ScrollDispatcher', {\n        enumerable: true,\n        get: function () {\n            return i1.ScrollDispatcher;\n        }\n    });\n    Object.defineProperty(exports, 'ViewportRuler', {\n        enumerable: true,\n        get: function () {\n            return i1.ViewportRuler;\n        }\n    });\n    exports.BlockScrollStrategy = BlockScrollStrategy;\n    exports.CdkConnectedOverlay = CdkConnectedOverlay;\n    exports.CdkOverlayOrigin = CdkOverlayOrigin;\n    exports.CloseScrollStrategy = CloseScrollStrategy;\n    exports.ConnectedOverlayPositionChange = ConnectedOverlayPositionChange;\n    exports.ConnectedPositionStrategy = ConnectedPositionStrategy;\n    exports.ConnectionPositionPair = ConnectionPositionPair;\n    exports.FlexibleConnectedPositionStrategy = FlexibleConnectedPositionStrategy;\n    exports.FullscreenOverlayContainer = FullscreenOverlayContainer;\n    exports.GlobalPositionStrategy = GlobalPositionStrategy;\n    exports.NoopScrollStrategy = NoopScrollStrategy;\n    exports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;\n    exports.Overlay = Overlay;\n    exports.OverlayConfig = OverlayConfig;\n    exports.OverlayContainer = OverlayContainer;\n    exports.OverlayKeyboardDispatcher = OverlayKeyboardDispatcher;\n    exports.OverlayModule = OverlayModule;\n    exports.OverlayPositionBuilder = OverlayPositionBuilder;\n    exports.OverlayRef = OverlayRef;\n    exports.RepositionScrollStrategy = RepositionScrollStrategy;\n    exports.ScrollStrategyOptions = ScrollStrategyOptions;\n    exports.ScrollingVisibility = ScrollingVisibility;\n    exports.validateHorizontalPosition = validateHorizontalPosition;\n    exports.validateVerticalPosition = validateVerticalPosition;\n    exports.ɵangular_material_src_cdk_overlay_overlay_a = OVERLAY_CONTAINER_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_b = OVERLAY_CONTAINER_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_c = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_d = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_e = CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER;\n    exports.ɵangular_material_src_cdk_overlay_overlay_f = OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY;\n    exports.ɵangular_material_src_cdk_overlay_overlay_g = OVERLAY_KEYBOARD_DISPATCHER_PROVIDER;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-overlay.umd.js.map\n"]}
{"version":3,"sources":["src/cdk/cdk-drag-drop.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","dragDrop","core","common","scrolling","platform","coercion","rxjs","operators","tslib","bidi","this","i0","i1","i2","tslib_1","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_this","_passiveTransform","x","y","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","pointerPosition","distance","_getDragDistance","delta","_pointerDirectionDelta","_getPointerPositionOnPage","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","registerDragItem","Object","defineProperty","prototype","get","set","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","forEach","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","removeElement","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","_nextSibling","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","position","setFreeDragPosition","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","parentNode","replaceChild","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","_initialContainer","pointerMove","pointerUp","scroll","pipe","startWith","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","insertBefore","currentIndex","getItemIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","getRootNode","elementRect","deepCloneNode","left","top","pointerEvents","margin","zIndex","classList","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","sortingDisabled","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_handleScroll","_updateAfterScroll","scrollTop","scrollLeft","_startScrollInterval","interval","animationFrameScheduler","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","nativeNode","_shadowRoot","getShadowRoot","_supportsShadowDom","ShadowRoot","registerDropContainer","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","push","_cacheItemPositions","_reset","withItems","items","connectedTo","slice","withOrientation","orientation","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","__read","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","_clientRect","_b","getViewportSize","window","_cacheOwnPosition","getMutableClientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","isInsideClientRect","_canReceive","elementFromPoint","nativeElement","activeSiblings","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","startsWith","upEvent","e","options","config","_clearGlobalListeners","ngOnDestroy","instance","decorators","Injectable","args","providedIn","ctorParameters","NgZone","Inject","DOCUMENT","ngInjectableDef","ɵɵdefineInjectable","DragDropRegistry_Factory","ɵɵinject","token","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","DragDrop_Factory","CDK_DRAG_PARENT","InjectionToken","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","Directive","selector","host","class","ElementRef","Optional","propDecorators","Input","CdkDragPlaceholder","templateRef","TemplateRef","data","CdkDragPreview","CDK_DROP_LIST","CDK_DRAG_CONFIG","CDK_DRAG_CONFIG_FACTORY","CdkDrag","dropContainer","_viewContainerRef","_dir","_changeDetectorRef","_destroyed","EventEmitter","Observable","observer","subscription","_dragRef","movedEvent","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","changes","tap","childHandleElements","filter","switchMap","merge","apply","__spread","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","_getBoundaryElement","boundary","isDevMode","ref","dir","coerceNumberProperty","emit","markForCheck","exportAs","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","Directionality","ChangeDetectorRef","ContentChildren","descendants","ContentChild","static","Output","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","id","_sortingDisabled","_dropListRef","_dropLists","ngAfterContentInit","coerceArray","list","useValue","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","DragDropModule","NgModule","declarations","ɵangular_material_src_cdk_drag_drop_drag_drop_b","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,iBAAkBA,QAAQ,mBAAoBA,QAAQ,0BAA2BA,QAAQ,yBAA0BA,QAAQ,yBAA0BA,QAAQ,QAASA,QAAQ,kBAAmBA,QAAQ,SAAUA,QAAQ,sBACjS,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,yBAA0B,CAAC,UAAW,gBAAiB,kBAAmB,yBAA0B,wBAAyB,wBAAyB,OAAQ,iBAAkB,QAAS,qBAAsBJ,GACzOA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,IAAMT,EAAOQ,GAAGC,KAAO,GAAIT,EAAOQ,GAAGC,IAAIC,SAAW,IAAKV,EAAOQ,GAAGG,KAAMX,EAAOQ,GAAGI,OAAQZ,EAAOQ,GAAGC,IAAII,UAAWb,EAAOQ,GAAGC,IAAIK,SAAUd,EAAOQ,GAAGC,IAAIM,SAAUf,EAAOgB,KAAMhB,EAAOgB,KAAKC,UAAWjB,EAAOkB,MAAOlB,EAAOQ,GAAGC,IAAIU,MAHlT,CAIEC,KAAM,SAAUlB,EAASmB,EAAIC,EAAIC,EAAIT,EAAUC,EAAUC,EAAMC,EAAWO,EAASL,GAAQ;;;;;;;OAazF,SAASM,EAAaC,EAAMC,GACxB,IAAK,IAAIC,KAAOD,EACRA,EAAOE,eAAeD,KACtBF,EAAKE,GAAOD,EAAOC,IAG3B,OAAOF,EAQX,SAASI,EAA6BC,EAASC,GAC3C,IAAIC,EAAaD,EAAS,GAAK,OAC/BP,EAAaM,EAAQG,MAAO,CACxBC,YAAaH,EAAS,GAAK,OAC3BI,eAAgBJ,EAAS,GAAK,OAC9BK,wBAAyBL,EAAS,GAAK,cACvCC,WAAYA,EACZK,aAAcL,EACdM,iBAAkBN,EAClBO,cAAeP;;;;;;;OAYvB,SAASQ,EAAsBC,GAE3B,IAAIC,EAAaD,EAAME,cAAcC,QAAQ,OAAS,EAAI,EAAI,IAC9D,OAAOC,WAAWJ,GAASC,EAoB/B,SAASI,EAAsBC,EAAeC,GAE1C,OADYD,EAAcE,iBAAiBD,GAC9BE,MAAM,KAAKC,IAAI,SAAUC,GAAQ,OAAOA,EAAKC;;;;;;;OAW9D,IAAIC,EAA8BzC,EAAS0C,gCAAgC,CAAEC,SAAS,IAElFC,EAA6B5C,EAAS0C,gCAAgC,CAAEC,SAAS,IAYjFE,EAAyB,WACzB,SAASA,EAAQ5B,EAAS6B,EAASC,EAAWC,EAASC,EAAgBC,GACnE,IAAIC,EAAQ7C,KACZA,KAAKwC,QAAUA,EACfxC,KAAKyC,UAAYA,EACjBzC,KAAK0C,QAAUA,EACf1C,KAAK2C,eAAiBA,EACtB3C,KAAK4C,kBAAoBA,EAOzB5C,KAAK8C,kBAAoB,CAAEC,EAAG,EAAGC,EAAG,GAEpChD,KAAKiD,iBAAmB,CAAEF,EAAG,EAAGC,EAAG,GAEnChD,KAAKkD,YAAc,IAAItD,EAAKuD,QAE5BnD,KAAKoD,yBAA2BxD,EAAKyD,aAAaC,MAElDtD,KAAKuD,uBAAyB3D,EAAKyD,aAAaC,MAEhDtD,KAAKwD,oBAAsB5D,EAAKyD,aAAaC,MAE7CtD,KAAKyD,oBAAsB7D,EAAKyD,aAAaC,MAE7CtD,KAAK0D,iBAAmB,KAExB1D,KAAK2D,4BAA6B,EAElC3D,KAAK4D,SAAW,GAEhB5D,KAAK6D,iBAAmB,IAAIC,IAE5B9D,KAAK+D,WAAa,MAKlB/D,KAAKgE,eAAiB,EACtBhE,KAAKiE,WAAY,EAEjBjE,KAAKkE,cAAgB,IAAItE,EAAKuD,QAE9BnD,KAAKmE,QAAU,IAAIvE,EAAKuD,QAExBnD,KAAKoE,SAAW,IAAIxE,EAAKuD,QAEzBnD,KAAKqE,MAAQ,IAAIzE,EAAKuD,QAEtBnD,KAAKsE,QAAU,IAAI1E,EAAKuD,QAExBnD,KAAKuE,OAAS,IAAI3E,EAAKuD,QAEvBnD,KAAKwE,QAAU,IAAI5E,EAAKuD,QAKxBnD,KAAKyE,MAAQzE,KAAKkD,YAAYwB,eAE9B1E,KAAK2E,aAAe,SAAUC,GAG1B,GAFA/B,EAAMqB,cAAcW,OAEhBhC,EAAMe,SAASkB,OAAQ,CACvB,IAAIC,EAAelC,EAAMe,SAASoB,KAAK,SAAUC,GAC7C,IAAIC,EAASN,EAAMM,OACnB,QAASA,IAAWA,IAAWD,GAAUA,EAAOE,SAASD,OAEzDH,GAAiBlC,EAAMgB,iBAAiBuB,IAAIL,IAAkBlC,EAAMwC,UACpExC,EAAMyC,wBAAwBP,EAAcH,QAG1C/B,EAAMwC,UACZxC,EAAMyC,wBAAwBzC,EAAM0C,aAAcX,IAI1D5E,KAAKwF,aAAe,SAAUZ,GAC1B,GAAK/B,EAAM4C,oBAAX,CA0BI5C,EAAMa,mBAGDb,EAAM6C,eAAkB7C,EAAM6C,aAAaC,OAAU9C,EAAM6C,aAAaE,UACzE/C,EAAM6C,cAAgB7C,EAAMgD,UAAYhD,EAAM0C,cAAcO,0BAGpE,IAAIC,EAA6BlD,EAAMmD,+BAA+BpB,GAItE,GAHA/B,EAAMoD,WAAY,EAClBrB,EAAMsB,iBACNrD,EAAMsD,6BAA6BJ,GAC/BlD,EAAMuD,eACNvD,EAAMwD,2BAA2BN,OAEhC,CACD,IAAIO,EAAkBzD,EAAMI,iBAC5BqD,EAAgBvD,EACZgD,EAA2BhD,EAAIF,EAAM0D,sBAAsBxD,EAAIF,EAAMC,kBAAkBC,EAC3FuD,EAAgBtD,EACZ+C,EAA2B/C,EAAIH,EAAM0D,sBAAsBvD,EAAIH,EAAMC,kBAAkBE,EAC3FH,EAAM2D,2BAA2BF,EAAgBvD,EAAGuD,EAAgBtD,GAE1C,oBAAfyD,YAA8B5D,EAAM0C,wBAAwBkB,YAEnE5D,EAAM0C,aAAamB,aAAa,YADT,aAAeJ,EAAgBvD,EAAI,IAAMuD,EAAgBtD,EAAI,KAOxFH,EAAMK,YAAYyD,UAAU7B,QAC5BjC,EAAMH,QAAQkE,IAAI,WACd/D,EAAMK,YAAY2B,KAAK,CACnBtE,OAAQsC,EACRgE,gBAAiBd,EACjBnB,MAAOA,EACPkC,SAAUjE,EAAMkE,iBAAiBhB,GACjCiB,MAAOnE,EAAMoE,+BA/DzB,CACI,IAAIJ,EAAkBhE,EAAMqE,0BAA0BtC,GAQtD,GAPgBuC,KAAKC,IAAIP,EAAgB9D,EAAIF,EAAM0D,sBAAsBxD,GACzDoE,KAAKC,IAAIP,EAAgB7D,EAAIH,EAAM0D,sBAAsBvD,IAC1BH,EAAML,QAAQ6E,mBAKxC,CAEjB,KADqBC,KAAKC,OAAS1E,EAAM2E,eAAiB3E,EAAM4E,mBAAmB7C,IAG/E,YADA/B,EAAM6E,iBAAiB9C,GAMtB/B,EAAMuD,gBAAmBvD,EAAMuD,eAAeuB,eAC/C9E,EAAM4C,qBAAsB,EAC5B5C,EAAMH,QAAQkE,IAAI,WAAc,OAAO/D,EAAM+E,mBAAmBhD,SAiDhF5E,KAAK6H,WAAa,SAAUjD,GACxB/B,EAAM6E,iBAAiB9C,IAE3B5E,KAAK8H,gBAAgBnH,GACrBiC,EAAkBmF,iBAAiB/H,MAuqBvC,OArqBAgI,OAAOC,eAAe1F,EAAQ2F,UAAW,WAAY,CAEjDC,IAAK,WACD,OAAOnI,KAAKiE,cAAgBjE,KAAKoG,iBAAkBpG,KAAKoG,eAAef,WAE3E+C,IAAK,SAAU9G,GACX,IAAI+G,EAAW1I,EAAS2I,sBAAsBhH,GAC1C+G,IAAarI,KAAKiE,YAClBjE,KAAKiE,UAAYoE,EACjBrI,KAAKuI,kCAGbC,YAAY,EACZC,cAAc,IAMlBlG,EAAQ2F,UAAUQ,sBAAwB,WACtC,OAAO1I,KAAK2I,cAGhBpG,EAAQ2F,UAAUU,eAAiB,WAC/B,OAAO5I,KAAKuF,cAGhBhD,EAAQ2F,UAAUW,YAAc,SAAUC,GAItC,OAHA9I,KAAK4D,SAAWkF,EAAQ9G,IAAI,SAAUiD,GAAU,OAAOtF,EAASoJ,cAAc9D,KAC9EjF,KAAK4D,SAASoF,QAAQ,SAAU/D,GAAU,OAAOvE,EAA6BuE,GAAQ,KACtFjF,KAAKuI,gCACEvI,MAMXuC,EAAQ2F,UAAUe,oBAAsB,SAAUC,GAE9C,OADAlJ,KAAKmJ,iBAAmBD,EACjBlJ,MAMXuC,EAAQ2F,UAAUkB,wBAA0B,SAAUF,GAElD,OADAlJ,KAAKqJ,qBAAuBH,EACrBlJ,MAOXuC,EAAQ2F,UAAUJ,gBAAkB,SAAUwB,GAC1C,IAAI3I,EAAUhB,EAASoJ,cAAcO,GAUrC,OATI3I,IAAYX,KAAKuF,eACbvF,KAAKuF,cACLvF,KAAKuJ,4BAA4BvJ,KAAKuF,cAE1C5E,EAAQ6I,iBAAiB,YAAaxJ,KAAK2E,aAAcrC,GACzD3B,EAAQ6I,iBAAiB,aAAcxJ,KAAK2E,aAAcxC,GAC1DnC,KAAKyJ,uBAAoBC,EACzB1J,KAAKuF,aAAe5E,GAEjBX,MAKXuC,EAAQ2F,UAAUyB,oBAAsB,SAAUC,GAC9C,IAAI/G,EAAQ7C,KAQZ,OAPAA,KAAK0D,iBAAmBkG,EAAkBjK,EAASoJ,cAAca,GAAmB,KACpF5J,KAAKyD,oBAAoBoG,cACrBD,IACA5J,KAAKyD,oBAAsBzD,KAAK2C,eAC3BmH,OAAO,IACPC,UAAU,WAAc,OAAOlH,EAAMmH,oCAEvChK,MAGXuC,EAAQ2F,UAAU+B,QAAU,WACxBjK,KAAKuJ,4BAA4BvJ,KAAKuF,cAGlCvF,KAAK2H,cAGLuC,EAAclK,KAAKuF,cAEvBvF,KAAKmK,kBACLnK,KAAKoK,sBACLpK,KAAK4C,kBAAkByH,eAAerK,MACtCA,KAAKsK,uBACLtK,KAAKkE,cAAcqG,WACnBvK,KAAKmE,QAAQoG,WACbvK,KAAKoE,SAASmG,WACdvK,KAAKqE,MAAMkG,WACXvK,KAAKsE,QAAQiG,WACbvK,KAAKuE,OAAOgG,WACZvK,KAAKwE,QAAQ+F,WACbvK,KAAKkD,YAAYqH,WACjBvK,KAAK4D,SAAW,GAChB5D,KAAK6D,iBAAiB2G,QACtBxK,KAAKoG,oBAAiBsD,EACtB1J,KAAK0D,iBAAmB1D,KAAKuF,aAAevF,KAAKqJ,qBAC7CrJ,KAAKmJ,iBAAmBnJ,KAAKyK,aAAe,MAGpDlI,EAAQ2F,UAAUP,WAAa,WAC3B,OAAO3H,KAAKyF,qBAAuBzF,KAAK4C,kBAAkB+E,WAAW3H,OAGzEuC,EAAQ2F,UAAUwC,MAAQ,WACtB1K,KAAKuF,aAAazE,MAAM6J,UAAY3K,KAAKyJ,mBAAqB,GAC9DzJ,KAAKiD,iBAAmB,CAAEF,EAAG,EAAGC,EAAG,GACnChD,KAAK8C,kBAAoB,CAAEC,EAAG,EAAGC,EAAG,IAMxCT,EAAQ2F,UAAU0C,cAAgB,SAAU3F,GACpCjF,KAAK4D,SAASnC,QAAQwD,IAAW,GACjCjF,KAAK6D,iBAAiBgH,IAAI5F,IAOlC1C,EAAQ2F,UAAU4C,aAAe,SAAU7F,GACvCjF,KAAK6D,iBAAiBkH,OAAO9F,IAGjC1C,EAAQ2F,UAAU8C,cAAgB,SAAUC,GAExC,OADAjL,KAAK+D,WAAakH,EACXjL,MAGXuC,EAAQ2F,UAAUgD,mBAAqB,SAAUC,GAC7CnL,KAAKoG,eAAiB+E,GAK1B5I,EAAQ2F,UAAUkD,oBAAsB,WACpC,IAAIC,EAAWrL,KAAK2H,aAAe3H,KAAKiD,iBAAmBjD,KAAK8C,kBAChE,MAAO,CAAEC,EAAGsI,EAAStI,EAAGC,EAAGqI,EAASrI,IAMxCT,EAAQ2F,UAAUoD,oBAAsB,SAAUhK,GAO9C,OANAtB,KAAKiD,iBAAmB,CAAEF,EAAG,EAAGC,EAAG,GACnChD,KAAK8C,kBAAkBC,EAAIzB,EAAMyB,EACjC/C,KAAK8C,kBAAkBE,EAAI1B,EAAM0B,EAC5BhD,KAAKoG,gBACNpG,KAAKwG,2BAA2BlF,EAAMyB,EAAGzB,EAAM0B,GAE5ChD,MAGXuC,EAAQ2F,UAAUqD,6BAA+B,WAC7C,IAAIF,EAAWrL,KAAKwL,sCAChBH,GAAYrL,KAAKoG,gBACjBpG,KAAKqG,2BAA2BgF,IAIxC9I,EAAQ2F,UAAUoC,qBAAuB,WACrCtK,KAAKoD,yBAAyByG,cAC9B7J,KAAKuD,uBAAuBsG,cAC5B7J,KAAKwD,oBAAoBqG,eAG7BtH,EAAQ2F,UAAUiC,gBAAkB,WAC5BnK,KAAK6F,UACLqE,EAAclK,KAAK6F,UAEnB7F,KAAKyL,aACLzL,KAAKyL,YAAYC,UAErB1L,KAAK6F,SAAW7F,KAAKyL,YAAc,MAGvClJ,EAAQ2F,UAAUkC,oBAAsB,WAChCpK,KAAK2I,cACLuB,EAAclK,KAAK2I,cAEnB3I,KAAK2L,iBACL3L,KAAK2L,gBAAgBD,UAEzB1L,KAAK2I,aAAe3I,KAAK2L,gBAAkB,MAM/CpJ,EAAQ2F,UAAUR,iBAAmB,SAAU9C,GAC3C,IAAI/B,EAAQ7C,KAKPA,KAAK4C,kBAAkB+E,WAAW3H,QAGvCA,KAAKsK,uBACLtK,KAAK4C,kBAAkBgJ,aAAa5L,MACpCA,KAAKuI,gCACDvI,KAAK4D,WACL5D,KAAKuF,aAAazE,MAAMG,wBAA0BjB,KAAK6L,0BAEtD7L,KAAKyF,sBAGVzF,KAAKoE,SAASS,KAAK,CAAEtE,OAAQP,OACzBA,KAAKoG,gBAELpG,KAAKoG,eAAe0F,iBACpB9L,KAAK+L,+BAA+BC,KAAK,WACrCnJ,EAAMoJ,sBAAsBrH,GAC5B/B,EAAMqJ,2BACNrJ,EAAMD,kBAAkBgJ,aAAa/I,OAOzC7C,KAAK8C,kBAAkBC,EAAI/C,KAAKiD,iBAAiBF,EACjD/C,KAAK8C,kBAAkBE,EAAIhD,KAAKiD,iBAAiBD,EACjDhD,KAAK0C,QAAQkE,IAAI,WACb/D,EAAMwB,MAAMQ,KAAK,CACbtE,OAAQsC,EACRiE,SAAUjE,EAAMkE,iBAAiBlE,EAAMqE,0BAA0BtC,QAGzE5E,KAAKkM,2BACLlM,KAAK4C,kBAAkBgJ,aAAa5L,UAI5CuC,EAAQ2F,UAAUN,mBAAqB,SAAUhD,GAO7C,GALA5E,KAAKmE,QAAQU,KAAK,CAAEtE,OAAQP,OACxBmM,EAAavH,KACb5E,KAAKoM,oBAAsB9E,KAAKC,OAEpCvH,KAAKuI,gCACDvI,KAAKoG,eAAgB,CACrB,IAAIzF,EAAUX,KAAKuF,aAGnBvF,KAAKyK,aAAe9J,EAAQ0L,YAC5B,IAAIC,EAAUtM,KAAK6F,SAAW7F,KAAKuM,wBAC/BC,EAAcxM,KAAK2I,aAAe3I,KAAKyM,4BAI3C9L,EAAQG,MAAM4L,QAAU,OACxB1M,KAAKyC,UAAUkK,KAAKC,YAAYjM,EAAQkM,WAAWC,aAAaN,EAAa7L,IAqdzF,SAASoM,EAAyBC,GAI9B,OAAOA,EAAYC,mBACfD,EAAYE,yBACZF,EAAYG,sBACZH,EAAYI,qBACZJ,EAAYL,KA5dRI,CAAyB/M,KAAKyC,WAAWmK,YAAYN,GACrDtM,KAAKoG,eAAeiH,UAS5B9K,EAAQ2F,UAAU5C,wBAA0B,SAAUgI,EAAkB1I,GACpE,IAAI/B,EAAQ7C,KAIZ4E,EAAM2I,kBACN,IAAI5F,EAAa3H,KAAK2H,aAClB6F,EAAkBrB,EAAavH,GAC/B6I,GAA0BD,GAAoC,IAAjB5I,EAAM8I,OACnDpE,EAActJ,KAAKuF,aACnBoI,GAAoBH,GAAmBxN,KAAKoM,qBAC5CpM,KAAKoM,oBA/ba,IA+bmC9E,KAAKC,MAW9D,GAJI3C,EAAMM,QAAUN,EAAMM,OAAO0I,WAA4B,cAAfhJ,EAAMiJ,MAChDjJ,EAAMsB,mBAGNyB,GAAc8F,GAA0BE,GAA5C,CAMI3N,KAAK4D,SAASkB,SACd9E,KAAK6L,yBAA2BvC,EAAYxI,MAAMG,wBAClDqI,EAAYxI,MAAMG,wBAA0B,eAEhDjB,KAAKyF,oBAAsBzF,KAAKiG,WAAY,EAC5CjG,KAAK8N,kBAAoB9N,KAAKoG,eAG9BpG,KAAKsK,uBACLtK,KAAKoD,yBAA2BpD,KAAK4C,kBAAkBmL,YAAYhE,UAAU/J,KAAKwF,cAClFxF,KAAKuD,uBAAyBvD,KAAK4C,kBAAkBoL,UAAUjE,UAAU/J,KAAK6H,YAC9E7H,KAAKwD,oBAAsBxD,KAAK4C,kBAAkBqL,OAAOC,KAAKrO,EAAUsO,UAAU,OAAOpE,UAAU,WAC/FlH,EAAMuL,gBAAkBvL,EAAMF,eAAe0L,8BAE7CrO,KAAK0D,mBACL1D,KAAKsO,cAAgBtO,KAAK0D,iBAAiBoC,yBAI/C9F,KAAKuO,yBAA2BvO,KAAKmJ,kBAAoBnJ,KAAKmJ,iBAAiBD,SAC3E,CAAEnG,EAAG,EAAGC,EAAG,GACXhD,KAAKwO,6BAA6BlB,EAAkB1I,GACxD,IAAIiC,EAAkB7G,KAAKuG,sBAAwBvG,KAAKkH,0BAA0BtC,GAClF5E,KAAKiH,uBAAyB,CAAElE,EAAG,EAAGC,EAAG,GACzChD,KAAKwL,sCAAwC,CAAEzI,EAAG8D,EAAgB9D,EAAGC,EAAG6D,EAAgB7D,GACxFhD,KAAKwH,eAAiBF,KAAKC,MAC3BvH,KAAK4C,kBAAkB6L,cAAczO,KAAM4E,KAG/CrC,EAAQ2F,UAAU+D,sBAAwB,SAAUrH,GAChD,IAAI/B,EAAQ7C,KAKZA,KAAKuF,aAAazE,MAAM4L,QAAU,GAC9B1M,KAAKyK,aACLzK,KAAKyK,aAAaoC,WAAW6B,aAAa1O,KAAKuF,aAAcvF,KAAKyK,cAGlE9K,EAASoJ,cAAc/I,KAAK8N,kBAAkBnN,SAASiM,YAAY5M,KAAKuF,cAE5EvF,KAAKmK,kBACLnK,KAAKoK,sBACLpK,KAAKsO,cAAgBtO,KAAK0F,kBAAegE,EAEzC1J,KAAK0C,QAAQkE,IAAI,WACb,IAAIuE,EAAYtI,EAAMuD,eAClBuI,EAAexD,EAAUyD,aAAa/L,GACtCgE,EAAkBhE,EAAMqE,0BAA0BtC,GAClDkC,EAAWjE,EAAMkE,iBAAiBlE,EAAMqE,0BAA0BtC,IAClEiK,EAAyB1D,EAAU2D,iBAAiBjI,EAAgB9D,EAAG8D,EAAgB7D,GAC3FH,EAAMwB,MAAMQ,KAAK,CAAEtE,OAAQsC,EAAOiE,SAAUA,IAC5CjE,EAAM2B,QAAQK,KAAK,CACfkK,KAAMlM,EACN8L,aAAcA,EACdK,cAAenM,EAAMiL,kBAAkBc,aAAa/L,GACpDsI,UAAWA,EACX8D,kBAAmBpM,EAAMiL,kBACzBe,uBAAwBA,EACxB/H,SAAUA,IAEdqE,EAAU+D,KAAKrM,EAAO8L,EAAc9L,EAAMiL,kBAAmBe,EAAwB/H,GACrFjE,EAAMuD,eAAiBvD,EAAMiL,qBAOrCvL,EAAQ2F,UAAU7B,2BAA6B,SAAU8I,GACrD,IAAItM,EAAQ7C,KACR+C,EAAIoM,EAAGpM,EAAGC,EAAImM,EAAGnM,EAEjBoM,EAAepP,KAAK8N,kBAAkBuB,iCAAiCrP,KAAM+C,EAAGC,IAK/EoM,GAAgBpP,KAAKoG,iBAAmBpG,KAAK8N,mBAC9C9N,KAAK8N,kBAAkBgB,iBAAiB/L,EAAGC,KAC3CoM,EAAepP,KAAK8N,mBAEpBsB,GAAgBA,IAAiBpP,KAAKoG,gBACtCpG,KAAK0C,QAAQkE,IAAI,WAEb/D,EAAM0B,OAAOM,KAAK,CAAEkK,KAAMlM,EAAOsI,UAAWtI,EAAMuD,iBAClDvD,EAAMuD,eAAekJ,KAAKzM,GAE1BA,EAAMuD,eAAiBgJ,EACvBvM,EAAMuD,eAAemJ,MAAM1M,EAAOE,EAAGC,GACrCH,EAAMyB,QAAQO,KAAK,CACfkK,KAAMlM,EACNsI,UAAWiE,EACXT,aAAcS,EAAaR,aAAa/L,OAIpD7C,KAAKoG,eAAeoJ,2BAA2BzM,EAAGC,GAClDhD,KAAKoG,eAAeqJ,UAAUzP,KAAM+C,EAAGC,EAAGhD,KAAKiH,wBAC/CjH,KAAK6F,SAAS/E,MAAM6J,UAChB+E,EAAa3M,EAAI/C,KAAKuO,yBAAyBxL,EAAGC,EAAIhD,KAAKuO,yBAAyBvL,IAM5FT,EAAQ2F,UAAUqE,sBAAwB,WACtC,IAEID,EAFAqD,EAAgB3P,KAAKmJ,iBACrByG,EAAkBD,EAAgBA,EAAczG,SAAW,KAE/D,GAAI0G,EAAiB,CACjB,IAAIC,EAAUF,EAAcG,cAAcC,mBAAmBH,EAAiBD,EAAcK,SAC5F1D,EAAU2D,EAAYJ,EAAS7P,KAAKyC,WACpCzC,KAAKyL,YAAcoE,EACnBvD,EAAQxL,MAAM6J,UACV+E,EAAa1P,KAAKuG,sBAAsBxD,EAAG/C,KAAKuG,sBAAsBvD,OAEzE,CACD,IAAIrC,EAAUX,KAAKuF,aACf2K,EAAcvP,EAAQmF,yBAC1BwG,EAAU6D,EAAcxP,IAChBG,MAAM6E,MAAQuK,EAAYvK,MAAQ,KAC1C2G,EAAQxL,MAAM8E,OAASsK,EAAYtK,OAAS,KAC5C0G,EAAQxL,MAAM6J,UAAY+E,EAAaQ,EAAYE,KAAMF,EAAYG,KAgBzE,OAdAhQ,EAAaiM,EAAQxL,MAAO,CAGxBwP,cAAe,OAEfC,OAAQ,IACRlF,SAAU,QACVgF,IAAK,IACLD,KAAM,IACNI,OAAQ,SAEZ9P,EAA6B4L,GAAS,GACtCA,EAAQmE,UAAU5F,IAAI,oBACtByB,EAAQ5F,aAAa,MAAO1G,KAAK+D,YAC1BuI,GAMX/J,EAAQ2F,UAAU6D,6BAA+B,WAC7C,IAAIlJ,EAAQ7C,KAEZ,IAAKA,KAAKiG,UACN,OAAOyK,QAAQC,UAEnB,IAAIC,EAAkB5Q,KAAK2I,aAAa7C,wBAExC9F,KAAK6F,SAAS4K,UAAU5F,IAAI,sBAE5B7K,KAAK6F,SAAS/E,MAAM6J,UAAY+E,EAAakB,EAAgBR,KAAMQ,EAAgBP,KAKnF,IAAIQ,EAxpBZ,SAASC,EAAmCnQ,GACxC,IAAIiB,EAAgBmP,iBAAiBpQ,GACjCqQ,EAAyBrP,EAAsBC,EAAe,uBAC9DqP,EAAWD,EAAuBhM,KAAK,SAAUkM,GAAQ,MAAgB,cAATA,GAAiC,QAATA,IAE5F,IAAKD,EACD,OAAO,EAIX,IAAIE,EAAgBH,EAAuBvP,QAAQwP,GAC/CG,EAAezP,EAAsBC,EAAe,uBACpDyP,EAAY1P,EAAsBC,EAAe,oBACrD,OAAOP,EAAsB+P,EAAaD,IACtC9P,EAAsBgQ,EAAUF,IA0oBjBL,CAAmC9Q,KAAK6F,UACvD,OAAiB,IAAbgL,EACOH,QAAQC,UAEZ3Q,KAAK0C,QAAQ4O,kBAAkB,WAClC,OAAO,IAAIZ,QAAQ,SAAUC,GACzB,IAAIY,EAAU,SAAW3M,KAChBA,GAAUA,EAAMM,SAAWrC,EAAMgD,UAAmC,cAAvBjB,EAAM4M,gBACpD3O,EAAMgD,SAAS4L,oBAAoB,gBAAiBF,GACpDZ,IACAe,aAAaC,KAMjBA,EAAUC,WAAWL,EAAoB,IAAXV,GAClChO,EAAMgD,SAAS2D,iBAAiB,gBAAiB+H,QAK7DhP,EAAQ2F,UAAUuE,0BAA4B,WAC1C,IAEID,EAFAqF,EAAoB7R,KAAKqJ,qBACzByI,EAAsBD,EAAoBA,EAAkB3I,SAAW,KAU3E,OARI4I,GACA9R,KAAK2L,gBAAkBkG,EAAkB/B,cAAcC,mBAAmB+B,EAAqBD,EAAkB7B,SACjHxD,EAAcyD,EAAYjQ,KAAK2L,gBAAiB3L,KAAKyC,YAGrD+J,EAAc2D,EAAcnQ,KAAKuF,cAErCiH,EAAYiE,UAAU5F,IAAI,wBACnB2B,GAOXjK,EAAQ2F,UAAUsG,6BAA+B,SAAUlB,EAAkB1I,GACzE,IAAIsL,EAAclQ,KAAKuF,aAAaO,wBAChCiM,EAAgBzE,IAAqBtN,KAAKuF,aAAe,KAAO+H,EAChE0E,EAAgBD,EAAgBA,EAAcjM,wBAA0BoK,EACxE+B,EAAQ9F,EAAavH,GAASA,EAAMsN,cAAc,GAAKtN,EAG3D,MAAO,CACH7B,EAAGiP,EAAc5B,KAAOF,EAAYE,MAHhC6B,EAAME,MAAQH,EAAc5B,KAAOpQ,KAAKoO,gBAAgBgC,MAI5DpN,EAAGgP,EAAc3B,IAAMH,EAAYG,KAH/B4B,EAAMG,MAAQJ,EAAc3B,IAAMrQ,KAAKoO,gBAAgBiC,OAOnE9N,EAAQ2F,UAAUhB,0BAA4B,SAAUtC,GAEpD,IAAIqN,EAAQ9F,EAAavH,GAAUA,EAAMyN,QAAQ,IAAMzN,EAAM0N,eAAe,GAAM1N,EAClF,MAAO,CACH7B,EAAGkP,EAAME,MAAQnS,KAAKoO,gBAAgBgC,KACtCpN,EAAGiP,EAAMG,MAAQpS,KAAKoO,gBAAgBiC,MAI9C9N,EAAQ2F,UAAUlC,+BAAiC,SAAUpB,GACzD,IAAIqN,EAAQjS,KAAKkH,0BAA0BtC,GACvC2N,EAAmBvS,KAAKwS,kBAAoBxS,KAAKwS,kBAAkBP,EAAOjS,MAAQiS,EAClFQ,EAAoBzS,KAAKoG,eAAiBpG,KAAKoG,eAAesM,SAAW,KAO7E,GANsB,MAAlB1S,KAAK0S,UAA0C,MAAtBD,EACzBF,EAAiBvP,EAAIhD,KAAKuG,sBAAsBvD,EAEzB,MAAlBhD,KAAK0S,UAA0C,MAAtBD,IAC9BF,EAAiBxP,EAAI/C,KAAKuG,sBAAsBxD,GAEhD/C,KAAKsO,cAAe,CACpB,IAAIa,EAAKnP,KAAKuO,yBAA0BoE,EAAUxD,EAAGpM,EAAG6P,EAAUzD,EAAGnM,EACjE6P,EAAe7S,KAAKsO,cACpBwE,EAAc9S,KAAK0F,aACnBqN,EAAOF,EAAaxC,IAAMuC,EAC1BI,EAAOH,EAAaI,QAAUH,EAAYlN,OAASgN,GAGvDL,EAAiBxP,EAAImQ,EAAMX,EAAiBxP,EAFjC8P,EAAazC,KAAOuC,EACpBE,EAAaM,OAASL,EAAYnN,MAAQgN,IAErDJ,EAAiBvP,EAAIkQ,EAAMX,EAAiBvP,EAAG+P,EAAMC,GAEzD,OAAOT,GAGXhQ,EAAQ2F,UAAU/B,6BAA+B,SAAUiN,GACvD,IAAIrQ,EAAIqQ,EAAsBrQ,EAAGC,EAAIoQ,EAAsBpQ,EACvDgE,EAAQhH,KAAKiH,uBACboM,EAA0BrT,KAAKwL,sCAE/B8H,EAAUnM,KAAKC,IAAIrE,EAAIsQ,EAAwBtQ,GAC/CwQ,EAAUpM,KAAKC,IAAIpE,EAAIqQ,EAAwBrQ,GAanD,OARIsQ,EAAUtT,KAAKwC,QAAQgR,kCACvBxM,EAAMjE,EAAIA,EAAIsQ,EAAwBtQ,EAAI,GAAK,EAC/CsQ,EAAwBtQ,EAAIA,GAE5BwQ,EAAUvT,KAAKwC,QAAQgR,kCACvBxM,EAAMhE,EAAIA,EAAIqQ,EAAwBrQ,EAAI,GAAK,EAC/CqQ,EAAwBrQ,EAAIA,GAEzBgE,GAGXzE,EAAQ2F,UAAUK,8BAAgC,WAC9C,GAAKvI,KAAKuF,cAAiBvF,KAAK4D,SAAhC,CAGA,IAAI6P,EAAezT,KAAK4D,SAASkB,OAAS,IAAM9E,KAAK2H,aACjD8L,IAAiBzT,KAAK2D,6BACtB3D,KAAK2D,2BAA6B8P,EAClC/S,EAA6BV,KAAKuF,aAAckO,MAIxDlR,EAAQ2F,UAAUqB,4BAA8B,SAAU5I,GACtDA,EAAQ8Q,oBAAoB,YAAazR,KAAK2E,aAAcrC,GAC5D3B,EAAQ8Q,oBAAoB,aAAczR,KAAK2E,aAAcxC,IAOjEI,EAAQ2F,UAAU1B,2BAA6B,SAAUzD,EAAGC,GACxD,IAAI2H,EAAY+E,EAAa3M,EAAGC,GAGF,MAA1BhD,KAAKyJ,oBACLzJ,KAAKyJ,kBAAoBzJ,KAAKuF,aAAazE,MAAM6J,WAAa,IAKlE3K,KAAKuF,aAAazE,MAAM6J,UAAY3K,KAAKyJ,kBACrCkB,EAAY,IAAM3K,KAAKyJ,kBAAoBkB,GAMnDpI,EAAQ2F,UAAUnB,iBAAmB,SAAU2M,GAC3C,IAAIC,EAAiB3T,KAAKuG,sBAC1B,OAAIoN,EACO,CAAE5Q,EAAG2Q,EAAgB3Q,EAAI4Q,EAAe5Q,EAAGC,EAAG0Q,EAAgB1Q,EAAI2Q,EAAe3Q,GAErF,CAAED,EAAG,EAAGC,EAAG,IAGtBT,EAAQ2F,UAAUgE,yBAA2B,WACzClM,KAAKsO,cAAgBtO,KAAK0F,kBAAegE,GAM7CnH,EAAQ2F,UAAU8B,+BAAiC,WAC/C,IAAImF,EAAKnP,KAAK8C,kBAAmBC,EAAIoM,EAAGpM,EAAGC,EAAImM,EAAGnM,EAClD,KAAW,IAAND,GAAiB,IAANC,GAAYhD,KAAK2H,eAAiB3H,KAAK0D,iBAAvD,CAGA,IAAImP,EAAe7S,KAAK0D,iBAAiBoC,wBACrCoK,EAAclQ,KAAKuF,aAAaO,wBAChC8N,EAAef,EAAazC,KAAOF,EAAYE,KAC/CyD,EAAgB3D,EAAYiD,MAAQN,EAAaM,MACjDW,EAAcjB,EAAaxC,IAAMH,EAAYG,IAC7C0D,EAAiB7D,EAAY+C,OAASJ,EAAaI,OAGnDJ,EAAalN,MAAQuK,EAAYvK,OAC7BiO,EAAe,IACf7Q,GAAK6Q,GAELC,EAAgB,IAChB9Q,GAAK8Q,IAIT9Q,EAAI,EAIJ8P,EAAajN,OAASsK,EAAYtK,QAC9BkO,EAAc,IACd9Q,GAAK8Q,GAELC,EAAiB,IACjB/Q,GAAK+Q,IAIT/Q,EAAI,EAEJD,IAAM/C,KAAK8C,kBAAkBC,GAAKC,IAAMhD,KAAK8C,kBAAkBE,GAC/DhD,KAAKsL,oBAAoB,CAAEtI,EAAGA,EAAGD,EAAGA,MAI5CR,EAAQ2F,UAAUT,mBAAqB,SAAU7C,GAC7C,IAAItD,EAAQtB,KAAKgE,eACjB,MAAqB,iBAAV1C,EACAA,EAEF6K,EAAavH,GACXtD,EAAM0S,MAEV1S,EAAQA,EAAM2S,MAAQ,GAE1B1R,EAj0BiB,GAw0B5B,SAASmN,EAAa3M,EAAGC,GAGrB,MAAO,eAAiBmE,KAAK+M,MAAMnR,GAAK,OAASoE,KAAK+M,MAAMlR,GAAK,SAGrE,SAASmN,EAAcgE,GACnB,IAAIC,EAAQD,EAAKE,WAAU,GACvBC,EAAoBF,EAAMG,iBAAiB,QAC3CC,EAAqBL,EAAKI,iBAAiB,UAE/CH,EAAMK,gBAAgB,MACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAkBxP,OAAQ4P,IAC1CJ,EAAkBI,GAAGD,gBAAgB,MAIzC,GAAID,EAAmB1P,OACnB,CAAA,IAAI6P,EAAgBP,EAAMG,iBAAiB,UAC3C,IAASG,EAAI,EAAGA,EAAIF,EAAmB1P,OAAQ4P,IAAK,CAChD,IAAIE,EAA4BD,EAAcD,GAAGG,WAAW,MACxDD,GACAA,EAA0BE,UAAUN,EAAmBE,GAAI,EAAG,IAI1E,OAAON,EAGX,SAASlB,EAAM5R,EAAOyT,EAAKC,GACvB,OAAO7N,KAAK6N,IAAID,EAAK5N,KAAK4N,IAAIC,EAAK1T,IAMvC,SAAS4I,EAAcvJ,GACfA,GAAWA,EAAQkM,YACnBlM,EAAQkM,WAAWoI,YAAYtU,GAIvC,SAASwL,EAAavH,GAIlB,MAAyB,MAAlBA,EAAMiJ,KAAK,GAiBtB,SAASoC,EAAYJ,EAASpN,GAC1B,IAAIyS,EAAWrF,EAAQsF,UAAU,GACjC,GAAID,EAASE,WAAa3S,EAAU4S,aAAc,CAC9C,IAAIC,EAAU7S,EAAU8S,cAAc,OAEtC,OADAD,EAAQ1I,YAAYsI,GACbI,EAEX,OAAOJ;;;;;;;OAgBX,SAASM,EAAgBC,EAAOC,EAAWC,GACvC,IAAIC,EAAOC,EAAQH,EAAWD,EAAM3Q,OAAS,GACzCgR,EAAKD,EAAQF,EAASF,EAAM3Q,OAAS,GACzC,GAAI8Q,IAASE,EAAb,CAKA,IAFA,IAAI5Q,EAASuQ,EAAMG,GACf5O,EAAQ8O,EAAKF,GAAQ,EAAI,EACpBlB,EAAIkB,EAAMlB,IAAMoB,EAAIpB,GAAK1N,EAC9ByO,EAAMf,GAAKe,EAAMf,EAAI1N,GAEzByO,EAAMK,GAAM5Q,GAgChB,SAAS2Q,EAAQvU,EAAO0T,GACpB,OAAO7N,KAAK6N,IAAI,EAAG7N,KAAK4N,IAAIC,EAAK1T;;;;;;;OAcrC,IAKIyU,EAA6B,IAK7BC,EAAmB,EAKnBC,EAA6B,WAC7B,SAASA,EAAYtV,EAASiC,EAAmBH,EAAWC,EAASC,GACjE,IAAIE,EAAQ7C,KACZA,KAAK4C,kBAAoBA,EACzB5C,KAAK0C,QAAUA,EACf1C,KAAK2C,eAAiBA,EAEtB3C,KAAKqF,UAAW,EAEhBrF,KAAKkW,iBAAkB,EAKvBlW,KAAKmW,oBAAqB,EAK1BnW,KAAKoW,eAAiB,WAAc,OAAO,GAE3CpW,KAAKkE,cAAgB,IAAItE,EAAKuD,QAI9BnD,KAAKsE,QAAU,IAAI1E,EAAKuD,QAKxBnD,KAAKuE,OAAS,IAAI3E,EAAKuD,QAEvBnD,KAAKwE,QAAU,IAAI5E,EAAKuD,QAExBnD,KAAKqW,OAAS,IAAIzW,EAAKuD,QAEvBnD,KAAKsW,aAAc,EAEnBtW,KAAKuW,eAAiB,GAEtBvW,KAAKoO,gBAAkB,CAAEiC,IAAK,EAAGD,KAAM,GAEvCpQ,KAAKwW,wBAA0B,CAAEnG,IAAK,EAAGD,KAAM,GAK/CpQ,KAAKyW,cAAgB,CAAEC,KAAM,KAAM1P,MAAO,GAE1ChH,KAAK2W,UAAY,GAEjB3W,KAAK4W,aAAe,WAEpB5W,KAAK6W,gBAAkB,IAAI/S,IAE3B9D,KAAK+D,WAAa,MAElB/D,KAAK8W,4BAA8BlX,EAAKyD,aAAaC,MAErDtD,KAAK+W,yBAA2B,EAEhC/W,KAAKgX,2BAA6B,EAElChX,KAAKiX,kBAAoB,IAAIrX,EAAKuD,QAElCnD,KAAKkX,cAAgB,WACjB,GAAKrU,EAAM8E,aAAX,CAGA,IAAIhH,EAAUhB,EAASoJ,cAAclG,EAAMlC,SAC3CkC,EAAMsU,mBAAmBtU,EAAMuL,gBAAiBzN,EAAQyW,UAAWzW,EAAQ0W,cAG/ErX,KAAKsX,qBAAuB,WACxBzU,EAAMiJ,iBACNlM,EAAK2X,SAAS,EAAG3X,EAAK4X,yBACjBtJ,KAAKrO,EAAU4X,UAAU5U,EAAMoU,oBAC/BlN,UAAU,WACX,IAAIoK,EAAOtR,EAAM6U,YACsB,IAAnC7U,EAAMkU,yBACNY,EAAwBxD,GAAO6B,GAES,IAAnCnT,EAAMkU,0BACXY,EAAwBxD,EAAM6B,GAEO,IAArCnT,EAAMmU,2BACNY,EAA0BzD,GAAO6B,GAES,IAArCnT,EAAMmU,4BACXY,EAA0BzD,EAAM6B,MAI5C,IAAI6B,EAAa7X,KAAKW,QAAUhB,EAASoJ,cAAcpI,GACvDX,KAAK8X,YAkrBb,SAASC,EAAcpX,GACnB,GAAIjB,EAASsY,qBAAsB,CAC/B,IAAI9C,EAAWvU,EAAQsP,YAActP,EAAQsP,cAAgB,KAC7D,GAAIiF,aAAoB+C,WACpB,OAAO/C,EAGf,OAAO;;;;;;;OAzrBgB6C,CAAcF,IAAepV,EAChDG,EAAkBsV,sBAAsBlY,MAqhB5C,OAlhBAiW,EAAY/N,UAAU+B,QAAU,WAC5BjK,KAAK8L,iBACL9L,KAAKiX,kBAAkB1M,WACvBvK,KAAKmY,mBACLnY,KAAKkE,cAAcqG,WACnBvK,KAAKsE,QAAQiG,WACbvK,KAAKuE,OAAOgG,WACZvK,KAAKwE,QAAQ+F,WACbvK,KAAKqW,OAAO9L,WACZvK,KAAK6W,gBAAgBrM,QACrBxK,KAAK0X,YAAc,KACnB1X,KAAK4C,kBAAkBwV,oBAAoBpY,OAG/CiW,EAAY/N,UAAUP,WAAa,WAC/B,OAAO3H,KAAKsW,aAGhBL,EAAY/N,UAAUmF,MAAQ,WAC1B,IAAIxK,EAAQ7C,KACRW,EAAUhB,EAASoJ,cAAc/I,KAAKW,SAC1CX,KAAKkE,cAAcW,OACnB7E,KAAKsW,aAAc,EACnBtW,KAAKqY,cACLrY,KAAK2W,UAAU3N,QAAQ,SAAUsP,GAAW,OAAOA,EAAQC,gBAAgB1V,KAC3E7C,KAAKmY,mBACLnY,KAAK0C,QAAQ4O,kBAAkB,WAAc,OAAO3Q,EAAQ6I,iBAAiB,SAAU3G,EAAMqU,iBAC7FlX,KAAKwY,yBAQTvC,EAAY/N,UAAUqH,MAAQ,SAAUR,EAAM0J,EAAUC,GACpD1Y,KAAKqN,QAGL,IAAIsL,EAAW3Y,KAAKkW,gBAAkBlW,KAAK4Y,YAAYnX,QAAQsN,IAAS,GACtD,IAAd4J,IAGAA,EAAW3Y,KAAK6Y,iCAAiC9J,EAAM0J,EAAUC,IAErE,IAAII,EAAmB9Y,KAAK+Y,kBACxBpK,EAAemK,EAAiBrX,QAAQsN,GACxCvC,EAAcuC,EAAKrG,wBACnBsQ,EAAuBF,EAAiBH,GAc5C,GAVIK,IAAyBjK,IACzBiK,EAAuBF,EAAiBH,EAAW,IAInDhK,GAAgB,GAChBmK,EAAiBG,OAAOtK,EAAc,GAItCqK,IAAyBhZ,KAAK4C,kBAAkB+E,WAAWqR,GAAuB,CAClF,IAAIrY,EAAUqY,EAAqBpQ,iBACnCjI,EAAQuY,cAAcxK,aAAalC,EAAa7L,GAChDmY,EAAiBG,OAAON,EAAU,EAAG5J,QAGrCpP,EAASoJ,cAAc/I,KAAKW,SAASiM,YAAYJ,GACjDsM,EAAiBK,KAAKpK,GAG1BvC,EAAY1L,MAAM6J,UAAY,GAG9B3K,KAAKoZ,sBACLpZ,KAAKsE,QAAQO,KAAK,CAAEkK,KAAMA,EAAM5D,UAAWnL,KAAM2O,aAAc3O,KAAK4O,aAAaG,MAMrFkH,EAAY/N,UAAUoH,KAAO,SAAUP,GACnC/O,KAAKqZ,SACLrZ,KAAKuE,OAAOM,KAAK,CAAEkK,KAAMA,EAAM5D,UAAWnL,QAW9CiW,EAAY/N,UAAUgH,KAAO,SAAUH,EAAMJ,EAAcM,EAAmBJ,EAAwB/H,GAClG9G,KAAKqZ,SACLrZ,KAAKwE,QAAQK,KAAK,CACdkK,KAAMA,EACNJ,aAAcA,EACdK,cAAeC,EAAkBL,aAAaG,GAC9C5D,UAAWnL,KACXiP,kBAAmBA,EACnBJ,uBAAwBA,EACxB/H,SAAUA,KAOlBmP,EAAY/N,UAAUoR,UAAY,SAAUC,GACxC,IAAI1W,EAAQ7C,KAMZ,OALAA,KAAK4Y,YAAcW,EACnBA,EAAMvQ,QAAQ,SAAU+F,GAAQ,OAAOA,EAAK7D,mBAAmBrI,KAC3D7C,KAAK2H,cACL3H,KAAKqY,cAEFrY,MAGXiW,EAAY/N,UAAU8C,cAAgB,SAAUC,GAE5C,OADAjL,KAAK+D,WAAakH,EACXjL,MAOXiW,EAAY/N,UAAUsR,YAAc,SAAUA,GAE1C,OADAxZ,KAAK2W,UAAY6C,EAAYC,QACtBzZ,MAMXiW,EAAY/N,UAAUwR,gBAAkB,SAAUC,GAE9C,OADA3Z,KAAK4W,aAAe+C,EACb3Z,MAMXiW,EAAY/N,UAAU0G,aAAe,SAAUG,GAC3C,OAAK/O,KAAKsW,YAQHsD,EAF2B,eAAtB5Z,KAAK4W,cAAqD,QAApB5W,KAAK+D,WACnD/D,KAAKuW,eAAekD,QAAQI,UAAY7Z,KAAKuW,eACzB,SAAUuD,GAAe,OAAOA,EAAYpD,OAAS3H,IAPlE/O,KAAK4Y,YAAYnX,QAAQsN,IAaxCkH,EAAY/N,UAAU6R,YAAc,WAChC,OAAO/Z,KAAK6W,gBAAgBmD,KAAO,GASvC/D,EAAY/N,UAAUuH,UAAY,SAAUV,EAAM0J,EAAUC,EAAUuB,GAElE,IAAIja,KAAKkW,iBAAoBlW,KAAKka,4BAA4BzB,EAAUC,GAAxE,CAGA,IAAIyB,EAAWna,KAAKuW,eAChBoC,EAAW3Y,KAAK6Y,iCAAiC9J,EAAM0J,EAAUC,EAAUuB,GAC/E,MAAkB,IAAdtB,GAAmBwB,EAASrV,OAAS,GAAzC,CAGA,IAAIsV,EAAqC,eAAtBpa,KAAK4W,aACpBjI,EAAeiL,EAAUO,EAAU,SAAUL,GAAe,OAAOA,EAAYpD,OAAS3H,IACxFsL,EAAuBF,EAASxB,GAChCjF,EAAkByG,EAASxL,GAAc2L,WACzCC,EAAcF,EAAqBC,WACnCtT,EAAQ2H,EAAegK,EAAW,GAAK,EAC3C3Y,KAAKyW,cAAcC,KAAO2D,EAAqB3D,KAC/C1W,KAAKyW,cAAczP,MAAQoT,EAAeH,EAAalX,EAAIkX,EAAajX,EAExE,IAAIwX,EAAaxa,KAAKya,iBAAiB/G,EAAiB6G,EAAavT,GAEjE0T,EAAgB1a,KAAK2a,oBAAoBhM,EAAcwL,EAAUnT,GAGjE4T,EAAWT,EAASV,QAExBjE,EAAgB2E,EAAUxL,EAAcgK,GACxC3Y,KAAKqW,OAAOxR,KAAK,CACbmK,cAAeL,EACfA,aAAcgK,EACdxN,UAAWnL,KACX+O,KAAMA,IAEVoL,EAASnR,QAAQ,SAAUsP,EAASuC,GAEhC,GAAID,EAASC,KAAWvC,EAAxB,CAGA,IAAIwC,EAAgBxC,EAAQ5B,OAAS3H,EACjCgM,EAASD,EAAgBN,EAAaE,EACtCM,EAAkBF,EAAgB/L,EAAKrG,wBACvC4P,EAAQ5B,KAAK9N,iBAEjB0P,EAAQyC,QAAUA,EAKdX,GAGAY,EAAgBla,MAAM6J,UAAY,eAAiBxD,KAAK+M,MAAMoE,EAAQyC,QAAU,YAChFE,EAAiB3C,EAAQgC,WAAY,EAAGS,KAGxCC,EAAgBla,MAAM6J,UAAY,kBAAoBxD,KAAK+M,MAAMoE,EAAQyC,QAAU,SACnFE,EAAiB3C,EAAQgC,WAAYS,EAAQ,UAUzD9E,EAAY/N,UAAUsH,2BAA6B,SAAUiJ,EAAUC,GACnE,IAAIvJ,EACJ,IAAInP,KAAKmW,mBAAT,CAGA,IAAI+E,EACAC,EAA0B,EAC1BC,EAA4B,EAEhC,GAAIpb,KAAKka,4BAA4BzB,EAAUC,GAAW,CACtD,IAAI/X,EAAUhB,EAASoJ,cAAc/I,KAAKW,SAC1CwO,EAAK/O,EAAQib,OAoZzB,SAASC,EAA2B3a,EAAS2Z,EAAY7B,EAAUC,GAC/D,IAAI6C,EAAmBC,EAA2BlB,EAAY5B,GAC1D+C,EAAqBC,EAA6BpB,EAAY7B,GAC9D0C,EAA0B,EAC1BC,EAA4B,EAKhC,GAAIG,EAAkB,CAClB,IAAInE,EAAYzW,EAAQyW,UACC,IAArBmE,EACInE,EAAY,IACZ+D,EAA0B,GAGzBxa,EAAQgb,aAAevE,EAAYzW,EAAQib,eAChDT,EAA0B,GAGlC,GAAIM,EAAoB,CACpB,IAAIpE,EAAa1W,EAAQ0W,WACE,IAAvBoE,EACIpE,EAAa,IACb+D,EAA4B,GAG3Bza,EAAQkb,YAAcxE,EAAa1W,EAAQmb,cAChDV,EAA4B,GAGpC,MAAO,CAACD,EAAyBC,GAnbLE,CAA2B3a,EAASX,KAAK+b,YAAatD,EAAUC,GAAW,GAAqC0C,EAA4BjM,EAAG,KAAhEgM,EAA0BhM,EAAG,KACjGiM,KAC3BF,EAAava,GAIrB,IAAKwa,IAA4BC,EAA2B,CACxD,IAAIY,EAAKhc,KAAK2C,eAAesZ,kBAAmBtW,EAAQqW,EAAGrW,MAAOC,EAASoW,EAAGpW,OAC1E0U,EAAa,CAAE3U,MAAOA,EAAOC,OAAQA,EAAQyK,IAAK,EAAG8C,MAAOxN,EAAOsN,OAAQrN,EAAQwK,KAAM,GAC7F+K,EAA0BK,EAA2BlB,EAAY5B,GACjE0C,EAA4BM,EAA6BpB,EAAY7B,GACrEyC,EAAagB,QAEbhB,GAAeC,IAA4Bnb,KAAK+W,0BAChDqE,IAA8Bpb,KAAKgX,4BACnCkE,IAAelb,KAAK0X,cACpB1X,KAAK+W,yBAA2BoE,EAChCnb,KAAKgX,2BAA6BoE,EAClCpb,KAAK0X,YAAcwD,GACdC,GAA2BC,IAA8BF,EAC1Dlb,KAAK0C,QAAQ4O,kBAAkBtR,KAAKsX,sBAGpCtX,KAAK8L,oBAKjBmK,EAAY/N,UAAU4D,eAAiB,WACnC9L,KAAKiX,kBAAkBpS,QAG3BoR,EAAY/N,UAAUiU,kBAAoB,WACtC,IAAIxb,EAAUhB,EAASoJ,cAAc/I,KAAKW,SAC1CX,KAAK+b,YAAcK,EAAqBzb,GACxCX,KAAKoO,gBAAkB,CAAEiC,IAAK1P,EAAQyW,UAAWhH,KAAMzP,EAAQ0W,aAGnEpB,EAAY/N,UAAUkR,oBAAsB,WACxC,IAAIvW,EAAQ7C,KACRoa,EAAqC,eAAtBpa,KAAK4W,aACxB5W,KAAKuW,eAAiBvW,KAAK+Y,kBAAkB/W,IAAI,SAAU0U,GACvD,IAAI2F,EAAmBxZ,EAAMD,kBAAkB+E,WAAW+O,GAGtDA,EAAKhO,wBACLgO,EAAK9N,iBACT,MAAO,CAAE8N,KAAMA,EAAMqE,OAAQ,EAAGT,WAAY8B,EAAqBC,MAClEC,KAAK,SAAUC,EAAGC,GACjB,OAAOpC,EAAemC,EAAEjC,WAAWlK,KAAOoM,EAAElC,WAAWlK,KACnDmM,EAAEjC,WAAWjK,IAAMmM,EAAElC,WAAWjK,OAI5C4F,EAAY/N,UAAUmR,OAAS,WAC3B,IAAIxW,EAAQ7C,KACZA,KAAKsW,aAAc,EAEnBtW,KAAK+Y,kBAAkB/P,QAAQ,SAAU+F,GAAQ,OAAOA,EAAKnG,iBAAiB9H,MAAM6J,UAAY,KAChG3K,KAAK2W,UAAU3N,QAAQ,SAAUsP,GAAW,OAAOA,EAAQmE,eAAe5Z,KAC1E7C,KAAK+Y,kBAAoB,GACzB/Y,KAAKuW,eAAiB,GACtBvW,KAAKyW,cAAcC,KAAO,KAC1B1W,KAAKyW,cAAczP,MAAQ,EAC3BhH,KAAK8L,iBACL9L,KAAKmY,oBAQTlC,EAAY/N,UAAUyS,oBAAsB,SAAUhM,EAAcwL,EAAUnT,GAC1E,IAAIoT,EAAqC,eAAtBpa,KAAK4W,aACpBlD,EAAkByG,EAASxL,GAAc2L,WACzCoC,EAAmBvC,EAASxL,GAAwB,EAAT3H,GAC3C0T,EAAgBhH,EAAgB0G,EAAe,QAAU,UAAYpT,EACzE,GAAI0V,EAAkB,CAClB,IAAIrP,EAAQ+M,EAAe,OAAS,MAChCuC,EAAMvC,EAAe,QAAU,UAKpB,IAAXpT,EACA0T,GAAiBgC,EAAiBpC,WAAWjN,GAASqG,EAAgBiJ,GAGtEjC,GAAiBhH,EAAgBrG,GAASqP,EAAiBpC,WAAWqC,GAG9E,OAAOjC,GAOXzE,EAAY/N,UAAUgS,4BAA8B,SAAUzB,EAAUC,GACpE,IAAIvJ,EAAKnP,KAAK+b,YACVa,EA9cmB,IA6cgFzN,EAAGxJ,MAEtGkX,EA/cmB,IA6cmG1N,EAAGvJ,OAG7H,OAAO8S,EAH0BvJ,EAAGkB,IAGZwM,GAAcnE,EAH8BvJ,EAAG8D,OAGb4J,GACtDpE,EAJkFtJ,EAAGiB,KAInEwM,GAAcnE,EAJatJ,EAAGgE,MAIGyJ,GAQ3D3G,EAAY/N,UAAUuS,iBAAmB,SAAU/G,EAAiB6G,EAAavT,GAC7E,IAAIoT,EAAqC,eAAtBpa,KAAK4W,aACpB4D,EAAaJ,EAAeG,EAAYnK,KAAOsD,EAAgBtD,KAC/DmK,EAAYlK,IAAMqD,EAAgBrD,IAMtC,OAJe,IAAXrJ,IACAwT,GAAcJ,EAAeG,EAAY5U,MAAQ+N,EAAgB/N,MAC7D4U,EAAY3U,OAAS8N,EAAgB9N,QAEtC4U,GASXvE,EAAY/N,UAAU2Q,iCAAmC,SAAU9J,EAAM0J,EAAUC,EAAU1R,GACzF,IAAInE,EAAQ7C,KACRoa,EAAqC,eAAtBpa,KAAK4W,aACxB,OAAOgD,EAAU5Z,KAAKuW,eAAgB,SAAUpH,EAAI2N,EAAGrH,GACnD,IAAIiB,EAAOvH,EAAGuH,KAAM4D,EAAanL,EAAGmL,WACpC,OAAI5D,IAAS3H,EAGF0G,EAAM3Q,OAAS,IAEtBkC,GAII0P,IAAS7T,EAAM4T,cAAcC,OAHjB0D,EAAepT,EAAMjE,EAAIiE,EAAMhE,KAGQH,EAAM4T,cAAczP,SAIxEoT,EAGH3B,GAAYtR,KAAK4V,MAAMzC,EAAWlK,OAASqI,GAAYtR,KAAK4V,MAAMzC,EAAWnH,OAC7EuF,GAAYvR,KAAK4V,MAAMzC,EAAWjK,MAAQqI,GAAYvR,KAAK4V,MAAMzC,EAAWrH,YAIxFgD,EAAY/N,UAAUmQ,YAAc,WAChCrY,KAAK+Y,kBAAoB/Y,KAAK4Y,YAAYa,QAC1CzZ,KAAKoZ,sBACLpZ,KAAKmc,qBAWTlG,EAAY/N,UAAUiP,mBAAqB,SAAU6F,EAAgBC,EAAQC,EAASC,GAClF,IAAIta,EAAQ7C,KACRod,EAAgBJ,EAAe3M,IAAM4M,EACrCI,EAAiBL,EAAe5M,KAAO8M,EACvCC,GACAlC,EAAiBkC,EAAiBC,EAAeC,GAKrDrd,KAAKuW,eAAevN,QAAQ,SAAUmG,GAElC8L,EADiB9L,EAAGmL,WACS8C,EAAeC,KAIhDrd,KAAKuW,eAAevN,QAAQ,SAAUmG,GAClC,IAAIuH,EAAOvH,EAAGuH,KACV7T,EAAMD,kBAAkB+E,WAAW+O,IAGnCA,EAAKnL,iCAGbyR,EAAe3M,IAAM4M,EACrBD,EAAe5M,KAAO8M,GAG1BjH,EAAY/N,UAAUiQ,iBAAmB,WACrCxY,EAASoJ,cAAc/I,KAAKW,SAAS8Q,oBAAoB,SAAUzR,KAAKkX,eACxElX,KAAK8W,4BAA4BjN,eAOrCoM,EAAY/N,UAAU4G,iBAAmB,SAAU/L,EAAGC,GAClD,OAAOsa,EAAmBtd,KAAK+b,YAAahZ,EAAGC,IASnDiT,EAAY/N,UAAUmH,iCAAmC,SAAUN,EAAMhM,EAAGC,GACxE,OAAOhD,KAAK2W,UAAU3R,KAAK,SAAUsT,GAAW,OAAOA,EAAQiF,YAAYxO,EAAMhM,EAAGC,MAQxFiT,EAAY/N,UAAUqV,YAAc,SAAUxO,EAAMhM,EAAGC,GACnD,IAAKsa,EAAmBtd,KAAK+b,YAAahZ,EAAGC,KAAOhD,KAAKoW,eAAerH,EAAM/O,MAC1E,OAAO,EAEX,IAAIwd,EAAmBxd,KAAK8X,YAAY0F,iBAAiBza,EAAGC,GAG5D,IAAKwa,EACD,OAAO,EAEX,IAAIC,EAAgB9d,EAASoJ,cAAc/I,KAAKW,SAOhD,OAAO6c,IAAqBC,GAAiBA,EAActY,SAASqY,IAMxEvH,EAAY/N,UAAUqQ,gBAAkB,SAAUD,GAC9C,IAAIoF,EAAiB1d,KAAK6W,gBACrB6G,EAAetY,IAAIkT,KACpBoF,EAAe7S,IAAIyN,GACnBtY,KAAKmc,oBACLnc,KAAKwY,0BAObvC,EAAY/N,UAAUuU,eAAiB,SAAUnE,GAC7CtY,KAAK6W,gBAAgB9L,OAAOuN,GAC5BtY,KAAK8W,4BAA4BjN,eAMrCoM,EAAY/N,UAAUsQ,sBAAwB,WAC1C,IAAI3V,EAAQ7C,KACZA,KAAKwW,wBAA0BxW,KAAK2C,eAAe0L,4BACnDrO,KAAK8W,4BAA8B9W,KAAK4C,kBAAkBqL,OAAOlE,UAAU,WACvE,GAAIlH,EAAM8E,aAAc,CACpB,IAAI4S,EAAc1X,EAAMF,eAAe0L,4BACvCxL,EAAMsU,mBAAmBtU,EAAM2T,wBAAyB+D,EAAYlK,IAAKkK,EAAYnK,KAAMvN,EAAMkZ,kBAE5FlZ,EAAMkX,eACXlX,EAAMsZ,uBAIXlG,EApnBqB,GA4nBhC,SAASgF,EAAiBX,EAAYjK,EAAKD,GACvCkK,EAAWjK,KAAOA,EAClBiK,EAAWrH,OAASqH,EAAWjK,IAAMiK,EAAW1U,OAChD0U,EAAWlK,MAAQA,EACnBkK,EAAWnH,MAAQmH,EAAWlK,KAAOkK,EAAW3U,MAQpD,SAASiU,EAAUnE,EAAOkI,GACtB,IAAK,IAAIjJ,EAAI,EAAGA,EAAIe,EAAM3Q,OAAQ4P,IAC9B,GAAIiJ,EAAUlI,EAAMf,GAAIA,EAAGe,GACvB,OAAOf,EAGf,OAAQ,EAQZ,SAAS4I,EAAmBhD,EAAYvX,EAAGC,GAEvC,OAAOA,GADGsX,EAAWjK,KACFrN,GADgBsX,EAAWrH,QACZlQ,GAD2BuX,EAAWlK,MACzBrN,GADuCuX,EAAWnH,MAIrG,SAASiJ,EAAqBzb,GAC1B,IAAI2Z,EAAa3Z,EAAQmF,wBAKzB,MAAO,CACHuK,IAAKiK,EAAWjK,IAChB8C,MAAOmH,EAAWnH,MAClBF,OAAQqH,EAAWrH,OACnB7C,KAAMkK,EAAWlK,KACjBzK,MAAO2U,EAAW3U,MAClBC,OAAQ0U,EAAW1U,QAQ3B,SAAS+R,EAAwBxD,EAAMyJ,GAC/BzJ,IAAS+H,OACT/H,EAAK0J,SAAS,EAAGD,GAIjBzJ,EAAKiD,WAAawG,EAQ1B,SAAShG,EAA0BzD,EAAMyJ,GACjCzJ,IAAS+H,OACT/H,EAAK0J,SAASD,EAAQ,GAItBzJ,EAAKkD,YAAcuG,EAQ3B,SAASpC,EAA2BlB,EAAY5B,GAC5C,IAAIrI,EAAMiK,EAAWjK,IAAK4C,EAASqH,EAAWrH,OAC1C4J,EAD2DvC,EAAW1U,OAChDmQ,EAC1B,OAAI2C,GAAYrI,EAAMwM,GAAcnE,GAAYrI,EAAMwM,EAC3C,EAEFnE,GAAYzF,EAAS4J,GAAcnE,GAAYzF,EAAS4J,EACtD,EAEJ,EAOX,SAASnB,EAA6BpB,EAAY7B,GAC9C,IAAIrI,EAAOkK,EAAWlK,KAAM+C,EAAQmH,EAAWnH,MAC3CyJ,EAD0DtC,EAAW3U,MAChDoQ,EACzB,OAAI0C,GAAYrI,EAAOwM,GAAcnE,GAAYrI,EAAOwM,EAC7C,EAEFnE,GAAYtF,EAAQyJ,GAAcnE,GAAYtF,EAAQyJ,EACpD,EAEJ,EA8DX,IAAIkB,EAA8Bpe,EAAS0C,gCAAgC,CACvEC,SAAS,EACT0b,SAAS,IAUTC,EAAkC,WAClC,SAASA,EAAiBtb,EAASD,GAC/B,IAAII,EAAQ7C,KACZA,KAAK0C,QAAUA,EAEf1C,KAAKie,eAAiB,IAAIna,IAE1B9D,KAAKke,eAAiB,IAAIpa,IAE1B9D,KAAKme,qBAAuB,IAAIra,IAEhC9D,KAAKoe,iBAAmB,IAAIC,IAK5Bre,KAAK+N,YAAc,IAAInO,EAAKuD,QAK5BnD,KAAKgO,UAAY,IAAIpO,EAAKuD,QAE1BnD,KAAKiO,OAAS,IAAIrO,EAAKuD,QAKvBnD,KAAKse,6BAA+B,SAAU1Z,GACtC/B,EAAMsb,qBAAqBnE,MAC3BpV,EAAMsB,kBAGdlG,KAAKyC,UAAYA,EAwHrB,OArHAub,EAAiB9V,UAAUgQ,sBAAwB,SAAUhJ,GACpDlP,KAAKie,eAAe7Y,IAAI8J,IACzBlP,KAAKie,eAAepT,IAAIqE,IAIhC8O,EAAiB9V,UAAUH,iBAAmB,SAAU2O,GACpD,IAAI7T,EAAQ7C,KACZA,KAAKke,eAAerT,IAAI6L,GAIS,IAA7B1W,KAAKke,eAAelE,MACpBha,KAAK0C,QAAQ4O,kBAAkB,WAG3BzO,EAAMJ,UAAU+G,iBAAiB,YAAa3G,EAAMyb,6BAA8BR,MAK9FE,EAAiB9V,UAAUkQ,oBAAsB,SAAUlJ,GACvDlP,KAAKie,eAAelT,OAAOmE,IAG/B8O,EAAiB9V,UAAUmC,eAAiB,SAAUqM,GAClD1W,KAAKke,eAAenT,OAAO2L,GAC3B1W,KAAK4L,aAAa8K,GACe,IAA7B1W,KAAKke,eAAelE,MACpBha,KAAKyC,UAAUgP,oBAAoB,YAAazR,KAAKse,6BAA8BR,IAQ3FE,EAAiB9V,UAAUuG,cAAgB,SAAUiI,EAAM9R,GACvD,IAAI/B,EAAQ7C,KAEZ,IAAIA,KAAKme,qBAAqB/Y,IAAIsR,KAGlC1W,KAAKme,qBAAqBtT,IAAI6L,GACS,IAAnC1W,KAAKme,qBAAqBnE,MAAY,CACtC,IAAI7N,EAAevH,EAAMiJ,KAAK0Q,WAAW,SAErCC,EAAUrS,EAAe,WAAa,UAI1CnM,KAAKoe,iBACAhW,IANW+D,EAAe,YAAc,YAMzB,CAChBoF,QAAS,SAAUkN,GAAK,OAAO5b,EAAMkL,YAAYlJ,KAAK4Z,IACtDC,QAASZ,IAER1V,IAAIoW,EAAS,CACdjN,QAAS,SAAUkN,GAAK,OAAO5b,EAAMmL,UAAUnJ,KAAK4Z,IACpDC,SAAS,IAERtW,IAAI,SAAU,CACfmJ,QAAS,SAAUkN,GAAK,OAAO5b,EAAMoL,OAAOpJ,KAAK4Z,IAGjDC,SAAS,IAMRtW,IAAI,cAAe,CACpBmJ,QAASvR,KAAKse,6BACdI,QAASZ,IAEb9d,KAAK0C,QAAQ4O,kBAAkB,WAC3BzO,EAAMub,iBAAiBpV,QAAQ,SAAU2V,EAAQ9c,GAC7CgB,EAAMJ,UAAU+G,iBAAiB3H,EAAM8c,EAAOpN,QAASoN,EAAOD,eAM9EV,EAAiB9V,UAAU0D,aAAe,SAAU8K,GAChD1W,KAAKme,qBAAqBpT,OAAO2L,GACM,IAAnC1W,KAAKme,qBAAqBnE,MAC1Bha,KAAK4e,yBAIbZ,EAAiB9V,UAAUP,WAAa,SAAU+O,GAC9C,OAAO1W,KAAKme,qBAAqB/Y,IAAIsR,IAEzCsH,EAAiB9V,UAAU2W,YAAc,WACrC,IAAIhc,EAAQ7C,KACZA,KAAKke,eAAelV,QAAQ,SAAU8V,GAAY,OAAOjc,EAAMwH,eAAeyU,KAC9E9e,KAAKie,eAAejV,QAAQ,SAAU8V,GAAY,OAAOjc,EAAMuV,oBAAoB0G,KACnF9e,KAAK4e,wBACL5e,KAAK+N,YAAYxD,WACjBvK,KAAKgO,UAAUzD,YAGnByT,EAAiB9V,UAAU0W,sBAAwB,WAC/C,IAAI/b,EAAQ7C,KACZA,KAAKoe,iBAAiBpV,QAAQ,SAAU2V,EAAQ9c,GAC5CgB,EAAMJ,UAAUgP,oBAAoB5P,EAAM8c,EAAOpN,QAASoN,EAAOD,WAErE1e,KAAKoe,iBAAiB5T,SAE1BwT,EAAiBe,WAAa,CAC1B,CAAElR,KAAM5N,EAAG+e,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhDlB,EAAiBmB,eAAiB,WAAc,MAAO,CACnD,CAAEtR,KAAM5N,EAAGmf,QACX,CAAEvR,UAAMnE,EAAWqV,WAAY,CAAC,CAAElR,KAAM5N,EAAGof,OAAQJ,KAAM,CAAC/e,EAAGof,eAEjEtB,EAAiBuB,gBAAkBtf,EAAGuf,mBAAmB,CAAE3gB,QAAS,SAAS4gB,IAA6B,OAAO,IAAIzB,EAAiB/d,EAAGyf,SAASzf,EAAGmf,QAASnf,EAAGyf,SAASxf,EAAGof,YAAeK,MAAO3B,EAAkBkB,WAAY,SAC1NlB,EAzJ0B,GAoKjC4B,EAAiB,CACjBvY,mBAAoB,EACpBmM,gCAAiC,GAKjCqM,EAA0B,WAC1B,SAASA,EAASpd,EAAWC,EAASC,EAAgBC,GAClD5C,KAAKyC,UAAYA,EACjBzC,KAAK0C,QAAUA,EACf1C,KAAK2C,eAAiBA,EACtB3C,KAAK4C,kBAAoBA,EA6B7B,OAtBAid,EAAS3X,UAAU4X,WAAa,SAAUnf,EAASge,GAE/C,YADe,IAAXA,IAAqBA,EAASiB,GAC3B,IAAIrd,EAAQ5B,EAASge,EAAQ3e,KAAKyC,UAAWzC,KAAK0C,QAAS1C,KAAK2C,eAAgB3C,KAAK4C,oBAMhGid,EAAS3X,UAAU6X,eAAiB,SAAUpf,GAC1C,OAAO,IAAIsV,EAAYtV,EAASX,KAAK4C,kBAAmB5C,KAAKyC,UAAWzC,KAAK0C,QAAS1C,KAAK2C,iBAE/Fkd,EAASd,WAAa,CAClB,CAAElR,KAAM5N,EAAG+e,WAAYC,KAAM,CAAC,CAAEC,WAAY,WAGhDW,EAASV,eAAiB,WAAc,MAAO,CAC3C,CAAEtR,UAAMnE,EAAWqV,WAAY,CAAC,CAAElR,KAAM5N,EAAGof,OAAQJ,KAAM,CAAC/e,EAAGof,aAC7D,CAAEzR,KAAM5N,EAAGmf,QACX,CAAEvR,KAAM1N,EAAG6f,eACX,CAAEnS,KAAMmQ,KAEZ6B,EAASN,gBAAkBtf,EAAGuf,mBAAmB,CAAE3gB,QAAS,SAASohB,IAAqB,OAAO,IAAIJ,EAAS5f,EAAGyf,SAASxf,EAAGof,UAAWrf,EAAGyf,SAASzf,EAAGmf,QAASnf,EAAGyf,SAASvf,EAAG6f,eAAgB/f,EAAGyf,SAAS1B,KAAuB2B,MAAOE,EAAUX,WAAY,SACxPW,EAlCkB,GAkDzBK,EAAkB,IAAIjgB,EAAGkgB,eAAe,mBAUxCC,EAA+B,WAC/B,SAASA,EAAczf,EAAS0f,GAC5BrgB,KAAKW,QAAUA,EAEfX,KAAKsgB,cAAgB,IAAI1gB,EAAKuD,QAC9BnD,KAAKiE,WAAY,EACjBjE,KAAKugB,YAAcF,EACnB3f,EAA6BC,EAAQ8c,eAAe,GA+BxD,OA7BAzV,OAAOC,eAAemY,EAAclY,UAAW,WAAY,CAEvDC,IAAK,WAAc,OAAOnI,KAAKiE,WAC/BmE,IAAK,SAAU9G,GACXtB,KAAKiE,UAAYtE,EAAS2I,sBAAsBhH,GAChDtB,KAAKsgB,cAAczb,KAAK7E,OAE5BwI,YAAY,EACZC,cAAc,IAElB2X,EAAclY,UAAU2W,YAAc,WAClC7e,KAAKsgB,cAAc/V,YAEvB6V,EAAcrB,WAAa,CACvB,CAAElR,KAAM5N,EAAGugB,UAAWvB,KAAM,CAAC,CACjBwB,SAAU,kBACVC,KAAM,CACFC,MAAS,uBAK7BP,EAAcjB,eAAiB,WAAc,MAAO,CAChD,CAAEtR,KAAM5N,EAAG2gB,YACX,CAAE/S,UAAMnE,EAAWqV,WAAY,CAAC,CAAElR,KAAM5N,EAAGof,OAAQJ,KAAM,CAACiB,IAAqB,CAAErS,KAAM5N,EAAG4gB,cAE9FT,EAAcU,eAAiB,CAC3Bzb,SAAU,CAAC,CAAEwI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,4BAEjCmB,EAtCuB,GAoD9BY,EAAoC,WACpC,SAASA,EAAmBC,GACxBjhB,KAAKihB,YAAcA,EAcvB,OAZAD,EAAmBjC,WAAa,CAC5B,CAAElR,KAAM5N,EAAGugB,UAAWvB,KAAM,CAAC,CACjBwB,SAAU,sCAI1BO,EAAmB7B,eAAiB,WAAc,MAAO,CACrD,CAAEtR,KAAM5N,EAAGihB,eAEfF,EAAmBF,eAAiB,CAChCK,KAAM,CAAC,CAAEtT,KAAM5N,EAAG8gB,SAEfC,EAhB4B,GA8BnCI,EAAgC,WAChC,SAASA,EAAeH,GACpBjhB,KAAKihB,YAAcA,EAcvB,OAZAG,EAAerC,WAAa,CACxB,CAAElR,KAAM5N,EAAGugB,UAAWvB,KAAM,CAAC,CACjBwB,SAAU,kCAI1BW,EAAejC,eAAiB,WAAc,MAAO,CACjD,CAAEtR,KAAM5N,EAAGihB,eAEfE,EAAeN,eAAiB,CAC5BK,KAAM,CAAC,CAAEtT,KAAM5N,EAAG8gB,SAEfK,EAhBwB,GA8B/BC,EAAgB,IAAIphB,EAAGkgB,eAAe,iBAEtCmB,EAAkB,IAAIrhB,EAAGkgB,eAAe,kBAAmB,CAC3DjB,WAAY,OACZrgB,QAAS0iB,IAGb,SAASA,IACL,MAAO,CAAEla,mBAAoB,EAAGmM,gCAAiC,GAGrE,IAAIgO,EAAyB,WACzB,SAASA,EAET7gB,EAEA8gB,EAAehf,EAAWC,EAASgf,EAAmB/C,EAAQgD,EAAMriB,EAAUsiB,GAC1E,IAAI/e,EAAQ7C,KACZA,KAAKW,QAAUA,EACfX,KAAKyhB,cAAgBA,EACrBzhB,KAAKyC,UAAYA,EACjBzC,KAAK0C,QAAUA,EACf1C,KAAK0hB,kBAAoBA,EACzB1hB,KAAK2hB,KAAOA,EACZ3hB,KAAK4hB,mBAAqBA,EAC1B5hB,KAAK6hB,WAAa,IAAIjiB,EAAKuD,QAK3BnD,KAAKgE,eAAiB,EACtBhE,KAAKiE,WAAY,EAEjBjE,KAAKmE,QAAU,IAAIlE,EAAG6hB,aAEtB9hB,KAAKoE,SAAW,IAAInE,EAAG6hB,aAEvB9hB,KAAKqE,MAAQ,IAAIpE,EAAG6hB,aAEpB9hB,KAAKsE,QAAU,IAAIrE,EAAG6hB,aAEtB9hB,KAAKuE,OAAS,IAAItE,EAAG6hB,aAErB9hB,KAAKwE,QAAU,IAAIvE,EAAG6hB,aAKtB9hB,KAAKyE,MAAQ,IAAI7E,EAAKmiB,WAAW,SAAUC,GACvC,IAAIC,EAAepf,EAAMqf,SAASzd,MAAMyJ,KAAKrO,EAAUmC,IAAI,SAAUmgB,GAAc,MAAO,CACtF5hB,OAAQsC,EACRgE,gBAAiBsb,EAAWtb,gBAC5BjC,MAAOud,EAAWvd,MAClBoC,MAAOmb,EAAWnb,MAClBF,SAAUqb,EAAWrb,aACjBiD,UAAUiY,GAClB,OAAO,WACHC,EAAapY,iBAGrB7J,KAAKkiB,SAAW5iB,EAASwgB,WAAWnf,EAASge,GAC7C3e,KAAKkiB,SAASf,KAAOnhB,KACrBA,KAAKoiB,YAAYpiB,KAAKkiB,UACtBliB,KAAKqiB,cAAcriB,KAAKkiB,UAuO5B,OArOAla,OAAOC,eAAeuZ,EAAQtZ,UAAW,WAAY,CAEjDC,IAAK,WACD,OAAOnI,KAAKiE,WAAcjE,KAAKyhB,eAAiBzhB,KAAKyhB,cAAcpc,UAEvE+C,IAAK,SAAU9G,GACXtB,KAAKiE,UAAYtE,EAAS2I,sBAAsBhH,GAChDtB,KAAKkiB,SAAS7c,SAAWrF,KAAKiE,WAElCuE,YAAY,EACZC,cAAc,IAMlB+Y,EAAQtZ,UAAUQ,sBAAwB,WACtC,OAAO1I,KAAKkiB,SAASxZ,yBAGzB8Y,EAAQtZ,UAAUU,eAAiB,WAC/B,OAAO5I,KAAKkiB,SAAStZ,kBAGzB4Y,EAAQtZ,UAAUwC,MAAQ,WACtB1K,KAAKkiB,SAASxX,SAKlB8W,EAAQtZ,UAAUkD,oBAAsB,WACpC,OAAOpL,KAAKkiB,SAAS9W,uBAEzBoW,EAAQtZ,UAAUoa,gBAAkB,WAChC,IAAIzf,EAAQ7C,KAKZA,KAAK0C,QAAQ6f,SAAS7d,eACjBwJ,KAAKrO,EAAU2iB,KAAK,GAAI3iB,EAAU4X,UAAUzX,KAAK6hB,aACjD9X,UAAU,WACXlH,EAAM4f,qBAEN5f,EAAMe,SAAS8e,QAAQxU,KAAKrO,EAAUsO,UAAUtL,EAAMe,UAEtD/D,EAAU8iB,IAAI,SAAU7Z,GACpB,IAAI8Z,EAAsB9Z,EACrB+Z,OAAO,SAAU5d,GAAU,OAAOA,EAAOsb,cAAgB1d,IACzDb,IAAI,SAAUiD,GAAU,OAAOA,EAAOtE,UAC3CkC,EAAMqf,SAASrZ,YAAY+Z,KAG/B/iB,EAAUijB,UAAU,SAAUha,GAC1B,OAAOlJ,EAAKmjB,MAAMC,WAAM,EAAQ5iB,EAAQ6iB,SAASna,EAAQ9G,IAAI,SAAU+M,GAAQ,OAAOA,EAAKuR,oBAC3FzgB,EAAU4X,UAAU5U,EAAMgf,aAAa9X,UAAU,SAAUmZ,GAE3D,IAAIC,EAAUtgB,EAAMqf,SAChBjd,EAASie,EAAeviB,QAAQ8c,cACpCyF,EAAe7d,SAAW8d,EAAQvY,cAAc3F,GAAUke,EAAQrY,aAAa7F,KAE/EpC,EAAMugB,kBACNvgB,EAAMqf,SAAS5W,oBAAoBzI,EAAMugB,qBAIrD5B,EAAQtZ,UAAUmb,YAAc,SAAUX,GACtC,IAAIY,EAAqBZ,EAA6B,oBAClDa,EAAiBb,EAA0B,iBAG3CY,IAAuBA,EAAmBE,aAC1CxjB,KAAKyiB,qBAGLc,IAAmBA,EAAeC,aAAexjB,KAAKojB,kBACtDpjB,KAAKkiB,SAAS5W,oBAAoBtL,KAAKojB,mBAG/C5B,EAAQtZ,UAAU2W,YAAc,WAC5B7e,KAAK6hB,WAAWhd,OAChB7E,KAAK6hB,WAAWtX,WAChBvK,KAAKkiB,SAASjY,WAGlBuX,EAAQtZ,UAAUua,mBAAqB,WACnC,IAAI9hB,EAAUX,KAAKW,QAAQ8c,cACvBnU,EAActJ,KAAKyjB,oBACnBC,EAA2B/iB,EAASX,KAAKyjB,qBAAuB9iB,EACpE,GAAI2I,GAAeA,EAAY8L,WAAapV,KAAKyC,UAAU4S,aACvD,MAAMsO,MAAM,uEACsBra,EAAYsa,SAAW,MAE7D5jB,KAAKkiB,SAASpa,gBAAgBwB,GAAe3I,IAGjD6gB,EAAQtZ,UAAU2b,oBAAsB,WACpC,IAAIC,EAAW9jB,KAAK4J,gBACpB,IAAKka,EACD,OAAO,KAEX,GAAwB,iBAAbA,EACP,OAAOJ,EAA2B1jB,KAAKW,QAAQ8c,cAAeqG,GAElE,IAAInjB,EAAUhB,EAASoJ,cAAc+a,GACrC,GAAI7jB,EAAG8jB,cAAgBpjB,EAAQwE,SAASnF,KAAKW,QAAQ8c,eACjD,MAAMkG,MAAM,4EAEhB,OAAOhjB,GAGX6gB,EAAQtZ,UAAUka,YAAc,SAAU4B,GACtC,IAAInhB,EAAQ7C,KACZgkB,EAAI9f,cAAc6F,UAAU,WACxB,IAAKia,EAAIrc,aAAc,CACnB,IAAIsc,EAAMphB,EAAM8e,KACZ3d,EAAiBnB,EAAMmB,eACvBwI,EAAc3J,EAAMwG,qBAAuB,CAC3CH,SAAUrG,EAAMwG,qBAAqB4X,YACrCjR,QAASnN,EAAMwG,qBAAqB8X,KACpCrR,cAAejN,EAAM6e,mBACrB,KACApV,EAAUzJ,EAAMsG,iBAAmB,CACnCD,SAAUrG,EAAMsG,iBAAiB8X,YACjCjR,QAASnN,EAAMsG,iBAAiBgY,KAChCrR,cAAejN,EAAM6e,mBACrB,KACJsC,EAAI3e,SAAWxC,EAAMwC,SACrB2e,EAAItR,SAAW7P,EAAM6P,SACrBsR,EAAIhgB,eAA4C,iBAAnBA,GAA+BA,EACxDA,EAAiBrE,EAASukB,qBAAqBlgB,GACnDggB,EAAIxR,kBAAoB3P,EAAM2P,kBAC9BwR,EACKra,oBAAoB9G,EAAMghB,uBAC1Bza,wBAAwBoD,GACxBvD,oBAAoBqD,GACrB2X,GACAD,EAAIhZ,cAAciZ,EAAI3iB,WAMtCkgB,EAAQtZ,UAAUma,cAAgB,SAAU2B,GACxC,IAAInhB,EAAQ7C,KACZgkB,EAAI7f,QAAQ4F,UAAU,WAClBlH,EAAMsB,QAAQggB,KAAK,CAAE5jB,OAAQsC,IAG7BA,EAAM+e,mBAAmBwC,iBAE7BJ,EAAI5f,SAAS2F,UAAU,WACnBlH,EAAMuB,SAAS+f,KAAK,CAAE5jB,OAAQsC,MAElCmhB,EAAI3f,MAAM0F,UAAU,SAAUnF,GAC1B/B,EAAMwB,MAAM8f,KAAK,CAAE5jB,OAAQsC,EAAOiE,SAAUlC,EAAMkC,WAGlDjE,EAAM+e,mBAAmBwC,iBAE7BJ,EAAI1f,QAAQyF,UAAU,SAAUnF,GAC5B/B,EAAMyB,QAAQ6f,KAAK,CACfhZ,UAAWvG,EAAMuG,UAAUgW,KAC3BpS,KAAMlM,EACN8L,aAAc/J,EAAM+J,iBAG5BqV,EAAIzf,OAAOwF,UAAU,SAAUnF,GAC3B/B,EAAM0B,OAAO4f,KAAK,CACdhZ,UAAWvG,EAAMuG,UAAUgW,KAC3BpS,KAAMlM,MAGdmhB,EAAIxf,QAAQuF,UAAU,SAAUnF,GAC5B/B,EAAM2B,QAAQ2f,KAAK,CACfnV,cAAepK,EAAMoK,cACrBL,aAAc/J,EAAM+J,aACpBM,kBAAmBrK,EAAMqK,kBAAkBkS,KAC3ChW,UAAWvG,EAAMuG,UAAUgW,KAC3BtS,uBAAwBjK,EAAMiK,uBAC9BE,KAAMlM,EACNiE,SAAUlC,EAAMkC,cAI5B0a,EAAQzC,WAAa,CACjB,CAAElR,KAAM5N,EAAGugB,UAAWvB,KAAM,CAAC,CACjBwB,SAAU,YACV4D,SAAU,UACV3D,KAAM,CACFC,MAAS,WACT2D,4BAA6B,WAC7BC,4BAA6B,yBAEjCC,UAAW,CAAC,CAAEC,QAASvE,EAAiBwE,YAAalD,QAIrEA,EAAQrC,eAAiB,WAAc,MAAO,CAC1C,CAAEtR,KAAM5N,EAAG2gB,YACX,CAAE/S,UAAMnE,EAAWqV,WAAY,CAAC,CAAElR,KAAM5N,EAAGof,OAAQJ,KAAM,CAACoC,IAAmB,CAAExT,KAAM5N,EAAG4gB,UAAY,CAAEhT,KAAM5N,EAAG0kB,YAC/G,CAAE9W,UAAMnE,EAAWqV,WAAY,CAAC,CAAElR,KAAM5N,EAAGof,OAAQJ,KAAM,CAAC/e,EAAGof,aAC7D,CAAEzR,KAAM5N,EAAGmf,QACX,CAAEvR,KAAM5N,EAAG2kB,kBACX,CAAE/W,UAAMnE,EAAWqV,WAAY,CAAC,CAAElR,KAAM5N,EAAGof,OAAQJ,KAAM,CAACqC,MAC1D,CAAEzT,KAAM9N,EAAK8kB,eAAgB9F,WAAY,CAAC,CAAElR,KAAM5N,EAAG4gB,YACrD,CAAEhT,KAAMgS,GACR,CAAEhS,KAAM5N,EAAG6kB,qBAEftD,EAAQV,eAAiB,CACrBld,SAAU,CAAC,CAAEiK,KAAM5N,EAAG8kB,gBAAiB9F,KAAM,CAACmB,EAAe,CAAE4E,aAAa,MAC5E7b,iBAAkB,CAAC,CAAE0E,KAAM5N,EAAGglB,aAAchG,KAAM,CAACmC,EAAgB,CAAE8D,QAAQ,MAC7E7b,qBAAsB,CAAC,CAAEwE,KAAM5N,EAAGglB,aAAchG,KAAM,CAAC+B,EAAoB,CAAEkE,QAAQ,MACrF/D,KAAM,CAAC,CAAEtT,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,iBAChCvM,SAAU,CAAC,CAAE7E,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,qBACpCwE,oBAAqB,CAAC,CAAE5V,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,wBAC/CrV,gBAAiB,CAAC,CAAEiE,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,qBAC3Cjb,eAAgB,CAAC,CAAE6J,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,uBAC1CmE,iBAAkB,CAAC,CAAEvV,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,6BAC5C5Z,SAAU,CAAC,CAAEwI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,qBACpCzM,kBAAmB,CAAC,CAAE3E,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,8BAC7C9a,QAAS,CAAC,CAAE0J,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,oBACpC7a,SAAU,CAAC,CAAEyJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,qBACrC5a,MAAO,CAAC,CAAEwJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,kBAClC3a,QAAS,CAAC,CAAEuJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,oBACpC1a,OAAQ,CAAC,CAAEsJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,mBACnCza,QAAS,CAAC,CAAEqJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,oBACpCxa,MAAO,CAAC,CAAEoJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,mBAE/BuC,EA3RiB,GA8R5B,SAASkC,EAA2B/iB,EAAS8f,GAEzC,IADA,IAAI2E,EAAiBzkB,EAAQuY,cACtBkM,GAAgB,CAEnB,GAAIA,EAAeC,QAAUD,EAAeC,QAAQ5E,GAChD2E,EAAeE,kBAAkB7E,GACjC,OAAO2E,EAEXA,EAAiBA,EAAelM,cAEpC,OAAO;;;;;;;OAgBX,IAAIqM,EAAkC,WAClC,SAASA,IAELvlB,KAAKwlB,OAAS,IAAI1hB,IAClB9D,KAAKiE,WAAY,EAuBrB,OArBA+D,OAAOC,eAAesd,EAAiBrd,UAAW,WAAY,CAE1DC,IAAK,WAAc,OAAOnI,KAAKiE,WAC/BmE,IAAK,SAAU9G,GACXtB,KAAKiE,UAAYtE,EAAS2I,sBAAsBhH,IAEpDkH,YAAY,EACZC,cAAc,IAElB8c,EAAiBrd,UAAU2W,YAAc,WACrC7e,KAAKwlB,OAAOhb,SAEhB+a,EAAiBxG,WAAa,CAC1B,CAAElR,KAAM5N,EAAGugB,UAAWvB,KAAM,CAAC,CACjBwB,SAAU,qBACV4D,SAAU,uBAG1BkB,EAAiBzE,eAAiB,CAC9Bzb,SAAU,CAAC,CAAEwI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,+BAEjCsG,EA3B0B,GAsCjCE,EAAmB,EAGnBC,EAA6B,WAC7B,SAASA,EAET/kB,EAASrB,EAAUsiB,EAAoBD,EAAMgE,GACzC,IAAI9iB,EAAQ7C,KACZA,KAAKW,QAAUA,EACfX,KAAK4hB,mBAAqBA,EAC1B5hB,KAAK2hB,KAAOA,EACZ3hB,KAAK2lB,OAASA,EAEd3lB,KAAK6hB,WAAa,IAAIjiB,EAAKuD,QAM3BnD,KAAKwZ,YAAc,GAEnBxZ,KAAK2Z,YAAc,WAKnB3Z,KAAK4lB,GAAK,iBAAmBH,IAC7BzlB,KAAKiE,WAAY,EACjBjE,KAAK6lB,kBAAmB,EAKxB7lB,KAAKoW,eAAiB,WAAc,OAAO,GAE3CpW,KAAKmW,oBAAqB,EAE1BnW,KAAKwE,QAAU,IAAIvE,EAAG6hB,aAItB9hB,KAAKsE,QAAU,IAAIrE,EAAG6hB,aAKtB9hB,KAAKuE,OAAS,IAAItE,EAAG6hB,aAErB9hB,KAAKqW,OAAS,IAAIpW,EAAG6hB,aACrB9hB,KAAK8lB,aAAexmB,EAASygB,eAAepf,GAC5CX,KAAK8lB,aAAa3E,KAAOnhB,KACzBA,KAAK8lB,aAAa1P,eAAiB,SAAUM,EAAMxH,GAC/C,OAAOrM,EAAMuT,eAAeM,EAAKyK,KAAMjS,EAAKiS,OAEhDnhB,KAAKoiB,YAAYpiB,KAAK8lB,cACtB9lB,KAAKqiB,cAAcriB,KAAK8lB,cACxBJ,EAAYK,WAAW5M,KAAKnZ,MACxB2lB,GACAA,EAAOH,OAAO3a,IAAI7K,MAsN1B,OAnNAgI,OAAOC,eAAeyd,EAAYxd,UAAW,WAAY,CAErDC,IAAK,WACD,OAAOnI,KAAKiE,aAAgBjE,KAAK2lB,QAAU3lB,KAAK2lB,OAAOtgB,UAE3D+C,IAAK,SAAU9G,GACXtB,KAAKiE,UAAYtE,EAAS2I,sBAAsBhH,IAEpDkH,YAAY,EACZC,cAAc,IAElBT,OAAOC,eAAeyd,EAAYxd,UAAW,kBAAmB,CAE5DC,IAAK,WAAc,OAAOnI,KAAK6lB,kBAC/Bzd,IAAK,SAAU9G,GACXtB,KAAK6lB,iBAAmBlmB,EAAS2I,sBAAsBhH,IAE3DkH,YAAY,EACZC,cAAc,IAElBid,EAAYxd,UAAU8d,mBAAqB,WACvC,IAAInjB,EAAQ7C,KACZA,KAAK4Y,YAAY8J,QACZxU,KAAKrO,EAAUsO,UAAUnO,KAAK4Y,aAAc/Y,EAAU4X,UAAUzX,KAAK6hB,aACrE9X,UAAU,SAAUwP,GACrB1W,EAAMijB,aAAaxM,UAAUC,EAAMvX,IAAI,SAAU0U,GAAQ,OAAOA,EAAKwL,eAG7EwD,EAAYxd,UAAU2W,YAAc,WAChC,IAAIhE,EAAQ6K,EAAYK,WAAWtkB,QAAQzB,MACvC6a,GAAS,GACT6K,EAAYK,WAAW9M,OAAO4B,EAAO,GAErC7a,KAAK2lB,QACL3lB,KAAK2lB,OAAOH,OAAOza,OAAO/K,MAE9BA,KAAK8lB,aAAa7b,UAClBjK,KAAK6hB,WAAWhd,OAChB7E,KAAK6hB,WAAWtX,YAOpBmb,EAAYxd,UAAUmF,MAAQ,WAC1BrN,KAAK8lB,aAAazY,SAatBqY,EAAYxd,UAAUgH,KAAO,SAAUH,EAAMJ,EAAcM,EAAmBJ,GAC1E7O,KAAK8lB,aAAa5W,KAAKH,EAAKmT,SAAUvT,EAAcM,EAAkB6W,aAAcjX,EAAwB,CAAE9L,EAAG,EAAGC,EAAG,KAU3H0iB,EAAYxd,UAAUqH,MAAQ,SAAUR,EAAM0J,EAAUC,GACpD1Y,KAAK8lB,aAAavW,MAAMR,EAAKmT,SAAUzJ,EAAUC,IAQrDgN,EAAYxd,UAAUoH,KAAO,SAAUP,GACnC/O,KAAK8lB,aAAaxW,KAAKP,EAAKmT,WAQhCwD,EAAYxd,UAAU0G,aAAe,SAAUG,GAC3C,OAAO/O,KAAK8lB,aAAalX,aAAaG,EAAKmT,WAG/CwD,EAAYxd,UAAUka,YAAc,SAAU4B,GAC1C,IAAInhB,EAAQ7C,KACRA,KAAK2hB,MACL3hB,KAAK2hB,KAAK7X,OACLoE,KAAKrO,EAAUsO,UAAUnO,KAAK2hB,KAAKrgB,OAAQzB,EAAU4X,UAAUzX,KAAK6hB,aACpE9X,UAAU,SAAUzI,GAAS,OAAO0iB,EAAIhZ,cAAc1J,KAE/D0iB,EAAI9f,cAAc6F,UAAU,WACxB,IAAIoQ,EAAWxa,EAASsmB,YAAYpjB,EAAM2W,aAAaxX,IAAI,SAAUkN,GACjE,MAAuB,iBAATA,EACVwW,EAAYK,WAAW/gB,KAAK,SAAUkhB,GAAQ,OAAOA,EAAKN,KAAO1W,IAAWA,IAEhFrM,EAAM8iB,QACN9iB,EAAM8iB,OAAOH,OAAOxc,QAAQ,SAAUkG,IACF,IAA5BiL,EAAS1Y,QAAQyN,IACjBiL,EAAShB,KAAKjK,KAI1B8U,EAAI3e,SAAWxC,EAAMwC,SACrB2e,EAAItR,SAAW7P,EAAM6P,SACrBsR,EAAI9N,gBAAkBrT,EAAMqT,gBAC5B8N,EAAI7N,mBAAqBtT,EAAMsT,mBAC/B6N,EACKxK,YAAYW,EAAS0I,OAAO,SAAU3T,GAAQ,OAAOA,GAAQA,IAASrM,IAAUb,IAAI,SAAUkkB,GAAQ,OAAOA,EAAKJ,gBAClHpM,gBAAgB7W,EAAM8W,gBAInC+L,EAAYxd,UAAUma,cAAgB,SAAU2B,GAC5C,IAAInhB,EAAQ7C,KACZgkB,EAAI9f,cAAc6F,UAAU,WACxBlH,EAAM+e,mBAAmBwC,iBAE7BJ,EAAI1f,QAAQyF,UAAU,SAAUnF,GAC5B/B,EAAMyB,QAAQ6f,KAAK,CACfhZ,UAAWtI,EACXkM,KAAMnK,EAAMmK,KAAKoS,KACjBxS,aAAc/J,EAAM+J,iBAG5BqV,EAAIzf,OAAOwF,UAAU,SAAUnF,GAC3B/B,EAAM0B,OAAO4f,KAAK,CACdhZ,UAAWtI,EACXkM,KAAMnK,EAAMmK,KAAKoS,OAErBte,EAAM+e,mBAAmBwC,iBAE7BJ,EAAI3N,OAAOtM,UAAU,SAAUnF,GAC3B/B,EAAMwT,OAAO8N,KAAK,CACdnV,cAAepK,EAAMoK,cACrBL,aAAc/J,EAAM+J,aACpBxD,UAAWtI,EACXkM,KAAMnK,EAAMmK,KAAKoS,SAGzB6C,EAAIxf,QAAQuF,UAAU,SAAUnF,GAC5B/B,EAAM2B,QAAQ2f,KAAK,CACfnV,cAAepK,EAAMoK,cACrBL,aAAc/J,EAAM+J,aACpBM,kBAAmBrK,EAAMqK,kBAAkBkS,KAC3ChW,UAAWvG,EAAMuG,UAAUgW,KAC3BpS,KAAMnK,EAAMmK,KAAKoS,KACjBtS,uBAAwBjK,EAAMiK,uBAC9B/H,SAAUlC,EAAMkC,WAIpBjE,EAAM+e,mBAAmBwC,kBAIjCsB,EAAYK,WAAa,GACzBL,EAAY3G,WAAa,CACrB,CAAElR,KAAM5N,EAAGugB,UAAWvB,KAAM,CAAC,CACjBwB,SAAU,+BACV4D,SAAU,cACVG,UAAW,CAEP,CAAEC,QAASc,EAAkBY,cAvO5Czc,GAwOe,CAAE+a,QAASpD,EAAeqD,YAAagB,IAE3ChF,KAAM,CACFC,MAAS,gBACTyF,OAAQ,KACRC,iCAAkC,WAClCC,iCAAkC,4BAClCC,kCAAmC,kCAKvDb,EAAYvG,eAAiB,WAAc,MAAO,CAC9C,CAAEtR,KAAM5N,EAAG2gB,YACX,CAAE/S,KAAMgS,GACR,CAAEhS,KAAM5N,EAAG6kB,mBACX,CAAEjX,KAAM9N,EAAK8kB,eAAgB9F,WAAY,CAAC,CAAElR,KAAM5N,EAAG4gB,YACrD,CAAEhT,KAAM0X,EAAkBxG,WAAY,CAAC,CAAElR,KAAM5N,EAAG4gB,UAAY,CAAEhT,KAAM5N,EAAG0kB,cAE7Ee,EAAY5E,eAAiB,CACzBlI,YAAa,CAAC,CAAE/K,KAAM5N,EAAG8kB,gBAAiB9F,KAAM,CAACuC,EAAS,CAG1CwD,aAAa,MAE7BxL,YAAa,CAAC,CAAE3L,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,4BACvCkC,KAAM,CAAC,CAAEtT,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,qBAChCtF,YAAa,CAAC,CAAE9L,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,4BACvC2G,GAAI,CAAC,CAAE/X,KAAM5N,EAAG8gB,QAChBrO,SAAU,CAAC,CAAE7E,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,yBACpC5Z,SAAU,CAAC,CAAEwI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,yBACpC/I,gBAAiB,CAAC,CAAErI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,gCAC3C7I,eAAgB,CAAC,CAAEvI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,+BAC1C9I,mBAAoB,CAAC,CAAEtI,KAAM5N,EAAG8gB,MAAO9B,KAAM,CAAC,mCAC9Cza,QAAS,CAAC,CAAEqJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,wBACpC3a,QAAS,CAAC,CAAEuJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,wBACpC1a,OAAQ,CAAC,CAAEsJ,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,uBACnC5I,OAAQ,CAAC,CAAExI,KAAM5N,EAAGklB,OAAQlG,KAAM,CAAC,wBAEhCyG,EA7QqB,GAuR5Bc,EAAgC,WAChC,SAASA,KAyBT,OAvBAA,EAAezH,WAAa,CACxB,CAAElR,KAAM5N,EAAGwmB,SAAUxH,KAAM,CAAC,CAChByH,aAAc,CACVhB,EACAH,EACA/D,EACApB,EACAgB,EACAJ,GAEJliB,QAAS,CACL4mB,EACAH,EACA/D,EACApB,EACAgB,EACAJ,GAEJwD,UAAW,CACP3E,OAIb2G,EA1BwB;;;;;;;;;;;;;;;AAyCnC1nB,EAAQ6nB,gDAAkDzG,EAC1DphB,EAAQ+gB,SAAWA,EACnB/gB,EAAQyD,QAAUA,EAClBzD,EAAQmX,YAAcA,EACtBnX,EAAQ4mB,YAAcA,EACtB5mB,EAAQ0W,gBAAkBA,EAC1B1W,EAAQ8nB,kBA52DR,SAASA,EAAkBC,EAAcC,EAAanY,EAAcoY,GAChE,IAAInR,EAAOC,EAAQlH,EAAckY,EAAa/hB,OAAS,GACnDgR,EAAKD,EAAQkR,EAAaD,EAAYhiB,QACtC+hB,EAAa/hB,QACbgiB,EAAY7N,OAAOnD,EAAI,EAAG+Q,EAAa5N,OAAOrD,EAAM,GAAG,KAy2D/D9W,EAAQkoB,cA71DR,SAASA,GAAcH,EAAcC,EAAanY,EAAcoY,GAC5D,IAAIjR,EAAKD,EAAQkR,EAAaD,EAAYhiB,QACtC+hB,EAAa/hB,QACbgiB,EAAY7N,OAAOnD,EAAI,EAAG+Q,EAAalY,KA21D/C7P,EAAQ0nB,eAAiBA,EACzB1nB,EAAQkf,iBAAmBA,EAC3Blf,EAAQymB,iBAAmBA,EAC3BzmB,EAAQuiB,cAAgBA,EACxBviB,EAAQwiB,gBAAkBA,EAC1BxiB,EAAQyiB,wBAA0BA,EAClCziB,EAAQ0iB,QAAUA,EAClB1iB,EAAQshB,cAAgBA,EACxBthB,EAAQsiB,eAAiBA,EACzBtiB,EAAQkiB,mBAAqBA,EAE7BhZ,OAAOC,eAAenJ,EAAS,aAAc,CAAEwC,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/scrolling'), require('@angular/cdk/platform'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators'), require('tslib'), require('@angular/cdk/bidi')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/drag-drop', ['exports', '@angular/core', '@angular/common', '@angular/cdk/scrolling', '@angular/cdk/platform', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators', 'tslib', '@angular/cdk/bidi'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.dragDrop = {}), global.ng.core, global.ng.common, global.ng.cdk.scrolling, global.ng.cdk.platform, global.ng.cdk.coercion, global.rxjs, global.rxjs.operators, global.tslib, global.ng.cdk.bidi));\n}(this, function (exports, i0, i1, i2, platform, coercion, rxjs, operators, tslib_1, bidi) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Shallow-extends a stylesheet object with another stylesheet object.\n     * @docs-private\n     */\n    function extendStyles(dest, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n        return dest;\n    }\n    /**\n     * Toggles whether the native drag interactions should be enabled for an element.\n     * @param element Element on which to toggle the drag interactions.\n     * @param enable Whether the drag interactions should be enabled.\n     * @docs-private\n     */\n    function toggleNativeDragInteractions(element, enable) {\n        var userSelect = enable ? '' : 'none';\n        extendStyles(element.style, {\n            touchAction: enable ? '' : 'none',\n            webkitUserDrag: enable ? '' : 'none',\n            webkitTapHighlightColor: enable ? '' : 'transparent',\n            userSelect: userSelect,\n            msUserSelect: userSelect,\n            webkitUserSelect: userSelect,\n            MozUserSelect: userSelect\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Parses a CSS time value to milliseconds. */\n    function parseCssTimeUnitsToMs(value) {\n        // Some browsers will return it in seconds, whereas others will return milliseconds.\n        var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n        return parseFloat(value) * multiplier;\n    }\n    /** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n    function getTransformTransitionDurationInMs(element) {\n        var computedStyle = getComputedStyle(element);\n        var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n        var property = transitionedProperties.find(function (prop) { return prop === 'transform' || prop === 'all'; });\n        // If there's no transition for `all` or `transform`, we shouldn't do anything.\n        if (!property) {\n            return 0;\n        }\n        // Get the index of the property that we're interested in and match\n        // it up to the same index in `transition-delay` and `transition-duration`.\n        var propertyIndex = transitionedProperties.indexOf(property);\n        var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n        var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n        return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n            parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n    }\n    /** Parses out multiple values from a computed style into an array. */\n    function parseCssPropertyValue(computedStyle, name) {\n        var value = computedStyle.getPropertyValue(name);\n        return value.split(',').map(function (part) { return part.trim(); });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Options that can be used to bind a passive event listener. */\n    var passiveEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /** Options that can be used to bind an active event listener. */\n    var activeEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: false });\n    /**\n     * Time in milliseconds for which to ignore mouse events, after\n     * receiving a touch event. Used to avoid doing double work for\n     * touch devices where the browser fires fake mouse events, in\n     * addition to touch events.\n     */\n    var MOUSE_EVENT_IGNORE_TIME = 800;\n    /**\n     * Reference to a draggable item. Used to manipulate or dispose of the item.\n     * @docs-private\n     */\n    var DragRef = /** @class */ (function () {\n        function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            var _this = this;\n            this._config = _config;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n            /**\n             * CSS `transform` applied to the element when it isn't being dragged. We need a\n             * passive transform in order for the dragged element to retain its new position\n             * after the user has stopped dragging and because we need to know the relative\n             * position in case they start dragging again. This corresponds to `element.style.transform`.\n             */\n            this._passiveTransform = { x: 0, y: 0 };\n            /** CSS `transform` that is applied to the element while it's being dragged. */\n            this._activeTransform = { x: 0, y: 0 };\n            /** Emits when the item is being moved. */\n            this._moveEvents = new rxjs.Subject();\n            /** Subscription to pointer movement events. */\n            this._pointerMoveSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the event that is dispatched when the user lifts their pointer. */\n            this._pointerUpSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being scrolled. */\n            this._scrollSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being resized. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Cached reference to the boundary element. */\n            this._boundaryElement = null;\n            /** Whether the native dragging interactions have been enabled on the root element. */\n            this._nativeInteractionsEnabled = true;\n            /** Elements that can be used to drag the draggable item. */\n            this._handles = [];\n            /** Registered handles that are currently disabled. */\n            this._disabledHandles = new Set();\n            /** Layout direction of the item. */\n            this._direction = 'ltr';\n            /**\n             * Amount of milliseconds to wait after the user has put their\n             * pointer down before starting to drag the element.\n             */\n            this.dragStartDelay = 0;\n            this._disabled = false;\n            /** Emits as the drag sequence is being prepared. */\n            this.beforeStarted = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new rxjs.Subject();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new rxjs.Subject();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new rxjs.Subject();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new rxjs.Subject();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new rxjs.Subject();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = this._moveEvents.asObservable();\n            /** Handler for the `mousedown`/`touchstart` events. */\n            this._pointerDown = function (event) {\n                _this.beforeStarted.next();\n                // Delegate the event based on whether it started from a handle or the element itself.\n                if (_this._handles.length) {\n                    var targetHandle = _this._handles.find(function (handle) {\n                        var target = event.target;\n                        return !!target && (target === handle || handle.contains(target));\n                    });\n                    if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                        _this._initializeDragSequence(targetHandle, event);\n                    }\n                }\n                else if (!_this.disabled) {\n                    _this._initializeDragSequence(_this._rootElement, event);\n                }\n            };\n            /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n            this._pointerMove = function (event) {\n                if (!_this._hasStartedDragging) {\n                    var pointerPosition = _this._getPointerPositionOnPage(event);\n                    var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                    var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                    var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                    // Only start dragging after the user has moved more than the minimum distance in either\n                    // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                    // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                    // per pixel of movement (e.g. if the user moves their pointer quickly).\n                    if (isOverThreshold) {\n                        var isDelayElapsed = Date.now() >= _this._dragStartTime + _this._getDragStartDelay(event);\n                        if (!isDelayElapsed) {\n                            _this._endDragSequence(event);\n                            return;\n                        }\n                        // Prevent other drag sequences from starting while something in the container is still\n                        // being dragged. This can happen while we're waiting for the drop animation to finish\n                        // and can cause errors, because some elements might still be moving around.\n                        if (!_this._dropContainer || !_this._dropContainer.isDragging()) {\n                            _this._hasStartedDragging = true;\n                            _this._ngZone.run(function () { return _this._startDragSequence(event); });\n                        }\n                    }\n                    return;\n                }\n                // We only need the preview dimensions if we have a boundary element.\n                if (_this._boundaryElement) {\n                    // Cache the preview element rect if we haven't cached it already or if\n                    // we cached it too early before the element dimensions were computed.\n                    if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                        _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                    }\n                }\n                var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n                _this._hasMoved = true;\n                event.preventDefault();\n                _this._updatePointerDirectionDelta(constrainedPointerPosition);\n                if (_this._dropContainer) {\n                    _this._updateActiveDropContainer(constrainedPointerPosition);\n                }\n                else {\n                    var activeTransform = _this._activeTransform;\n                    activeTransform.x =\n                        constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                    activeTransform.y =\n                        constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                    _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                    // Apply transform as attribute if dragging and svg element to work for IE\n                    if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                        var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                        _this._rootElement.setAttribute('transform', appliedTransform);\n                    }\n                }\n                // Since this event gets fired for every pixel while dragging, we only\n                // want to fire it if the consumer opted into it. Also we have to\n                // re-enter the zone because we run all of the events on the outside.\n                if (_this._moveEvents.observers.length) {\n                    _this._ngZone.run(function () {\n                        _this._moveEvents.next({\n                            source: _this,\n                            pointerPosition: constrainedPointerPosition,\n                            event: event,\n                            distance: _this._getDragDistance(constrainedPointerPosition),\n                            delta: _this._pointerDirectionDelta\n                        });\n                    });\n                }\n            };\n            /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n            this._pointerUp = function (event) {\n                _this._endDragSequence(event);\n            };\n            this.withRootElement(element);\n            _dragDropRegistry.registerDragItem(this);\n        }\n        Object.defineProperty(DragRef.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n            },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this._disabled) {\n                    this._disabled = newValue;\n                    this._toggleNativeDragInteractions();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        DragRef.prototype.getPlaceholderElement = function () {\n            return this._placeholder;\n        };\n        /** Returns the root draggable element. */\n        DragRef.prototype.getRootElement = function () {\n            return this._rootElement;\n        };\n        /** Registers the handles that can be used to drag the element. */\n        DragRef.prototype.withHandles = function (handles) {\n            this._handles = handles.map(function (handle) { return coercion.coerceElement(handle); });\n            this._handles.forEach(function (handle) { return toggleNativeDragInteractions(handle, false); });\n            this._toggleNativeDragInteractions();\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag preview.\n         * @param template Template that from which to stamp out the preview.\n         */\n        DragRef.prototype.withPreviewTemplate = function (template) {\n            this._previewTemplate = template;\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag placeholder.\n         * @param template Template that from which to stamp out the placeholder.\n         */\n        DragRef.prototype.withPlaceholderTemplate = function (template) {\n            this._placeholderTemplate = template;\n            return this;\n        };\n        /**\n         * Sets an alternate drag root element. The root element is the element that will be moved as\n         * the user is dragging. Passing an alternate root element is useful when trying to enable\n         * dragging on an element that you might not have access to.\n         */\n        DragRef.prototype.withRootElement = function (rootElement) {\n            var element = coercion.coerceElement(rootElement);\n            if (element !== this._rootElement) {\n                if (this._rootElement) {\n                    this._removeRootElementListeners(this._rootElement);\n                }\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                this._initialTransform = undefined;\n                this._rootElement = element;\n            }\n            return this;\n        };\n        /**\n         * Element to which the draggable's position will be constrained.\n         */\n        DragRef.prototype.withBoundaryElement = function (boundaryElement) {\n            var _this = this;\n            this._boundaryElement = boundaryElement ? coercion.coerceElement(boundaryElement) : null;\n            this._resizeSubscription.unsubscribe();\n            if (boundaryElement) {\n                this._resizeSubscription = this._viewportRuler\n                    .change(10)\n                    .subscribe(function () { return _this._containInsideBoundaryOnResize(); });\n            }\n            return this;\n        };\n        /** Removes the dragging functionality from the DOM element. */\n        DragRef.prototype.dispose = function () {\n            this._removeRootElementListeners(this._rootElement);\n            // Do this check before removing from the registry since it'll\n            // stop being considered as dragged once it is removed.\n            if (this.isDragging()) {\n                // Since we move out the element to the end of the body while it's being\n                // dragged, we have to make sure that it's removed if it gets destroyed.\n                removeElement(this._rootElement);\n            }\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._dragDropRegistry.removeDragItem(this);\n            this._removeSubscriptions();\n            this.beforeStarted.complete();\n            this.started.complete();\n            this.released.complete();\n            this.ended.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this._moveEvents.complete();\n            this._handles = [];\n            this._disabledHandles.clear();\n            this._dropContainer = undefined;\n            this._boundaryElement = this._rootElement = this._placeholderTemplate =\n                this._previewTemplate = this._nextSibling = null;\n        };\n        /** Checks whether the element is currently being dragged. */\n        DragRef.prototype.isDragging = function () {\n            return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n        };\n        /** Resets a standalone drag item to its initial position. */\n        DragRef.prototype.reset = function () {\n            this._rootElement.style.transform = this._initialTransform || '';\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform = { x: 0, y: 0 };\n        };\n        /**\n         * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n         * @param handle Handle element that should be disabled.\n         */\n        DragRef.prototype.disableHandle = function (handle) {\n            if (this._handles.indexOf(handle) > -1) {\n                this._disabledHandles.add(handle);\n            }\n        };\n        /**\n         * Enables a handle, if it has been disabled.\n         * @param handle Handle element to be enabled.\n         */\n        DragRef.prototype.enableHandle = function (handle) {\n            this._disabledHandles.delete(handle);\n        };\n        /** Sets the layout direction of the draggable item. */\n        DragRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /** Sets the container that the item is part of. */\n        DragRef.prototype._withDropContainer = function (container) {\n            this._dropContainer = container;\n        };\n        /**\n         * Gets the current position in pixels the draggable outside of a drop container.\n         */\n        DragRef.prototype.getFreeDragPosition = function () {\n            var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n            return { x: position.x, y: position.y };\n        };\n        /**\n         * Sets the current position in pixels the draggable outside of a drop container.\n         * @param value New position to be set.\n         */\n        DragRef.prototype.setFreeDragPosition = function (value) {\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform.x = value.x;\n            this._passiveTransform.y = value.y;\n            if (!this._dropContainer) {\n                this._applyRootElementTransform(value.x, value.y);\n            }\n            return this;\n        };\n        /** Updates the item's sort order based on the last-known pointer position. */\n        DragRef.prototype._sortFromLastPointerPosition = function () {\n            var position = this._pointerPositionAtLastDirectionChange;\n            if (position && this._dropContainer) {\n                this._updateActiveDropContainer(position);\n            }\n        };\n        /** Unsubscribes from the global subscriptions. */\n        DragRef.prototype._removeSubscriptions = function () {\n            this._pointerMoveSubscription.unsubscribe();\n            this._pointerUpSubscription.unsubscribe();\n            this._scrollSubscription.unsubscribe();\n        };\n        /** Destroys the preview element and its ViewRef. */\n        DragRef.prototype._destroyPreview = function () {\n            if (this._preview) {\n                removeElement(this._preview);\n            }\n            if (this._previewRef) {\n                this._previewRef.destroy();\n            }\n            this._preview = this._previewRef = null;\n        };\n        /** Destroys the placeholder element and its ViewRef. */\n        DragRef.prototype._destroyPlaceholder = function () {\n            if (this._placeholder) {\n                removeElement(this._placeholder);\n            }\n            if (this._placeholderRef) {\n                this._placeholderRef.destroy();\n            }\n            this._placeholder = this._placeholderRef = null;\n        };\n        /**\n         * Clears subscriptions and stops the dragging sequence.\n         * @param event Browser event object that ended the sequence.\n         */\n        DragRef.prototype._endDragSequence = function (event) {\n            var _this = this;\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!this._dragDropRegistry.isDragging(this)) {\n                return;\n            }\n            this._removeSubscriptions();\n            this._dragDropRegistry.stopDragging(this);\n            this._toggleNativeDragInteractions();\n            if (this._handles) {\n                this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n            }\n            if (!this._hasStartedDragging) {\n                return;\n            }\n            this.released.next({ source: this });\n            if (this._dropContainer) {\n                // Stop scrolling immediately, instead of waiting for the animation to finish.\n                this._dropContainer._stopScrolling();\n                this._animatePreviewToPlaceholder().then(function () {\n                    _this._cleanupDragArtifacts(event);\n                    _this._cleanupCachedDimensions();\n                    _this._dragDropRegistry.stopDragging(_this);\n                });\n            }\n            else {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                this._passiveTransform.x = this._activeTransform.x;\n                this._passiveTransform.y = this._activeTransform.y;\n                this._ngZone.run(function () {\n                    _this.ended.next({\n                        source: _this,\n                        distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))\n                    });\n                });\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }\n        };\n        /** Starts the dragging sequence. */\n        DragRef.prototype._startDragSequence = function (event) {\n            // Emit the event on the item before the one on the container.\n            this.started.next({ source: this });\n            if (isTouchEvent(event)) {\n                this._lastTouchEventTime = Date.now();\n            }\n            this._toggleNativeDragInteractions();\n            if (this._dropContainer) {\n                var element = this._rootElement;\n                // Grab the `nextSibling` before the preview and placeholder\n                // have been created so we don't get the preview by accident.\n                this._nextSibling = element.nextSibling;\n                var preview = this._preview = this._createPreviewElement();\n                var placeholder = this._placeholder = this._createPlaceholderElement();\n                // We move the element out at the end of the body and we make it hidden, because keeping it in\n                // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n                // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n                element.style.display = 'none';\n                this._document.body.appendChild(element.parentNode.replaceChild(placeholder, element));\n                getPreviewInsertionPoint(this._document).appendChild(preview);\n                this._dropContainer.start();\n            }\n        };\n        /**\n         * Sets up the different variables and subscriptions\n         * that will be necessary for the dragging sequence.\n         * @param referenceElement Element that started the drag sequence.\n         * @param event Browser event object that started the sequence.\n         */\n        DragRef.prototype._initializeDragSequence = function (referenceElement, event) {\n            var _this = this;\n            // Always stop propagation for the event that initializes\n            // the dragging sequence, in order to prevent it from potentially\n            // starting another sequence for a draggable parent somewhere up the DOM tree.\n            event.stopPropagation();\n            var isDragging = this.isDragging();\n            var isTouchSequence = isTouchEvent(event);\n            var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n            var rootElement = this._rootElement;\n            var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n                this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n            // If the event started from an element with the native HTML drag&drop, it'll interfere\n            // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n            // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n            // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n            // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n            // events from firing on touch devices.\n            if (event.target && event.target.draggable && event.type === 'mousedown') {\n                event.preventDefault();\n            }\n            // Abort if the user is already dragging or is using a mouse button other than the primary one.\n            if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n                return;\n            }\n            // If we've got handles, we need to disable the tap highlight on the entire root element,\n            // otherwise iOS will still add it, even though all the drag interactions on the handle\n            // are disabled.\n            if (this._handles.length) {\n                this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n                rootElement.style.webkitTapHighlightColor = 'transparent';\n            }\n            this._hasStartedDragging = this._hasMoved = false;\n            this._initialContainer = this._dropContainer;\n            // Avoid multiple subscriptions and memory leaks when multi touch\n            // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n            this._removeSubscriptions();\n            this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n            this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n            this._scrollSubscription = this._dragDropRegistry.scroll.pipe(operators.startWith(null)).subscribe(function () {\n                _this._scrollPosition = _this._viewportRuler.getViewportScrollPosition();\n            });\n            if (this._boundaryElement) {\n                this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n            }\n            // If we have a custom preview template, the element won't be visible anyway so we avoid the\n            // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n            this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n                { x: 0, y: 0 } :\n                this._getPointerPositionInElement(referenceElement, event);\n            var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n            this._pointerDirectionDelta = { x: 0, y: 0 };\n            this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n            this._dragStartTime = Date.now();\n            this._dragDropRegistry.startDragging(this, event);\n        };\n        /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n        DragRef.prototype._cleanupDragArtifacts = function (event) {\n            var _this = this;\n            // Restore the element's visibility and insert it at its old position in the DOM.\n            // It's important that we maintain the position, because moving the element around in the DOM\n            // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n            // while moving the existing elements in all other cases.\n            this._rootElement.style.display = '';\n            if (this._nextSibling) {\n                this._nextSibling.parentNode.insertBefore(this._rootElement, this._nextSibling);\n            }\n            else {\n                coercion.coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n            }\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._boundaryRect = this._previewRect = undefined;\n            // Re-enter the NgZone since we bound `document` events on the outside.\n            this._ngZone.run(function () {\n                var container = _this._dropContainer;\n                var currentIndex = container.getItemIndex(_this);\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));\n                var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n                _this.ended.next({ source: _this, distance: distance });\n                _this.dropped.next({\n                    item: _this,\n                    currentIndex: currentIndex,\n                    previousIndex: _this._initialContainer.getItemIndex(_this),\n                    container: container,\n                    previousContainer: _this._initialContainer,\n                    isPointerOverContainer: isPointerOverContainer,\n                    distance: distance\n                });\n                container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance);\n                _this._dropContainer = _this._initialContainer;\n            });\n        };\n        /**\n         * Updates the item's position in its drop container, or moves it\n         * into a new one, depending on its current drag position.\n         */\n        DragRef.prototype._updateActiveDropContainer = function (_a) {\n            var _this = this;\n            var x = _a.x, y = _a.y;\n            // Drop container that draggable has been moved into.\n            var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n            // If we couldn't find a new container to move the item into, and the item has left its\n            // initial container, check whether the it's over the initial container. This handles the\n            // case where two containers are connected one way and the user tries to undo dragging an\n            // item into a new container.\n            if (!newContainer && this._dropContainer !== this._initialContainer &&\n                this._initialContainer._isOverContainer(x, y)) {\n                newContainer = this._initialContainer;\n            }\n            if (newContainer && newContainer !== this._dropContainer) {\n                this._ngZone.run(function () {\n                    // Notify the old container that the item has left.\n                    _this.exited.next({ item: _this, container: _this._dropContainer });\n                    _this._dropContainer.exit(_this);\n                    // Notify the new container that the item has entered.\n                    _this._dropContainer = newContainer;\n                    _this._dropContainer.enter(_this, x, y);\n                    _this.entered.next({\n                        item: _this,\n                        container: newContainer,\n                        currentIndex: newContainer.getItemIndex(_this)\n                    });\n                });\n            }\n            this._dropContainer._startScrollingIfNecessary(x, y);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._preview.style.transform =\n                getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        };\n        /**\n         * Creates the element that will be rendered next to the user's pointer\n         * and will be used as a preview of the element that is being dragged.\n         */\n        DragRef.prototype._createPreviewElement = function () {\n            var previewConfig = this._previewTemplate;\n            var previewTemplate = previewConfig ? previewConfig.template : null;\n            var preview;\n            if (previewTemplate) {\n                var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n                preview = getRootNode(viewRef, this._document);\n                this._previewRef = viewRef;\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n            else {\n                var element = this._rootElement;\n                var elementRect = element.getBoundingClientRect();\n                preview = deepCloneNode(element);\n                preview.style.width = elementRect.width + \"px\";\n                preview.style.height = elementRect.height + \"px\";\n                preview.style.transform = getTransform(elementRect.left, elementRect.top);\n            }\n            extendStyles(preview.style, {\n                // It's important that we disable the pointer events on the preview, because\n                // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n                pointerEvents: 'none',\n                // We have to reset the margin, because can throw off positioning relative to the viewport.\n                margin: '0',\n                position: 'fixed',\n                top: '0',\n                left: '0',\n                zIndex: '1000'\n            });\n            toggleNativeDragInteractions(preview, false);\n            preview.classList.add('cdk-drag-preview');\n            preview.setAttribute('dir', this._direction);\n            return preview;\n        };\n        /**\n         * Animates the preview element from its current position to the location of the drop placeholder.\n         * @returns Promise that resolves when the animation completes.\n         */\n        DragRef.prototype._animatePreviewToPlaceholder = function () {\n            var _this = this;\n            // If the user hasn't moved yet, the transitionend event won't fire.\n            if (!this._hasMoved) {\n                return Promise.resolve();\n            }\n            var placeholderRect = this._placeholder.getBoundingClientRect();\n            // Apply the class that adds a transition to the preview.\n            this._preview.classList.add('cdk-drag-animating');\n            // Move the preview to the placeholder position.\n            this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n            // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n            // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n            // apply its style, we take advantage of the available info to figure out whether we need to\n            // bind the event in the first place.\n            var duration = getTransformTransitionDurationInMs(this._preview);\n            if (duration === 0) {\n                return Promise.resolve();\n            }\n            return this._ngZone.runOutsideAngular(function () {\n                return new Promise(function (resolve) {\n                    var handler = (function (event) {\n                        if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                            _this._preview.removeEventListener('transitionend', handler);\n                            resolve();\n                            clearTimeout(timeout);\n                        }\n                    });\n                    // If a transition is short enough, the browser might not fire the `transitionend` event.\n                    // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                    // fire if the transition hasn't completed when it was supposed to.\n                    var timeout = setTimeout(handler, duration * 1.5);\n                    _this._preview.addEventListener('transitionend', handler);\n                });\n            });\n        };\n        /** Creates an element that will be shown instead of the current element while dragging. */\n        DragRef.prototype._createPlaceholderElement = function () {\n            var placeholderConfig = this._placeholderTemplate;\n            var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n            var placeholder;\n            if (placeholderTemplate) {\n                this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n                placeholder = getRootNode(this._placeholderRef, this._document);\n            }\n            else {\n                placeholder = deepCloneNode(this._rootElement);\n            }\n            placeholder.classList.add('cdk-drag-placeholder');\n            return placeholder;\n        };\n        /**\n         * Figures out the coordinates at which an element was picked up.\n         * @param referenceElement Element that initiated the dragging.\n         * @param event Event that initiated the dragging.\n         */\n        DragRef.prototype._getPointerPositionInElement = function (referenceElement, event) {\n            var elementRect = this._rootElement.getBoundingClientRect();\n            var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n            var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n            var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n            var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n            var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n            return {\n                x: referenceRect.left - elementRect.left + x,\n                y: referenceRect.top - elementRect.top + y\n            };\n        };\n        /** Determines the point of the page that was touched by the user. */\n        DragRef.prototype._getPointerPositionOnPage = function (event) {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n            return {\n                x: point.pageX - this._scrollPosition.left,\n                y: point.pageY - this._scrollPosition.top\n            };\n        };\n        /** Gets the pointer position on the page, accounting for any position constraints. */\n        DragRef.prototype._getConstrainedPointerPosition = function (event) {\n            var point = this._getPointerPositionOnPage(event);\n            var constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n            var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n            if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n                constrainedPoint.y = this._pickupPositionOnPage.y;\n            }\n            else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n                constrainedPoint.x = this._pickupPositionOnPage.x;\n            }\n            if (this._boundaryRect) {\n                var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n                var boundaryRect = this._boundaryRect;\n                var previewRect = this._previewRect;\n                var minY = boundaryRect.top + pickupY;\n                var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n                var minX = boundaryRect.left + pickupX;\n                var maxX = boundaryRect.right - (previewRect.width - pickupX);\n                constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n                constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n            }\n            return constrainedPoint;\n        };\n        /** Updates the current drag delta, based on the user's current pointer position on the page. */\n        DragRef.prototype._updatePointerDirectionDelta = function (pointerPositionOnPage) {\n            var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n            var delta = this._pointerDirectionDelta;\n            var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n            // Amount of pixels the user has dragged since the last time the direction changed.\n            var changeX = Math.abs(x - positionSinceLastChange.x);\n            var changeY = Math.abs(y - positionSinceLastChange.y);\n            // Because we handle pointer events on a per-pixel basis, we don't want the delta\n            // to change for every pixel, otherwise anything that depends on it can look erratic.\n            // To make the delta more consistent, we track how much the user has moved since the last\n            // delta change and we only update it after it has reached a certain threshold.\n            if (changeX > this._config.pointerDirectionChangeThreshold) {\n                delta.x = x > positionSinceLastChange.x ? 1 : -1;\n                positionSinceLastChange.x = x;\n            }\n            if (changeY > this._config.pointerDirectionChangeThreshold) {\n                delta.y = y > positionSinceLastChange.y ? 1 : -1;\n                positionSinceLastChange.y = y;\n            }\n            return delta;\n        };\n        /** Toggles the native drag interactions, based on how many handles are registered. */\n        DragRef.prototype._toggleNativeDragInteractions = function () {\n            if (!this._rootElement || !this._handles) {\n                return;\n            }\n            var shouldEnable = this._handles.length > 0 || !this.isDragging();\n            if (shouldEnable !== this._nativeInteractionsEnabled) {\n                this._nativeInteractionsEnabled = shouldEnable;\n                toggleNativeDragInteractions(this._rootElement, shouldEnable);\n            }\n        };\n        /** Removes the manually-added event listeners from the root element. */\n        DragRef.prototype._removeRootElementListeners = function (element) {\n            element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n            element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        };\n        /**\n         * Applies a `transform` to the root element, taking into account any existing transforms on it.\n         * @param x New transform value along the X axis.\n         * @param y New transform value along the Y axis.\n         */\n        DragRef.prototype._applyRootElementTransform = function (x, y) {\n            var transform = getTransform(x, y);\n            // Cache the previous transform amount only after the first drag sequence, because\n            // we don't want our own transforms to stack on top of each other.\n            if (this._initialTransform == null) {\n                this._initialTransform = this._rootElement.style.transform || '';\n            }\n            // Preserve the previous `transform` value, if there was one. Note that we apply our own\n            // transform before the user's, because things like rotation can affect which direction\n            // the element will be translated towards.\n            this._rootElement.style.transform = this._initialTransform ?\n                transform + ' ' + this._initialTransform : transform;\n        };\n        /**\n         * Gets the distance that the user has dragged during the current drag sequence.\n         * @param currentPosition Current position of the user's pointer.\n         */\n        DragRef.prototype._getDragDistance = function (currentPosition) {\n            var pickupPosition = this._pickupPositionOnPage;\n            if (pickupPosition) {\n                return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n            }\n            return { x: 0, y: 0 };\n        };\n        /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n        DragRef.prototype._cleanupCachedDimensions = function () {\n            this._boundaryRect = this._previewRect = undefined;\n        };\n        /**\n         * Checks whether the element is still inside its boundary after the viewport has been resized.\n         * If not, the position is adjusted so that the element fits again.\n         */\n        DragRef.prototype._containInsideBoundaryOnResize = function () {\n            var _a = this._passiveTransform, x = _a.x, y = _a.y;\n            if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n                return;\n            }\n            var boundaryRect = this._boundaryElement.getBoundingClientRect();\n            var elementRect = this._rootElement.getBoundingClientRect();\n            var leftOverflow = boundaryRect.left - elementRect.left;\n            var rightOverflow = elementRect.right - boundaryRect.right;\n            var topOverflow = boundaryRect.top - elementRect.top;\n            var bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n            // If the element has become wider than the boundary, we can't\n            // do much to make it fit so we just anchor it to the left.\n            if (boundaryRect.width > elementRect.width) {\n                if (leftOverflow > 0) {\n                    x += leftOverflow;\n                }\n                if (rightOverflow > 0) {\n                    x -= rightOverflow;\n                }\n            }\n            else {\n                x = 0;\n            }\n            // If the element has become taller than the boundary, we can't\n            // do much to make it fit so we just anchor it to the top.\n            if (boundaryRect.height > elementRect.height) {\n                if (topOverflow > 0) {\n                    y += topOverflow;\n                }\n                if (bottomOverflow > 0) {\n                    y -= bottomOverflow;\n                }\n            }\n            else {\n                y = 0;\n            }\n            if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n                this.setFreeDragPosition({ y: y, x: x });\n            }\n        };\n        /** Gets the drag start delay, based on the event type. */\n        DragRef.prototype._getDragStartDelay = function (event) {\n            var value = this.dragStartDelay;\n            if (typeof value === 'number') {\n                return value;\n            }\n            else if (isTouchEvent(event)) {\n                return value.touch;\n            }\n            return value ? value.mouse : 0;\n        };\n        return DragRef;\n    }());\n    /**\n     * Gets a 3d `transform` that can be applied to an element.\n     * @param x Desired position of the element along the X axis.\n     * @param y Desired position of the element along the Y axis.\n     */\n    function getTransform(x, y) {\n        // Round the transforms since some browsers will\n        // blur the elements for sub-pixel transforms.\n        return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n    }\n    /** Creates a deep clone of an element. */\n    function deepCloneNode(node) {\n        var clone = node.cloneNode(true);\n        var descendantsWithId = clone.querySelectorAll('[id]');\n        var descendantCanvases = node.querySelectorAll('canvas');\n        // Remove the `id` to avoid having multiple elements with the same id on the page.\n        clone.removeAttribute('id');\n        for (var i = 0; i < descendantsWithId.length; i++) {\n            descendantsWithId[i].removeAttribute('id');\n        }\n        // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n        // We match up the cloned canvas to their sources using their index in the DOM.\n        if (descendantCanvases.length) {\n            var cloneCanvases = clone.querySelectorAll('canvas');\n            for (var i = 0; i < descendantCanvases.length; i++) {\n                var correspondingCloneContext = cloneCanvases[i].getContext('2d');\n                if (correspondingCloneContext) {\n                    correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n                }\n            }\n        }\n        return clone;\n    }\n    /** Clamps a value between a minimum and a maximum. */\n    function clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    /**\n     * Helper to remove an element from the DOM and to do all the necessary null checks.\n     * @param element Element to be removed.\n     */\n    function removeElement(element) {\n        if (element && element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    /** Determines whether an event is a touch event. */\n    function isTouchEvent(event) {\n        // This function is called for every pixel that the user has dragged so we need it to be\n        // as fast as possible. Since we only bind mouse events and touch events, we can assume\n        // that if the event's name starts with `t`, it's a touch event.\n        return event.type[0] === 't';\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    function getPreviewInsertionPoint(documentRef) {\n        // We can't use the body if the user is in fullscreen mode,\n        // because the preview will render under the fullscreen element.\n        // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n        return documentRef.fullscreenElement ||\n            documentRef.webkitFullscreenElement ||\n            documentRef.mozFullScreenElement ||\n            documentRef.msFullscreenElement ||\n            documentRef.body;\n    }\n    /**\n     * Gets the root HTML element of an embedded view.\n     * If the root is not an HTML element it gets wrapped in one.\n     */\n    function getRootNode(viewRef, _document) {\n        var rootNode = viewRef.rootNodes[0];\n        if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n            var wrapper = _document.createElement('div');\n            wrapper.appendChild(rootNode);\n            return wrapper;\n        }\n        return rootNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Moves an item one index in an array to another.\n     * @param array Array in which to move the item.\n     * @param fromIndex Starting index of the item.\n     * @param toIndex Index to which the item should be moved.\n     */\n    function moveItemInArray(array, fromIndex, toIndex) {\n        var from = clamp$1(fromIndex, array.length - 1);\n        var to = clamp$1(toIndex, array.length - 1);\n        if (from === to) {\n            return;\n        }\n        var target = array[from];\n        var delta = to < from ? -1 : 1;\n        for (var i = from; i !== to; i += delta) {\n            array[i] = array[i + delta];\n        }\n        array[to] = target;\n    }\n    /**\n     * Moves an item from one array to another.\n     * @param currentArray Array from which to transfer the item.\n     * @param targetArray Array into which to put the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     */\n    function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var from = clamp$1(currentIndex, currentArray.length - 1);\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n        }\n    }\n    /**\n     * Copies an item from one array to another, leaving it in its\n     * original position in current array.\n     * @param currentArray Array from which to copy the item.\n     * @param targetArray Array into which is copy the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     *\n     */\n    function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray[currentIndex]);\n        }\n    }\n    /** Clamps a number between zero and a maximum. */\n    function clamp$1(value, max) {\n        return Math.max(0, Math.min(max, value));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Proximity, as a ratio to width/height, at which a\n     * dragged item will affect the drop container.\n     */\n    var DROP_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n     * viewport. The value comes from trying it out manually until it feels right.\n     */\n    var SCROLL_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Number of pixels to scroll for each frame when auto-scrolling an element.\n     * The value comes from trying it out manually until it feels right.\n     */\n    var AUTO_SCROLL_STEP = 2;\n    /**\n     * Reference to a drop list. Used to manipulate or dispose of the container.\n     * @docs-private\n     */\n    var DropListRef = /** @class */ (function () {\n        function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n            var _this = this;\n            this._dragDropRegistry = _dragDropRegistry;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            /** Whether starting a dragging sequence from this container is disabled. */\n            this.disabled = false;\n            /** Whether sorting items within the list is disabled. */\n            this.sortingDisabled = false;\n            /**\n             * Whether auto-scrolling the view when the user\n             * moves their pointer close to the edges is disabled.\n             */\n            this.autoScrollDisabled = false;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits right before dragging has started. */\n            this.beforeStarted = new rxjs.Subject();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new rxjs.Subject();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new rxjs.Subject();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new rxjs.Subject();\n            /** Whether an item in the list is being dragged. */\n            this._isDragging = false;\n            /** Cache of the dimensions of all the items inside the container. */\n            this._itemPositions = [];\n            /** Keeps track of the container's scroll position. */\n            this._scrollPosition = { top: 0, left: 0 };\n            /** Keeps track of the scroll position of the viewport. */\n            this._viewportScrollPosition = { top: 0, left: 0 };\n            /**\n             * Keeps track of the item that was last swapped with the dragged item, as\n             * well as what direction the pointer was moving in when the swap occured.\n             */\n            this._previousSwap = { drag: null, delta: 0 };\n            /** Drop lists that are connected to the current one. */\n            this._siblings = [];\n            /** Direction in which the list is oriented. */\n            this._orientation = 'vertical';\n            /** Connected siblings that currently have a dragged item. */\n            this._activeSiblings = new Set();\n            /** Layout direction of the drop list. */\n            this._direction = 'ltr';\n            /** Subscription to the window being scrolled. */\n            this._viewportScrollSubscription = rxjs.Subscription.EMPTY;\n            /** Vertical direction in which the list is currently scrolling. */\n            this._verticalScrollDirection = 0 /* NONE */;\n            /** Horizontal direction in which the list is currently scrolling. */\n            this._horizontalScrollDirection = 0 /* NONE */;\n            /** Used to signal to the current auto-scroll sequence when to stop. */\n            this._stopScrollTimers = new rxjs.Subject();\n            /** Handles the container being scrolled. Has to be an arrow function to preserve the context. */\n            this._handleScroll = function () {\n                if (!_this.isDragging()) {\n                    return;\n                }\n                var element = coercion.coerceElement(_this.element);\n                _this._updateAfterScroll(_this._scrollPosition, element.scrollTop, element.scrollLeft);\n            };\n            /** Starts the interval that'll auto-scroll the element. */\n            this._startScrollInterval = function () {\n                _this._stopScrolling();\n                rxjs.interval(0, rxjs.animationFrameScheduler)\n                    .pipe(operators.takeUntil(_this._stopScrollTimers))\n                    .subscribe(function () {\n                    var node = _this._scrollNode;\n                    if (_this._verticalScrollDirection === 1 /* UP */) {\n                        incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._verticalScrollDirection === 2 /* DOWN */) {\n                        incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                    if (_this._horizontalScrollDirection === 1 /* LEFT */) {\n                        incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._horizontalScrollDirection === 2 /* RIGHT */) {\n                        incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                });\n            };\n            var nativeNode = this.element = coercion.coerceElement(element);\n            this._shadowRoot = getShadowRoot(nativeNode) || _document;\n            _dragDropRegistry.registerDropContainer(this);\n        }\n        /** Removes the drop list functionality from the DOM element. */\n        DropListRef.prototype.dispose = function () {\n            this._stopScrolling();\n            this._stopScrollTimers.complete();\n            this._removeListeners();\n            this.beforeStarted.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this.sorted.complete();\n            this._activeSiblings.clear();\n            this._scrollNode = null;\n            this._dragDropRegistry.removeDropContainer(this);\n        };\n        /** Whether an item from this list is currently being dragged. */\n        DropListRef.prototype.isDragging = function () {\n            return this._isDragging;\n        };\n        /** Starts dragging an item. */\n        DropListRef.prototype.start = function () {\n            var _this = this;\n            var element = coercion.coerceElement(this.element);\n            this.beforeStarted.next();\n            this._isDragging = true;\n            this._cacheItems();\n            this._siblings.forEach(function (sibling) { return sibling._startReceiving(_this); });\n            this._removeListeners();\n            this._ngZone.runOutsideAngular(function () { return element.addEventListener('scroll', _this._handleScroll); });\n            this._listenToScrollEvents();\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         */\n        DropListRef.prototype.enter = function (item, pointerX, pointerY) {\n            this.start();\n            // If sorting is disabled, we want the item to return to its starting\n            // position if the user is returning it to its initial container.\n            var newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n            var activeDraggables = this._activeDraggables;\n            var currentIndex = activeDraggables.indexOf(item);\n            var placeholder = item.getPlaceholderElement();\n            var newPositionReference = activeDraggables[newIndex];\n            // If the item at the new position is the same as the item that is being dragged,\n            // it means that we're trying to restore the item to its initial position. In this\n            // case we should use the next item from the list as the reference.\n            if (newPositionReference === item) {\n                newPositionReference = activeDraggables[newIndex + 1];\n            }\n            // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n            // into another container and back again), we have to ensure that it isn't duplicated.\n            if (currentIndex > -1) {\n                activeDraggables.splice(currentIndex, 1);\n            }\n            // Don't use items that are being dragged as a reference, because\n            // their element has been moved down to the bottom of the body.\n            if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n                var element = newPositionReference.getRootElement();\n                element.parentElement.insertBefore(placeholder, element);\n                activeDraggables.splice(newIndex, 0, item);\n            }\n            else {\n                coercion.coerceElement(this.element).appendChild(placeholder);\n                activeDraggables.push(item);\n            }\n            // The transform needs to be cleared so it doesn't throw off the measurements.\n            placeholder.style.transform = '';\n            // Note that the positions were already cached when we called `start` above,\n            // but we need to refresh them since the amount of items has changed.\n            this._cacheItemPositions();\n            this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         */\n        DropListRef.prototype.exit = function (item) {\n            this._reset();\n            this.exited.next({ item: item, container: this });\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         * @param distance Distance the user has dragged since the start of the dragging sequence.\n         */\n        DropListRef.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer, distance) {\n            this._reset();\n            this.dropped.next({\n                item: item,\n                currentIndex: currentIndex,\n                previousIndex: previousContainer.getItemIndex(item),\n                container: this,\n                previousContainer: previousContainer,\n                isPointerOverContainer: isPointerOverContainer,\n                distance: distance\n            });\n        };\n        /**\n         * Sets the draggable items that are a part of this list.\n         * @param items Items that are a part of this list.\n         */\n        DropListRef.prototype.withItems = function (items) {\n            var _this = this;\n            this._draggables = items;\n            items.forEach(function (item) { return item._withDropContainer(_this); });\n            if (this.isDragging()) {\n                this._cacheItems();\n            }\n            return this;\n        };\n        /** Sets the layout direction of the drop list. */\n        DropListRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /**\n         * Sets the containers that are connected to this one. When two or more containers are\n         * connected, the user will be allowed to transfer items between them.\n         * @param connectedTo Other containers that the current containers should be connected to.\n         */\n        DropListRef.prototype.connectedTo = function (connectedTo) {\n            this._siblings = connectedTo.slice();\n            return this;\n        };\n        /**\n         * Sets the orientation of the container.\n         * @param orientation New orientation for the container.\n         */\n        DropListRef.prototype.withOrientation = function (orientation) {\n            this._orientation = orientation;\n            return this;\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         */\n        DropListRef.prototype.getItemIndex = function (item) {\n            if (!this._isDragging) {\n                return this._draggables.indexOf(item);\n            }\n            // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n            // The rest of the logic still stands no matter what orientation we're in, however\n            // we need to invert the array when determining the index.\n            var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n                this._itemPositions.slice().reverse() : this._itemPositions;\n            return findIndex(items, function (currentItem) { return currentItem.drag === item; });\n        };\n        /**\n         * Whether the list is able to receive the item that\n         * is currently being dragged inside a connected drop list.\n         */\n        DropListRef.prototype.isReceiving = function () {\n            return this._activeSiblings.size > 0;\n        };\n        /**\n         * Sorts an item inside the container based on its position.\n         * @param item Item to be sorted.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param pointerDelta Direction in which the pointer is moving along each axis.\n         */\n        DropListRef.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {\n            // Don't sort the item if sorting is disabled or it's out of range.\n            if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n                return;\n            }\n            var siblings = this._itemPositions;\n            var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n            if (newIndex === -1 && siblings.length > 0) {\n                return;\n            }\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentIndex = findIndex(siblings, function (currentItem) { return currentItem.drag === item; });\n            var siblingAtNewPosition = siblings[newIndex];\n            var currentPosition = siblings[currentIndex].clientRect;\n            var newPosition = siblingAtNewPosition.clientRect;\n            var delta = currentIndex > newIndex ? 1 : -1;\n            this._previousSwap.drag = siblingAtNewPosition.drag;\n            this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n            // How many pixels the item's placeholder should be offset.\n            var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n            // How many pixels all the other items should be offset.\n            var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n            // Save the previous order of the items before moving the item to its new index.\n            // We use this to check whether an item has been moved as a result of the sorting.\n            var oldOrder = siblings.slice();\n            // Shuffle the array in place.\n            moveItemInArray(siblings, currentIndex, newIndex);\n            this.sorted.next({\n                previousIndex: currentIndex,\n                currentIndex: newIndex,\n                container: this,\n                item: item\n            });\n            siblings.forEach(function (sibling, index) {\n                // Don't do anything if the position hasn't changed.\n                if (oldOrder[index] === sibling) {\n                    return;\n                }\n                var isDraggedItem = sibling.drag === item;\n                var offset = isDraggedItem ? itemOffset : siblingOffset;\n                var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                    sibling.drag.getRootElement();\n                // Update the offset to reflect the new position.\n                sibling.offset += offset;\n                // Since we're moving the items with a `transform`, we need to adjust their cached\n                // client rects to reflect their new position, as well as swap their positions in the cache.\n                // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n                // elements may be mid-animation which will give us a wrong result.\n                if (isHorizontal) {\n                    // Round the transforms since some browsers will\n                    // blur the elements, for sub-pixel transforms.\n                    elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                    adjustClientRect(sibling.clientRect, 0, offset);\n                }\n                else {\n                    elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                    adjustClientRect(sibling.clientRect, offset, 0);\n                }\n            });\n        };\n        /**\n         * Checks whether the user's pointer is close to the edges of either the\n         * viewport or the drop list and starts the auto-scroll sequence.\n         * @param pointerX User's pointer position along the x axis.\n         * @param pointerY User's pointer position along the y axis.\n         */\n        DropListRef.prototype._startScrollingIfNecessary = function (pointerX, pointerY) {\n            var _a;\n            if (this.autoScrollDisabled) {\n                return;\n            }\n            var scrollNode;\n            var verticalScrollDirection = 0 /* NONE */;\n            var horizontalScrollDirection = 0 /* NONE */;\n            // Check whether we should start scrolling the container.\n            if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n                var element = coercion.coerceElement(this.element);\n                _a = tslib_1.__read(getElementScrollDirections(element, this._clientRect, pointerX, pointerY), 2), verticalScrollDirection = _a[0], horizontalScrollDirection = _a[1];\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n            // Otherwise check if we can start scrolling the viewport.\n            if (!verticalScrollDirection && !horizontalScrollDirection) {\n                var _b = this._viewportRuler.getViewportSize(), width = _b.width, height = _b.height;\n                var clientRect = { width: width, height: height, top: 0, right: width, bottom: height, left: 0 };\n                verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n                horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n                scrollNode = window;\n            }\n            if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n                this._verticalScrollDirection = verticalScrollDirection;\n                this._horizontalScrollDirection = horizontalScrollDirection;\n                this._scrollNode = scrollNode;\n                if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._stopScrolling();\n                }\n            }\n        };\n        /** Stops any currently-running auto-scroll sequences. */\n        DropListRef.prototype._stopScrolling = function () {\n            this._stopScrollTimers.next();\n        };\n        /** Caches the position of the drop list. */\n        DropListRef.prototype._cacheOwnPosition = function () {\n            var element = coercion.coerceElement(this.element);\n            this._clientRect = getMutableClientRect(element);\n            this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n        };\n        /** Refreshes the position cache of the items and sibling containers. */\n        DropListRef.prototype._cacheItemPositions = function () {\n            var _this = this;\n            var isHorizontal = this._orientation === 'horizontal';\n            this._itemPositions = this._activeDraggables.map(function (drag) {\n                var elementToMeasure = _this._dragDropRegistry.isDragging(drag) ?\n                    // If the element is being dragged, we have to measure the\n                    // placeholder, because the element is hidden.\n                    drag.getPlaceholderElement() :\n                    drag.getRootElement();\n                return { drag: drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n            }).sort(function (a, b) {\n                return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                    a.clientRect.top - b.clientRect.top;\n            });\n        };\n        /** Resets the container to its initial state. */\n        DropListRef.prototype._reset = function () {\n            var _this = this;\n            this._isDragging = false;\n            // TODO(crisbeto): may have to wait for the animations to finish.\n            this._activeDraggables.forEach(function (item) { return item.getRootElement().style.transform = ''; });\n            this._siblings.forEach(function (sibling) { return sibling._stopReceiving(_this); });\n            this._activeDraggables = [];\n            this._itemPositions = [];\n            this._previousSwap.drag = null;\n            this._previousSwap.delta = 0;\n            this._stopScrolling();\n            this._removeListeners();\n        };\n        /**\n         * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n         * @param currentIndex Index of the item currently being dragged.\n         * @param siblings All of the items in the list.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getSiblingOffsetPx = function (currentIndex, siblings, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentPosition = siblings[currentIndex].clientRect;\n            var immediateSibling = siblings[currentIndex + delta * -1];\n            var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n            if (immediateSibling) {\n                var start = isHorizontal ? 'left' : 'top';\n                var end = isHorizontal ? 'right' : 'bottom';\n                // Get the spacing between the start of the current item and the end of the one immediately\n                // after it in the direction in which the user is dragging, or vice versa. We add it to the\n                // offset in order to push the element to where it will be when it's inline and is influenced\n                // by the `margin` of its siblings.\n                if (delta === -1) {\n                    siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n                }\n                else {\n                    siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n                }\n            }\n            return siblingOffset;\n        };\n        /**\n         * Checks whether the pointer coordinates are close to the drop container.\n         * @param pointerX Coordinates along the X axis.\n         * @param pointerY Coordinates along the Y axis.\n         */\n        DropListRef.prototype._isPointerNearDropContainer = function (pointerX, pointerY) {\n            var _a = this._clientRect, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n            var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n            var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n            return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n                pointerX > left - xThreshold && pointerX < right + xThreshold;\n        };\n        /**\n         * Gets the offset in pixels by which the item that is being dragged should be moved.\n         * @param currentPosition Current position of the item.\n         * @param newPosition Position of the item where the current item should be moved.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getItemOffsetPx = function (currentPosition, newPosition, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                newPosition.top - currentPosition.top;\n            // Account for differences in the item width/height.\n            if (delta === -1) {\n                itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                    newPosition.height - currentPosition.height;\n            }\n            return itemOffset;\n        };\n        /**\n         * Gets the index of an item in the drop container, based on the position of the user's pointer.\n         * @param item Item that is being sorted.\n         * @param pointerX Position of the user's pointer along the X axis.\n         * @param pointerY Position of the user's pointer along the Y axis.\n         * @param delta Direction in which the user is moving their pointer.\n         */\n        DropListRef.prototype._getItemIndexFromPointerPosition = function (item, pointerX, pointerY, delta) {\n            var _this = this;\n            var isHorizontal = this._orientation === 'horizontal';\n            return findIndex(this._itemPositions, function (_a, _, array) {\n                var drag = _a.drag, clientRect = _a.clientRect;\n                if (drag === item) {\n                    // If there's only one item left in the container, it must be\n                    // the dragged item itself so we use it as a reference.\n                    return array.length < 2;\n                }\n                if (delta) {\n                    var direction = isHorizontal ? delta.x : delta.y;\n                    // If the user is still hovering over the same item as last time, and they didn't change\n                    // the direction in which they're dragging, we don't consider it a direction swap.\n                    if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                        return false;\n                    }\n                }\n                return isHorizontal ?\n                    // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                    pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n            });\n        };\n        /** Caches the current items in the list and their positions. */\n        DropListRef.prototype._cacheItems = function () {\n            this._activeDraggables = this._draggables.slice();\n            this._cacheItemPositions();\n            this._cacheOwnPosition();\n        };\n        /**\n         * Updates the internal state of the container after a scroll event has happened.\n         * @param scrollPosition Object that is keeping track of the scroll position.\n         * @param newTop New top scroll position.\n         * @param newLeft New left scroll position.\n         * @param extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n         *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n         *  the `ClientRect` of the list.\n         */\n        DropListRef.prototype._updateAfterScroll = function (scrollPosition, newTop, newLeft, extraClientRect) {\n            var _this = this;\n            var topDifference = scrollPosition.top - newTop;\n            var leftDifference = scrollPosition.left - newLeft;\n            if (extraClientRect) {\n                adjustClientRect(extraClientRect, topDifference, leftDifference);\n            }\n            // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n            // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n            // behavior where we might be measuring the element before its position has changed.\n            this._itemPositions.forEach(function (_a) {\n                var clientRect = _a.clientRect;\n                adjustClientRect(clientRect, topDifference, leftDifference);\n            });\n            // We need two loops for this, because we want all of the cached\n            // positions to be up-to-date before we re-sort the item.\n            this._itemPositions.forEach(function (_a) {\n                var drag = _a.drag;\n                if (_this._dragDropRegistry.isDragging(drag)) {\n                    // We need to re-sort the item manually, because the pointer move\n                    // events won't be dispatched while the user is scrolling.\n                    drag._sortFromLastPointerPosition();\n                }\n            });\n            scrollPosition.top = newTop;\n            scrollPosition.left = newLeft;\n        };\n        /** Removes the event listeners associated with this drop list. */\n        DropListRef.prototype._removeListeners = function () {\n            coercion.coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n            this._viewportScrollSubscription.unsubscribe();\n        };\n        /**\n         * Checks whether the user's pointer is positioned over the container.\n         * @param x Pointer position along the X axis.\n         * @param y Pointer position along the Y axis.\n         */\n        DropListRef.prototype._isOverContainer = function (x, y) {\n            return isInsideClientRect(this._clientRect, x, y);\n        };\n        /**\n         * Figures out whether an item should be moved into a sibling\n         * drop container, based on its current position.\n         * @param item Drag item that is being moved.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._getSiblingContainerFromPosition = function (item, x, y) {\n            return this._siblings.find(function (sibling) { return sibling._canReceive(item, x, y); });\n        };\n        /**\n         * Checks whether the drop list can receive the passed-in item.\n         * @param item Item that is being dragged into the list.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._canReceive = function (item, x, y) {\n            if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n                return false;\n            }\n            var elementFromPoint = this._shadowRoot.elementFromPoint(x, y);\n            // If there's no element at the pointer position, then\n            // the client rect is probably scrolled out of the view.\n            if (!elementFromPoint) {\n                return false;\n            }\n            var nativeElement = coercion.coerceElement(this.element);\n            // The `ClientRect`, that we're using to find the container over which the user is\n            // hovering, doesn't give us any information on whether the element has been scrolled\n            // out of the view or whether it's overlapping with other containers. This means that\n            // we could end up transferring the item into a container that's invisible or is positioned\n            // below another one. We use the result from `elementFromPoint` to get the top-most element\n            // at the pointer position and to find whether it's one of the intersecting drop containers.\n            return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n        };\n        /**\n         * Called by one of the connected drop lists when a dragging sequence has started.\n         * @param sibling Sibling in which dragging has started.\n         */\n        DropListRef.prototype._startReceiving = function (sibling) {\n            var activeSiblings = this._activeSiblings;\n            if (!activeSiblings.has(sibling)) {\n                activeSiblings.add(sibling);\n                this._cacheOwnPosition();\n                this._listenToScrollEvents();\n            }\n        };\n        /**\n         * Called by a connected drop list when dragging has stopped.\n         * @param sibling Sibling whose dragging has stopped.\n         */\n        DropListRef.prototype._stopReceiving = function (sibling) {\n            this._activeSiblings.delete(sibling);\n            this._viewportScrollSubscription.unsubscribe();\n        };\n        /**\n         * Starts listening to scroll events on the viewport.\n         * Used for updating the internal state of the list.\n         */\n        DropListRef.prototype._listenToScrollEvents = function () {\n            var _this = this;\n            this._viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function () {\n                if (_this.isDragging()) {\n                    var newPosition = _this._viewportRuler.getViewportScrollPosition();\n                    _this._updateAfterScroll(_this._viewportScrollPosition, newPosition.top, newPosition.left, _this._clientRect);\n                }\n                else if (_this.isReceiving()) {\n                    _this._cacheOwnPosition();\n                }\n            });\n        };\n        return DropListRef;\n    }());\n    /**\n     * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n     * @param clientRect `ClientRect` that should be updated.\n     * @param top Amount to add to the `top` position.\n     * @param left Amount to add to the `left` position.\n     */\n    function adjustClientRect(clientRect, top, left) {\n        clientRect.top += top;\n        clientRect.bottom = clientRect.top + clientRect.height;\n        clientRect.left += left;\n        clientRect.right = clientRect.left + clientRect.width;\n    }\n    /**\n     * Finds the index of an item that matches a predicate function. Used as an equivalent\n     * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n     * @param array Array in which to look for matches.\n     * @param predicate Function used to determine whether an item is a match.\n     */\n    function findIndex(array, predicate) {\n        for (var i = 0; i < array.length; i++) {\n            if (predicate(array[i], i, array)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Checks whether some coordinates are within a `ClientRect`.\n     * @param clientRect ClientRect that is being checked.\n     * @param x Coordinates along the X axis.\n     * @param y Coordinates along the Y axis.\n     */\n    function isInsideClientRect(clientRect, x, y) {\n        var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n        return y >= top && y <= bottom && x >= left && x <= right;\n    }\n    /** Gets a mutable version of an element's bounding `ClientRect`. */\n    function getMutableClientRect(element) {\n        var clientRect = element.getBoundingClientRect();\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        return {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n        };\n    }\n    /**\n     * Increments the vertical scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementVerticalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(0, amount);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollTop += amount;\n        }\n    }\n    /**\n     * Increments the horizontal scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementHorizontalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(amount, 0);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollLeft += amount;\n        }\n    }\n    /**\n     * Gets whether the vertical auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getVerticalScrollDirection(clientRect, pointerY) {\n        var top = clientRect.top, bottom = clientRect.bottom, height = clientRect.height;\n        var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n            return 1 /* UP */;\n        }\n        else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n            return 2 /* DOWN */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets whether the horizontal auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerX Position of the user's pointer along the x axis.\n     */\n    function getHorizontalScrollDirection(clientRect, pointerX) {\n        var left = clientRect.left, right = clientRect.right, width = clientRect.width;\n        var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n            return 1 /* LEFT */;\n        }\n        else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n            return 2 /* RIGHT */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets the directions in which an element node should be scrolled,\n     * assuming that the user's pointer is already within it scrollable region.\n     * @param element Element for which we should calculate the scroll direction.\n     * @param clientRect Bounding client rectangle of the element.\n     * @param pointerX Position of the user's pointer along the x axis.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n        var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n        var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n        var verticalScrollDirection = 0 /* NONE */;\n        var horizontalScrollDirection = 0 /* NONE */;\n        // Note that we here we do some extra checks for whether the element is actually scrollable in\n        // a certain direction and we only assign the scroll direction if it is. We do this so that we\n        // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n        // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n        if (computedVertical) {\n            var scrollTop = element.scrollTop;\n            if (computedVertical === 1 /* UP */) {\n                if (scrollTop > 0) {\n                    verticalScrollDirection = 1 /* UP */;\n                }\n            }\n            else if (element.scrollHeight - scrollTop > element.clientHeight) {\n                verticalScrollDirection = 2 /* DOWN */;\n            }\n        }\n        if (computedHorizontal) {\n            var scrollLeft = element.scrollLeft;\n            if (computedHorizontal === 1 /* LEFT */) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = 1 /* LEFT */;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = 2 /* RIGHT */;\n            }\n        }\n        return [verticalScrollDirection, horizontalScrollDirection];\n    }\n    /** Gets the shadow root of an element, if any. */\n    function getShadowRoot(element) {\n        if (platform._supportsShadowDom()) {\n            var rootNode = element.getRootNode ? element.getRootNode() : null;\n            if (rootNode instanceof ShadowRoot) {\n                return rootNode;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event options that can be used to bind an active, capturing event. */\n    var activeCapturingEventOptions = platform.normalizePassiveListenerOptions({\n        passive: false,\n        capture: true\n    });\n    /**\n     * Service that keeps track of all the drag item and drop container\n     * instances, and manages global event listeners on the `document`.\n     * @docs-private\n     */\n    // Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n    // to avoid circular imports. If we were to reference them here, importing the registry into the\n    // classes that are registering themselves will introduce a circular import.\n    var DragDropRegistry = /** @class */ (function () {\n        function DragDropRegistry(_ngZone, _document) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            /** Registered drop container instances. */\n            this._dropInstances = new Set();\n            /** Registered drag item instances. */\n            this._dragInstances = new Set();\n            /** Drag item instances that are currently being dragged. */\n            this._activeDragInstances = new Set();\n            /** Keeps track of the event listeners that we've bound to the `document`. */\n            this._globalListeners = new Map();\n            /**\n             * Emits the `touchmove` or `mousemove` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerMove = new rxjs.Subject();\n            /**\n             * Emits the `touchend` or `mouseup` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerUp = new rxjs.Subject();\n            /** Emits when the viewport has been scrolled while the user is dragging an item. */\n            this.scroll = new rxjs.Subject();\n            /**\n             * Event listener that will prevent the default browser action while the user is dragging.\n             * @param event Event whose default action should be prevented.\n             */\n            this._preventDefaultWhileDragging = function (event) {\n                if (_this._activeDragInstances.size) {\n                    event.preventDefault();\n                }\n            };\n            this._document = _document;\n        }\n        /** Adds a drop container to the registry. */\n        DragDropRegistry.prototype.registerDropContainer = function (drop) {\n            if (!this._dropInstances.has(drop)) {\n                this._dropInstances.add(drop);\n            }\n        };\n        /** Adds a drag item instance to the registry. */\n        DragDropRegistry.prototype.registerDragItem = function (drag) {\n            var _this = this;\n            this._dragInstances.add(drag);\n            // The `touchmove` event gets bound once, ahead of time, because WebKit\n            // won't preventDefault on a dynamically-added `touchmove` listener.\n            // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n            if (this._dragInstances.size === 1) {\n                this._ngZone.runOutsideAngular(function () {\n                    // The event handler has to be explicitly active,\n                    // because newer browsers make it passive by default.\n                    _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n                });\n            }\n        };\n        /** Removes a drop container from the registry. */\n        DragDropRegistry.prototype.removeDropContainer = function (drop) {\n            this._dropInstances.delete(drop);\n        };\n        /** Removes a drag item instance from the registry. */\n        DragDropRegistry.prototype.removeDragItem = function (drag) {\n            this._dragInstances.delete(drag);\n            this.stopDragging(drag);\n            if (this._dragInstances.size === 0) {\n                this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }\n        };\n        /**\n         * Starts the dragging sequence for a drag instance.\n         * @param drag Drag instance which is being dragged.\n         * @param event Event that initiated the dragging.\n         */\n        DragDropRegistry.prototype.startDragging = function (drag, event) {\n            var _this = this;\n            // Do not process the same drag twice to avoid memory leaks and redundant listeners\n            if (this._activeDragInstances.has(drag)) {\n                return;\n            }\n            this._activeDragInstances.add(drag);\n            if (this._activeDragInstances.size === 1) {\n                var isTouchEvent = event.type.startsWith('touch');\n                var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n                var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n                // We explicitly bind __active__ listeners here, because newer browsers will default to\n                // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n                // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n                this._globalListeners\n                    .set(moveEvent, {\n                    handler: function (e) { return _this.pointerMove.next(e); },\n                    options: activeCapturingEventOptions\n                })\n                    .set(upEvent, {\n                    handler: function (e) { return _this.pointerUp.next(e); },\n                    options: true\n                })\n                    .set('scroll', {\n                    handler: function (e) { return _this.scroll.next(e); },\n                    // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                    // the document. See https://github.com/angular/components/issues/17144.\n                    options: true\n                })\n                    // Preventing the default action on `mousemove` isn't enough to disable text selection\n                    // on Safari so we need to prevent the selection event as well. Alternatively this can\n                    // be done by setting `user-select: none` on the `body`, however it has causes a style\n                    // recalculation which can be expensive on pages with a lot of elements.\n                    .set('selectstart', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n                this._ngZone.runOutsideAngular(function () {\n                    _this._globalListeners.forEach(function (config, name) {\n                        _this._document.addEventListener(name, config.handler, config.options);\n                    });\n                });\n            }\n        };\n        /** Stops dragging a drag item instance. */\n        DragDropRegistry.prototype.stopDragging = function (drag) {\n            this._activeDragInstances.delete(drag);\n            if (this._activeDragInstances.size === 0) {\n                this._clearGlobalListeners();\n            }\n        };\n        /** Gets whether a drag item instance is currently being dragged. */\n        DragDropRegistry.prototype.isDragging = function (drag) {\n            return this._activeDragInstances.has(drag);\n        };\n        DragDropRegistry.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._dragInstances.forEach(function (instance) { return _this.removeDragItem(instance); });\n            this._dropInstances.forEach(function (instance) { return _this.removeDropContainer(instance); });\n            this._clearGlobalListeners();\n            this.pointerMove.complete();\n            this.pointerUp.complete();\n        };\n        /** Clears out the global event listeners from the `document`. */\n        DragDropRegistry.prototype._clearGlobalListeners = function () {\n            var _this = this;\n            this._globalListeners.forEach(function (config, name) {\n                _this._document.removeEventListener(name, config.handler, config.options);\n            });\n            this._globalListeners.clear();\n        };\n        DragDropRegistry.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDropRegistry.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        DragDropRegistry.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n        return DragDropRegistry;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default configuration to be used when creating a `DragRef`. */\n    var DEFAULT_CONFIG = {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5\n    };\n    /**\n     * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n     */\n    var DragDrop = /** @class */ (function () {\n        function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n        }\n        /**\n         * Turns an element into a draggable item.\n         * @param element Element to which to attach the dragging functionality.\n         * @param config Object used to configure the dragging behavior.\n         */\n        DragDrop.prototype.createDrag = function (element, config) {\n            if (config === void 0) { config = DEFAULT_CONFIG; }\n            return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n        };\n        /**\n         * Turns an element into a drop list.\n         * @param element Element to which to attach the drop list functionality.\n         */\n        DragDrop.prototype.createDropList = function (element) {\n            return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n        };\n        DragDrop.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDrop.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i2.ViewportRuler },\n            { type: DragDropRegistry }\n        ]; };\n        DragDrop.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n        return DragDrop;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n     * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n     * to avoid circular imports.\n     * @docs-private\n     */\n    var CDK_DRAG_PARENT = new i0.InjectionToken('CDK_DRAG_PARENT');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Handle that can be used to drag and CdkDrag instance. */\n    var CdkDragHandle = /** @class */ (function () {\n        function CdkDragHandle(element, parentDrag) {\n            this.element = element;\n            /** Emits when the state of the handle has changed. */\n            this._stateChanges = new rxjs.Subject();\n            this._disabled = false;\n            this._parentDrag = parentDrag;\n            toggleNativeDragInteractions(element.nativeElement, false);\n        }\n        Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n            /** Whether starting to drag through this handle is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._stateChanges.next(this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDragHandle.prototype.ngOnDestroy = function () {\n            this._stateChanges.complete();\n        };\n        CdkDragHandle.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDragHandle]',\n                        host: {\n                            'class': 'cdk-drag-handle'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragHandle.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DRAG_PARENT,] }, { type: i0.Optional }] }\n        ]; };\n        CdkDragHandle.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDragHandleDisabled',] }]\n        };\n        return CdkDragHandle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the placeholder of a CdkDrag when\n     * it is being dragged. The placeholder is displayed in place of the element being dragged.\n     */\n    var CdkDragPlaceholder = /** @class */ (function () {\n        function CdkDragPlaceholder(templateRef) {\n            this.templateRef = templateRef;\n        }\n        CdkDragPlaceholder.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPlaceholder]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPlaceholder.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPlaceholder.propDecorators = {\n            data: [{ type: i0.Input }]\n        };\n        return CdkDragPlaceholder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the preview\n     * of a CdkDrag when it is being dragged.\n     */\n    var CdkDragPreview = /** @class */ (function () {\n        function CdkDragPreview(templateRef) {\n            this.templateRef = templateRef;\n        }\n        CdkDragPreview.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPreview]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPreview.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPreview.propDecorators = {\n            data: [{ type: i0.Input }]\n        };\n        return CdkDragPreview;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n     * Used for avoiding circular imports.\n     */\n    var CDK_DROP_LIST = new i0.InjectionToken('CDK_DROP_LIST');\n    /** Injection token that can be used to configure the behavior of `CdkDrag`. */\n    var CDK_DRAG_CONFIG = new i0.InjectionToken('CDK_DRAG_CONFIG', {\n        providedIn: 'root',\n        factory: CDK_DRAG_CONFIG_FACTORY\n    });\n    /** @docs-private */\n    function CDK_DRAG_CONFIG_FACTORY() {\n        return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n    }\n    /** Element that can be moved inside a CdkDropList container. */\n    var CdkDrag = /** @class */ (function () {\n        function CdkDrag(\n        /** Element that the draggable is attached to. */\n        element, \n        /** Droppable container that the draggable is a part of. */\n        dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n            var _this = this;\n            this.element = element;\n            this.dropContainer = dropContainer;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewContainerRef = _viewContainerRef;\n            this._dir = _dir;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._destroyed = new rxjs.Subject();\n            /**\n             * Amount of milliseconds to wait after the user has put their\n             * pointer down before starting to drag the element.\n             */\n            this.dragStartDelay = 0;\n            this._disabled = false;\n            /** Emits when the user starts dragging the item. */\n            this.started = new i0.EventEmitter();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new i0.EventEmitter();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new i0.EventEmitter();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new i0.EventEmitter();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new i0.EventEmitter();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = new rxjs.Observable(function (observer) {\n                var subscription = _this._dragRef.moved.pipe(operators.map(function (movedEvent) { return ({\n                    source: _this,\n                    pointerPosition: movedEvent.pointerPosition,\n                    event: movedEvent.event,\n                    delta: movedEvent.delta,\n                    distance: movedEvent.distance\n                }); })).subscribe(observer);\n                return function () {\n                    subscription.unsubscribe();\n                };\n            });\n            this._dragRef = dragDrop.createDrag(element, config);\n            this._dragRef.data = this;\n            this._syncInputs(this._dragRef);\n            this._handleEvents(this._dragRef);\n        }\n        Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._dragRef.disabled = this._disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        CdkDrag.prototype.getPlaceholderElement = function () {\n            return this._dragRef.getPlaceholderElement();\n        };\n        /** Returns the root draggable element. */\n        CdkDrag.prototype.getRootElement = function () {\n            return this._dragRef.getRootElement();\n        };\n        /** Resets a standalone drag item to its initial position. */\n        CdkDrag.prototype.reset = function () {\n            this._dragRef.reset();\n        };\n        /**\n         * Gets the pixel coordinates of the draggable outside of a drop container.\n         */\n        CdkDrag.prototype.getFreeDragPosition = function () {\n            return this._dragRef.getFreeDragPosition();\n        };\n        CdkDrag.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.asObservable()\n                .pipe(operators.take(1), operators.takeUntil(this._destroyed))\n                .subscribe(function () {\n                _this._updateRootElement();\n                // Listen for any newly-added handles.\n                _this._handles.changes.pipe(operators.startWith(_this._handles), \n                // Sync the new handles with the DragRef.\n                operators.tap(function (handles) {\n                    var childHandleElements = handles\n                        .filter(function (handle) { return handle._parentDrag === _this; })\n                        .map(function (handle) { return handle.element; });\n                    _this._dragRef.withHandles(childHandleElements);\n                }), \n                // Listen if the state of any of the handles changes.\n                operators.switchMap(function (handles) {\n                    return rxjs.merge.apply(void 0, tslib_1.__spread(handles.map(function (item) { return item._stateChanges; })));\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (handleInstance) {\n                    // Enabled/disable the handle that changed in the DragRef.\n                    var dragRef = _this._dragRef;\n                    var handle = handleInstance.element.nativeElement;\n                    handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n                });\n                if (_this.freeDragPosition) {\n                    _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n                }\n            });\n        };\n        CdkDrag.prototype.ngOnChanges = function (changes) {\n            var rootSelectorChange = changes['rootElementSelector'];\n            var positionChange = changes['freeDragPosition'];\n            // We don't have to react to the first change since it's being\n            // handled in `ngAfterViewInit` where it needs to be deferred.\n            if (rootSelectorChange && !rootSelectorChange.firstChange) {\n                this._updateRootElement();\n            }\n            // Skip the first change since it's being handled in `ngAfterViewInit`.\n            if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        };\n        CdkDrag.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        };\n        /** Syncs the root element with the `DragRef`. */\n        CdkDrag.prototype._updateRootElement = function () {\n            var element = this.element.nativeElement;\n            var rootElement = this.rootElementSelector ?\n                getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n            if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n                throw Error(\"cdkDrag must be attached to an element node. \" +\n                    (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n            }\n            this._dragRef.withRootElement(rootElement || element);\n        };\n        /** Gets the boundary element, based on the `boundaryElement` value. */\n        CdkDrag.prototype._getBoundaryElement = function () {\n            var boundary = this.boundaryElement;\n            if (!boundary) {\n                return null;\n            }\n            if (typeof boundary === 'string') {\n                return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n            }\n            var element = coercion.coerceElement(boundary);\n            if (i0.isDevMode() && !element.contains(this.element.nativeElement)) {\n                throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n            }\n            return element;\n        };\n        /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n        CdkDrag.prototype._syncInputs = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                if (!ref.isDragging()) {\n                    var dir = _this._dir;\n                    var dragStartDelay = _this.dragStartDelay;\n                    var placeholder = _this._placeholderTemplate ? {\n                        template: _this._placeholderTemplate.templateRef,\n                        context: _this._placeholderTemplate.data,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    var preview = _this._previewTemplate ? {\n                        template: _this._previewTemplate.templateRef,\n                        context: _this._previewTemplate.data,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    ref.disabled = _this.disabled;\n                    ref.lockAxis = _this.lockAxis;\n                    ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                        dragStartDelay : coercion.coerceNumberProperty(dragStartDelay);\n                    ref.constrainPosition = _this.constrainPosition;\n                    ref\n                        .withBoundaryElement(_this._getBoundaryElement())\n                        .withPlaceholderTemplate(placeholder)\n                        .withPreviewTemplate(preview);\n                    if (dir) {\n                        ref.withDirection(dir.value);\n                    }\n                }\n            });\n        };\n        /** Handles the events from the underlying `DragRef`. */\n        CdkDrag.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.started.subscribe(function () {\n                _this.started.emit({ source: _this });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.released.subscribe(function () {\n                _this.released.emit({ source: _this });\n            });\n            ref.ended.subscribe(function (event) {\n                _this.ended.emit({ source: _this, distance: event.distance });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: event.container.data,\n                    item: _this,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: event.container.data,\n                    item: _this\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    item: _this,\n                    distance: event.distance\n                });\n            });\n        };\n        CdkDrag.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDrag]',\n                        exportAs: 'cdkDrag',\n                        host: {\n                            'class': 'cdk-drag',\n                            '[class.cdk-drag-disabled]': 'disabled',\n                            '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                        },\n                        providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDrag.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DROP_LIST,] }, { type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef }\n        ]; };\n        CdkDrag.propDecorators = {\n            _handles: [{ type: i0.ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n            _previewTemplate: [{ type: i0.ContentChild, args: [CdkDragPreview, { static: false },] }],\n            _placeholderTemplate: [{ type: i0.ContentChild, args: [CdkDragPlaceholder, { static: false },] }],\n            data: [{ type: i0.Input, args: ['cdkDragData',] }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDragLockAxis',] }],\n            rootElementSelector: [{ type: i0.Input, args: ['cdkDragRootElement',] }],\n            boundaryElement: [{ type: i0.Input, args: ['cdkDragBoundary',] }],\n            dragStartDelay: [{ type: i0.Input, args: ['cdkDragStartDelay',] }],\n            freeDragPosition: [{ type: i0.Input, args: ['cdkDragFreeDragPosition',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDragDisabled',] }],\n            constrainPosition: [{ type: i0.Input, args: ['cdkDragConstrainPosition',] }],\n            started: [{ type: i0.Output, args: ['cdkDragStarted',] }],\n            released: [{ type: i0.Output, args: ['cdkDragReleased',] }],\n            ended: [{ type: i0.Output, args: ['cdkDragEnded',] }],\n            entered: [{ type: i0.Output, args: ['cdkDragEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDragExited',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDragDropped',] }],\n            moved: [{ type: i0.Output, args: ['cdkDragMoved',] }]\n        };\n        return CdkDrag;\n    }());\n    /** Gets the closest ancestor of an element that matches a selector. */\n    function getClosestMatchingAncestor(element, selector) {\n        var currentElement = element.parentElement;\n        while (currentElement) {\n            // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n            if (currentElement.matches ? currentElement.matches(selector) :\n                currentElement.msMatchesSelector(selector)) {\n                return currentElement;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n     * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n     * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n     * from `cdkDropList`.\n     */\n    var CdkDropListGroup = /** @class */ (function () {\n        function CdkDropListGroup() {\n            /** Drop lists registered inside the group. */\n            this._items = new Set();\n            this._disabled = false;\n        }\n        Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from inside this group is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDropListGroup.prototype.ngOnDestroy = function () {\n            this._items.clear();\n        };\n        CdkDropListGroup.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropListGroup]',\n                        exportAs: 'cdkDropListGroup',\n                    },] }\n        ];\n        CdkDropListGroup.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDropListGroupDisabled',] }]\n        };\n        return CdkDropListGroup;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique ids for drop zones. */\n    var _uniqueIdCounter = 0;\n    var ɵ0 = undefined;\n    /** Container that wraps a set of draggable items. */\n    var CdkDropList = /** @class */ (function () {\n        function CdkDropList(\n        /** Element that the drop list is attached to. */\n        element, dragDrop, _changeDetectorRef, _dir, _group) {\n            var _this = this;\n            this.element = element;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._group = _group;\n            /** Emits when the list has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /**\n             * Other draggable containers that this container is connected to and into which the\n             * container's items can be transferred. Can either be references to other drop containers,\n             * or their unique IDs.\n             */\n            this.connectedTo = [];\n            /** Direction in which the list is oriented. */\n            this.orientation = 'vertical';\n            /**\n             * Unique ID for the drop zone. Can be used as a reference\n             * in the `connectedTo` of another `CdkDropList`.\n             */\n            this.id = \"cdk-drop-list-\" + _uniqueIdCounter++;\n            this._disabled = false;\n            this._sortingDisabled = false;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n            this.autoScrollDisabled = false;\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new i0.EventEmitter();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new i0.EventEmitter();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new i0.EventEmitter();\n            this._dropListRef = dragDrop.createDropList(element);\n            this._dropListRef.data = this;\n            this._dropListRef.enterPredicate = function (drag, drop) {\n                return _this.enterPredicate(drag.data, drop.data);\n            };\n            this._syncInputs(this._dropListRef);\n            this._handleEvents(this._dropListRef);\n            CdkDropList._dropLists.push(this);\n            if (_group) {\n                _group._items.add(this);\n            }\n        }\n        Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from this container is disabled. */\n            get: function () {\n                return this._disabled || (!!this._group && this._group.disabled);\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkDropList.prototype, \"sortingDisabled\", {\n            /** Whether sorting within this drop list is disabled. */\n            get: function () { return this._sortingDisabled; },\n            set: function (value) {\n                this._sortingDisabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDropList.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._draggables.changes\n                .pipe(operators.startWith(this._draggables), operators.takeUntil(this._destroyed))\n                .subscribe(function (items) {\n                _this._dropListRef.withItems(items.map(function (drag) { return drag._dragRef; }));\n            });\n        };\n        CdkDropList.prototype.ngOnDestroy = function () {\n            var index = CdkDropList._dropLists.indexOf(this);\n            if (index > -1) {\n                CdkDropList._dropLists.splice(index, 1);\n            }\n            if (this._group) {\n                this._group._items.delete(this);\n            }\n            this._dropListRef.dispose();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Starts dragging an item.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.start = function () {\n            this._dropListRef.start();\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         *\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer) {\n            this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.enter = function (item, pointerX, pointerY) {\n            this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.exit = function (item) {\n            this._dropListRef.exit(item._dragRef);\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.getItemIndex = function (item) {\n            return this._dropListRef.getItemIndex(item._dragRef);\n        };\n        /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n        CdkDropList.prototype._syncInputs = function (ref) {\n            var _this = this;\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.startWith(this._dir.value), operators.takeUntil(this._destroyed))\n                    .subscribe(function (value) { return ref.withDirection(value); });\n            }\n            ref.beforeStarted.subscribe(function () {\n                var siblings = coercion.coerceArray(_this.connectedTo).map(function (drop) {\n                    return typeof drop === 'string' ?\n                        CdkDropList._dropLists.find(function (list) { return list.id === drop; }) : drop;\n                });\n                if (_this._group) {\n                    _this._group._items.forEach(function (drop) {\n                        if (siblings.indexOf(drop) === -1) {\n                            siblings.push(drop);\n                        }\n                    });\n                }\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.sortingDisabled = _this.sortingDisabled;\n                ref.autoScrollDisabled = _this.autoScrollDisabled;\n                ref\n                    .connectedTo(siblings.filter(function (drop) { return drop && drop !== _this; }).map(function (list) { return list._dropListRef; }))\n                    .withOrientation(_this.orientation);\n            });\n        };\n        /** Handles events from the underlying DropListRef. */\n        CdkDropList.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: _this,\n                    item: event.item.data,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: _this,\n                    item: event.item.data\n                });\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.sorted.subscribe(function (event) {\n                _this.sorted.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    container: _this,\n                    item: event.item.data\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    item: event.item.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    distance: event.distance\n                });\n                // Mark for check since all of these events run outside of change\n                // detection and we're not guaranteed for something else to have triggered it.\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        /** Keeps track of the drop lists that are currently on the page. */\n        CdkDropList._dropLists = [];\n        CdkDropList.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropList], cdk-drop-list',\n                        exportAs: 'cdkDropList',\n                        providers: [\n                            // Prevent child drop lists from picking up the same group as their parent.\n                            { provide: CdkDropListGroup, useValue: ɵ0 },\n                            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                        ],\n                        host: {\n                            'class': 'cdk-drop-list',\n                            '[id]': 'id',\n                            '[class.cdk-drop-list-disabled]': 'disabled',\n                            '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                            '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDropList.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: CdkDropListGroup, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }\n        ]; };\n        CdkDropList.propDecorators = {\n            _draggables: [{ type: i0.ContentChildren, args: [CdkDrag, {\n                            // Explicitly set to false since some of the logic below makes assumptions about it.\n                            // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                            descendants: false\n                        },] }],\n            connectedTo: [{ type: i0.Input, args: ['cdkDropListConnectedTo',] }],\n            data: [{ type: i0.Input, args: ['cdkDropListData',] }],\n            orientation: [{ type: i0.Input, args: ['cdkDropListOrientation',] }],\n            id: [{ type: i0.Input }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDropListLockAxis',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDropListDisabled',] }],\n            sortingDisabled: [{ type: i0.Input, args: ['cdkDropListSortingDisabled',] }],\n            enterPredicate: [{ type: i0.Input, args: ['cdkDropListEnterPredicate',] }],\n            autoScrollDisabled: [{ type: i0.Input, args: ['cdkDropListAutoScrollDisabled',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDropListDropped',] }],\n            entered: [{ type: i0.Output, args: ['cdkDropListEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDropListExited',] }],\n            sorted: [{ type: i0.Output, args: ['cdkDropListSorted',] }]\n        };\n        return CdkDropList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DragDropModule = /** @class */ (function () {\n        function DragDropModule() {\n        }\n        DragDropModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        exports: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        providers: [\n                            DragDrop,\n                        ]\n                    },] }\n        ];\n        return DragDropModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_material_src_cdk_drag_drop_drag_drop_b = CDK_DRAG_PARENT;\n    exports.DragDrop = DragDrop;\n    exports.DragRef = DragRef;\n    exports.DropListRef = DropListRef;\n    exports.CdkDropList = CdkDropList;\n    exports.moveItemInArray = moveItemInArray;\n    exports.transferArrayItem = transferArrayItem;\n    exports.copyArrayItem = copyArrayItem;\n    exports.DragDropModule = DragDropModule;\n    exports.DragDropRegistry = DragDropRegistry;\n    exports.CdkDropListGroup = CdkDropListGroup;\n    exports.CDK_DROP_LIST = CDK_DROP_LIST;\n    exports.CDK_DRAG_CONFIG = CDK_DRAG_CONFIG;\n    exports.CDK_DRAG_CONFIG_FACTORY = CDK_DRAG_CONFIG_FACTORY;\n    exports.CdkDrag = CdkDrag;\n    exports.CdkDragHandle = CdkDragHandle;\n    exports.CdkDragPreview = CdkDragPreview;\n    exports.CdkDragPlaceholder = CdkDragPlaceholder;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-drag-drop.umd.js.map\n"]}
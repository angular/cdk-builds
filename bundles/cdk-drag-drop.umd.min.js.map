{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview, {static: false}) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder, {static: false}) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point) => Point;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n      /** Element that the draggable is attached to. */\n      public element: ElementRef<HTMLElement>,\n      /** Droppable container that the draggable is a part of. */\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\n      private _viewContainerRef: ViewContainerRef, @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this._dragRef = dragDrop.createDrag(element, config);\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  AfterContentInit,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input('cdkDropListSortingDisabled')\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\n  set sortingDisabled(value: boolean) {\n    this._sortingDisabled = coerceBooleanProperty(value);\n  }\n  private _sortingDisabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n      /** Element that the drop list is attached to. */\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir?: Directionality,\n      @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  constrainPosition?: (point: Point) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    return {x: this._passiveTransform.x, y: this._passiveTransform.y};\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): this {\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold && (Date.now() >= this._dragStartTime + (this.dragStartDelay || 0))) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      getPreviewInsertionPoint(this._document).appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n        this.entered.next({\n          item: this,\n          container: newContainer!,\n          currentIndex: newContainer!.getItemIndex(this)\n        });\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const constrainedPoint = this.constrainPosition ? this.constrainPosition(point) : point;\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      constrainedPoint.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      constrainedPoint.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n      constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n    }\n\n    return constrainedPoint;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyRootElementTransform(x: number, y: number) {\n    const transform = getTransform(x, y);\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    this._rootElement.style.transform = this._initialTransform ?\n      transform + ' ' + this._initialTransform  : transform;\n  }\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return documentRef.fullscreenElement ||\n         documentRef.webkitFullscreenElement ||\n         documentRef.mozFullScreenElement ||\n         documentRef.msFullscreenElement ||\n         documentRef.body;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Direction} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  readonly element: HTMLElement;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = true;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._cacheItems();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.start();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n    if (newIndex === -1) {\n      // We use the coordinates of where the item entered the drop\n      // zone to figure out at which index it should be inserted.\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      this._cacheItems();\n    }\n\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /** Caches the current items in the list and their positions. */\n  private _cacheItems(): void {\n    this._activeDraggables = this._draggables.slice();\n    this._cacheItemPositions();\n    this._cacheOwnPosition();\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n"],"names":["type","ContentChild","args","CdkDragPreview","static","_placeholderTemplate","CdkDragPlaceholder","data","Input","lockAxis","rootElementSelector","boundaryElementSelector","dragStartDelay","freeDragPosition","disabled","constrainPosition","started","Output","released","ended","entered","exited","dropped","moved","CdkDrag","CdkDropListGroup","this","_items","Set","_disabled","Object","defineProperty","prototype","value","coerceBooleanProperty","ngOnDestroy","clear","Directive","selector","exportAs","_uniqueIdCounter","CdkDropList","element","dragDrop","_changeDetectorRef","_dir","_group","_this","_destroyed","Subject","connectedTo","orientation","id","_sortingDisabled","enterPredicate","EventEmitter","sorted","_dropListRef","createDropList","drag","drop","_syncInputs","_handleEvents","_dropLists","push","add","ngAfterContentInit","_draggables","changes","pipe","startWith","takeUntil","subscribe","items","withItems","map","_dragRef","index","indexOf","splice","delete","dispose","next","complete","start","item","currentIndex","previousContainer","isPointerOverContainer","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","ref","change","withDirection","beforeStarted","siblings","coerceArray","find","list","forEach","sortingDisabled","filter","withOrientation","markForCheck","event","emit","container","previousIndex","providers","provide","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDrop","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","ContentChildren","forwardRef","descendants","DragDropModule","NgModule","declarations","CdkDragHandle","exports","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","removeAttribute","i","length","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","startsWith","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","body","moveItemInArray","array","fromIndex","toIndex","from","to","target","delta","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","Observable","observer","subscription","unsubscribe","_pointerDown","targetHandle","handle","contains","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","Date","now","_dragStartTime","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","withBoundaryElement","boundaryElement","_destroyPreview","_destroyPlaceholder","removeDragItem","_nextSibling","reset","transform","disableHandle","enableHandle","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","_a","newContainer","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","DropListRef","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_cacheItems","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_cacheItemPositions","_reset","slice","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","_cacheOwnPosition","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","Injectable","providedIn","NgZone","Inject","DOCUMENT","DEFAULT_CONFIG","createDrag","ViewportRuler","CDK_DROP_LIST","InjectionToken","CDK_DRAG_PARENT","parentDrag","_stateChanges","_parentDrag","templateRef","TemplateRef","CDK_DRAG_CONFIG","factory","dropContainer","_viewContainerRef","movedEvent","ngAfterViewInit","onStable","asObservable","take","_updateRootElement","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","positionChange","firstChange","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","dir","coerceNumberProperty","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","ViewContainerRef"],"mappings":"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"}
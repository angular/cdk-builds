{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\nimport {DropListRef} from '../drop-list-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElementSelector: string;\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point) => Point;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST) @Optional() @SkipSelf()\n    public dropContainer: CdkDropList,\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    viewportRuler: ViewportRuler,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n    @Optional() private _dir: Directionality,\n\n    /**\n     * @deprecated `viewportRuler`, `dragDropRegistry` and `_changeDetectorRef` parameters\n     * to be removed. Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop,\n    private _changeDetectorRef?: ChangeDetectorRef) {\n\n\n    // @breaking-change 8.0.0 Remove null check once the paramter is made required.\n    if (dragDrop) {\n      this._dragRef = dragDrop.createDrag(element, config);\n    } else {\n      this._dragRef = new DragRef(element, config, _document, _ngZone, viewportRuler,\n          dragDropRegistry);\n    }\n\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElementSelector`. */\n  private _getBoundaryElement() {\n    const selector = this.boundaryElementSelector;\n    return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(() => {\n      this.ended.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      if (this._changeDetectorRef) {\n        // @breaking-change 8.0.0 Remove null check for _changeDetectorRef\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n  AfterContentInit,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from '../drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input('cdkDropListSortingDisabled')\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\n  set sortingDisabled(value: boolean) {\n    this._sortingDisabled = coerceBooleanProperty(value);\n  }\n  private _sortingDisabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    /** Element that the drop list is attached to. */\n    public element: ElementRef<HTMLElement>,\n    dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>,\n    @Optional() @Inject(DOCUMENT) _document?: any,\n\n    /**\n     * @deprecated `dragDropRegistry` and `_document` parameters to be removed.\n     * Also `dragDrop` parameter to be made required.\n     * @breaking-change 8.0.0.\n     */\n    dragDrop?: DragDrop) {\n\n    // @breaking-change 8.0.0 Remove null check once `dragDrop` parameter is made required.\n    if (dragDrop) {\n      this._dropListRef = dragDrop.createDropList(element);\n    } else {\n      this._dropListRef = new DropListRef(element, dragDropRegistry, _document || document);\n    }\n\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable, Observer} from 'rxjs';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = new Observable((observer: Observer<any>) => {\n    const subscription = this._moveEvents.subscribe(observer);\n    this._moveEventSubscriptions++;\n\n    return () => {\n      subscription.unsubscribe();\n      this._moveEventSubscriptions--;\n    };\n  });\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  constrainPosition?: (point: Point) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold && (Date.now() >= this._dragStartTime + (this.dragStartDelay || 0))) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n      this._rootElement.style.transform = this._initialTransform ?\n          transform + ' ' + this._initialTransform  : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (!this._dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.next({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts(event);\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      getPreviewInsertionPoint(this._document).appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._toggleNativeDragInteractions();\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const {x, y} = this._getPointerPositionOnPage(event);\n      const isPointerOverContainer = container._isOverContainer(x, y);\n\n      this.ended.next({source: this});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._dropContainer!._getSiblingContainerFromPosition(this, x, y) ||\n        this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.next({item: this, container: newContainer!});\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n      });\n    }\n\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const constrainedPoint = this.constrainPosition ? this.constrainPosition(point) : point;\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      constrainedPoint.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      constrainedPoint.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n      constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n    }\n\n    return constrainedPoint;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this.disabled || this._handles.length > 0;\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  return event.type.startsWith('touch');\n}\n\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return documentRef.fullscreenElement ||\n         documentRef.webkitFullscreenElement ||\n         documentRef.mozFullScreenElement ||\n         documentRef.msFullscreenElement ||\n         documentRef.body;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {Direction} from '@angular/cdk/bidi';\nimport {Subject} from 'rxjs';\nimport {moveItemInArray} from './drag-utils';\nimport {DragRefInternal as DragRef} from './drag-ref';\n\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  readonly element: HTMLElement;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = true;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._activeDraggables = this._draggables.slice();\n    this._cacheOwnPosition();\n    this._cacheItemPositions();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.entered.next({item, container: this});\n    this.start();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n    if (newIndex === -1) {\n      // We use the coordinates of where the item entered the drop\n      // zone to figure out at which index it should be inserted.\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    this._clientRect = this.element.getBoundingClientRect();\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      const clientRect = elementToMeasure.getBoundingClientRect();\n\n      return {\n        drag,\n        offset: 0,\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        clientRect: {\n          top: clientRect.top,\n          right: clientRect.right,\n          bottom: clientRect.bottom,\n          left: clientRect.left,\n          width: clientRect.width,\n          height: clientRect.height\n        }\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y);\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n"],"names":["type","Output","args","CdkDrag","CdkDropListGroup","this","_items","Set","_disabled","Object","defineProperty","prototype","value","coerceBooleanProperty","ngOnDestroy","clear","Directive","selector","exportAs","disabled","Input","_uniqueIdCounter","CdkDropList","element","dragDropRegistry","_changeDetectorRef","_dir","_group","_document","dragDrop","_this","_destroyed","Subject","connectedTo","orientation","id","_sortingDisabled","enterPredicate","dropped","EventEmitter","entered","exited","sorted","_dropListRef","createDropList","DropListRef","document","data","drag","drop","_syncInputs","_handleEvents","_dropLists","push","add","ngAfterContentInit","_draggables","changes","pipe","startWith","takeUntil","subscribe","items","withItems","map","_dragRef","index","indexOf","splice","delete","dispose","next","complete","start","item","currentIndex","previousContainer","isPointerOverContainer","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","ref","change","withDirection","beforeStarted","siblings","coerceArray","find","list","forEach","lockAxis","sortingDisabled","filter","withOrientation","markForCheck","event","emit","container","previousIndex","providers","provide","useValue","undefined","CDK_DROP_LIST_CONTAINER","useExisting","host","class","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ElementRef","DragDropRegistry","ChangeDetectorRef","Directionality","decorators","Optional","SkipSelf","Inject","DOCUMENT","DragDrop","ContentChildren","forwardRef","descendants","DragDropModule","NgModule","declarations","CdkDragHandle","CdkDragPreview","CdkDragPlaceholder","exports","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","removeAttribute","i","length","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","startsWith","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","body","moveItemInArray","array","fromIndex","toIndex","from","to","target","delta","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","getClosestMatchingAncestor","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","started","released","ended","moved","Observable","observer","subscription","unsubscribe","_pointerDown","targetHandle","handle","contains","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","abs","_pickupPositionOnPage","Date","now","_dragStartTime","run","_startDragSequence","_previewRect","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","transform","_initialTransform","SVGElement","appliedTransform","setAttribute","_pointerDirectionDelta","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","coerceElement","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","withBoundaryElement","boundaryElement","_destroyPreview","_destroyPlaceholder","removeDragItem","_nextSibling","reset","disableHandle","enableHandle","direction","_withDropContainer","_previewRef","destroy","_placeholderRef","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","_a","newContainer","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","_isDragging","_itemPositions","_previousSwap","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_activeDraggables","slice","_cacheOwnPosition","_cacheItemPositions","sibling","_startReceiving","newIndex","_getItemIndexFromPointerPosition","activeDraggables","newPositionReference","_reset","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","currentPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","_clientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","Injectable","providedIn","NgZone","DEFAULT_CONFIG","createDrag","ViewportRuler","CDK_DROP_LIST","InjectionToken","CDK_DRAG_PARENT","parentDrag","_stateChanges","_parentDrag","templateRef","TemplateRef","CDK_DRAG_CONFIG","factory","dropContainer","_viewContainerRef","viewportRuler","movedEvent","ngAfterViewInit","onStable","asObservable","take","_updateRootElement","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","ngOnChanges","rootSelectorChange","firstChange","rootElementSelector","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundaryElementSelector","dir","coerceNumberProperty","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","ViewContainerRef","ContentChild"],"mappings":"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"}
{"version":3,"sources":["src/cdk/cdk-drag-drop.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","dragDrop","core","common","scrolling","platform","coercion","rxjs","operators","bidi","this","i0","i1","i2","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_this","_passiveTransform","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","registerDragItem","Object","defineProperty","prototype","get","set","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","forEach","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","position","setFreeDragPosition","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent_1","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","_initialContainer","_initialIndex","getItemIndex","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","pipe","startWith","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","pageX","_scrollPosition","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","oldScrollPosition","currentScrollPosition","getViewportScrollPosition","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","__read","o","n","m","Symbol","iterator","r","e","call","ar","done","push","error","__spread","arguments","concat","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_parentPositions","Map","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","interval","animationFrameScheduler","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","_cacheItemPositions","_reset","withItems","items","previousItems","filter","every","connectedTo","slice","withOrientation","orientation","elements","_scrollableElements","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollTop","scrollHeight","clientHeight","scrollLeft","scrollWidth","clientWidth","getViewportSize","window","_cacheParentPositions","scrollPosition","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","_updateAfterScroll","scrolledParent","newTop","newLeft","scrolledParentNode","documentElement","topDifference","leftDifference","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","shadowRoot","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","upEvent","options","config","_clearGlobalListeners","ngOnDestroy","instance","decorators","Injectable","args","providedIn","ctorParameters","NgZone","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","DragDropRegistry_Factory","ɵɵinject","token","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","DragDrop_Factory","CDK_DRAG_PARENT","InjectionToken","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","Directive","selector","host","class","ElementRef","Optional","propDecorators","Input","CdkDragPlaceholder","templateRef","TemplateRef","data","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","dropContainer","_viewContainerRef","_dir","_changeDetectorRef","_destroyed","EventEmitter","Observable","observer","subscription","_dragRef","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","changes","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","_getBoundaryElement","boundary","isDevMode","ref","dir","coerceNumberProperty","emit","markForCheck","draggingDisabled","exportAs","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","Directionality","ChangeDetectorRef","ContentChildren","descendants","ContentChild","Output","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ScrollDispatcher","DragDropModule","NgModule","declarations","CDK_DRAG_CONFIG_FACTORY","copyArrayItem","currentArray","targetArray","targetIndex","transferArrayItem","ɵangular_material_src_cdk_drag_drop_drag_drop_b"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/scrolling'), require('@angular/cdk/platform'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/bidi')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/drag-drop', ['exports', '@angular/core', '@angular/common', '@angular/cdk/scrolling', '@angular/cdk/platform', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators', '@angular/cdk/bidi'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.dragDrop = {}), global.ng.core, global.ng.common, global.ng.cdk.scrolling, global.ng.cdk.platform, global.ng.cdk.coercion, global.rxjs, global.rxjs.operators, global.ng.cdk.bidi));\n}(this, (function (exports, i0, i1, i2, platform, coercion, rxjs, operators, bidi) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Shallow-extends a stylesheet object with another stylesheet object.\n     * @docs-private\n     */\n    function extendStyles(dest, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n        return dest;\n    }\n    /**\n     * Toggles whether the native drag interactions should be enabled for an element.\n     * @param element Element on which to toggle the drag interactions.\n     * @param enable Whether the drag interactions should be enabled.\n     * @docs-private\n     */\n    function toggleNativeDragInteractions(element, enable) {\n        var userSelect = enable ? '' : 'none';\n        extendStyles(element.style, {\n            touchAction: enable ? '' : 'none',\n            webkitUserDrag: enable ? '' : 'none',\n            webkitTapHighlightColor: enable ? '' : 'transparent',\n            userSelect: userSelect,\n            msUserSelect: userSelect,\n            webkitUserSelect: userSelect,\n            MozUserSelect: userSelect\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Parses a CSS time value to milliseconds. */\n    function parseCssTimeUnitsToMs(value) {\n        // Some browsers will return it in seconds, whereas others will return milliseconds.\n        var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n        return parseFloat(value) * multiplier;\n    }\n    /** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n    function getTransformTransitionDurationInMs(element) {\n        var computedStyle = getComputedStyle(element);\n        var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n        var property = transitionedProperties.find(function (prop) { return prop === 'transform' || prop === 'all'; });\n        // If there's no transition for `all` or `transform`, we shouldn't do anything.\n        if (!property) {\n            return 0;\n        }\n        // Get the index of the property that we're interested in and match\n        // it up to the same index in `transition-delay` and `transition-duration`.\n        var propertyIndex = transitionedProperties.indexOf(property);\n        var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n        var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n        return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n            parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n    }\n    /** Parses out multiple values from a computed style into an array. */\n    function parseCssPropertyValue(computedStyle, name) {\n        var value = computedStyle.getPropertyValue(name);\n        return value.split(',').map(function (part) { return part.trim(); });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Gets a mutable version of an element's bounding `ClientRect`. */\n    function getMutableClientRect(element) {\n        var clientRect = element.getBoundingClientRect();\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        return {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n        };\n    }\n    /**\n     * Checks whether some coordinates are within a `ClientRect`.\n     * @param clientRect ClientRect that is being checked.\n     * @param x Coordinates along the X axis.\n     * @param y Coordinates along the Y axis.\n     */\n    function isInsideClientRect(clientRect, x, y) {\n        var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n        return y >= top && y <= bottom && x >= left && x <= right;\n    }\n    /**\n     * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n     * @param clientRect `ClientRect` that should be updated.\n     * @param top Amount to add to the `top` position.\n     * @param left Amount to add to the `left` position.\n     */\n    function adjustClientRect(clientRect, top, left) {\n        clientRect.top += top;\n        clientRect.bottom = clientRect.top + clientRect.height;\n        clientRect.left += left;\n        clientRect.right = clientRect.left + clientRect.width;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to a ClientRect.\n     * @param rect ClientRect to check against.\n     * @param threshold Threshold around the ClientRect.\n     * @param pointerX Coordinates along the X axis.\n     * @param pointerY Coordinates along the Y axis.\n     */\n    function isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n        var top = rect.top, right = rect.right, bottom = rect.bottom, left = rect.left, width = rect.width, height = rect.height;\n        var xThreshold = width * threshold;\n        var yThreshold = height * threshold;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Options that can be used to bind a passive event listener. */\n    var passiveEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /** Options that can be used to bind an active event listener. */\n    var activeEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: false });\n    /**\n     * Time in milliseconds for which to ignore mouse events, after\n     * receiving a touch event. Used to avoid doing double work for\n     * touch devices where the browser fires fake mouse events, in\n     * addition to touch events.\n     */\n    var MOUSE_EVENT_IGNORE_TIME = 800;\n    /**\n     * Reference to a draggable item. Used to manipulate or dispose of the item.\n     */\n    var DragRef = /** @class */ (function () {\n        function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            var _this = this;\n            this._config = _config;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n            /**\n             * CSS `transform` applied to the element when it isn't being dragged. We need a\n             * passive transform in order for the dragged element to retain its new position\n             * after the user has stopped dragging and because we need to know the relative\n             * position in case they start dragging again. This corresponds to `element.style.transform`.\n             */\n            this._passiveTransform = { x: 0, y: 0 };\n            /** CSS `transform` that is applied to the element while it's being dragged. */\n            this._activeTransform = { x: 0, y: 0 };\n            /** Emits when the item is being moved. */\n            this._moveEvents = new rxjs.Subject();\n            /** Subscription to pointer movement events. */\n            this._pointerMoveSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the event that is dispatched when the user lifts their pointer. */\n            this._pointerUpSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being scrolled. */\n            this._scrollSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being resized. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Cached reference to the boundary element. */\n            this._boundaryElement = null;\n            /** Whether the native dragging interactions have been enabled on the root element. */\n            this._nativeInteractionsEnabled = true;\n            /** Elements that can be used to drag the draggable item. */\n            this._handles = [];\n            /** Registered handles that are currently disabled. */\n            this._disabledHandles = new Set();\n            /** Layout direction of the item. */\n            this._direction = 'ltr';\n            /**\n             * Amount of milliseconds to wait after the user has put their\n             * pointer down before starting to drag the element.\n             */\n            this.dragStartDelay = 0;\n            this._disabled = false;\n            /** Emits as the drag sequence is being prepared. */\n            this.beforeStarted = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new rxjs.Subject();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new rxjs.Subject();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new rxjs.Subject();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new rxjs.Subject();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new rxjs.Subject();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = this._moveEvents.asObservable();\n            /** Handler for the `mousedown`/`touchstart` events. */\n            this._pointerDown = function (event) {\n                _this.beforeStarted.next();\n                // Delegate the event based on whether it started from a handle or the element itself.\n                if (_this._handles.length) {\n                    var targetHandle = _this._handles.find(function (handle) {\n                        var target = event.target;\n                        return !!target && (target === handle || handle.contains(target));\n                    });\n                    if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                        _this._initializeDragSequence(targetHandle, event);\n                    }\n                }\n                else if (!_this.disabled) {\n                    _this._initializeDragSequence(_this._rootElement, event);\n                }\n            };\n            /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n            this._pointerMove = function (event) {\n                // Prevent the default action as early as possible in order to block\n                // native actions like dragging the selected text or images with the mouse.\n                event.preventDefault();\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                if (!_this._hasStartedDragging) {\n                    var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                    var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                    var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                    // Only start dragging after the user has moved more than the minimum distance in either\n                    // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                    // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                    // per pixel of movement (e.g. if the user moves their pointer quickly).\n                    if (isOverThreshold) {\n                        var isDelayElapsed = Date.now() >= _this._dragStartTime + _this._getDragStartDelay(event);\n                        if (!isDelayElapsed) {\n                            _this._endDragSequence(event);\n                            return;\n                        }\n                        // Prevent other drag sequences from starting while something in the container is still\n                        // being dragged. This can happen while we're waiting for the drop animation to finish\n                        // and can cause errors, because some elements might still be moving around.\n                        if (!_this._dropContainer || !_this._dropContainer.isDragging()) {\n                            _this._hasStartedDragging = true;\n                            _this._ngZone.run(function () { return _this._startDragSequence(event); });\n                        }\n                    }\n                    return;\n                }\n                // We only need the preview dimensions if we have a boundary element.\n                if (_this._boundaryElement) {\n                    // Cache the preview element rect if we haven't cached it already or if\n                    // we cached it too early before the element dimensions were computed.\n                    if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                        _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                    }\n                }\n                var constrainedPointerPosition = _this._getConstrainedPointerPosition(pointerPosition);\n                _this._hasMoved = true;\n                _this._updatePointerDirectionDelta(constrainedPointerPosition);\n                if (_this._dropContainer) {\n                    _this._updateActiveDropContainer(constrainedPointerPosition);\n                }\n                else {\n                    var activeTransform = _this._activeTransform;\n                    activeTransform.x =\n                        constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                    activeTransform.y =\n                        constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                    _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                    // Apply transform as attribute if dragging and svg element to work for IE\n                    if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                        var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                        _this._rootElement.setAttribute('transform', appliedTransform);\n                    }\n                }\n                // Since this event gets fired for every pixel while dragging, we only\n                // want to fire it if the consumer opted into it. Also we have to\n                // re-enter the zone because we run all of the events on the outside.\n                if (_this._moveEvents.observers.length) {\n                    _this._ngZone.run(function () {\n                        _this._moveEvents.next({\n                            source: _this,\n                            pointerPosition: constrainedPointerPosition,\n                            event: event,\n                            distance: _this._getDragDistance(constrainedPointerPosition),\n                            delta: _this._pointerDirectionDelta\n                        });\n                    });\n                }\n            };\n            /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n            this._pointerUp = function (event) {\n                _this._endDragSequence(event);\n            };\n            this.withRootElement(element);\n            _dragDropRegistry.registerDragItem(this);\n        }\n        Object.defineProperty(DragRef.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n            },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this._disabled) {\n                    this._disabled = newValue;\n                    this._toggleNativeDragInteractions();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        DragRef.prototype.getPlaceholderElement = function () {\n            return this._placeholder;\n        };\n        /** Returns the root draggable element. */\n        DragRef.prototype.getRootElement = function () {\n            return this._rootElement;\n        };\n        /**\n         * Gets the currently-visible element that represents the drag item.\n         * While dragging this is the placeholder, otherwise it's the root element.\n         */\n        DragRef.prototype.getVisibleElement = function () {\n            return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n        };\n        /** Registers the handles that can be used to drag the element. */\n        DragRef.prototype.withHandles = function (handles) {\n            this._handles = handles.map(function (handle) { return coercion.coerceElement(handle); });\n            this._handles.forEach(function (handle) { return toggleNativeDragInteractions(handle, false); });\n            this._toggleNativeDragInteractions();\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag preview.\n         * @param template Template that from which to stamp out the preview.\n         */\n        DragRef.prototype.withPreviewTemplate = function (template) {\n            this._previewTemplate = template;\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag placeholder.\n         * @param template Template that from which to stamp out the placeholder.\n         */\n        DragRef.prototype.withPlaceholderTemplate = function (template) {\n            this._placeholderTemplate = template;\n            return this;\n        };\n        /**\n         * Sets an alternate drag root element. The root element is the element that will be moved as\n         * the user is dragging. Passing an alternate root element is useful when trying to enable\n         * dragging on an element that you might not have access to.\n         */\n        DragRef.prototype.withRootElement = function (rootElement) {\n            var _this = this;\n            var element = coercion.coerceElement(rootElement);\n            if (element !== this._rootElement) {\n                if (this._rootElement) {\n                    this._removeRootElementListeners(this._rootElement);\n                }\n                this._ngZone.runOutsideAngular(function () {\n                    element.addEventListener('mousedown', _this._pointerDown, activeEventListenerOptions);\n                    element.addEventListener('touchstart', _this._pointerDown, passiveEventListenerOptions);\n                });\n                this._initialTransform = undefined;\n                this._rootElement = element;\n            }\n            return this;\n        };\n        /**\n         * Element to which the draggable's position will be constrained.\n         */\n        DragRef.prototype.withBoundaryElement = function (boundaryElement) {\n            var _this = this;\n            this._boundaryElement = boundaryElement ? coercion.coerceElement(boundaryElement) : null;\n            this._resizeSubscription.unsubscribe();\n            if (boundaryElement) {\n                this._resizeSubscription = this._viewportRuler\n                    .change(10)\n                    .subscribe(function () { return _this._containInsideBoundaryOnResize(); });\n            }\n            return this;\n        };\n        /** Removes the dragging functionality from the DOM element. */\n        DragRef.prototype.dispose = function () {\n            this._removeRootElementListeners(this._rootElement);\n            // Do this check before removing from the registry since it'll\n            // stop being considered as dragged once it is removed.\n            if (this.isDragging()) {\n                // Since we move out the element to the end of the body while it's being\n                // dragged, we have to make sure that it's removed if it gets destroyed.\n                removeNode(this._rootElement);\n            }\n            removeNode(this._anchor);\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._dragDropRegistry.removeDragItem(this);\n            this._removeSubscriptions();\n            this.beforeStarted.complete();\n            this.started.complete();\n            this.released.complete();\n            this.ended.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this._moveEvents.complete();\n            this._handles = [];\n            this._disabledHandles.clear();\n            this._dropContainer = undefined;\n            this._resizeSubscription.unsubscribe();\n            this._boundaryElement = this._rootElement = this._placeholderTemplate =\n                this._previewTemplate = this._anchor = null;\n        };\n        /** Checks whether the element is currently being dragged. */\n        DragRef.prototype.isDragging = function () {\n            return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n        };\n        /** Resets a standalone drag item to its initial position. */\n        DragRef.prototype.reset = function () {\n            this._rootElement.style.transform = this._initialTransform || '';\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform = { x: 0, y: 0 };\n        };\n        /**\n         * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n         * @param handle Handle element that should be disabled.\n         */\n        DragRef.prototype.disableHandle = function (handle) {\n            if (this._handles.indexOf(handle) > -1) {\n                this._disabledHandles.add(handle);\n            }\n        };\n        /**\n         * Enables a handle, if it has been disabled.\n         * @param handle Handle element to be enabled.\n         */\n        DragRef.prototype.enableHandle = function (handle) {\n            this._disabledHandles.delete(handle);\n        };\n        /** Sets the layout direction of the draggable item. */\n        DragRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /** Sets the container that the item is part of. */\n        DragRef.prototype._withDropContainer = function (container) {\n            this._dropContainer = container;\n        };\n        /**\n         * Gets the current position in pixels the draggable outside of a drop container.\n         */\n        DragRef.prototype.getFreeDragPosition = function () {\n            var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n            return { x: position.x, y: position.y };\n        };\n        /**\n         * Sets the current position in pixels the draggable outside of a drop container.\n         * @param value New position to be set.\n         */\n        DragRef.prototype.setFreeDragPosition = function (value) {\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform.x = value.x;\n            this._passiveTransform.y = value.y;\n            if (!this._dropContainer) {\n                this._applyRootElementTransform(value.x, value.y);\n            }\n            return this;\n        };\n        /** Updates the item's sort order based on the last-known pointer position. */\n        DragRef.prototype._sortFromLastPointerPosition = function () {\n            var position = this._pointerPositionAtLastDirectionChange;\n            if (position && this._dropContainer) {\n                this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n            }\n        };\n        /** Unsubscribes from the global subscriptions. */\n        DragRef.prototype._removeSubscriptions = function () {\n            this._pointerMoveSubscription.unsubscribe();\n            this._pointerUpSubscription.unsubscribe();\n            this._scrollSubscription.unsubscribe();\n        };\n        /** Destroys the preview element and its ViewRef. */\n        DragRef.prototype._destroyPreview = function () {\n            if (this._preview) {\n                removeNode(this._preview);\n            }\n            if (this._previewRef) {\n                this._previewRef.destroy();\n            }\n            this._preview = this._previewRef = null;\n        };\n        /** Destroys the placeholder element and its ViewRef. */\n        DragRef.prototype._destroyPlaceholder = function () {\n            if (this._placeholder) {\n                removeNode(this._placeholder);\n            }\n            if (this._placeholderRef) {\n                this._placeholderRef.destroy();\n            }\n            this._placeholder = this._placeholderRef = null;\n        };\n        /**\n         * Clears subscriptions and stops the dragging sequence.\n         * @param event Browser event object that ended the sequence.\n         */\n        DragRef.prototype._endDragSequence = function (event) {\n            var _this = this;\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!this._dragDropRegistry.isDragging(this)) {\n                return;\n            }\n            this._removeSubscriptions();\n            this._dragDropRegistry.stopDragging(this);\n            this._toggleNativeDragInteractions();\n            if (this._handles) {\n                this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n            }\n            if (!this._hasStartedDragging) {\n                return;\n            }\n            this.released.next({ source: this });\n            if (this._dropContainer) {\n                // Stop scrolling immediately, instead of waiting for the animation to finish.\n                this._dropContainer._stopScrolling();\n                this._animatePreviewToPlaceholder().then(function () {\n                    _this._cleanupDragArtifacts(event);\n                    _this._cleanupCachedDimensions();\n                    _this._dragDropRegistry.stopDragging(_this);\n                });\n            }\n            else {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                this._passiveTransform.x = this._activeTransform.x;\n                this._passiveTransform.y = this._activeTransform.y;\n                this._ngZone.run(function () {\n                    _this.ended.next({\n                        source: _this,\n                        distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))\n                    });\n                });\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }\n        };\n        /** Starts the dragging sequence. */\n        DragRef.prototype._startDragSequence = function (event) {\n            // Emit the event on the item before the one on the container.\n            this.started.next({ source: this });\n            if (isTouchEvent(event)) {\n                this._lastTouchEventTime = Date.now();\n            }\n            this._toggleNativeDragInteractions();\n            if (this._dropContainer) {\n                var element = this._rootElement;\n                var parent_1 = element.parentNode;\n                var preview = this._preview = this._createPreviewElement();\n                var placeholder = this._placeholder = this._createPlaceholderElement();\n                var anchor = this._anchor = this._anchor || this._document.createComment('');\n                // Insert an anchor node so that we can restore the element's position in the DOM.\n                parent_1.insertBefore(anchor, element);\n                // We move the element out at the end of the body and we make it hidden, because keeping it in\n                // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n                // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n                element.style.display = 'none';\n                this._document.body.appendChild(parent_1.replaceChild(placeholder, element));\n                getPreviewInsertionPoint(this._document).appendChild(preview);\n                this._dropContainer.start();\n                this._initialContainer = this._dropContainer;\n                this._initialIndex = this._dropContainer.getItemIndex(this);\n            }\n            else {\n                this._initialContainer = this._initialIndex = undefined;\n            }\n        };\n        /**\n         * Sets up the different variables and subscriptions\n         * that will be necessary for the dragging sequence.\n         * @param referenceElement Element that started the drag sequence.\n         * @param event Browser event object that started the sequence.\n         */\n        DragRef.prototype._initializeDragSequence = function (referenceElement, event) {\n            var _this = this;\n            // Always stop propagation for the event that initializes\n            // the dragging sequence, in order to prevent it from potentially\n            // starting another sequence for a draggable parent somewhere up the DOM tree.\n            event.stopPropagation();\n            var isDragging = this.isDragging();\n            var isTouchSequence = isTouchEvent(event);\n            var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n            var rootElement = this._rootElement;\n            var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n                this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n            // If the event started from an element with the native HTML drag&drop, it'll interfere\n            // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n            // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n            // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n            // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n            // events from firing on touch devices.\n            if (event.target && event.target.draggable && event.type === 'mousedown') {\n                event.preventDefault();\n            }\n            // Abort if the user is already dragging or is using a mouse button other than the primary one.\n            if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n                return;\n            }\n            // If we've got handles, we need to disable the tap highlight on the entire root element,\n            // otherwise iOS will still add it, even though all the drag interactions on the handle\n            // are disabled.\n            if (this._handles.length) {\n                this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n                rootElement.style.webkitTapHighlightColor = 'transparent';\n            }\n            this._hasStartedDragging = this._hasMoved = false;\n            // Avoid multiple subscriptions and memory leaks when multi touch\n            // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n            this._removeSubscriptions();\n            this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n            this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n            this._scrollSubscription = this._dragDropRegistry.scroll.pipe(operators.startWith(null)).subscribe(function () {\n                _this._updateOnScroll();\n            });\n            if (this._boundaryElement) {\n                this._boundaryRect = getMutableClientRect(this._boundaryElement);\n            }\n            // If we have a custom preview we can't know ahead of time how large it'll be so we position\n            // it next to the cursor. The exception is when the consumer has opted into making the preview\n            // the same size as the root element, in which case we do know the size.\n            var previewTemplate = this._previewTemplate;\n            this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n                !previewTemplate.matchSize ? { x: 0, y: 0 } :\n                this._getPointerPositionInElement(referenceElement, event);\n            var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n            this._pointerDirectionDelta = { x: 0, y: 0 };\n            this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n            this._dragStartTime = Date.now();\n            this._dragDropRegistry.startDragging(this, event);\n        };\n        /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n        DragRef.prototype._cleanupDragArtifacts = function (event) {\n            var _this = this;\n            // Restore the element's visibility and insert it at its old position in the DOM.\n            // It's important that we maintain the position, because moving the element around in the DOM\n            // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n            // while moving the existing elements in all other cases.\n            this._rootElement.style.display = '';\n            this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._boundaryRect = this._previewRect = undefined;\n            // Re-enter the NgZone since we bound `document` events on the outside.\n            this._ngZone.run(function () {\n                var container = _this._dropContainer;\n                var currentIndex = container.getItemIndex(_this);\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));\n                var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n                _this.ended.next({ source: _this, distance: distance });\n                _this.dropped.next({\n                    item: _this,\n                    currentIndex: currentIndex,\n                    previousIndex: _this._initialIndex,\n                    container: container,\n                    previousContainer: _this._initialContainer,\n                    isPointerOverContainer: isPointerOverContainer,\n                    distance: distance\n                });\n                container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance, _this._initialIndex);\n                _this._dropContainer = _this._initialContainer;\n            });\n        };\n        /**\n         * Updates the item's position in its drop container, or moves it\n         * into a new one, depending on its current drag position.\n         */\n        DragRef.prototype._updateActiveDropContainer = function (_a) {\n            var _this = this;\n            var x = _a.x, y = _a.y;\n            // Drop container that draggable has been moved into.\n            var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n            // If we couldn't find a new container to move the item into, and the item has left its\n            // initial container, check whether the it's over the initial container. This handles the\n            // case where two containers are connected one way and the user tries to undo dragging an\n            // item into a new container.\n            if (!newContainer && this._dropContainer !== this._initialContainer &&\n                this._initialContainer._isOverContainer(x, y)) {\n                newContainer = this._initialContainer;\n            }\n            if (newContainer && newContainer !== this._dropContainer) {\n                this._ngZone.run(function () {\n                    // Notify the old container that the item has left.\n                    _this.exited.next({ item: _this, container: _this._dropContainer });\n                    _this._dropContainer.exit(_this);\n                    // Notify the new container that the item has entered.\n                    _this._dropContainer = newContainer;\n                    _this._dropContainer.enter(_this, x, y, newContainer === _this._initialContainer &&\n                        // If we're re-entering the initial container and sorting is disabled,\n                        // put item the into its starting index to begin with.\n                        newContainer.sortingDisabled ? _this._initialIndex : undefined);\n                    _this.entered.next({\n                        item: _this,\n                        container: newContainer,\n                        currentIndex: newContainer.getItemIndex(_this)\n                    });\n                });\n            }\n            this._dropContainer._startScrollingIfNecessary(x, y);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._preview.style.transform =\n                getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        };\n        /**\n         * Creates the element that will be rendered next to the user's pointer\n         * and will be used as a preview of the element that is being dragged.\n         */\n        DragRef.prototype._createPreviewElement = function () {\n            var previewConfig = this._previewTemplate;\n            var previewClass = this.previewClass;\n            var previewTemplate = previewConfig ? previewConfig.template : null;\n            var preview;\n            if (previewTemplate && previewConfig) {\n                // Measure the element before we've inserted the preview\n                // since the insertion could throw off the measurement.\n                var rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n                var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n                viewRef.detectChanges();\n                preview = getRootNode(viewRef, this._document);\n                this._previewRef = viewRef;\n                if (previewConfig.matchSize) {\n                    matchElementSize(preview, rootRect);\n                }\n                else {\n                    preview.style.transform =\n                        getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n                }\n            }\n            else {\n                var element = this._rootElement;\n                preview = deepCloneNode(element);\n                matchElementSize(preview, element.getBoundingClientRect());\n            }\n            extendStyles(preview.style, {\n                // It's important that we disable the pointer events on the preview, because\n                // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n                pointerEvents: 'none',\n                // We have to reset the margin, because it can throw off positioning relative to the viewport.\n                margin: '0',\n                position: 'fixed',\n                top: '0',\n                left: '0',\n                zIndex: \"\" + (this._config.zIndex || 1000)\n            });\n            toggleNativeDragInteractions(preview, false);\n            preview.classList.add('cdk-drag-preview');\n            preview.setAttribute('dir', this._direction);\n            if (previewClass) {\n                if (Array.isArray(previewClass)) {\n                    previewClass.forEach(function (className) { return preview.classList.add(className); });\n                }\n                else {\n                    preview.classList.add(previewClass);\n                }\n            }\n            return preview;\n        };\n        /**\n         * Animates the preview element from its current position to the location of the drop placeholder.\n         * @returns Promise that resolves when the animation completes.\n         */\n        DragRef.prototype._animatePreviewToPlaceholder = function () {\n            var _this = this;\n            // If the user hasn't moved yet, the transitionend event won't fire.\n            if (!this._hasMoved) {\n                return Promise.resolve();\n            }\n            var placeholderRect = this._placeholder.getBoundingClientRect();\n            // Apply the class that adds a transition to the preview.\n            this._preview.classList.add('cdk-drag-animating');\n            // Move the preview to the placeholder position.\n            this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n            // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n            // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n            // apply its style, we take advantage of the available info to figure out whether we need to\n            // bind the event in the first place.\n            var duration = getTransformTransitionDurationInMs(this._preview);\n            if (duration === 0) {\n                return Promise.resolve();\n            }\n            return this._ngZone.runOutsideAngular(function () {\n                return new Promise(function (resolve) {\n                    var handler = (function (event) {\n                        if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                            _this._preview.removeEventListener('transitionend', handler);\n                            resolve();\n                            clearTimeout(timeout);\n                        }\n                    });\n                    // If a transition is short enough, the browser might not fire the `transitionend` event.\n                    // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                    // fire if the transition hasn't completed when it was supposed to.\n                    var timeout = setTimeout(handler, duration * 1.5);\n                    _this._preview.addEventListener('transitionend', handler);\n                });\n            });\n        };\n        /** Creates an element that will be shown instead of the current element while dragging. */\n        DragRef.prototype._createPlaceholderElement = function () {\n            var placeholderConfig = this._placeholderTemplate;\n            var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n            var placeholder;\n            if (placeholderTemplate) {\n                this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n                this._placeholderRef.detectChanges();\n                placeholder = getRootNode(this._placeholderRef, this._document);\n            }\n            else {\n                placeholder = deepCloneNode(this._rootElement);\n            }\n            placeholder.classList.add('cdk-drag-placeholder');\n            return placeholder;\n        };\n        /**\n         * Figures out the coordinates at which an element was picked up.\n         * @param referenceElement Element that initiated the dragging.\n         * @param event Event that initiated the dragging.\n         */\n        DragRef.prototype._getPointerPositionInElement = function (referenceElement, event) {\n            var elementRect = this._rootElement.getBoundingClientRect();\n            var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n            var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n            var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n            var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n            var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n            return {\n                x: referenceRect.left - elementRect.left + x,\n                y: referenceRect.top - elementRect.top + y\n            };\n        };\n        /** Determines the point of the page that was touched by the user. */\n        DragRef.prototype._getPointerPositionOnPage = function (event) {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n            return {\n                x: point.pageX - this._scrollPosition.left,\n                y: point.pageY - this._scrollPosition.top\n            };\n        };\n        /** Gets the pointer position on the page, accounting for any position constraints. */\n        DragRef.prototype._getConstrainedPointerPosition = function (point) {\n            var constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n            var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n            if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n                constrainedPoint.y = this._pickupPositionOnPage.y;\n            }\n            else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n                constrainedPoint.x = this._pickupPositionOnPage.x;\n            }\n            if (this._boundaryRect) {\n                var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n                var boundaryRect = this._boundaryRect;\n                var previewRect = this._previewRect;\n                var minY = boundaryRect.top + pickupY;\n                var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n                var minX = boundaryRect.left + pickupX;\n                var maxX = boundaryRect.right - (previewRect.width - pickupX);\n                constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n                constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n            }\n            return constrainedPoint;\n        };\n        /** Updates the current drag delta, based on the user's current pointer position on the page. */\n        DragRef.prototype._updatePointerDirectionDelta = function (pointerPositionOnPage) {\n            var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n            var delta = this._pointerDirectionDelta;\n            var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n            // Amount of pixels the user has dragged since the last time the direction changed.\n            var changeX = Math.abs(x - positionSinceLastChange.x);\n            var changeY = Math.abs(y - positionSinceLastChange.y);\n            // Because we handle pointer events on a per-pixel basis, we don't want the delta\n            // to change for every pixel, otherwise anything that depends on it can look erratic.\n            // To make the delta more consistent, we track how much the user has moved since the last\n            // delta change and we only update it after it has reached a certain threshold.\n            if (changeX > this._config.pointerDirectionChangeThreshold) {\n                delta.x = x > positionSinceLastChange.x ? 1 : -1;\n                positionSinceLastChange.x = x;\n            }\n            if (changeY > this._config.pointerDirectionChangeThreshold) {\n                delta.y = y > positionSinceLastChange.y ? 1 : -1;\n                positionSinceLastChange.y = y;\n            }\n            return delta;\n        };\n        /** Toggles the native drag interactions, based on how many handles are registered. */\n        DragRef.prototype._toggleNativeDragInteractions = function () {\n            if (!this._rootElement || !this._handles) {\n                return;\n            }\n            var shouldEnable = this._handles.length > 0 || !this.isDragging();\n            if (shouldEnable !== this._nativeInteractionsEnabled) {\n                this._nativeInteractionsEnabled = shouldEnable;\n                toggleNativeDragInteractions(this._rootElement, shouldEnable);\n            }\n        };\n        /** Removes the manually-added event listeners from the root element. */\n        DragRef.prototype._removeRootElementListeners = function (element) {\n            element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n            element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        };\n        /**\n         * Applies a `transform` to the root element, taking into account any existing transforms on it.\n         * @param x New transform value along the X axis.\n         * @param y New transform value along the Y axis.\n         */\n        DragRef.prototype._applyRootElementTransform = function (x, y) {\n            var transform = getTransform(x, y);\n            // Cache the previous transform amount only after the first drag sequence, because\n            // we don't want our own transforms to stack on top of each other.\n            if (this._initialTransform == null) {\n                this._initialTransform = this._rootElement.style.transform || '';\n            }\n            // Preserve the previous `transform` value, if there was one. Note that we apply our own\n            // transform before the user's, because things like rotation can affect which direction\n            // the element will be translated towards.\n            this._rootElement.style.transform = this._initialTransform ?\n                transform + ' ' + this._initialTransform : transform;\n        };\n        /**\n         * Gets the distance that the user has dragged during the current drag sequence.\n         * @param currentPosition Current position of the user's pointer.\n         */\n        DragRef.prototype._getDragDistance = function (currentPosition) {\n            var pickupPosition = this._pickupPositionOnPage;\n            if (pickupPosition) {\n                return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n            }\n            return { x: 0, y: 0 };\n        };\n        /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n        DragRef.prototype._cleanupCachedDimensions = function () {\n            this._boundaryRect = this._previewRect = undefined;\n        };\n        /**\n         * Checks whether the element is still inside its boundary after the viewport has been resized.\n         * If not, the position is adjusted so that the element fits again.\n         */\n        DragRef.prototype._containInsideBoundaryOnResize = function () {\n            var _a = this._passiveTransform, x = _a.x, y = _a.y;\n            if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n                return;\n            }\n            var boundaryRect = this._boundaryElement.getBoundingClientRect();\n            var elementRect = this._rootElement.getBoundingClientRect();\n            // It's possible that the element got hidden away after dragging (e.g. by switching to a\n            // different tab). Don't do anything in this case so we don't clear the user's position.\n            if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n                (elementRect.width === 0 && elementRect.height === 0)) {\n                return;\n            }\n            var leftOverflow = boundaryRect.left - elementRect.left;\n            var rightOverflow = elementRect.right - boundaryRect.right;\n            var topOverflow = boundaryRect.top - elementRect.top;\n            var bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n            // If the element has become wider than the boundary, we can't\n            // do much to make it fit so we just anchor it to the left.\n            if (boundaryRect.width > elementRect.width) {\n                if (leftOverflow > 0) {\n                    x += leftOverflow;\n                }\n                if (rightOverflow > 0) {\n                    x -= rightOverflow;\n                }\n            }\n            else {\n                x = 0;\n            }\n            // If the element has become taller than the boundary, we can't\n            // do much to make it fit so we just anchor it to the top.\n            if (boundaryRect.height > elementRect.height) {\n                if (topOverflow > 0) {\n                    y += topOverflow;\n                }\n                if (bottomOverflow > 0) {\n                    y -= bottomOverflow;\n                }\n            }\n            else {\n                y = 0;\n            }\n            if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n                this.setFreeDragPosition({ y: y, x: x });\n            }\n        };\n        /** Gets the drag start delay, based on the event type. */\n        DragRef.prototype._getDragStartDelay = function (event) {\n            var value = this.dragStartDelay;\n            if (typeof value === 'number') {\n                return value;\n            }\n            else if (isTouchEvent(event)) {\n                return value.touch;\n            }\n            return value ? value.mouse : 0;\n        };\n        /** Updates the internal state of the draggable element when scrolling has occurred. */\n        DragRef.prototype._updateOnScroll = function () {\n            var oldScrollPosition = this._scrollPosition;\n            var currentScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // ClientRect dimensions are based on the page's scroll position so\n            // we have to update the cached boundary ClientRect if the user has scrolled.\n            if (oldScrollPosition && this._boundaryRect) {\n                var topDifference = oldScrollPosition.top - currentScrollPosition.top;\n                var leftDifference = oldScrollPosition.left - currentScrollPosition.left;\n                adjustClientRect(this._boundaryRect, topDifference, leftDifference);\n            }\n            this._scrollPosition = currentScrollPosition;\n        };\n        return DragRef;\n    }());\n    /**\n     * Gets a 3d `transform` that can be applied to an element.\n     * @param x Desired position of the element along the X axis.\n     * @param y Desired position of the element along the Y axis.\n     */\n    function getTransform(x, y) {\n        // Round the transforms since some browsers will\n        // blur the elements for sub-pixel transforms.\n        return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n    }\n    /** Creates a deep clone of an element. */\n    function deepCloneNode(node) {\n        var clone = node.cloneNode(true);\n        var descendantsWithId = clone.querySelectorAll('[id]');\n        var descendantCanvases = node.querySelectorAll('canvas');\n        // Remove the `id` to avoid having multiple elements with the same id on the page.\n        clone.removeAttribute('id');\n        for (var i = 0; i < descendantsWithId.length; i++) {\n            descendantsWithId[i].removeAttribute('id');\n        }\n        // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n        // We match up the cloned canvas to their sources using their index in the DOM.\n        if (descendantCanvases.length) {\n            var cloneCanvases = clone.querySelectorAll('canvas');\n            for (var i = 0; i < descendantCanvases.length; i++) {\n                var correspondingCloneContext = cloneCanvases[i].getContext('2d');\n                if (correspondingCloneContext) {\n                    correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n                }\n            }\n        }\n        return clone;\n    }\n    /** Clamps a value between a minimum and a maximum. */\n    function clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    /**\n     * Helper to remove a node from the DOM and to do all the necessary null checks.\n     * @param node Node to be removed.\n     */\n    function removeNode(node) {\n        if (node && node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n    /** Determines whether an event is a touch event. */\n    function isTouchEvent(event) {\n        // This function is called for every pixel that the user has dragged so we need it to be\n        // as fast as possible. Since we only bind mouse events and touch events, we can assume\n        // that if the event's name starts with `t`, it's a touch event.\n        return event.type[0] === 't';\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    function getPreviewInsertionPoint(documentRef) {\n        // We can't use the body if the user is in fullscreen mode,\n        // because the preview will render under the fullscreen element.\n        // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n        return documentRef.fullscreenElement ||\n            documentRef.webkitFullscreenElement ||\n            documentRef.mozFullScreenElement ||\n            documentRef.msFullscreenElement ||\n            documentRef.body;\n    }\n    /**\n     * Gets the root HTML element of an embedded view.\n     * If the root is not an HTML element it gets wrapped in one.\n     */\n    function getRootNode(viewRef, _document) {\n        var rootNodes = viewRef.rootNodes;\n        if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n            return rootNodes[0];\n        }\n        var wrapper = _document.createElement('div');\n        rootNodes.forEach(function (node) { return wrapper.appendChild(node); });\n        return wrapper;\n    }\n    /**\n     * Matches the target element's size to the source's size.\n     * @param target Element that needs to be resized.\n     * @param sourceRect Dimensions of the source element.\n     */\n    function matchElementSize(target, sourceRect) {\n        target.style.width = sourceRect.width + \"px\";\n        target.style.height = sourceRect.height + \"px\";\n        target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Moves an item one index in an array to another.\n     * @param array Array in which to move the item.\n     * @param fromIndex Starting index of the item.\n     * @param toIndex Index to which the item should be moved.\n     */\n    function moveItemInArray(array, fromIndex, toIndex) {\n        var from = clamp$1(fromIndex, array.length - 1);\n        var to = clamp$1(toIndex, array.length - 1);\n        if (from === to) {\n            return;\n        }\n        var target = array[from];\n        var delta = to < from ? -1 : 1;\n        for (var i = from; i !== to; i += delta) {\n            array[i] = array[i + delta];\n        }\n        array[to] = target;\n    }\n    /**\n     * Moves an item from one array to another.\n     * @param currentArray Array from which to transfer the item.\n     * @param targetArray Array into which to put the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     */\n    function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var from = clamp$1(currentIndex, currentArray.length - 1);\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n        }\n    }\n    /**\n     * Copies an item from one array to another, leaving it in its\n     * original position in current array.\n     * @param currentArray Array from which to copy the item.\n     * @param targetArray Array into which is copy the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     *\n     */\n    function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray[currentIndex]);\n        }\n    }\n    /** Clamps a number between zero and a maximum. */\n    function clamp$1(value, max) {\n        return Math.max(0, Math.min(max, value));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Proximity, as a ratio to width/height, at which a\n     * dragged item will affect the drop container.\n     */\n    var DROP_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n     * viewport. The value comes from trying it out manually until it feels right.\n     */\n    var SCROLL_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Number of pixels to scroll for each frame when auto-scrolling an element.\n     * The value comes from trying it out manually until it feels right.\n     */\n    var AUTO_SCROLL_STEP = 2;\n    /**\n     * Reference to a drop list. Used to manipulate or dispose of the container.\n     */\n    var DropListRef = /** @class */ (function () {\n        function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n            var _this = this;\n            this._dragDropRegistry = _dragDropRegistry;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            /** Whether starting a dragging sequence from this container is disabled. */\n            this.disabled = false;\n            /** Whether sorting items within the list is disabled. */\n            this.sortingDisabled = false;\n            /**\n             * Whether auto-scrolling the view when the user\n             * moves their pointer close to the edges is disabled.\n             */\n            this.autoScrollDisabled = false;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits right before dragging has started. */\n            this.beforeStarted = new rxjs.Subject();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new rxjs.Subject();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new rxjs.Subject();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new rxjs.Subject();\n            /** Whether an item in the list is being dragged. */\n            this._isDragging = false;\n            /** Cache of the dimensions of all the items inside the container. */\n            this._itemPositions = [];\n            /** Cached positions of the scrollable parent elements. */\n            this._parentPositions = new Map();\n            /**\n             * Keeps track of the item that was last swapped with the dragged item, as\n             * well as what direction the pointer was moving in when the swap occured.\n             */\n            this._previousSwap = { drag: null, delta: 0 };\n            /** Drop lists that are connected to the current one. */\n            this._siblings = [];\n            /** Direction in which the list is oriented. */\n            this._orientation = 'vertical';\n            /** Connected siblings that currently have a dragged item. */\n            this._activeSiblings = new Set();\n            /** Layout direction of the drop list. */\n            this._direction = 'ltr';\n            /** Subscription to the window being scrolled. */\n            this._viewportScrollSubscription = rxjs.Subscription.EMPTY;\n            /** Vertical direction in which the list is currently scrolling. */\n            this._verticalScrollDirection = 0 /* NONE */;\n            /** Horizontal direction in which the list is currently scrolling. */\n            this._horizontalScrollDirection = 0 /* NONE */;\n            /** Used to signal to the current auto-scroll sequence when to stop. */\n            this._stopScrollTimers = new rxjs.Subject();\n            /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n            this._cachedShadowRoot = null;\n            /** Starts the interval that'll auto-scroll the element. */\n            this._startScrollInterval = function () {\n                _this._stopScrolling();\n                rxjs.interval(0, rxjs.animationFrameScheduler)\n                    .pipe(operators.takeUntil(_this._stopScrollTimers))\n                    .subscribe(function () {\n                    var node = _this._scrollNode;\n                    if (_this._verticalScrollDirection === 1 /* UP */) {\n                        incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._verticalScrollDirection === 2 /* DOWN */) {\n                        incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                    if (_this._horizontalScrollDirection === 1 /* LEFT */) {\n                        incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._horizontalScrollDirection === 2 /* RIGHT */) {\n                        incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                });\n            };\n            this.element = coercion.coerceElement(element);\n            this._document = _document;\n            this.withScrollableParents([this.element]);\n            _dragDropRegistry.registerDropContainer(this);\n        }\n        /** Removes the drop list functionality from the DOM element. */\n        DropListRef.prototype.dispose = function () {\n            this._stopScrolling();\n            this._stopScrollTimers.complete();\n            this._viewportScrollSubscription.unsubscribe();\n            this.beforeStarted.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this.sorted.complete();\n            this._activeSiblings.clear();\n            this._scrollNode = null;\n            this._parentPositions.clear();\n            this._dragDropRegistry.removeDropContainer(this);\n        };\n        /** Whether an item from this list is currently being dragged. */\n        DropListRef.prototype.isDragging = function () {\n            return this._isDragging;\n        };\n        /** Starts dragging an item. */\n        DropListRef.prototype.start = function () {\n            var _this = this;\n            var styles = coercion.coerceElement(this.element).style;\n            this.beforeStarted.next();\n            this._isDragging = true;\n            // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n            // scrolling. The browser seems to round the value based on the snapping points which means\n            // that we can't increment/decrement the scroll position.\n            this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n            styles.scrollSnapType = styles.msScrollSnapType = 'none';\n            this._cacheItems();\n            this._siblings.forEach(function (sibling) { return sibling._startReceiving(_this); });\n            this._viewportScrollSubscription.unsubscribe();\n            this._listenToScrollEvents();\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param index Index at which the item entered. If omitted, the container will try to figure it\n         *   out automatically.\n         */\n        DropListRef.prototype.enter = function (item, pointerX, pointerY, index) {\n            this.start();\n            // If sorting is disabled, we want the item to return to its starting\n            // position if the user is returning it to its initial container.\n            var newIndex;\n            if (index == null) {\n                newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n                if (newIndex === -1) {\n                    // We use the coordinates of where the item entered the drop\n                    // zone to figure out at which index it should be inserted.\n                    newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n                }\n            }\n            else {\n                newIndex = index;\n            }\n            var activeDraggables = this._activeDraggables;\n            var currentIndex = activeDraggables.indexOf(item);\n            var placeholder = item.getPlaceholderElement();\n            var newPositionReference = activeDraggables[newIndex];\n            // If the item at the new position is the same as the item that is being dragged,\n            // it means that we're trying to restore the item to its initial position. In this\n            // case we should use the next item from the list as the reference.\n            if (newPositionReference === item) {\n                newPositionReference = activeDraggables[newIndex + 1];\n            }\n            // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n            // into another container and back again), we have to ensure that it isn't duplicated.\n            if (currentIndex > -1) {\n                activeDraggables.splice(currentIndex, 1);\n            }\n            // Don't use items that are being dragged as a reference, because\n            // their element has been moved down to the bottom of the body.\n            if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n                var element = newPositionReference.getRootElement();\n                element.parentElement.insertBefore(placeholder, element);\n                activeDraggables.splice(newIndex, 0, item);\n            }\n            else {\n                coercion.coerceElement(this.element).appendChild(placeholder);\n                activeDraggables.push(item);\n            }\n            // The transform needs to be cleared so it doesn't throw off the measurements.\n            placeholder.style.transform = '';\n            // Note that the positions were already cached when we called `start` above,\n            // but we need to refresh them since the amount of items has changed.\n            this._cacheItemPositions();\n            this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         */\n        DropListRef.prototype.exit = function (item) {\n            this._reset();\n            this.exited.next({ item: item, container: this });\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         * @param distance Distance the user has dragged since the start of the dragging sequence.\n         * @param previousIndex Index of the item when dragging started.\n         *\n         * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n         */\n        DropListRef.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n            this._reset();\n            // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n            if (previousIndex == null) {\n                previousIndex = previousContainer.getItemIndex(item);\n            }\n            this.dropped.next({ item: item,\n                currentIndex: currentIndex,\n                previousIndex: previousIndex,\n                container: this,\n                previousContainer: previousContainer,\n                isPointerOverContainer: isPointerOverContainer,\n                distance: distance\n            });\n        };\n        /**\n         * Sets the draggable items that are a part of this list.\n         * @param items Items that are a part of this list.\n         */\n        DropListRef.prototype.withItems = function (items) {\n            var _this = this;\n            var previousItems = this._draggables;\n            this._draggables = items;\n            items.forEach(function (item) { return item._withDropContainer(_this); });\n            if (this.isDragging()) {\n                var draggedItems = previousItems.filter(function (item) { return item.isDragging(); });\n                // If all of the items being dragged were removed\n                // from the list, abort the current drag sequence.\n                if (draggedItems.every(function (item) { return items.indexOf(item) === -1; })) {\n                    this._reset();\n                }\n                else {\n                    this._cacheItems();\n                }\n            }\n            return this;\n        };\n        /** Sets the layout direction of the drop list. */\n        DropListRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /**\n         * Sets the containers that are connected to this one. When two or more containers are\n         * connected, the user will be allowed to transfer items between them.\n         * @param connectedTo Other containers that the current containers should be connected to.\n         */\n        DropListRef.prototype.connectedTo = function (connectedTo) {\n            this._siblings = connectedTo.slice();\n            return this;\n        };\n        /**\n         * Sets the orientation of the container.\n         * @param orientation New orientation for the container.\n         */\n        DropListRef.prototype.withOrientation = function (orientation) {\n            this._orientation = orientation;\n            return this;\n        };\n        /**\n         * Sets which parent elements are can be scrolled while the user is dragging.\n         * @param elements Elements that can be scrolled.\n         */\n        DropListRef.prototype.withScrollableParents = function (elements) {\n            var element = coercion.coerceElement(this.element);\n            // We always allow the current element to be scrollable\n            // so we need to ensure that it's in the array.\n            this._scrollableElements =\n                elements.indexOf(element) === -1 ? __spread([element], elements) : elements.slice();\n            return this;\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         */\n        DropListRef.prototype.getItemIndex = function (item) {\n            if (!this._isDragging) {\n                return this._draggables.indexOf(item);\n            }\n            // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n            // The rest of the logic still stands no matter what orientation we're in, however\n            // we need to invert the array when determining the index.\n            var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n                this._itemPositions.slice().reverse() : this._itemPositions;\n            return findIndex(items, function (currentItem) { return currentItem.drag === item; });\n        };\n        /**\n         * Whether the list is able to receive the item that\n         * is currently being dragged inside a connected drop list.\n         */\n        DropListRef.prototype.isReceiving = function () {\n            return this._activeSiblings.size > 0;\n        };\n        /**\n         * Sorts an item inside the container based on its position.\n         * @param item Item to be sorted.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param pointerDelta Direction in which the pointer is moving along each axis.\n         */\n        DropListRef.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {\n            // Don't sort the item if sorting is disabled or it's out of range.\n            if (this.sortingDisabled ||\n                !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                return;\n            }\n            var siblings = this._itemPositions;\n            var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n            if (newIndex === -1 && siblings.length > 0) {\n                return;\n            }\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentIndex = findIndex(siblings, function (currentItem) { return currentItem.drag === item; });\n            var siblingAtNewPosition = siblings[newIndex];\n            var currentPosition = siblings[currentIndex].clientRect;\n            var newPosition = siblingAtNewPosition.clientRect;\n            var delta = currentIndex > newIndex ? 1 : -1;\n            this._previousSwap.drag = siblingAtNewPosition.drag;\n            this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n            // How many pixels the item's placeholder should be offset.\n            var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n            // How many pixels all the other items should be offset.\n            var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n            // Save the previous order of the items before moving the item to its new index.\n            // We use this to check whether an item has been moved as a result of the sorting.\n            var oldOrder = siblings.slice();\n            // Shuffle the array in place.\n            moveItemInArray(siblings, currentIndex, newIndex);\n            this.sorted.next({\n                previousIndex: currentIndex,\n                currentIndex: newIndex,\n                container: this,\n                item: item\n            });\n            siblings.forEach(function (sibling, index) {\n                // Don't do anything if the position hasn't changed.\n                if (oldOrder[index] === sibling) {\n                    return;\n                }\n                var isDraggedItem = sibling.drag === item;\n                var offset = isDraggedItem ? itemOffset : siblingOffset;\n                var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                    sibling.drag.getRootElement();\n                // Update the offset to reflect the new position.\n                sibling.offset += offset;\n                // Since we're moving the items with a `transform`, we need to adjust their cached\n                // client rects to reflect their new position, as well as swap their positions in the cache.\n                // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n                // elements may be mid-animation which will give us a wrong result.\n                if (isHorizontal) {\n                    // Round the transforms since some browsers will\n                    // blur the elements, for sub-pixel transforms.\n                    elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                    adjustClientRect(sibling.clientRect, 0, offset);\n                }\n                else {\n                    elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                    adjustClientRect(sibling.clientRect, offset, 0);\n                }\n            });\n        };\n        /**\n         * Checks whether the user's pointer is close to the edges of either the\n         * viewport or the drop list and starts the auto-scroll sequence.\n         * @param pointerX User's pointer position along the x axis.\n         * @param pointerY User's pointer position along the y axis.\n         */\n        DropListRef.prototype._startScrollingIfNecessary = function (pointerX, pointerY) {\n            var _this = this;\n            if (this.autoScrollDisabled) {\n                return;\n            }\n            var scrollNode;\n            var verticalScrollDirection = 0 /* NONE */;\n            var horizontalScrollDirection = 0 /* NONE */;\n            // Check whether we should start scrolling any of the parent containers.\n            this._parentPositions.forEach(function (position, element) {\n                var _a;\n                // We have special handling for the `document` below. Also this would be\n                // nicer with a  for...of loop, but it requires changing a compiler flag.\n                if (element === _this._document || !position.clientRect || scrollNode) {\n                    return;\n                }\n                if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                    _a = __read(getElementScrollDirections(element, position.clientRect, pointerX, pointerY), 2), verticalScrollDirection = _a[0], horizontalScrollDirection = _a[1];\n                    if (verticalScrollDirection || horizontalScrollDirection) {\n                        scrollNode = element;\n                    }\n                }\n            });\n            // Otherwise check if we can start scrolling the viewport.\n            if (!verticalScrollDirection && !horizontalScrollDirection) {\n                var _a = this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                var clientRect = { width: width, height: height, top: 0, right: width, bottom: height, left: 0 };\n                verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n                horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n                scrollNode = window;\n            }\n            if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n                this._verticalScrollDirection = verticalScrollDirection;\n                this._horizontalScrollDirection = horizontalScrollDirection;\n                this._scrollNode = scrollNode;\n                if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._stopScrolling();\n                }\n            }\n        };\n        /** Stops any currently-running auto-scroll sequences. */\n        DropListRef.prototype._stopScrolling = function () {\n            this._stopScrollTimers.next();\n        };\n        /** Caches the positions of the configured scrollable parents. */\n        DropListRef.prototype._cacheParentPositions = function () {\n            var _this = this;\n            this._parentPositions.clear();\n            this._parentPositions.set(this._document, {\n                scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n            });\n            this._scrollableElements.forEach(function (element) {\n                var clientRect = getMutableClientRect(element);\n                // We keep the ClientRect cached in two properties, because it's referenced in a lot of\n                // performance-sensitive places and we want to avoid the extra lookups. The `element` is\n                // guaranteed to always be in the `_scrollableElements` so this should always match.\n                if (element === _this.element) {\n                    _this._clientRect = clientRect;\n                }\n                _this._parentPositions.set(element, {\n                    scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                    clientRect: clientRect\n                });\n            });\n        };\n        /** Refreshes the position cache of the items and sibling containers. */\n        DropListRef.prototype._cacheItemPositions = function () {\n            var isHorizontal = this._orientation === 'horizontal';\n            this._itemPositions = this._activeDraggables.map(function (drag) {\n                var elementToMeasure = drag.getVisibleElement();\n                return { drag: drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n            }).sort(function (a, b) {\n                return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                    a.clientRect.top - b.clientRect.top;\n            });\n        };\n        /** Resets the container to its initial state. */\n        DropListRef.prototype._reset = function () {\n            var _this = this;\n            this._isDragging = false;\n            var styles = coercion.coerceElement(this.element).style;\n            styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n            // TODO(crisbeto): may have to wait for the animations to finish.\n            this._activeDraggables.forEach(function (item) {\n                var rootElement = item.getRootElement();\n                if (rootElement) {\n                    rootElement.style.transform = '';\n                }\n            });\n            this._siblings.forEach(function (sibling) { return sibling._stopReceiving(_this); });\n            this._activeDraggables = [];\n            this._itemPositions = [];\n            this._previousSwap.drag = null;\n            this._previousSwap.delta = 0;\n            this._stopScrolling();\n            this._viewportScrollSubscription.unsubscribe();\n            this._parentPositions.clear();\n        };\n        /**\n         * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n         * @param currentIndex Index of the item currently being dragged.\n         * @param siblings All of the items in the list.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getSiblingOffsetPx = function (currentIndex, siblings, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentPosition = siblings[currentIndex].clientRect;\n            var immediateSibling = siblings[currentIndex + delta * -1];\n            var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n            if (immediateSibling) {\n                var start = isHorizontal ? 'left' : 'top';\n                var end = isHorizontal ? 'right' : 'bottom';\n                // Get the spacing between the start of the current item and the end of the one immediately\n                // after it in the direction in which the user is dragging, or vice versa. We add it to the\n                // offset in order to push the element to where it will be when it's inline and is influenced\n                // by the `margin` of its siblings.\n                if (delta === -1) {\n                    siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n                }\n                else {\n                    siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n                }\n            }\n            return siblingOffset;\n        };\n        /**\n         * Gets the offset in pixels by which the item that is being dragged should be moved.\n         * @param currentPosition Current position of the item.\n         * @param newPosition Position of the item where the current item should be moved.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getItemOffsetPx = function (currentPosition, newPosition, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                newPosition.top - currentPosition.top;\n            // Account for differences in the item width/height.\n            if (delta === -1) {\n                itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                    newPosition.height - currentPosition.height;\n            }\n            return itemOffset;\n        };\n        /**\n         * Gets the index of an item in the drop container, based on the position of the user's pointer.\n         * @param item Item that is being sorted.\n         * @param pointerX Position of the user's pointer along the X axis.\n         * @param pointerY Position of the user's pointer along the Y axis.\n         * @param delta Direction in which the user is moving their pointer.\n         */\n        DropListRef.prototype._getItemIndexFromPointerPosition = function (item, pointerX, pointerY, delta) {\n            var _this = this;\n            var isHorizontal = this._orientation === 'horizontal';\n            return findIndex(this._itemPositions, function (_a, _, array) {\n                var drag = _a.drag, clientRect = _a.clientRect;\n                if (drag === item) {\n                    // If there's only one item left in the container, it must be\n                    // the dragged item itself so we use it as a reference.\n                    return array.length < 2;\n                }\n                if (delta) {\n                    var direction = isHorizontal ? delta.x : delta.y;\n                    // If the user is still hovering over the same item as last time, and they didn't change\n                    // the direction in which they're dragging, we don't consider it a direction swap.\n                    if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                        return false;\n                    }\n                }\n                return isHorizontal ?\n                    // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                    pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n            });\n        };\n        /** Caches the current items in the list and their positions. */\n        DropListRef.prototype._cacheItems = function () {\n            this._activeDraggables = this._draggables.slice();\n            this._cacheItemPositions();\n            this._cacheParentPositions();\n        };\n        /**\n         * Updates the internal state of the container after a scroll event has happened.\n         * @param scrolledParent Element that was scrolled.\n         * @param newTop New top scroll position.\n         * @param newLeft New left scroll position.\n         */\n        DropListRef.prototype._updateAfterScroll = function (scrolledParent, newTop, newLeft) {\n            var _this = this;\n            // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n            // parent is the `document`, we use the `documentElement`, because IE doesn't support `contains`\n            // on the `document`.\n            var scrolledParentNode = scrolledParent === this._document ? scrolledParent.documentElement : scrolledParent;\n            var scrollPosition = this._parentPositions.get(scrolledParent).scrollPosition;\n            var topDifference = scrollPosition.top - newTop;\n            var leftDifference = scrollPosition.left - newLeft;\n            // Go through and update the cached positions of the scroll\n            // parents that are inside the element that was scrolled.\n            this._parentPositions.forEach(function (position, node) {\n                if (position.clientRect && scrolledParent !== node && scrolledParentNode.contains(node)) {\n                    adjustClientRect(position.clientRect, topDifference, leftDifference);\n                }\n            });\n            // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n            // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n            // behavior where we might be measuring the element before its position has changed.\n            this._itemPositions.forEach(function (_a) {\n                var clientRect = _a.clientRect;\n                adjustClientRect(clientRect, topDifference, leftDifference);\n            });\n            // We need two loops for this, because we want all of the cached\n            // positions to be up-to-date before we re-sort the item.\n            this._itemPositions.forEach(function (_a) {\n                var drag = _a.drag;\n                if (_this._dragDropRegistry.isDragging(drag)) {\n                    // We need to re-sort the item manually, because the pointer move\n                    // events won't be dispatched while the user is scrolling.\n                    drag._sortFromLastPointerPosition();\n                }\n            });\n            scrollPosition.top = newTop;\n            scrollPosition.left = newLeft;\n        };\n        /**\n         * Checks whether the user's pointer is positioned over the container.\n         * @param x Pointer position along the X axis.\n         * @param y Pointer position along the Y axis.\n         */\n        DropListRef.prototype._isOverContainer = function (x, y) {\n            return isInsideClientRect(this._clientRect, x, y);\n        };\n        /**\n         * Figures out whether an item should be moved into a sibling\n         * drop container, based on its current position.\n         * @param item Drag item that is being moved.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._getSiblingContainerFromPosition = function (item, x, y) {\n            return this._siblings.find(function (sibling) { return sibling._canReceive(item, x, y); });\n        };\n        /**\n         * Checks whether the drop list can receive the passed-in item.\n         * @param item Item that is being dragged into the list.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._canReceive = function (item, x, y) {\n            if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n                return false;\n            }\n            var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n            // If there's no element at the pointer position, then\n            // the client rect is probably scrolled out of the view.\n            if (!elementFromPoint) {\n                return false;\n            }\n            var nativeElement = coercion.coerceElement(this.element);\n            // The `ClientRect`, that we're using to find the container over which the user is\n            // hovering, doesn't give us any information on whether the element has been scrolled\n            // out of the view or whether it's overlapping with other containers. This means that\n            // we could end up transferring the item into a container that's invisible or is positioned\n            // below another one. We use the result from `elementFromPoint` to get the top-most element\n            // at the pointer position and to find whether it's one of the intersecting drop containers.\n            return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n        };\n        /**\n         * Called by one of the connected drop lists when a dragging sequence has started.\n         * @param sibling Sibling in which dragging has started.\n         */\n        DropListRef.prototype._startReceiving = function (sibling) {\n            var activeSiblings = this._activeSiblings;\n            if (!activeSiblings.has(sibling)) {\n                activeSiblings.add(sibling);\n                this._cacheParentPositions();\n                this._listenToScrollEvents();\n            }\n        };\n        /**\n         * Called by a connected drop list when dragging has stopped.\n         * @param sibling Sibling whose dragging has stopped.\n         */\n        DropListRef.prototype._stopReceiving = function (sibling) {\n            this._activeSiblings.delete(sibling);\n            this._viewportScrollSubscription.unsubscribe();\n        };\n        /**\n         * Starts listening to scroll events on the viewport.\n         * Used for updating the internal state of the list.\n         */\n        DropListRef.prototype._listenToScrollEvents = function () {\n            var _this = this;\n            this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function (event) {\n                if (_this.isDragging()) {\n                    var target = event.target;\n                    var position = _this._parentPositions.get(target);\n                    if (position) {\n                        var newTop = void 0;\n                        var newLeft = void 0;\n                        if (target === _this._document) {\n                            var scrollPosition = _this._viewportRuler.getViewportScrollPosition();\n                            newTop = scrollPosition.top;\n                            newLeft = scrollPosition.left;\n                        }\n                        else {\n                            newTop = target.scrollTop;\n                            newLeft = target.scrollLeft;\n                        }\n                        _this._updateAfterScroll(target, newTop, newLeft);\n                    }\n                }\n                else if (_this.isReceiving()) {\n                    _this._cacheParentPositions();\n                }\n            });\n        };\n        /**\n         * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n         * than saving it in property directly on init, because we want to resolve it as late as possible\n         * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n         * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n         */\n        DropListRef.prototype._getShadowRoot = function () {\n            if (!this._cachedShadowRoot) {\n                var shadowRoot = platform._getShadowRoot(coercion.coerceElement(this.element));\n                this._cachedShadowRoot = shadowRoot || this._document;\n            }\n            return this._cachedShadowRoot;\n        };\n        return DropListRef;\n    }());\n    /**\n     * Finds the index of an item that matches a predicate function. Used as an equivalent\n     * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n     * @param array Array in which to look for matches.\n     * @param predicate Function used to determine whether an item is a match.\n     */\n    function findIndex(array, predicate) {\n        for (var i = 0; i < array.length; i++) {\n            if (predicate(array[i], i, array)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Increments the vertical scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementVerticalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(0, amount);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollTop += amount;\n        }\n    }\n    /**\n     * Increments the horizontal scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementHorizontalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(amount, 0);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollLeft += amount;\n        }\n    }\n    /**\n     * Gets whether the vertical auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getVerticalScrollDirection(clientRect, pointerY) {\n        var top = clientRect.top, bottom = clientRect.bottom, height = clientRect.height;\n        var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n            return 1 /* UP */;\n        }\n        else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n            return 2 /* DOWN */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets whether the horizontal auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerX Position of the user's pointer along the x axis.\n     */\n    function getHorizontalScrollDirection(clientRect, pointerX) {\n        var left = clientRect.left, right = clientRect.right, width = clientRect.width;\n        var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n            return 1 /* LEFT */;\n        }\n        else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n            return 2 /* RIGHT */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets the directions in which an element node should be scrolled,\n     * assuming that the user's pointer is already within it scrollable region.\n     * @param element Element for which we should calculate the scroll direction.\n     * @param clientRect Bounding client rectangle of the element.\n     * @param pointerX Position of the user's pointer along the x axis.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n        var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n        var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n        var verticalScrollDirection = 0 /* NONE */;\n        var horizontalScrollDirection = 0 /* NONE */;\n        // Note that we here we do some extra checks for whether the element is actually scrollable in\n        // a certain direction and we only assign the scroll direction if it is. We do this so that we\n        // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n        // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n        if (computedVertical) {\n            var scrollTop = element.scrollTop;\n            if (computedVertical === 1 /* UP */) {\n                if (scrollTop > 0) {\n                    verticalScrollDirection = 1 /* UP */;\n                }\n            }\n            else if (element.scrollHeight - scrollTop > element.clientHeight) {\n                verticalScrollDirection = 2 /* DOWN */;\n            }\n        }\n        if (computedHorizontal) {\n            var scrollLeft = element.scrollLeft;\n            if (computedHorizontal === 1 /* LEFT */) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = 1 /* LEFT */;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = 2 /* RIGHT */;\n            }\n        }\n        return [verticalScrollDirection, horizontalScrollDirection];\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event options that can be used to bind an active, capturing event. */\n    var activeCapturingEventOptions = platform.normalizePassiveListenerOptions({\n        passive: false,\n        capture: true\n    });\n    /**\n     * Service that keeps track of all the drag item and drop container\n     * instances, and manages global event listeners on the `document`.\n     * @docs-private\n     */\n    // Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n    // to avoid circular imports. If we were to reference them here, importing the registry into the\n    // classes that are registering themselves will introduce a circular import.\n    var DragDropRegistry = /** @class */ (function () {\n        function DragDropRegistry(_ngZone, _document) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            /** Registered drop container instances. */\n            this._dropInstances = new Set();\n            /** Registered drag item instances. */\n            this._dragInstances = new Set();\n            /** Drag item instances that are currently being dragged. */\n            this._activeDragInstances = new Set();\n            /** Keeps track of the event listeners that we've bound to the `document`. */\n            this._globalListeners = new Map();\n            /**\n             * Emits the `touchmove` or `mousemove` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerMove = new rxjs.Subject();\n            /**\n             * Emits the `touchend` or `mouseup` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerUp = new rxjs.Subject();\n            /** Emits when the viewport has been scrolled while the user is dragging an item. */\n            this.scroll = new rxjs.Subject();\n            /**\n             * Event listener that will prevent the default browser action while the user is dragging.\n             * @param event Event whose default action should be prevented.\n             */\n            this._preventDefaultWhileDragging = function (event) {\n                if (_this._activeDragInstances.size) {\n                    event.preventDefault();\n                }\n            };\n            this._document = _document;\n        }\n        /** Adds a drop container to the registry. */\n        DragDropRegistry.prototype.registerDropContainer = function (drop) {\n            if (!this._dropInstances.has(drop)) {\n                this._dropInstances.add(drop);\n            }\n        };\n        /** Adds a drag item instance to the registry. */\n        DragDropRegistry.prototype.registerDragItem = function (drag) {\n            var _this = this;\n            this._dragInstances.add(drag);\n            // The `touchmove` event gets bound once, ahead of time, because WebKit\n            // won't preventDefault on a dynamically-added `touchmove` listener.\n            // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n            if (this._dragInstances.size === 1) {\n                this._ngZone.runOutsideAngular(function () {\n                    // The event handler has to be explicitly active,\n                    // because newer browsers make it passive by default.\n                    _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n                });\n            }\n        };\n        /** Removes a drop container from the registry. */\n        DragDropRegistry.prototype.removeDropContainer = function (drop) {\n            this._dropInstances.delete(drop);\n        };\n        /** Removes a drag item instance from the registry. */\n        DragDropRegistry.prototype.removeDragItem = function (drag) {\n            this._dragInstances.delete(drag);\n            this.stopDragging(drag);\n            if (this._dragInstances.size === 0) {\n                this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }\n        };\n        /**\n         * Starts the dragging sequence for a drag instance.\n         * @param drag Drag instance which is being dragged.\n         * @param event Event that initiated the dragging.\n         */\n        DragDropRegistry.prototype.startDragging = function (drag, event) {\n            var _this = this;\n            // Do not process the same drag twice to avoid memory leaks and redundant listeners\n            if (this._activeDragInstances.has(drag)) {\n                return;\n            }\n            this._activeDragInstances.add(drag);\n            if (this._activeDragInstances.size === 1) {\n                var isTouchEvent = event.type.startsWith('touch');\n                var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n                var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n                // We explicitly bind __active__ listeners here, because newer browsers will default to\n                // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n                // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n                this._globalListeners\n                    .set(moveEvent, {\n                    handler: function (e) { return _this.pointerMove.next(e); },\n                    options: activeCapturingEventOptions\n                })\n                    .set(upEvent, {\n                    handler: function (e) { return _this.pointerUp.next(e); },\n                    options: true\n                })\n                    .set('scroll', {\n                    handler: function (e) { return _this.scroll.next(e); },\n                    // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                    // the document. See https://github.com/angular/components/issues/17144.\n                    options: true\n                })\n                    // Preventing the default action on `mousemove` isn't enough to disable text selection\n                    // on Safari so we need to prevent the selection event as well. Alternatively this can\n                    // be done by setting `user-select: none` on the `body`, however it has causes a style\n                    // recalculation which can be expensive on pages with a lot of elements.\n                    .set('selectstart', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n                this._ngZone.runOutsideAngular(function () {\n                    _this._globalListeners.forEach(function (config, name) {\n                        _this._document.addEventListener(name, config.handler, config.options);\n                    });\n                });\n            }\n        };\n        /** Stops dragging a drag item instance. */\n        DragDropRegistry.prototype.stopDragging = function (drag) {\n            this._activeDragInstances.delete(drag);\n            if (this._activeDragInstances.size === 0) {\n                this._clearGlobalListeners();\n            }\n        };\n        /** Gets whether a drag item instance is currently being dragged. */\n        DragDropRegistry.prototype.isDragging = function (drag) {\n            return this._activeDragInstances.has(drag);\n        };\n        DragDropRegistry.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._dragInstances.forEach(function (instance) { return _this.removeDragItem(instance); });\n            this._dropInstances.forEach(function (instance) { return _this.removeDropContainer(instance); });\n            this._clearGlobalListeners();\n            this.pointerMove.complete();\n            this.pointerUp.complete();\n        };\n        /** Clears out the global event listeners from the `document`. */\n        DragDropRegistry.prototype._clearGlobalListeners = function () {\n            var _this = this;\n            this._globalListeners.forEach(function (config, name) {\n                _this._document.removeEventListener(name, config.handler, config.options);\n            });\n            this._globalListeners.clear();\n        };\n        DragDropRegistry.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDropRegistry.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        DragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n        return DragDropRegistry;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default configuration to be used when creating a `DragRef`. */\n    var DEFAULT_CONFIG = {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5\n    };\n    /**\n     * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n     */\n    var DragDrop = /** @class */ (function () {\n        function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n        }\n        /**\n         * Turns an element into a draggable item.\n         * @param element Element to which to attach the dragging functionality.\n         * @param config Object used to configure the dragging behavior.\n         */\n        DragDrop.prototype.createDrag = function (element, config) {\n            if (config === void 0) { config = DEFAULT_CONFIG; }\n            return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n        };\n        /**\n         * Turns an element into a drop list.\n         * @param element Element to which to attach the drop list functionality.\n         */\n        DragDrop.prototype.createDropList = function (element) {\n            return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n        };\n        DragDrop.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDrop.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i2.ViewportRuler },\n            { type: DragDropRegistry }\n        ]; };\n        DragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n        return DragDrop;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n     * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n     * to avoid circular imports.\n     * @docs-private\n     */\n    var CDK_DRAG_PARENT = new i0.InjectionToken('CDK_DRAG_PARENT');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Handle that can be used to drag and CdkDrag instance. */\n    var CdkDragHandle = /** @class */ (function () {\n        function CdkDragHandle(element, parentDrag) {\n            this.element = element;\n            /** Emits when the state of the handle has changed. */\n            this._stateChanges = new rxjs.Subject();\n            this._disabled = false;\n            this._parentDrag = parentDrag;\n            toggleNativeDragInteractions(element.nativeElement, false);\n        }\n        Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n            /** Whether starting to drag through this handle is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._stateChanges.next(this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDragHandle.prototype.ngOnDestroy = function () {\n            this._stateChanges.complete();\n        };\n        CdkDragHandle.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDragHandle]',\n                        host: {\n                            'class': 'cdk-drag-handle'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragHandle.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DRAG_PARENT,] }, { type: i0.Optional }] }\n        ]; };\n        CdkDragHandle.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDragHandleDisabled',] }]\n        };\n        return CdkDragHandle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the placeholder of a CdkDrag when\n     * it is being dragged. The placeholder is displayed in place of the element being dragged.\n     */\n    var CdkDragPlaceholder = /** @class */ (function () {\n        function CdkDragPlaceholder(templateRef) {\n            this.templateRef = templateRef;\n        }\n        CdkDragPlaceholder.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPlaceholder]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPlaceholder.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPlaceholder.propDecorators = {\n            data: [{ type: i0.Input }]\n        };\n        return CdkDragPlaceholder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the preview\n     * of a CdkDrag when it is being dragged.\n     */\n    var CdkDragPreview = /** @class */ (function () {\n        function CdkDragPreview(templateRef) {\n            this.templateRef = templateRef;\n            this._matchSize = false;\n        }\n        Object.defineProperty(CdkDragPreview.prototype, \"matchSize\", {\n            /** Whether the preview should preserve the same size as the item that is being dragged. */\n            get: function () { return this._matchSize; },\n            set: function (value) { this._matchSize = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDragPreview.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPreview]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPreview.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPreview.propDecorators = {\n            data: [{ type: i0.Input }],\n            matchSize: [{ type: i0.Input }]\n        };\n        return CdkDragPreview;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used to configure the\n     * behavior of the drag&drop-related components.\n     */\n    var CDK_DRAG_CONFIG = new i0.InjectionToken('CDK_DRAG_CONFIG');\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     * @docs-private\n     */\n    function CDK_DRAG_CONFIG_FACTORY() {\n        return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n     * Used for avoiding circular imports.\n     */\n    var CDK_DROP_LIST = new i0.InjectionToken('CDK_DROP_LIST');\n    /** Element that can be moved inside a CdkDropList container. */\n    var CdkDrag = /** @class */ (function () {\n        function CdkDrag(\n        /** Element that the draggable is attached to. */\n        element, \n        /** Droppable container that the draggable is a part of. */\n        dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n            var _this = this;\n            this.element = element;\n            this.dropContainer = dropContainer;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewContainerRef = _viewContainerRef;\n            this._dir = _dir;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._destroyed = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new i0.EventEmitter();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new i0.EventEmitter();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new i0.EventEmitter();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new i0.EventEmitter();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new i0.EventEmitter();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = new rxjs.Observable(function (observer) {\n                var subscription = _this._dragRef.moved.pipe(operators.map(function (movedEvent) { return ({\n                    source: _this,\n                    pointerPosition: movedEvent.pointerPosition,\n                    event: movedEvent.event,\n                    delta: movedEvent.delta,\n                    distance: movedEvent.distance\n                }); })).subscribe(observer);\n                return function () {\n                    subscription.unsubscribe();\n                };\n            });\n            this._dragRef = dragDrop.createDrag(element, {\n                dragStartThreshold: config && config.dragStartThreshold != null ?\n                    config.dragStartThreshold : 5,\n                pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                    config.pointerDirectionChangeThreshold : 5,\n                zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n            });\n            this._dragRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            // Note that usually the container is assigned when the drop list is picks up the item, but in\n            // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n            // where there are no items on the first change detection pass, but the items get picked up as\n            // soon as the user triggers another pass by dragging. This is a problem, because the item would\n            // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n            // is too late since the two modes save different kinds of information. We work around it by\n            // assigning the drop container both from here and the list.\n            if (dropContainer) {\n                this._dragRef._withDropContainer(dropContainer._dropListRef);\n                dropContainer.addItem(this);\n            }\n            this._syncInputs(this._dragRef);\n            this._handleEvents(this._dragRef);\n        }\n        Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._dragRef.disabled = this._disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        CdkDrag.prototype.getPlaceholderElement = function () {\n            return this._dragRef.getPlaceholderElement();\n        };\n        /** Returns the root draggable element. */\n        CdkDrag.prototype.getRootElement = function () {\n            return this._dragRef.getRootElement();\n        };\n        /** Resets a standalone drag item to its initial position. */\n        CdkDrag.prototype.reset = function () {\n            this._dragRef.reset();\n        };\n        /**\n         * Gets the pixel coordinates of the draggable outside of a drop container.\n         */\n        CdkDrag.prototype.getFreeDragPosition = function () {\n            return this._dragRef.getFreeDragPosition();\n        };\n        CdkDrag.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.asObservable()\n                .pipe(operators.take(1), operators.takeUntil(this._destroyed))\n                .subscribe(function () {\n                _this._updateRootElement();\n                // Listen for any newly-added handles.\n                _this._handles.changes.pipe(operators.startWith(_this._handles), \n                // Sync the new handles with the DragRef.\n                operators.tap(function (handles) {\n                    var childHandleElements = handles\n                        .filter(function (handle) { return handle._parentDrag === _this; })\n                        .map(function (handle) { return handle.element; });\n                    _this._dragRef.withHandles(childHandleElements);\n                }), \n                // Listen if the state of any of the handles changes.\n                operators.switchMap(function (handles) {\n                    return rxjs.merge.apply(void 0, __spread(handles.map(function (item) {\n                        return item._stateChanges.pipe(operators.startWith(item));\n                    })));\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (handleInstance) {\n                    // Enabled/disable the handle that changed in the DragRef.\n                    var dragRef = _this._dragRef;\n                    var handle = handleInstance.element.nativeElement;\n                    handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n                });\n                if (_this.freeDragPosition) {\n                    _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n                }\n            });\n        };\n        CdkDrag.prototype.ngOnChanges = function (changes) {\n            var rootSelectorChange = changes['rootElementSelector'];\n            var positionChange = changes['freeDragPosition'];\n            // We don't have to react to the first change since it's being\n            // handled in `ngAfterViewInit` where it needs to be deferred.\n            if (rootSelectorChange && !rootSelectorChange.firstChange) {\n                this._updateRootElement();\n            }\n            // Skip the first change since it's being handled in `ngAfterViewInit`.\n            if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        };\n        CdkDrag.prototype.ngOnDestroy = function () {\n            if (this.dropContainer) {\n                this.dropContainer.removeItem(this);\n            }\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        };\n        /** Syncs the root element with the `DragRef`. */\n        CdkDrag.prototype._updateRootElement = function () {\n            var element = this.element.nativeElement;\n            var rootElement = this.rootElementSelector ?\n                getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n            if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n                throw Error(\"cdkDrag must be attached to an element node. \" +\n                    (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n            }\n            this._dragRef.withRootElement(rootElement || element);\n        };\n        /** Gets the boundary element, based on the `boundaryElement` value. */\n        CdkDrag.prototype._getBoundaryElement = function () {\n            var boundary = this.boundaryElement;\n            if (!boundary) {\n                return null;\n            }\n            if (typeof boundary === 'string') {\n                return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n            }\n            var element = coercion.coerceElement(boundary);\n            if (i0.isDevMode() && !element.contains(this.element.nativeElement)) {\n                throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n            }\n            return element;\n        };\n        /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n        CdkDrag.prototype._syncInputs = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                if (!ref.isDragging()) {\n                    var dir = _this._dir;\n                    var dragStartDelay = _this.dragStartDelay;\n                    var placeholder = _this._placeholderTemplate ? {\n                        template: _this._placeholderTemplate.templateRef,\n                        context: _this._placeholderTemplate.data,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    var preview = _this._previewTemplate ? {\n                        template: _this._previewTemplate.templateRef,\n                        context: _this._previewTemplate.data,\n                        matchSize: _this._previewTemplate.matchSize,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    ref.disabled = _this.disabled;\n                    ref.lockAxis = _this.lockAxis;\n                    ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                        dragStartDelay : coercion.coerceNumberProperty(dragStartDelay);\n                    ref.constrainPosition = _this.constrainPosition;\n                    ref.previewClass = _this.previewClass;\n                    ref\n                        .withBoundaryElement(_this._getBoundaryElement())\n                        .withPlaceholderTemplate(placeholder)\n                        .withPreviewTemplate(preview);\n                    if (dir) {\n                        ref.withDirection(dir.value);\n                    }\n                }\n            });\n        };\n        /** Handles the events from the underlying `DragRef`. */\n        CdkDrag.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.started.subscribe(function () {\n                _this.started.emit({ source: _this });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.released.subscribe(function () {\n                _this.released.emit({ source: _this });\n            });\n            ref.ended.subscribe(function (event) {\n                _this.ended.emit({ source: _this, distance: event.distance });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: event.container.data,\n                    item: _this,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: event.container.data,\n                    item: _this\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    item: _this,\n                    distance: event.distance\n                });\n            });\n        };\n        /** Assigns the default input values based on a provided config object. */\n        CdkDrag.prototype._assignDefaults = function (config) {\n            var lockAxis = config.lockAxis, dragStartDelay = config.dragStartDelay, constrainPosition = config.constrainPosition, previewClass = config.previewClass, boundaryElement = config.boundaryElement, draggingDisabled = config.draggingDisabled, rootElementSelector = config.rootElementSelector;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.dragStartDelay = dragStartDelay || 0;\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n            if (constrainPosition) {\n                this.constrainPosition = constrainPosition;\n            }\n            if (previewClass) {\n                this.previewClass = previewClass;\n            }\n            if (boundaryElement) {\n                this.boundaryElement = boundaryElement;\n            }\n            if (rootElementSelector) {\n                this.rootElementSelector = rootElementSelector;\n            }\n        };\n        CdkDrag.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDrag]',\n                        exportAs: 'cdkDrag',\n                        host: {\n                            'class': 'cdk-drag',\n                            '[class.cdk-drag-disabled]': 'disabled',\n                            '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                        },\n                        providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDrag.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DROP_LIST,] }, { type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef }\n        ]; };\n        CdkDrag.propDecorators = {\n            _handles: [{ type: i0.ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n            _previewTemplate: [{ type: i0.ContentChild, args: [CdkDragPreview,] }],\n            _placeholderTemplate: [{ type: i0.ContentChild, args: [CdkDragPlaceholder,] }],\n            data: [{ type: i0.Input, args: ['cdkDragData',] }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDragLockAxis',] }],\n            rootElementSelector: [{ type: i0.Input, args: ['cdkDragRootElement',] }],\n            boundaryElement: [{ type: i0.Input, args: ['cdkDragBoundary',] }],\n            dragStartDelay: [{ type: i0.Input, args: ['cdkDragStartDelay',] }],\n            freeDragPosition: [{ type: i0.Input, args: ['cdkDragFreeDragPosition',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDragDisabled',] }],\n            constrainPosition: [{ type: i0.Input, args: ['cdkDragConstrainPosition',] }],\n            previewClass: [{ type: i0.Input, args: ['cdkDragPreviewClass',] }],\n            started: [{ type: i0.Output, args: ['cdkDragStarted',] }],\n            released: [{ type: i0.Output, args: ['cdkDragReleased',] }],\n            ended: [{ type: i0.Output, args: ['cdkDragEnded',] }],\n            entered: [{ type: i0.Output, args: ['cdkDragEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDragExited',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDragDropped',] }],\n            moved: [{ type: i0.Output, args: ['cdkDragMoved',] }]\n        };\n        return CdkDrag;\n    }());\n    /** Gets the closest ancestor of an element that matches a selector. */\n    function getClosestMatchingAncestor(element, selector) {\n        var currentElement = element.parentElement;\n        while (currentElement) {\n            // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n            if (currentElement.matches ? currentElement.matches(selector) :\n                currentElement.msMatchesSelector(selector)) {\n                return currentElement;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n     * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n     * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n     * from `cdkDropList`.\n     */\n    var CdkDropListGroup = /** @class */ (function () {\n        function CdkDropListGroup() {\n            /** Drop lists registered inside the group. */\n            this._items = new Set();\n            this._disabled = false;\n        }\n        Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from inside this group is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDropListGroup.prototype.ngOnDestroy = function () {\n            this._items.clear();\n        };\n        CdkDropListGroup.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropListGroup]',\n                        exportAs: 'cdkDropListGroup',\n                    },] }\n        ];\n        CdkDropListGroup.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDropListGroupDisabled',] }]\n        };\n        return CdkDropListGroup;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique ids for drop zones. */\n    var _uniqueIdCounter = 0;\n    var ɵ0 = undefined;\n    /** Container that wraps a set of draggable items. */\n    var CdkDropList = /** @class */ (function () {\n        function CdkDropList(\n        /** Element that the drop list is attached to. */\n        element, dragDrop, _changeDetectorRef, _dir, _group, \n        /**\n         * @deprecated _scrollDispatcher parameter to become required.\n         * @breaking-change 11.0.0\n         */\n        _scrollDispatcher, config) {\n            var _this = this;\n            this.element = element;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._group = _group;\n            this._scrollDispatcher = _scrollDispatcher;\n            /** Emits when the list has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /**\n             * Other draggable containers that this container is connected to and into which the\n             * container's items can be transferred. Can either be references to other drop containers,\n             * or their unique IDs.\n             */\n            this.connectedTo = [];\n            /**\n             * Unique ID for the drop zone. Can be used as a reference\n             * in the `connectedTo` of another `CdkDropList`.\n             */\n            this.id = \"cdk-drop-list-\" + _uniqueIdCounter++;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new i0.EventEmitter();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new i0.EventEmitter();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new i0.EventEmitter();\n            /**\n             * Keeps track of the items that are registered with this container. Historically we used to\n             * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n             * well which means that we can't handle cases like dragging the headers of a `mat-table`\n             * correctly. What we do instead is to have the items register themselves with the container\n             * and then we sort them based on their position in the DOM.\n             */\n            this._unsortedItems = new Set();\n            this._dropListRef = dragDrop.createDropList(element);\n            this._dropListRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            this._dropListRef.enterPredicate = function (drag, drop) {\n                return _this.enterPredicate(drag.data, drop.data);\n            };\n            this._setupInputSyncSubscription(this._dropListRef);\n            this._handleEvents(this._dropListRef);\n            CdkDropList._dropLists.push(this);\n            if (_group) {\n                _group._items.add(this);\n            }\n        }\n        Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from this container is disabled. */\n            get: function () {\n                return this._disabled || (!!this._group && this._group.disabled);\n            },\n            set: function (value) {\n                // Usually we sync the directive and ref state right before dragging starts, in order to have\n                // a single point of failure and to avoid having to use setters for everything. `disabled` is\n                // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n                // the user in a disabled state, so we also need to sync it as it's being set.\n                this._dropListRef.disabled = this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Registers an items with the drop list. */\n        CdkDropList.prototype.addItem = function (item) {\n            this._unsortedItems.add(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        };\n        /** Removes an item from the drop list. */\n        CdkDropList.prototype.removeItem = function (item) {\n            this._unsortedItems.delete(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        };\n        /** Gets the registered items in the list, sorted by their position in the DOM. */\n        CdkDropList.prototype.getSortedItems = function () {\n            return Array.from(this._unsortedItems).sort(function (a, b) {\n                var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n                // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n                // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n                // tslint:disable-next-line:no-bitwise\n                return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n            });\n        };\n        CdkDropList.prototype.ngOnDestroy = function () {\n            var index = CdkDropList._dropLists.indexOf(this);\n            if (index > -1) {\n                CdkDropList._dropLists.splice(index, 1);\n            }\n            if (this._group) {\n                this._group._items.delete(this);\n            }\n            this._unsortedItems.clear();\n            this._dropListRef.dispose();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Starts dragging an item.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.start = function () {\n            this._dropListRef.start();\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         *\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer) {\n            this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.enter = function (item, pointerX, pointerY) {\n            this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.exit = function (item) {\n            this._dropListRef.exit(item._dragRef);\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.getItemIndex = function (item) {\n            return this._dropListRef.getItemIndex(item._dragRef);\n        };\n        /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n        CdkDropList.prototype._setupInputSyncSubscription = function (ref) {\n            var _this = this;\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.startWith(this._dir.value), operators.takeUntil(this._destroyed))\n                    .subscribe(function (value) { return ref.withDirection(value); });\n            }\n            ref.beforeStarted.subscribe(function () {\n                var siblings = coercion.coerceArray(_this.connectedTo).map(function (drop) {\n                    return typeof drop === 'string' ?\n                        CdkDropList._dropLists.find(function (list) { return list.id === drop; }) : drop;\n                });\n                if (_this._group) {\n                    _this._group._items.forEach(function (drop) {\n                        if (siblings.indexOf(drop) === -1) {\n                            siblings.push(drop);\n                        }\n                    });\n                }\n                // Note that we resolve the scrollable parents here so that we delay the resolution\n                // as long as possible, ensuring that the element is in its final place in the DOM.\n                // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n                if (!_this._scrollableParentsResolved && _this._scrollDispatcher) {\n                    var scrollableParents = _this._scrollDispatcher\n                        .getAncestorScrollContainers(_this.element)\n                        .map(function (scrollable) { return scrollable.getElementRef().nativeElement; });\n                    _this._dropListRef.withScrollableParents(scrollableParents);\n                    // Only do this once since it involves traversing the DOM and the parents\n                    // shouldn't be able to change without the drop list being destroyed.\n                    _this._scrollableParentsResolved = true;\n                }\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.sortingDisabled = coercion.coerceBooleanProperty(_this.sortingDisabled);\n                ref.autoScrollDisabled = coercion.coerceBooleanProperty(_this.autoScrollDisabled);\n                ref\n                    .connectedTo(siblings.filter(function (drop) { return drop && drop !== _this; }).map(function (list) { return list._dropListRef; }))\n                    .withOrientation(_this.orientation);\n            });\n        };\n        /** Handles events from the underlying DropListRef. */\n        CdkDropList.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                _this._syncItemsWithRef();\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: _this,\n                    item: event.item.data,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: _this,\n                    item: event.item.data\n                });\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.sorted.subscribe(function (event) {\n                _this.sorted.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    container: _this,\n                    item: event.item.data\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    item: event.item.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    distance: event.distance\n                });\n                // Mark for check since all of these events run outside of change\n                // detection and we're not guaranteed for something else to have triggered it.\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        /** Assigns the default input values based on a provided config object. */\n        CdkDropList.prototype._assignDefaults = function (config) {\n            var lockAxis = config.lockAxis, draggingDisabled = config.draggingDisabled, sortingDisabled = config.sortingDisabled, listAutoScrollDisabled = config.listAutoScrollDisabled, listOrientation = config.listOrientation;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n            this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n            this.orientation = listOrientation || 'vertical';\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n        };\n        /** Syncs up the registered drag items with underlying drop list ref. */\n        CdkDropList.prototype._syncItemsWithRef = function () {\n            this._dropListRef.withItems(this.getSortedItems().map(function (item) { return item._dragRef; }));\n        };\n        /** Keeps track of the drop lists that are currently on the page. */\n        CdkDropList._dropLists = [];\n        CdkDropList.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropList], cdk-drop-list',\n                        exportAs: 'cdkDropList',\n                        providers: [\n                            // Prevent child drop lists from picking up the same group as their parent.\n                            { provide: CdkDropListGroup, useValue: ɵ0 },\n                            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                        ],\n                        host: {\n                            'class': 'cdk-drop-list',\n                            '[id]': 'id',\n                            '[class.cdk-drop-list-disabled]': 'disabled',\n                            '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                            '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDropList.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: CdkDropListGroup, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: i2.ScrollDispatcher },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] }\n        ]; };\n        CdkDropList.propDecorators = {\n            connectedTo: [{ type: i0.Input, args: ['cdkDropListConnectedTo',] }],\n            data: [{ type: i0.Input, args: ['cdkDropListData',] }],\n            orientation: [{ type: i0.Input, args: ['cdkDropListOrientation',] }],\n            id: [{ type: i0.Input }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDropListLockAxis',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDropListDisabled',] }],\n            sortingDisabled: [{ type: i0.Input, args: ['cdkDropListSortingDisabled',] }],\n            enterPredicate: [{ type: i0.Input, args: ['cdkDropListEnterPredicate',] }],\n            autoScrollDisabled: [{ type: i0.Input, args: ['cdkDropListAutoScrollDisabled',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDropListDropped',] }],\n            entered: [{ type: i0.Output, args: ['cdkDropListEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDropListExited',] }],\n            sorted: [{ type: i0.Output, args: ['cdkDropListSorted',] }]\n        };\n        return CdkDropList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DragDropModule = /** @class */ (function () {\n        function DragDropModule() {\n        }\n        DragDropModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        exports: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        providers: [\n                            DragDrop,\n                        ]\n                    },] }\n        ];\n        return DragDropModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CDK_DRAG_CONFIG = CDK_DRAG_CONFIG;\n    exports.CDK_DRAG_CONFIG_FACTORY = CDK_DRAG_CONFIG_FACTORY;\n    exports.CDK_DROP_LIST = CDK_DROP_LIST;\n    exports.CdkDrag = CdkDrag;\n    exports.CdkDragHandle = CdkDragHandle;\n    exports.CdkDragPlaceholder = CdkDragPlaceholder;\n    exports.CdkDragPreview = CdkDragPreview;\n    exports.CdkDropList = CdkDropList;\n    exports.CdkDropListGroup = CdkDropListGroup;\n    exports.DragDrop = DragDrop;\n    exports.DragDropModule = DragDropModule;\n    exports.DragDropRegistry = DragDropRegistry;\n    exports.DragRef = DragRef;\n    exports.DropListRef = DropListRef;\n    exports.copyArrayItem = copyArrayItem;\n    exports.moveItemInArray = moveItemInArray;\n    exports.transferArrayItem = transferArrayItem;\n    exports.ɵangular_material_src_cdk_drag_drop_drag_drop_b = CDK_DRAG_PARENT;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-drag-drop.umd.js.map\n"]}
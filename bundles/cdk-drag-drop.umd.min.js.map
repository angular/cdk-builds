{"version":3,"sources":["src/cdk/cdk-drag-drop.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","dragDrop","core","common","scrolling","platform","coercion","rxjs","operators","bidi","this","i0","i1","i2","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","prototype","clear","cache","elements","_this","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","scrolledParentNode","documentElement","viewportScrollPosition","topDifference","leftDifference","position","node","contains","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","next","length","targetHandle","find","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","_parentPositions","registerDragItem","Object","defineProperty","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent_1","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","round","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","__read","o","n","m","Symbol","iterator","r","e","call","ar","done","push","error","__spread","arguments","concat","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","interval","animationFrameScheduler","pipe","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","_shouldEnterAsFirstChild","unshift","_cacheItemPositions","_cacheParentPositions","_reset","withItems","items","previousItems","filter","every","connectedTo","slice","withOrientation","orientation","_scrollableElements","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","window","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","scrollDifference_1","shadowRoot","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","upEvent","options","config","_clearGlobalListeners","ngOnDestroy","instance","decorators","Injectable","args","providedIn","ctorParameters","NgZone","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","DragDropRegistry_Factory","ɵɵinject","token","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","DragDrop_Factory","CDK_DRAG_PARENT","InjectionToken","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","Directive","selector","host","class","ElementRef","Optional","propDecorators","Input","CdkDragPlaceholder","templateRef","TemplateRef","data","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","_dir","_changeDetectorRef","_destroyed","EventEmitter","Observable","observer","subscription","_dragRef","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","changes","startWith","tap","childHandleElements","switchMap","merge","apply","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","_getBoundaryElement","boundary","isDevMode","ref","dir","coerceNumberProperty","emit","markForCheck","draggingDisabled","exportAs","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","Directionality","ChangeDetectorRef","ContentChildren","descendants","ContentChild","Output","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ScrollDispatcher","DragDropModule","NgModule","declarations","CdkScrollableModule","CDK_DRAG_CONFIG_FACTORY","copyArrayItem","currentArray","targetArray","targetIndex","transferArrayItem","ɵangular_material_src_cdk_drag_drop_drag_drop_b"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/scrolling'), require('@angular/cdk/platform'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/bidi')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/drag-drop', ['exports', '@angular/core', '@angular/common', '@angular/cdk/scrolling', '@angular/cdk/platform', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators', '@angular/cdk/bidi'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.dragDrop = {}), global.ng.core, global.ng.common, global.ng.cdk.scrolling, global.ng.cdk.platform, global.ng.cdk.coercion, global.rxjs, global.rxjs.operators, global.ng.cdk.bidi));\n}(this, (function (exports, i0, i1, i2, platform, coercion, rxjs, operators, bidi) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Shallow-extends a stylesheet object with another stylesheet object.\n     * @docs-private\n     */\n    function extendStyles(dest, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n        return dest;\n    }\n    /**\n     * Toggles whether the native drag interactions should be enabled for an element.\n     * @param element Element on which to toggle the drag interactions.\n     * @param enable Whether the drag interactions should be enabled.\n     * @docs-private\n     */\n    function toggleNativeDragInteractions(element, enable) {\n        var userSelect = enable ? '' : 'none';\n        extendStyles(element.style, {\n            touchAction: enable ? '' : 'none',\n            webkitUserDrag: enable ? '' : 'none',\n            webkitTapHighlightColor: enable ? '' : 'transparent',\n            userSelect: userSelect,\n            msUserSelect: userSelect,\n            webkitUserSelect: userSelect,\n            MozUserSelect: userSelect\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Parses a CSS time value to milliseconds. */\n    function parseCssTimeUnitsToMs(value) {\n        // Some browsers will return it in seconds, whereas others will return milliseconds.\n        var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n        return parseFloat(value) * multiplier;\n    }\n    /** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n    function getTransformTransitionDurationInMs(element) {\n        var computedStyle = getComputedStyle(element);\n        var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n        var property = transitionedProperties.find(function (prop) { return prop === 'transform' || prop === 'all'; });\n        // If there's no transition for `all` or `transform`, we shouldn't do anything.\n        if (!property) {\n            return 0;\n        }\n        // Get the index of the property that we're interested in and match\n        // it up to the same index in `transition-delay` and `transition-duration`.\n        var propertyIndex = transitionedProperties.indexOf(property);\n        var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n        var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n        return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n            parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n    }\n    /** Parses out multiple values from a computed style into an array. */\n    function parseCssPropertyValue(computedStyle, name) {\n        var value = computedStyle.getPropertyValue(name);\n        return value.split(',').map(function (part) { return part.trim(); });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Gets a mutable version of an element's bounding `ClientRect`. */\n    function getMutableClientRect(element) {\n        var clientRect = element.getBoundingClientRect();\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        return {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n        };\n    }\n    /**\n     * Checks whether some coordinates are within a `ClientRect`.\n     * @param clientRect ClientRect that is being checked.\n     * @param x Coordinates along the X axis.\n     * @param y Coordinates along the Y axis.\n     */\n    function isInsideClientRect(clientRect, x, y) {\n        var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n        return y >= top && y <= bottom && x >= left && x <= right;\n    }\n    /**\n     * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n     * @param clientRect `ClientRect` that should be updated.\n     * @param top Amount to add to the `top` position.\n     * @param left Amount to add to the `left` position.\n     */\n    function adjustClientRect(clientRect, top, left) {\n        clientRect.top += top;\n        clientRect.bottom = clientRect.top + clientRect.height;\n        clientRect.left += left;\n        clientRect.right = clientRect.left + clientRect.width;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to a ClientRect.\n     * @param rect ClientRect to check against.\n     * @param threshold Threshold around the ClientRect.\n     * @param pointerX Coordinates along the X axis.\n     * @param pointerY Coordinates along the Y axis.\n     */\n    function isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n        var top = rect.top, right = rect.right, bottom = rect.bottom, left = rect.left, width = rect.width, height = rect.height;\n        var xThreshold = width * threshold;\n        var yThreshold = height * threshold;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Keeps track of the scroll position and dimensions of the parents of an element. */\n    var ParentPositionTracker = /** @class */ (function () {\n        function ParentPositionTracker(_document, _viewportRuler) {\n            this._document = _document;\n            this._viewportRuler = _viewportRuler;\n            /** Cached positions of the scrollable parent elements. */\n            this.positions = new Map();\n        }\n        /** Clears the cached positions. */\n        ParentPositionTracker.prototype.clear = function () {\n            this.positions.clear();\n        };\n        /** Caches the positions. Should be called at the beginning of a drag sequence. */\n        ParentPositionTracker.prototype.cache = function (elements) {\n            var _this = this;\n            this.clear();\n            this.positions.set(this._document, {\n                scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n            });\n            elements.forEach(function (element) {\n                _this.positions.set(element, {\n                    scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                    clientRect: getMutableClientRect(element)\n                });\n            });\n        };\n        /** Handles scrolling while a drag is taking place. */\n        ParentPositionTracker.prototype.handleScroll = function (event) {\n            var target = event.target;\n            var cachedPosition = this.positions.get(target);\n            if (!cachedPosition) {\n                return null;\n            }\n            // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n            // parent is the `document`, we use the `documentElement`, because IE doesn't support\n            // `contains` on the `document`.\n            var scrolledParentNode = target === this._document ? target.documentElement : target;\n            var scrollPosition = cachedPosition.scrollPosition;\n            var newTop;\n            var newLeft;\n            if (target === this._document) {\n                var viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n                newTop = viewportScrollPosition.top;\n                newLeft = viewportScrollPosition.left;\n            }\n            else {\n                newTop = target.scrollTop;\n                newLeft = target.scrollLeft;\n            }\n            var topDifference = scrollPosition.top - newTop;\n            var leftDifference = scrollPosition.left - newLeft;\n            // Go through and update the cached positions of the scroll\n            // parents that are inside the element that was scrolled.\n            this.positions.forEach(function (position, node) {\n                if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                    adjustClientRect(position.clientRect, topDifference, leftDifference);\n                }\n            });\n            scrollPosition.top = newTop;\n            scrollPosition.left = newLeft;\n            return { top: topDifference, left: leftDifference };\n        };\n        return ParentPositionTracker;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Options that can be used to bind a passive event listener. */\n    var passiveEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /** Options that can be used to bind an active event listener. */\n    var activeEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: false });\n    /**\n     * Time in milliseconds for which to ignore mouse events, after\n     * receiving a touch event. Used to avoid doing double work for\n     * touch devices where the browser fires fake mouse events, in\n     * addition to touch events.\n     */\n    var MOUSE_EVENT_IGNORE_TIME = 800;\n    /**\n     * Reference to a draggable item. Used to manipulate or dispose of the item.\n     */\n    var DragRef = /** @class */ (function () {\n        function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            var _this = this;\n            this._config = _config;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n            /**\n             * CSS `transform` applied to the element when it isn't being dragged. We need a\n             * passive transform in order for the dragged element to retain its new position\n             * after the user has stopped dragging and because we need to know the relative\n             * position in case they start dragging again. This corresponds to `element.style.transform`.\n             */\n            this._passiveTransform = { x: 0, y: 0 };\n            /** CSS `transform` that is applied to the element while it's being dragged. */\n            this._activeTransform = { x: 0, y: 0 };\n            /** Emits when the item is being moved. */\n            this._moveEvents = new rxjs.Subject();\n            /** Subscription to pointer movement events. */\n            this._pointerMoveSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the event that is dispatched when the user lifts their pointer. */\n            this._pointerUpSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being scrolled. */\n            this._scrollSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being resized. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Cached reference to the boundary element. */\n            this._boundaryElement = null;\n            /** Whether the native dragging interactions have been enabled on the root element. */\n            this._nativeInteractionsEnabled = true;\n            /** Elements that can be used to drag the draggable item. */\n            this._handles = [];\n            /** Registered handles that are currently disabled. */\n            this._disabledHandles = new Set();\n            /** Layout direction of the item. */\n            this._direction = 'ltr';\n            /**\n             * Amount of milliseconds to wait after the user has put their\n             * pointer down before starting to drag the element.\n             */\n            this.dragStartDelay = 0;\n            this._disabled = false;\n            /** Emits as the drag sequence is being prepared. */\n            this.beforeStarted = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new rxjs.Subject();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new rxjs.Subject();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new rxjs.Subject();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new rxjs.Subject();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new rxjs.Subject();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = this._moveEvents.asObservable();\n            /** Handler for the `mousedown`/`touchstart` events. */\n            this._pointerDown = function (event) {\n                _this.beforeStarted.next();\n                // Delegate the event based on whether it started from a handle or the element itself.\n                if (_this._handles.length) {\n                    var targetHandle = _this._handles.find(function (handle) {\n                        var target = event.target;\n                        return !!target && (target === handle || handle.contains(target));\n                    });\n                    if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                        _this._initializeDragSequence(targetHandle, event);\n                    }\n                }\n                else if (!_this.disabled) {\n                    _this._initializeDragSequence(_this._rootElement, event);\n                }\n            };\n            /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n            this._pointerMove = function (event) {\n                // Prevent the default action as early as possible in order to block\n                // native actions like dragging the selected text or images with the mouse.\n                event.preventDefault();\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                if (!_this._hasStartedDragging) {\n                    var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                    var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                    var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                    // Only start dragging after the user has moved more than the minimum distance in either\n                    // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                    // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                    // per pixel of movement (e.g. if the user moves their pointer quickly).\n                    if (isOverThreshold) {\n                        var isDelayElapsed = Date.now() >= _this._dragStartTime + _this._getDragStartDelay(event);\n                        if (!isDelayElapsed) {\n                            _this._endDragSequence(event);\n                            return;\n                        }\n                        // Prevent other drag sequences from starting while something in the container is still\n                        // being dragged. This can happen while we're waiting for the drop animation to finish\n                        // and can cause errors, because some elements might still be moving around.\n                        if (!_this._dropContainer || !_this._dropContainer.isDragging()) {\n                            _this._hasStartedDragging = true;\n                            _this._ngZone.run(function () { return _this._startDragSequence(event); });\n                        }\n                    }\n                    return;\n                }\n                // We only need the preview dimensions if we have a boundary element.\n                if (_this._boundaryElement) {\n                    // Cache the preview element rect if we haven't cached it already or if\n                    // we cached it too early before the element dimensions were computed.\n                    if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                        _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                    }\n                }\n                var constrainedPointerPosition = _this._getConstrainedPointerPosition(pointerPosition);\n                _this._hasMoved = true;\n                _this._updatePointerDirectionDelta(constrainedPointerPosition);\n                if (_this._dropContainer) {\n                    _this._updateActiveDropContainer(constrainedPointerPosition);\n                }\n                else {\n                    var activeTransform = _this._activeTransform;\n                    activeTransform.x =\n                        constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                    activeTransform.y =\n                        constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                    _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                    // Apply transform as attribute if dragging and svg element to work for IE\n                    if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                        var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                        _this._rootElement.setAttribute('transform', appliedTransform);\n                    }\n                }\n                // Since this event gets fired for every pixel while dragging, we only\n                // want to fire it if the consumer opted into it. Also we have to\n                // re-enter the zone because we run all of the events on the outside.\n                if (_this._moveEvents.observers.length) {\n                    _this._ngZone.run(function () {\n                        _this._moveEvents.next({\n                            source: _this,\n                            pointerPosition: constrainedPointerPosition,\n                            event: event,\n                            distance: _this._getDragDistance(constrainedPointerPosition),\n                            delta: _this._pointerDirectionDelta\n                        });\n                    });\n                }\n            };\n            /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n            this._pointerUp = function (event) {\n                _this._endDragSequence(event);\n            };\n            this.withRootElement(element);\n            this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n            _dragDropRegistry.registerDragItem(this);\n        }\n        Object.defineProperty(DragRef.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n            },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this._disabled) {\n                    this._disabled = newValue;\n                    this._toggleNativeDragInteractions();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        DragRef.prototype.getPlaceholderElement = function () {\n            return this._placeholder;\n        };\n        /** Returns the root draggable element. */\n        DragRef.prototype.getRootElement = function () {\n            return this._rootElement;\n        };\n        /**\n         * Gets the currently-visible element that represents the drag item.\n         * While dragging this is the placeholder, otherwise it's the root element.\n         */\n        DragRef.prototype.getVisibleElement = function () {\n            return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n        };\n        /** Registers the handles that can be used to drag the element. */\n        DragRef.prototype.withHandles = function (handles) {\n            this._handles = handles.map(function (handle) { return coercion.coerceElement(handle); });\n            this._handles.forEach(function (handle) { return toggleNativeDragInteractions(handle, false); });\n            this._toggleNativeDragInteractions();\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag preview.\n         * @param template Template that from which to stamp out the preview.\n         */\n        DragRef.prototype.withPreviewTemplate = function (template) {\n            this._previewTemplate = template;\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag placeholder.\n         * @param template Template that from which to stamp out the placeholder.\n         */\n        DragRef.prototype.withPlaceholderTemplate = function (template) {\n            this._placeholderTemplate = template;\n            return this;\n        };\n        /**\n         * Sets an alternate drag root element. The root element is the element that will be moved as\n         * the user is dragging. Passing an alternate root element is useful when trying to enable\n         * dragging on an element that you might not have access to.\n         */\n        DragRef.prototype.withRootElement = function (rootElement) {\n            var _this = this;\n            var element = coercion.coerceElement(rootElement);\n            if (element !== this._rootElement) {\n                if (this._rootElement) {\n                    this._removeRootElementListeners(this._rootElement);\n                }\n                this._ngZone.runOutsideAngular(function () {\n                    element.addEventListener('mousedown', _this._pointerDown, activeEventListenerOptions);\n                    element.addEventListener('touchstart', _this._pointerDown, passiveEventListenerOptions);\n                });\n                this._initialTransform = undefined;\n                this._rootElement = element;\n            }\n            return this;\n        };\n        /**\n         * Element to which the draggable's position will be constrained.\n         */\n        DragRef.prototype.withBoundaryElement = function (boundaryElement) {\n            var _this = this;\n            this._boundaryElement = boundaryElement ? coercion.coerceElement(boundaryElement) : null;\n            this._resizeSubscription.unsubscribe();\n            if (boundaryElement) {\n                this._resizeSubscription = this._viewportRuler\n                    .change(10)\n                    .subscribe(function () { return _this._containInsideBoundaryOnResize(); });\n            }\n            return this;\n        };\n        /** Removes the dragging functionality from the DOM element. */\n        DragRef.prototype.dispose = function () {\n            this._removeRootElementListeners(this._rootElement);\n            // Do this check before removing from the registry since it'll\n            // stop being considered as dragged once it is removed.\n            if (this.isDragging()) {\n                // Since we move out the element to the end of the body while it's being\n                // dragged, we have to make sure that it's removed if it gets destroyed.\n                removeNode(this._rootElement);\n            }\n            removeNode(this._anchor);\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._dragDropRegistry.removeDragItem(this);\n            this._removeSubscriptions();\n            this.beforeStarted.complete();\n            this.started.complete();\n            this.released.complete();\n            this.ended.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this._moveEvents.complete();\n            this._handles = [];\n            this._disabledHandles.clear();\n            this._dropContainer = undefined;\n            this._resizeSubscription.unsubscribe();\n            this._parentPositions.clear();\n            this._boundaryElement = this._rootElement = this._placeholderTemplate =\n                this._previewTemplate = this._anchor = null;\n        };\n        /** Checks whether the element is currently being dragged. */\n        DragRef.prototype.isDragging = function () {\n            return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n        };\n        /** Resets a standalone drag item to its initial position. */\n        DragRef.prototype.reset = function () {\n            this._rootElement.style.transform = this._initialTransform || '';\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform = { x: 0, y: 0 };\n        };\n        /**\n         * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n         * @param handle Handle element that should be disabled.\n         */\n        DragRef.prototype.disableHandle = function (handle) {\n            if (this._handles.indexOf(handle) > -1) {\n                this._disabledHandles.add(handle);\n            }\n        };\n        /**\n         * Enables a handle, if it has been disabled.\n         * @param handle Handle element to be enabled.\n         */\n        DragRef.prototype.enableHandle = function (handle) {\n            this._disabledHandles.delete(handle);\n        };\n        /** Sets the layout direction of the draggable item. */\n        DragRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /** Sets the container that the item is part of. */\n        DragRef.prototype._withDropContainer = function (container) {\n            this._dropContainer = container;\n        };\n        /**\n         * Gets the current position in pixels the draggable outside of a drop container.\n         */\n        DragRef.prototype.getFreeDragPosition = function () {\n            var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n            return { x: position.x, y: position.y };\n        };\n        /**\n         * Sets the current position in pixels the draggable outside of a drop container.\n         * @param value New position to be set.\n         */\n        DragRef.prototype.setFreeDragPosition = function (value) {\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform.x = value.x;\n            this._passiveTransform.y = value.y;\n            if (!this._dropContainer) {\n                this._applyRootElementTransform(value.x, value.y);\n            }\n            return this;\n        };\n        /** Updates the item's sort order based on the last-known pointer position. */\n        DragRef.prototype._sortFromLastPointerPosition = function () {\n            var position = this._pointerPositionAtLastDirectionChange;\n            if (position && this._dropContainer) {\n                this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n            }\n        };\n        /** Unsubscribes from the global subscriptions. */\n        DragRef.prototype._removeSubscriptions = function () {\n            this._pointerMoveSubscription.unsubscribe();\n            this._pointerUpSubscription.unsubscribe();\n            this._scrollSubscription.unsubscribe();\n        };\n        /** Destroys the preview element and its ViewRef. */\n        DragRef.prototype._destroyPreview = function () {\n            if (this._preview) {\n                removeNode(this._preview);\n            }\n            if (this._previewRef) {\n                this._previewRef.destroy();\n            }\n            this._preview = this._previewRef = null;\n        };\n        /** Destroys the placeholder element and its ViewRef. */\n        DragRef.prototype._destroyPlaceholder = function () {\n            if (this._placeholder) {\n                removeNode(this._placeholder);\n            }\n            if (this._placeholderRef) {\n                this._placeholderRef.destroy();\n            }\n            this._placeholder = this._placeholderRef = null;\n        };\n        /**\n         * Clears subscriptions and stops the dragging sequence.\n         * @param event Browser event object that ended the sequence.\n         */\n        DragRef.prototype._endDragSequence = function (event) {\n            var _this = this;\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!this._dragDropRegistry.isDragging(this)) {\n                return;\n            }\n            this._removeSubscriptions();\n            this._dragDropRegistry.stopDragging(this);\n            this._toggleNativeDragInteractions();\n            if (this._handles) {\n                this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n            }\n            if (!this._hasStartedDragging) {\n                return;\n            }\n            this.released.next({ source: this });\n            if (this._dropContainer) {\n                // Stop scrolling immediately, instead of waiting for the animation to finish.\n                this._dropContainer._stopScrolling();\n                this._animatePreviewToPlaceholder().then(function () {\n                    _this._cleanupDragArtifacts(event);\n                    _this._cleanupCachedDimensions();\n                    _this._dragDropRegistry.stopDragging(_this);\n                });\n            }\n            else {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                this._passiveTransform.x = this._activeTransform.x;\n                this._passiveTransform.y = this._activeTransform.y;\n                this._ngZone.run(function () {\n                    _this.ended.next({\n                        source: _this,\n                        distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))\n                    });\n                });\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }\n        };\n        /** Starts the dragging sequence. */\n        DragRef.prototype._startDragSequence = function (event) {\n            // Emit the event on the item before the one on the container.\n            this.started.next({ source: this });\n            if (isTouchEvent(event)) {\n                this._lastTouchEventTime = Date.now();\n            }\n            this._toggleNativeDragInteractions();\n            var dropContainer = this._dropContainer;\n            if (dropContainer) {\n                var element = this._rootElement;\n                var parent_1 = element.parentNode;\n                var preview = this._preview = this._createPreviewElement();\n                var placeholder = this._placeholder = this._createPlaceholderElement();\n                var anchor = this._anchor = this._anchor || this._document.createComment('');\n                // Insert an anchor node so that we can restore the element's position in the DOM.\n                parent_1.insertBefore(anchor, element);\n                // We move the element out at the end of the body and we make it hidden, because keeping it in\n                // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n                // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n                element.style.display = 'none';\n                this._document.body.appendChild(parent_1.replaceChild(placeholder, element));\n                getPreviewInsertionPoint(this._document).appendChild(preview);\n                dropContainer.start();\n                this._initialContainer = dropContainer;\n                this._initialIndex = dropContainer.getItemIndex(this);\n            }\n            else {\n                this._initialContainer = this._initialIndex = undefined;\n            }\n            // Important to run after we've called `start` on the parent container\n            // so that it has had time to resolve its scrollable parents.\n            this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n        };\n        /**\n         * Sets up the different variables and subscriptions\n         * that will be necessary for the dragging sequence.\n         * @param referenceElement Element that started the drag sequence.\n         * @param event Browser event object that started the sequence.\n         */\n        DragRef.prototype._initializeDragSequence = function (referenceElement, event) {\n            var _this = this;\n            // Always stop propagation for the event that initializes\n            // the dragging sequence, in order to prevent it from potentially\n            // starting another sequence for a draggable parent somewhere up the DOM tree.\n            event.stopPropagation();\n            var isDragging = this.isDragging();\n            var isTouchSequence = isTouchEvent(event);\n            var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n            var rootElement = this._rootElement;\n            var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n                this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n            // If the event started from an element with the native HTML drag&drop, it'll interfere\n            // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n            // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n            // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n            // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n            // events from firing on touch devices.\n            if (event.target && event.target.draggable && event.type === 'mousedown') {\n                event.preventDefault();\n            }\n            // Abort if the user is already dragging or is using a mouse button other than the primary one.\n            if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n                return;\n            }\n            // If we've got handles, we need to disable the tap highlight on the entire root element,\n            // otherwise iOS will still add it, even though all the drag interactions on the handle\n            // are disabled.\n            if (this._handles.length) {\n                this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n                rootElement.style.webkitTapHighlightColor = 'transparent';\n            }\n            this._hasStartedDragging = this._hasMoved = false;\n            // Avoid multiple subscriptions and memory leaks when multi touch\n            // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n            this._removeSubscriptions();\n            this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n            this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n            this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(function (scrollEvent) {\n                _this._updateOnScroll(scrollEvent);\n            });\n            if (this._boundaryElement) {\n                this._boundaryRect = getMutableClientRect(this._boundaryElement);\n            }\n            // If we have a custom preview we can't know ahead of time how large it'll be so we position\n            // it next to the cursor. The exception is when the consumer has opted into making the preview\n            // the same size as the root element, in which case we do know the size.\n            var previewTemplate = this._previewTemplate;\n            this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n                !previewTemplate.matchSize ? { x: 0, y: 0 } :\n                this._getPointerPositionInElement(referenceElement, event);\n            var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n            this._pointerDirectionDelta = { x: 0, y: 0 };\n            this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n            this._dragStartTime = Date.now();\n            this._dragDropRegistry.startDragging(this, event);\n        };\n        /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n        DragRef.prototype._cleanupDragArtifacts = function (event) {\n            var _this = this;\n            // Restore the element's visibility and insert it at its old position in the DOM.\n            // It's important that we maintain the position, because moving the element around in the DOM\n            // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n            // while moving the existing elements in all other cases.\n            this._rootElement.style.display = '';\n            this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._boundaryRect = this._previewRect = undefined;\n            // Re-enter the NgZone since we bound `document` events on the outside.\n            this._ngZone.run(function () {\n                var container = _this._dropContainer;\n                var currentIndex = container.getItemIndex(_this);\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));\n                var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n                _this.ended.next({ source: _this, distance: distance });\n                _this.dropped.next({\n                    item: _this,\n                    currentIndex: currentIndex,\n                    previousIndex: _this._initialIndex,\n                    container: container,\n                    previousContainer: _this._initialContainer,\n                    isPointerOverContainer: isPointerOverContainer,\n                    distance: distance\n                });\n                container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance, _this._initialIndex);\n                _this._dropContainer = _this._initialContainer;\n            });\n        };\n        /**\n         * Updates the item's position in its drop container, or moves it\n         * into a new one, depending on its current drag position.\n         */\n        DragRef.prototype._updateActiveDropContainer = function (_a) {\n            var _this = this;\n            var x = _a.x, y = _a.y;\n            // Drop container that draggable has been moved into.\n            var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n            // If we couldn't find a new container to move the item into, and the item has left its\n            // initial container, check whether the it's over the initial container. This handles the\n            // case where two containers are connected one way and the user tries to undo dragging an\n            // item into a new container.\n            if (!newContainer && this._dropContainer !== this._initialContainer &&\n                this._initialContainer._isOverContainer(x, y)) {\n                newContainer = this._initialContainer;\n            }\n            if (newContainer && newContainer !== this._dropContainer) {\n                this._ngZone.run(function () {\n                    // Notify the old container that the item has left.\n                    _this.exited.next({ item: _this, container: _this._dropContainer });\n                    _this._dropContainer.exit(_this);\n                    // Notify the new container that the item has entered.\n                    _this._dropContainer = newContainer;\n                    _this._dropContainer.enter(_this, x, y, newContainer === _this._initialContainer &&\n                        // If we're re-entering the initial container and sorting is disabled,\n                        // put item the into its starting index to begin with.\n                        newContainer.sortingDisabled ? _this._initialIndex : undefined);\n                    _this.entered.next({\n                        item: _this,\n                        container: newContainer,\n                        currentIndex: newContainer.getItemIndex(_this)\n                    });\n                });\n            }\n            this._dropContainer._startScrollingIfNecessary(x, y);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._preview.style.transform =\n                getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        };\n        /**\n         * Creates the element that will be rendered next to the user's pointer\n         * and will be used as a preview of the element that is being dragged.\n         */\n        DragRef.prototype._createPreviewElement = function () {\n            var previewConfig = this._previewTemplate;\n            var previewClass = this.previewClass;\n            var previewTemplate = previewConfig ? previewConfig.template : null;\n            var preview;\n            if (previewTemplate && previewConfig) {\n                // Measure the element before we've inserted the preview\n                // since the insertion could throw off the measurement.\n                var rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n                var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n                viewRef.detectChanges();\n                preview = getRootNode(viewRef, this._document);\n                this._previewRef = viewRef;\n                if (previewConfig.matchSize) {\n                    matchElementSize(preview, rootRect);\n                }\n                else {\n                    preview.style.transform =\n                        getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n                }\n            }\n            else {\n                var element = this._rootElement;\n                preview = deepCloneNode(element);\n                matchElementSize(preview, element.getBoundingClientRect());\n            }\n            extendStyles(preview.style, {\n                // It's important that we disable the pointer events on the preview, because\n                // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n                pointerEvents: 'none',\n                // We have to reset the margin, because it can throw off positioning relative to the viewport.\n                margin: '0',\n                position: 'fixed',\n                top: '0',\n                left: '0',\n                zIndex: \"\" + (this._config.zIndex || 1000)\n            });\n            toggleNativeDragInteractions(preview, false);\n            preview.classList.add('cdk-drag-preview');\n            preview.setAttribute('dir', this._direction);\n            if (previewClass) {\n                if (Array.isArray(previewClass)) {\n                    previewClass.forEach(function (className) { return preview.classList.add(className); });\n                }\n                else {\n                    preview.classList.add(previewClass);\n                }\n            }\n            return preview;\n        };\n        /**\n         * Animates the preview element from its current position to the location of the drop placeholder.\n         * @returns Promise that resolves when the animation completes.\n         */\n        DragRef.prototype._animatePreviewToPlaceholder = function () {\n            var _this = this;\n            // If the user hasn't moved yet, the transitionend event won't fire.\n            if (!this._hasMoved) {\n                return Promise.resolve();\n            }\n            var placeholderRect = this._placeholder.getBoundingClientRect();\n            // Apply the class that adds a transition to the preview.\n            this._preview.classList.add('cdk-drag-animating');\n            // Move the preview to the placeholder position.\n            this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n            // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n            // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n            // apply its style, we take advantage of the available info to figure out whether we need to\n            // bind the event in the first place.\n            var duration = getTransformTransitionDurationInMs(this._preview);\n            if (duration === 0) {\n                return Promise.resolve();\n            }\n            return this._ngZone.runOutsideAngular(function () {\n                return new Promise(function (resolve) {\n                    var handler = (function (event) {\n                        if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                            _this._preview.removeEventListener('transitionend', handler);\n                            resolve();\n                            clearTimeout(timeout);\n                        }\n                    });\n                    // If a transition is short enough, the browser might not fire the `transitionend` event.\n                    // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                    // fire if the transition hasn't completed when it was supposed to.\n                    var timeout = setTimeout(handler, duration * 1.5);\n                    _this._preview.addEventListener('transitionend', handler);\n                });\n            });\n        };\n        /** Creates an element that will be shown instead of the current element while dragging. */\n        DragRef.prototype._createPlaceholderElement = function () {\n            var placeholderConfig = this._placeholderTemplate;\n            var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n            var placeholder;\n            if (placeholderTemplate) {\n                this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n                this._placeholderRef.detectChanges();\n                placeholder = getRootNode(this._placeholderRef, this._document);\n            }\n            else {\n                placeholder = deepCloneNode(this._rootElement);\n            }\n            placeholder.classList.add('cdk-drag-placeholder');\n            return placeholder;\n        };\n        /**\n         * Figures out the coordinates at which an element was picked up.\n         * @param referenceElement Element that initiated the dragging.\n         * @param event Event that initiated the dragging.\n         */\n        DragRef.prototype._getPointerPositionInElement = function (referenceElement, event) {\n            var elementRect = this._rootElement.getBoundingClientRect();\n            var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n            var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n            var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n            var scrollPosition = this._getViewportScrollPosition();\n            var x = point.pageX - referenceRect.left - scrollPosition.left;\n            var y = point.pageY - referenceRect.top - scrollPosition.top;\n            return {\n                x: referenceRect.left - elementRect.left + x,\n                y: referenceRect.top - elementRect.top + y\n            };\n        };\n        /** Determines the point of the page that was touched by the user. */\n        DragRef.prototype._getPointerPositionOnPage = function (event) {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n            var scrollPosition = this._getViewportScrollPosition();\n            return {\n                x: point.pageX - scrollPosition.left,\n                y: point.pageY - scrollPosition.top\n            };\n        };\n        /** Gets the pointer position on the page, accounting for any position constraints. */\n        DragRef.prototype._getConstrainedPointerPosition = function (point) {\n            var constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n            var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n            if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n                constrainedPoint.y = this._pickupPositionOnPage.y;\n            }\n            else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n                constrainedPoint.x = this._pickupPositionOnPage.x;\n            }\n            if (this._boundaryRect) {\n                var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n                var boundaryRect = this._boundaryRect;\n                var previewRect = this._previewRect;\n                var minY = boundaryRect.top + pickupY;\n                var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n                var minX = boundaryRect.left + pickupX;\n                var maxX = boundaryRect.right - (previewRect.width - pickupX);\n                constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n                constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n            }\n            return constrainedPoint;\n        };\n        /** Updates the current drag delta, based on the user's current pointer position on the page. */\n        DragRef.prototype._updatePointerDirectionDelta = function (pointerPositionOnPage) {\n            var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n            var delta = this._pointerDirectionDelta;\n            var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n            // Amount of pixels the user has dragged since the last time the direction changed.\n            var changeX = Math.abs(x - positionSinceLastChange.x);\n            var changeY = Math.abs(y - positionSinceLastChange.y);\n            // Because we handle pointer events on a per-pixel basis, we don't want the delta\n            // to change for every pixel, otherwise anything that depends on it can look erratic.\n            // To make the delta more consistent, we track how much the user has moved since the last\n            // delta change and we only update it after it has reached a certain threshold.\n            if (changeX > this._config.pointerDirectionChangeThreshold) {\n                delta.x = x > positionSinceLastChange.x ? 1 : -1;\n                positionSinceLastChange.x = x;\n            }\n            if (changeY > this._config.pointerDirectionChangeThreshold) {\n                delta.y = y > positionSinceLastChange.y ? 1 : -1;\n                positionSinceLastChange.y = y;\n            }\n            return delta;\n        };\n        /** Toggles the native drag interactions, based on how many handles are registered. */\n        DragRef.prototype._toggleNativeDragInteractions = function () {\n            if (!this._rootElement || !this._handles) {\n                return;\n            }\n            var shouldEnable = this._handles.length > 0 || !this.isDragging();\n            if (shouldEnable !== this._nativeInteractionsEnabled) {\n                this._nativeInteractionsEnabled = shouldEnable;\n                toggleNativeDragInteractions(this._rootElement, shouldEnable);\n            }\n        };\n        /** Removes the manually-added event listeners from the root element. */\n        DragRef.prototype._removeRootElementListeners = function (element) {\n            element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n            element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        };\n        /**\n         * Applies a `transform` to the root element, taking into account any existing transforms on it.\n         * @param x New transform value along the X axis.\n         * @param y New transform value along the Y axis.\n         */\n        DragRef.prototype._applyRootElementTransform = function (x, y) {\n            var transform = getTransform(x, y);\n            // Cache the previous transform amount only after the first drag sequence, because\n            // we don't want our own transforms to stack on top of each other.\n            if (this._initialTransform == null) {\n                this._initialTransform = this._rootElement.style.transform || '';\n            }\n            // Preserve the previous `transform` value, if there was one. Note that we apply our own\n            // transform before the user's, because things like rotation can affect which direction\n            // the element will be translated towards.\n            this._rootElement.style.transform = this._initialTransform ?\n                transform + ' ' + this._initialTransform : transform;\n        };\n        /**\n         * Gets the distance that the user has dragged during the current drag sequence.\n         * @param currentPosition Current position of the user's pointer.\n         */\n        DragRef.prototype._getDragDistance = function (currentPosition) {\n            var pickupPosition = this._pickupPositionOnPage;\n            if (pickupPosition) {\n                return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n            }\n            return { x: 0, y: 0 };\n        };\n        /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n        DragRef.prototype._cleanupCachedDimensions = function () {\n            this._boundaryRect = this._previewRect = undefined;\n            this._parentPositions.clear();\n        };\n        /**\n         * Checks whether the element is still inside its boundary after the viewport has been resized.\n         * If not, the position is adjusted so that the element fits again.\n         */\n        DragRef.prototype._containInsideBoundaryOnResize = function () {\n            var _a = this._passiveTransform, x = _a.x, y = _a.y;\n            if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n                return;\n            }\n            var boundaryRect = this._boundaryElement.getBoundingClientRect();\n            var elementRect = this._rootElement.getBoundingClientRect();\n            // It's possible that the element got hidden away after dragging (e.g. by switching to a\n            // different tab). Don't do anything in this case so we don't clear the user's position.\n            if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n                (elementRect.width === 0 && elementRect.height === 0)) {\n                return;\n            }\n            var leftOverflow = boundaryRect.left - elementRect.left;\n            var rightOverflow = elementRect.right - boundaryRect.right;\n            var topOverflow = boundaryRect.top - elementRect.top;\n            var bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n            // If the element has become wider than the boundary, we can't\n            // do much to make it fit so we just anchor it to the left.\n            if (boundaryRect.width > elementRect.width) {\n                if (leftOverflow > 0) {\n                    x += leftOverflow;\n                }\n                if (rightOverflow > 0) {\n                    x -= rightOverflow;\n                }\n            }\n            else {\n                x = 0;\n            }\n            // If the element has become taller than the boundary, we can't\n            // do much to make it fit so we just anchor it to the top.\n            if (boundaryRect.height > elementRect.height) {\n                if (topOverflow > 0) {\n                    y += topOverflow;\n                }\n                if (bottomOverflow > 0) {\n                    y -= bottomOverflow;\n                }\n            }\n            else {\n                y = 0;\n            }\n            if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n                this.setFreeDragPosition({ y: y, x: x });\n            }\n        };\n        /** Gets the drag start delay, based on the event type. */\n        DragRef.prototype._getDragStartDelay = function (event) {\n            var value = this.dragStartDelay;\n            if (typeof value === 'number') {\n                return value;\n            }\n            else if (isTouchEvent(event)) {\n                return value.touch;\n            }\n            return value ? value.mouse : 0;\n        };\n        /** Updates the internal state of the draggable element when scrolling has occurred. */\n        DragRef.prototype._updateOnScroll = function (event) {\n            var scrollDifference = this._parentPositions.handleScroll(event);\n            // ClientRect dimensions are based on the page's scroll position so\n            // we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect && scrollDifference) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n        };\n        /** Gets the scroll position of the viewport. */\n        DragRef.prototype._getViewportScrollPosition = function () {\n            var cachedPosition = this._parentPositions.positions.get(this._document);\n            return cachedPosition ? cachedPosition.scrollPosition :\n                this._viewportRuler.getViewportScrollPosition();\n        };\n        return DragRef;\n    }());\n    /**\n     * Gets a 3d `transform` that can be applied to an element.\n     * @param x Desired position of the element along the X axis.\n     * @param y Desired position of the element along the Y axis.\n     */\n    function getTransform(x, y) {\n        // Round the transforms since some browsers will\n        // blur the elements for sub-pixel transforms.\n        return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n    }\n    /** Creates a deep clone of an element. */\n    function deepCloneNode(node) {\n        var clone = node.cloneNode(true);\n        var descendantsWithId = clone.querySelectorAll('[id]');\n        var descendantCanvases = node.querySelectorAll('canvas');\n        // Remove the `id` to avoid having multiple elements with the same id on the page.\n        clone.removeAttribute('id');\n        for (var i = 0; i < descendantsWithId.length; i++) {\n            descendantsWithId[i].removeAttribute('id');\n        }\n        // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n        // We match up the cloned canvas to their sources using their index in the DOM.\n        if (descendantCanvases.length) {\n            var cloneCanvases = clone.querySelectorAll('canvas');\n            for (var i = 0; i < descendantCanvases.length; i++) {\n                var correspondingCloneContext = cloneCanvases[i].getContext('2d');\n                if (correspondingCloneContext) {\n                    correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n                }\n            }\n        }\n        return clone;\n    }\n    /** Clamps a value between a minimum and a maximum. */\n    function clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    /**\n     * Helper to remove a node from the DOM and to do all the necessary null checks.\n     * @param node Node to be removed.\n     */\n    function removeNode(node) {\n        if (node && node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n    /** Determines whether an event is a touch event. */\n    function isTouchEvent(event) {\n        // This function is called for every pixel that the user has dragged so we need it to be\n        // as fast as possible. Since we only bind mouse events and touch events, we can assume\n        // that if the event's name starts with `t`, it's a touch event.\n        return event.type[0] === 't';\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    function getPreviewInsertionPoint(documentRef) {\n        // We can't use the body if the user is in fullscreen mode,\n        // because the preview will render under the fullscreen element.\n        // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n        return documentRef.fullscreenElement ||\n            documentRef.webkitFullscreenElement ||\n            documentRef.mozFullScreenElement ||\n            documentRef.msFullscreenElement ||\n            documentRef.body;\n    }\n    /**\n     * Gets the root HTML element of an embedded view.\n     * If the root is not an HTML element it gets wrapped in one.\n     */\n    function getRootNode(viewRef, _document) {\n        var rootNodes = viewRef.rootNodes;\n        if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n            return rootNodes[0];\n        }\n        var wrapper = _document.createElement('div');\n        rootNodes.forEach(function (node) { return wrapper.appendChild(node); });\n        return wrapper;\n    }\n    /**\n     * Matches the target element's size to the source's size.\n     * @param target Element that needs to be resized.\n     * @param sourceRect Dimensions of the source element.\n     */\n    function matchElementSize(target, sourceRect) {\n        target.style.width = sourceRect.width + \"px\";\n        target.style.height = sourceRect.height + \"px\";\n        target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Moves an item one index in an array to another.\n     * @param array Array in which to move the item.\n     * @param fromIndex Starting index of the item.\n     * @param toIndex Index to which the item should be moved.\n     */\n    function moveItemInArray(array, fromIndex, toIndex) {\n        var from = clamp$1(fromIndex, array.length - 1);\n        var to = clamp$1(toIndex, array.length - 1);\n        if (from === to) {\n            return;\n        }\n        var target = array[from];\n        var delta = to < from ? -1 : 1;\n        for (var i = from; i !== to; i += delta) {\n            array[i] = array[i + delta];\n        }\n        array[to] = target;\n    }\n    /**\n     * Moves an item from one array to another.\n     * @param currentArray Array from which to transfer the item.\n     * @param targetArray Array into which to put the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     */\n    function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var from = clamp$1(currentIndex, currentArray.length - 1);\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n        }\n    }\n    /**\n     * Copies an item from one array to another, leaving it in its\n     * original position in current array.\n     * @param currentArray Array from which to copy the item.\n     * @param targetArray Array into which is copy the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     *\n     */\n    function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray[currentIndex]);\n        }\n    }\n    /** Clamps a number between zero and a maximum. */\n    function clamp$1(value, max) {\n        return Math.max(0, Math.min(max, value));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Proximity, as a ratio to width/height, at which a\n     * dragged item will affect the drop container.\n     */\n    var DROP_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n     * viewport. The value comes from trying it out manually until it feels right.\n     */\n    var SCROLL_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Number of pixels to scroll for each frame when auto-scrolling an element.\n     * The value comes from trying it out manually until it feels right.\n     */\n    var AUTO_SCROLL_STEP = 2;\n    /**\n     * Reference to a drop list. Used to manipulate or dispose of the container.\n     */\n    var DropListRef = /** @class */ (function () {\n        function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n            var _this = this;\n            this._dragDropRegistry = _dragDropRegistry;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            /** Whether starting a dragging sequence from this container is disabled. */\n            this.disabled = false;\n            /** Whether sorting items within the list is disabled. */\n            this.sortingDisabled = false;\n            /**\n             * Whether auto-scrolling the view when the user\n             * moves their pointer close to the edges is disabled.\n             */\n            this.autoScrollDisabled = false;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits right before dragging has started. */\n            this.beforeStarted = new rxjs.Subject();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new rxjs.Subject();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new rxjs.Subject();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new rxjs.Subject();\n            /** Whether an item in the list is being dragged. */\n            this._isDragging = false;\n            /** Cache of the dimensions of all the items inside the container. */\n            this._itemPositions = [];\n            /**\n             * Keeps track of the item that was last swapped with the dragged item, as\n             * well as what direction the pointer was moving in when the swap occured.\n             */\n            this._previousSwap = { drag: null, delta: 0 };\n            /** Drop lists that are connected to the current one. */\n            this._siblings = [];\n            /** Direction in which the list is oriented. */\n            this._orientation = 'vertical';\n            /** Connected siblings that currently have a dragged item. */\n            this._activeSiblings = new Set();\n            /** Layout direction of the drop list. */\n            this._direction = 'ltr';\n            /** Subscription to the window being scrolled. */\n            this._viewportScrollSubscription = rxjs.Subscription.EMPTY;\n            /** Vertical direction in which the list is currently scrolling. */\n            this._verticalScrollDirection = 0 /* NONE */;\n            /** Horizontal direction in which the list is currently scrolling. */\n            this._horizontalScrollDirection = 0 /* NONE */;\n            /** Used to signal to the current auto-scroll sequence when to stop. */\n            this._stopScrollTimers = new rxjs.Subject();\n            /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n            this._cachedShadowRoot = null;\n            /** Starts the interval that'll auto-scroll the element. */\n            this._startScrollInterval = function () {\n                _this._stopScrolling();\n                rxjs.interval(0, rxjs.animationFrameScheduler)\n                    .pipe(operators.takeUntil(_this._stopScrollTimers))\n                    .subscribe(function () {\n                    var node = _this._scrollNode;\n                    if (_this._verticalScrollDirection === 1 /* UP */) {\n                        incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._verticalScrollDirection === 2 /* DOWN */) {\n                        incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                    if (_this._horizontalScrollDirection === 1 /* LEFT */) {\n                        incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._horizontalScrollDirection === 2 /* RIGHT */) {\n                        incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                });\n            };\n            this.element = coercion.coerceElement(element);\n            this._document = _document;\n            this.withScrollableParents([this.element]);\n            _dragDropRegistry.registerDropContainer(this);\n            this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        }\n        /** Removes the drop list functionality from the DOM element. */\n        DropListRef.prototype.dispose = function () {\n            this._stopScrolling();\n            this._stopScrollTimers.complete();\n            this._viewportScrollSubscription.unsubscribe();\n            this.beforeStarted.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this.sorted.complete();\n            this._activeSiblings.clear();\n            this._scrollNode = null;\n            this._parentPositions.clear();\n            this._dragDropRegistry.removeDropContainer(this);\n        };\n        /** Whether an item from this list is currently being dragged. */\n        DropListRef.prototype.isDragging = function () {\n            return this._isDragging;\n        };\n        /** Starts dragging an item. */\n        DropListRef.prototype.start = function () {\n            var _this = this;\n            var styles = coercion.coerceElement(this.element).style;\n            this.beforeStarted.next();\n            this._isDragging = true;\n            // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n            // scrolling. The browser seems to round the value based on the snapping points which means\n            // that we can't increment/decrement the scroll position.\n            this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n            styles.scrollSnapType = styles.msScrollSnapType = 'none';\n            this._cacheItems();\n            this._siblings.forEach(function (sibling) { return sibling._startReceiving(_this); });\n            this._viewportScrollSubscription.unsubscribe();\n            this._listenToScrollEvents();\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param index Index at which the item entered. If omitted, the container will try to figure it\n         *   out automatically.\n         */\n        DropListRef.prototype.enter = function (item, pointerX, pointerY, index) {\n            this.start();\n            // If sorting is disabled, we want the item to return to its starting\n            // position if the user is returning it to its initial container.\n            var newIndex;\n            if (index == null) {\n                newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n                if (newIndex === -1) {\n                    // We use the coordinates of where the item entered the drop\n                    // zone to figure out at which index it should be inserted.\n                    newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n                }\n            }\n            else {\n                newIndex = index;\n            }\n            var activeDraggables = this._activeDraggables;\n            var currentIndex = activeDraggables.indexOf(item);\n            var placeholder = item.getPlaceholderElement();\n            var newPositionReference = activeDraggables[newIndex];\n            // If the item at the new position is the same as the item that is being dragged,\n            // it means that we're trying to restore the item to its initial position. In this\n            // case we should use the next item from the list as the reference.\n            if (newPositionReference === item) {\n                newPositionReference = activeDraggables[newIndex + 1];\n            }\n            // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n            // into another container and back again), we have to ensure that it isn't duplicated.\n            if (currentIndex > -1) {\n                activeDraggables.splice(currentIndex, 1);\n            }\n            // Don't use items that are being dragged as a reference, because\n            // their element has been moved down to the bottom of the body.\n            if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n                var element = newPositionReference.getRootElement();\n                element.parentElement.insertBefore(placeholder, element);\n                activeDraggables.splice(newIndex, 0, item);\n            }\n            else {\n                var element = coercion.coerceElement(this.element);\n                if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n                    element.insertBefore(placeholder, activeDraggables[0].getRootElement());\n                    activeDraggables.unshift(item);\n                }\n                else {\n                    element.appendChild(placeholder);\n                    activeDraggables.push(item);\n                }\n            }\n            // The transform needs to be cleared so it doesn't throw off the measurements.\n            placeholder.style.transform = '';\n            // Note that the positions were already cached when we called `start` above,\n            // but we need to refresh them since the amount of items has changed and also parent rects.\n            this._cacheItemPositions();\n            this._cacheParentPositions();\n            this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         */\n        DropListRef.prototype.exit = function (item) {\n            this._reset();\n            this.exited.next({ item: item, container: this });\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         * @param distance Distance the user has dragged since the start of the dragging sequence.\n         * @param previousIndex Index of the item when dragging started.\n         *\n         * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n         */\n        DropListRef.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n            this._reset();\n            // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n            if (previousIndex == null) {\n                previousIndex = previousContainer.getItemIndex(item);\n            }\n            this.dropped.next({ item: item,\n                currentIndex: currentIndex,\n                previousIndex: previousIndex,\n                container: this,\n                previousContainer: previousContainer,\n                isPointerOverContainer: isPointerOverContainer,\n                distance: distance\n            });\n        };\n        /**\n         * Sets the draggable items that are a part of this list.\n         * @param items Items that are a part of this list.\n         */\n        DropListRef.prototype.withItems = function (items) {\n            var _this = this;\n            var previousItems = this._draggables;\n            this._draggables = items;\n            items.forEach(function (item) { return item._withDropContainer(_this); });\n            if (this.isDragging()) {\n                var draggedItems = previousItems.filter(function (item) { return item.isDragging(); });\n                // If all of the items being dragged were removed\n                // from the list, abort the current drag sequence.\n                if (draggedItems.every(function (item) { return items.indexOf(item) === -1; })) {\n                    this._reset();\n                }\n                else {\n                    this._cacheItems();\n                }\n            }\n            return this;\n        };\n        /** Sets the layout direction of the drop list. */\n        DropListRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /**\n         * Sets the containers that are connected to this one. When two or more containers are\n         * connected, the user will be allowed to transfer items between them.\n         * @param connectedTo Other containers that the current containers should be connected to.\n         */\n        DropListRef.prototype.connectedTo = function (connectedTo) {\n            this._siblings = connectedTo.slice();\n            return this;\n        };\n        /**\n         * Sets the orientation of the container.\n         * @param orientation New orientation for the container.\n         */\n        DropListRef.prototype.withOrientation = function (orientation) {\n            this._orientation = orientation;\n            return this;\n        };\n        /**\n         * Sets which parent elements are can be scrolled while the user is dragging.\n         * @param elements Elements that can be scrolled.\n         */\n        DropListRef.prototype.withScrollableParents = function (elements) {\n            var element = coercion.coerceElement(this.element);\n            // We always allow the current element to be scrollable\n            // so we need to ensure that it's in the array.\n            this._scrollableElements =\n                elements.indexOf(element) === -1 ? __spread([element], elements) : elements.slice();\n            return this;\n        };\n        /** Gets the scrollable parents that are registered with this drop container. */\n        DropListRef.prototype.getScrollableParents = function () {\n            return this._scrollableElements;\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         */\n        DropListRef.prototype.getItemIndex = function (item) {\n            if (!this._isDragging) {\n                return this._draggables.indexOf(item);\n            }\n            // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n            // The rest of the logic still stands no matter what orientation we're in, however\n            // we need to invert the array when determining the index.\n            var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n                this._itemPositions.slice().reverse() : this._itemPositions;\n            return findIndex(items, function (currentItem) { return currentItem.drag === item; });\n        };\n        /**\n         * Whether the list is able to receive the item that\n         * is currently being dragged inside a connected drop list.\n         */\n        DropListRef.prototype.isReceiving = function () {\n            return this._activeSiblings.size > 0;\n        };\n        /**\n         * Sorts an item inside the container based on its position.\n         * @param item Item to be sorted.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param pointerDelta Direction in which the pointer is moving along each axis.\n         */\n        DropListRef.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {\n            // Don't sort the item if sorting is disabled or it's out of range.\n            if (this.sortingDisabled ||\n                !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                return;\n            }\n            var siblings = this._itemPositions;\n            var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n            if (newIndex === -1 && siblings.length > 0) {\n                return;\n            }\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentIndex = findIndex(siblings, function (currentItem) { return currentItem.drag === item; });\n            var siblingAtNewPosition = siblings[newIndex];\n            var currentPosition = siblings[currentIndex].clientRect;\n            var newPosition = siblingAtNewPosition.clientRect;\n            var delta = currentIndex > newIndex ? 1 : -1;\n            this._previousSwap.drag = siblingAtNewPosition.drag;\n            this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n            // How many pixels the item's placeholder should be offset.\n            var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n            // How many pixels all the other items should be offset.\n            var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n            // Save the previous order of the items before moving the item to its new index.\n            // We use this to check whether an item has been moved as a result of the sorting.\n            var oldOrder = siblings.slice();\n            // Shuffle the array in place.\n            moveItemInArray(siblings, currentIndex, newIndex);\n            this.sorted.next({\n                previousIndex: currentIndex,\n                currentIndex: newIndex,\n                container: this,\n                item: item\n            });\n            siblings.forEach(function (sibling, index) {\n                // Don't do anything if the position hasn't changed.\n                if (oldOrder[index] === sibling) {\n                    return;\n                }\n                var isDraggedItem = sibling.drag === item;\n                var offset = isDraggedItem ? itemOffset : siblingOffset;\n                var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                    sibling.drag.getRootElement();\n                // Update the offset to reflect the new position.\n                sibling.offset += offset;\n                // Since we're moving the items with a `transform`, we need to adjust their cached\n                // client rects to reflect their new position, as well as swap their positions in the cache.\n                // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n                // elements may be mid-animation which will give us a wrong result.\n                if (isHorizontal) {\n                    // Round the transforms since some browsers will\n                    // blur the elements, for sub-pixel transforms.\n                    elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                    adjustClientRect(sibling.clientRect, 0, offset);\n                }\n                else {\n                    elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                    adjustClientRect(sibling.clientRect, offset, 0);\n                }\n            });\n        };\n        /**\n         * Checks whether the user's pointer is close to the edges of either the\n         * viewport or the drop list and starts the auto-scroll sequence.\n         * @param pointerX User's pointer position along the x axis.\n         * @param pointerY User's pointer position along the y axis.\n         */\n        DropListRef.prototype._startScrollingIfNecessary = function (pointerX, pointerY) {\n            var _this = this;\n            if (this.autoScrollDisabled) {\n                return;\n            }\n            var scrollNode;\n            var verticalScrollDirection = 0 /* NONE */;\n            var horizontalScrollDirection = 0 /* NONE */;\n            // Check whether we should start scrolling any of the parent containers.\n            this._parentPositions.positions.forEach(function (position, element) {\n                var _a;\n                // We have special handling for the `document` below. Also this would be\n                // nicer with a  for...of loop, but it requires changing a compiler flag.\n                if (element === _this._document || !position.clientRect || scrollNode) {\n                    return;\n                }\n                if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                    _a = __read(getElementScrollDirections(element, position.clientRect, pointerX, pointerY), 2), verticalScrollDirection = _a[0], horizontalScrollDirection = _a[1];\n                    if (verticalScrollDirection || horizontalScrollDirection) {\n                        scrollNode = element;\n                    }\n                }\n            });\n            // Otherwise check if we can start scrolling the viewport.\n            if (!verticalScrollDirection && !horizontalScrollDirection) {\n                var _a = this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                var clientRect = { width: width, height: height, top: 0, right: width, bottom: height, left: 0 };\n                verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n                horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n                scrollNode = window;\n            }\n            if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n                this._verticalScrollDirection = verticalScrollDirection;\n                this._horizontalScrollDirection = horizontalScrollDirection;\n                this._scrollNode = scrollNode;\n                if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._stopScrolling();\n                }\n            }\n        };\n        /** Stops any currently-running auto-scroll sequences. */\n        DropListRef.prototype._stopScrolling = function () {\n            this._stopScrollTimers.next();\n        };\n        /** Caches the positions of the configured scrollable parents. */\n        DropListRef.prototype._cacheParentPositions = function () {\n            var element = coercion.coerceElement(this.element);\n            this._parentPositions.cache(this._scrollableElements);\n            // The list element is always in the `scrollableElements`\n            // so we can take advantage of the cached `ClientRect`.\n            this._clientRect = this._parentPositions.positions.get(element).clientRect;\n        };\n        /** Refreshes the position cache of the items and sibling containers. */\n        DropListRef.prototype._cacheItemPositions = function () {\n            var isHorizontal = this._orientation === 'horizontal';\n            this._itemPositions = this._activeDraggables.map(function (drag) {\n                var elementToMeasure = drag.getVisibleElement();\n                return { drag: drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n            }).sort(function (a, b) {\n                return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                    a.clientRect.top - b.clientRect.top;\n            });\n        };\n        /** Resets the container to its initial state. */\n        DropListRef.prototype._reset = function () {\n            var _this = this;\n            this._isDragging = false;\n            var styles = coercion.coerceElement(this.element).style;\n            styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n            // TODO(crisbeto): may have to wait for the animations to finish.\n            this._activeDraggables.forEach(function (item) {\n                var rootElement = item.getRootElement();\n                if (rootElement) {\n                    rootElement.style.transform = '';\n                }\n            });\n            this._siblings.forEach(function (sibling) { return sibling._stopReceiving(_this); });\n            this._activeDraggables = [];\n            this._itemPositions = [];\n            this._previousSwap.drag = null;\n            this._previousSwap.delta = 0;\n            this._stopScrolling();\n            this._viewportScrollSubscription.unsubscribe();\n            this._parentPositions.clear();\n        };\n        /**\n         * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n         * @param currentIndex Index of the item currently being dragged.\n         * @param siblings All of the items in the list.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getSiblingOffsetPx = function (currentIndex, siblings, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentPosition = siblings[currentIndex].clientRect;\n            var immediateSibling = siblings[currentIndex + delta * -1];\n            var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n            if (immediateSibling) {\n                var start = isHorizontal ? 'left' : 'top';\n                var end = isHorizontal ? 'right' : 'bottom';\n                // Get the spacing between the start of the current item and the end of the one immediately\n                // after it in the direction in which the user is dragging, or vice versa. We add it to the\n                // offset in order to push the element to where it will be when it's inline and is influenced\n                // by the `margin` of its siblings.\n                if (delta === -1) {\n                    siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n                }\n                else {\n                    siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n                }\n            }\n            return siblingOffset;\n        };\n        /**\n         * Gets the offset in pixels by which the item that is being dragged should be moved.\n         * @param currentPosition Current position of the item.\n         * @param newPosition Position of the item where the current item should be moved.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getItemOffsetPx = function (currentPosition, newPosition, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                newPosition.top - currentPosition.top;\n            // Account for differences in the item width/height.\n            if (delta === -1) {\n                itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                    newPosition.height - currentPosition.height;\n            }\n            return itemOffset;\n        };\n        /**\n         * Checks if pointer is entering in the first position\n         * @param pointerX Position of the user's pointer along the X axis.\n         * @param pointerY Position of the user's pointer along the Y axis.\n         */\n        DropListRef.prototype._shouldEnterAsFirstChild = function (pointerX, pointerY) {\n            if (!this._activeDraggables.length) {\n                return false;\n            }\n            var itemPositions = this._itemPositions;\n            var isHorizontal = this._orientation === 'horizontal';\n            // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n            // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n            var reversed = itemPositions[0].drag !== this._activeDraggables[0];\n            if (reversed) {\n                var lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n                return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n            }\n            else {\n                var firstItemRect = itemPositions[0].clientRect;\n                return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n            }\n        };\n        /**\n         * Gets the index of an item in the drop container, based on the position of the user's pointer.\n         * @param item Item that is being sorted.\n         * @param pointerX Position of the user's pointer along the X axis.\n         * @param pointerY Position of the user's pointer along the Y axis.\n         * @param delta Direction in which the user is moving their pointer.\n         */\n        DropListRef.prototype._getItemIndexFromPointerPosition = function (item, pointerX, pointerY, delta) {\n            var _this = this;\n            var isHorizontal = this._orientation === 'horizontal';\n            return findIndex(this._itemPositions, function (_a, _, array) {\n                var drag = _a.drag, clientRect = _a.clientRect;\n                if (drag === item) {\n                    // If there's only one item left in the container, it must be\n                    // the dragged item itself so we use it as a reference.\n                    return array.length < 2;\n                }\n                if (delta) {\n                    var direction = isHorizontal ? delta.x : delta.y;\n                    // If the user is still hovering over the same item as last time, and they didn't change\n                    // the direction in which they're dragging, we don't consider it a direction swap.\n                    if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                        return false;\n                    }\n                }\n                return isHorizontal ?\n                    // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                    pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n            });\n        };\n        /** Caches the current items in the list and their positions. */\n        DropListRef.prototype._cacheItems = function () {\n            this._activeDraggables = this._draggables.slice();\n            this._cacheItemPositions();\n            this._cacheParentPositions();\n        };\n        /**\n         * Checks whether the user's pointer is positioned over the container.\n         * @param x Pointer position along the X axis.\n         * @param y Pointer position along the Y axis.\n         */\n        DropListRef.prototype._isOverContainer = function (x, y) {\n            return isInsideClientRect(this._clientRect, x, y);\n        };\n        /**\n         * Figures out whether an item should be moved into a sibling\n         * drop container, based on its current position.\n         * @param item Drag item that is being moved.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._getSiblingContainerFromPosition = function (item, x, y) {\n            return this._siblings.find(function (sibling) { return sibling._canReceive(item, x, y); });\n        };\n        /**\n         * Checks whether the drop list can receive the passed-in item.\n         * @param item Item that is being dragged into the list.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._canReceive = function (item, x, y) {\n            if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n                return false;\n            }\n            var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n            // If there's no element at the pointer position, then\n            // the client rect is probably scrolled out of the view.\n            if (!elementFromPoint) {\n                return false;\n            }\n            var nativeElement = coercion.coerceElement(this.element);\n            // The `ClientRect`, that we're using to find the container over which the user is\n            // hovering, doesn't give us any information on whether the element has been scrolled\n            // out of the view or whether it's overlapping with other containers. This means that\n            // we could end up transferring the item into a container that's invisible or is positioned\n            // below another one. We use the result from `elementFromPoint` to get the top-most element\n            // at the pointer position and to find whether it's one of the intersecting drop containers.\n            return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n        };\n        /**\n         * Called by one of the connected drop lists when a dragging sequence has started.\n         * @param sibling Sibling in which dragging has started.\n         */\n        DropListRef.prototype._startReceiving = function (sibling) {\n            var activeSiblings = this._activeSiblings;\n            if (!activeSiblings.has(sibling)) {\n                activeSiblings.add(sibling);\n                this._cacheParentPositions();\n                this._listenToScrollEvents();\n            }\n        };\n        /**\n         * Called by a connected drop list when dragging has stopped.\n         * @param sibling Sibling whose dragging has stopped.\n         */\n        DropListRef.prototype._stopReceiving = function (sibling) {\n            this._activeSiblings.delete(sibling);\n            this._viewportScrollSubscription.unsubscribe();\n        };\n        /**\n         * Starts listening to scroll events on the viewport.\n         * Used for updating the internal state of the list.\n         */\n        DropListRef.prototype._listenToScrollEvents = function () {\n            var _this = this;\n            this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function (event) {\n                if (_this.isDragging()) {\n                    var scrollDifference_1 = _this._parentPositions.handleScroll(event);\n                    if (scrollDifference_1) {\n                        // Since we know the amount that the user has scrolled we can shift all of the\n                        // client rectangles ourselves. This is cheaper than re-measuring everything and\n                        // we can avoid inconsistent behavior where we might be measuring the element before\n                        // its position has changed.\n                        _this._itemPositions.forEach(function (_a) {\n                            var clientRect = _a.clientRect;\n                            adjustClientRect(clientRect, scrollDifference_1.top, scrollDifference_1.left);\n                        });\n                        // We need two loops for this, because we want all of the cached\n                        // positions to be up-to-date before we re-sort the item.\n                        _this._itemPositions.forEach(function (_a) {\n                            var drag = _a.drag;\n                            if (_this._dragDropRegistry.isDragging(drag)) {\n                                // We need to re-sort the item manually, because the pointer move\n                                // events won't be dispatched while the user is scrolling.\n                                drag._sortFromLastPointerPosition();\n                            }\n                        });\n                    }\n                }\n                else if (_this.isReceiving()) {\n                    _this._cacheParentPositions();\n                }\n            });\n        };\n        /**\n         * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n         * than saving it in property directly on init, because we want to resolve it as late as possible\n         * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n         * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n         */\n        DropListRef.prototype._getShadowRoot = function () {\n            if (!this._cachedShadowRoot) {\n                var shadowRoot = platform._getShadowRoot(coercion.coerceElement(this.element));\n                this._cachedShadowRoot = shadowRoot || this._document;\n            }\n            return this._cachedShadowRoot;\n        };\n        return DropListRef;\n    }());\n    /**\n     * Finds the index of an item that matches a predicate function. Used as an equivalent\n     * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n     * @param array Array in which to look for matches.\n     * @param predicate Function used to determine whether an item is a match.\n     */\n    function findIndex(array, predicate) {\n        for (var i = 0; i < array.length; i++) {\n            if (predicate(array[i], i, array)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Increments the vertical scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementVerticalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(0, amount);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollTop += amount;\n        }\n    }\n    /**\n     * Increments the horizontal scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementHorizontalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(amount, 0);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollLeft += amount;\n        }\n    }\n    /**\n     * Gets whether the vertical auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getVerticalScrollDirection(clientRect, pointerY) {\n        var top = clientRect.top, bottom = clientRect.bottom, height = clientRect.height;\n        var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n            return 1 /* UP */;\n        }\n        else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n            return 2 /* DOWN */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets whether the horizontal auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerX Position of the user's pointer along the x axis.\n     */\n    function getHorizontalScrollDirection(clientRect, pointerX) {\n        var left = clientRect.left, right = clientRect.right, width = clientRect.width;\n        var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n            return 1 /* LEFT */;\n        }\n        else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n            return 2 /* RIGHT */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets the directions in which an element node should be scrolled,\n     * assuming that the user's pointer is already within it scrollable region.\n     * @param element Element for which we should calculate the scroll direction.\n     * @param clientRect Bounding client rectangle of the element.\n     * @param pointerX Position of the user's pointer along the x axis.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n        var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n        var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n        var verticalScrollDirection = 0 /* NONE */;\n        var horizontalScrollDirection = 0 /* NONE */;\n        // Note that we here we do some extra checks for whether the element is actually scrollable in\n        // a certain direction and we only assign the scroll direction if it is. We do this so that we\n        // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n        // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n        if (computedVertical) {\n            var scrollTop = element.scrollTop;\n            if (computedVertical === 1 /* UP */) {\n                if (scrollTop > 0) {\n                    verticalScrollDirection = 1 /* UP */;\n                }\n            }\n            else if (element.scrollHeight - scrollTop > element.clientHeight) {\n                verticalScrollDirection = 2 /* DOWN */;\n            }\n        }\n        if (computedHorizontal) {\n            var scrollLeft = element.scrollLeft;\n            if (computedHorizontal === 1 /* LEFT */) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = 1 /* LEFT */;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = 2 /* RIGHT */;\n            }\n        }\n        return [verticalScrollDirection, horizontalScrollDirection];\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event options that can be used to bind an active, capturing event. */\n    var activeCapturingEventOptions = platform.normalizePassiveListenerOptions({\n        passive: false,\n        capture: true\n    });\n    /**\n     * Service that keeps track of all the drag item and drop container\n     * instances, and manages global event listeners on the `document`.\n     * @docs-private\n     */\n    // Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n    // to avoid circular imports. If we were to reference them here, importing the registry into the\n    // classes that are registering themselves will introduce a circular import.\n    var DragDropRegistry = /** @class */ (function () {\n        function DragDropRegistry(_ngZone, _document) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            /** Registered drop container instances. */\n            this._dropInstances = new Set();\n            /** Registered drag item instances. */\n            this._dragInstances = new Set();\n            /** Drag item instances that are currently being dragged. */\n            this._activeDragInstances = new Set();\n            /** Keeps track of the event listeners that we've bound to the `document`. */\n            this._globalListeners = new Map();\n            /**\n             * Emits the `touchmove` or `mousemove` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerMove = new rxjs.Subject();\n            /**\n             * Emits the `touchend` or `mouseup` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerUp = new rxjs.Subject();\n            /** Emits when the viewport has been scrolled while the user is dragging an item. */\n            this.scroll = new rxjs.Subject();\n            /**\n             * Event listener that will prevent the default browser action while the user is dragging.\n             * @param event Event whose default action should be prevented.\n             */\n            this._preventDefaultWhileDragging = function (event) {\n                if (_this._activeDragInstances.size) {\n                    event.preventDefault();\n                }\n            };\n            this._document = _document;\n        }\n        /** Adds a drop container to the registry. */\n        DragDropRegistry.prototype.registerDropContainer = function (drop) {\n            if (!this._dropInstances.has(drop)) {\n                this._dropInstances.add(drop);\n            }\n        };\n        /** Adds a drag item instance to the registry. */\n        DragDropRegistry.prototype.registerDragItem = function (drag) {\n            var _this = this;\n            this._dragInstances.add(drag);\n            // The `touchmove` event gets bound once, ahead of time, because WebKit\n            // won't preventDefault on a dynamically-added `touchmove` listener.\n            // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n            if (this._dragInstances.size === 1) {\n                this._ngZone.runOutsideAngular(function () {\n                    // The event handler has to be explicitly active,\n                    // because newer browsers make it passive by default.\n                    _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n                });\n            }\n        };\n        /** Removes a drop container from the registry. */\n        DragDropRegistry.prototype.removeDropContainer = function (drop) {\n            this._dropInstances.delete(drop);\n        };\n        /** Removes a drag item instance from the registry. */\n        DragDropRegistry.prototype.removeDragItem = function (drag) {\n            this._dragInstances.delete(drag);\n            this.stopDragging(drag);\n            if (this._dragInstances.size === 0) {\n                this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }\n        };\n        /**\n         * Starts the dragging sequence for a drag instance.\n         * @param drag Drag instance which is being dragged.\n         * @param event Event that initiated the dragging.\n         */\n        DragDropRegistry.prototype.startDragging = function (drag, event) {\n            var _this = this;\n            // Do not process the same drag twice to avoid memory leaks and redundant listeners\n            if (this._activeDragInstances.has(drag)) {\n                return;\n            }\n            this._activeDragInstances.add(drag);\n            if (this._activeDragInstances.size === 1) {\n                var isTouchEvent = event.type.startsWith('touch');\n                var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n                var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n                // We explicitly bind __active__ listeners here, because newer browsers will default to\n                // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n                // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n                this._globalListeners\n                    .set(moveEvent, {\n                    handler: function (e) { return _this.pointerMove.next(e); },\n                    options: activeCapturingEventOptions\n                })\n                    .set(upEvent, {\n                    handler: function (e) { return _this.pointerUp.next(e); },\n                    options: true\n                })\n                    .set('scroll', {\n                    handler: function (e) { return _this.scroll.next(e); },\n                    // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                    // the document. See https://github.com/angular/components/issues/17144.\n                    options: true\n                })\n                    // Preventing the default action on `mousemove` isn't enough to disable text selection\n                    // on Safari so we need to prevent the selection event as well. Alternatively this can\n                    // be done by setting `user-select: none` on the `body`, however it has causes a style\n                    // recalculation which can be expensive on pages with a lot of elements.\n                    .set('selectstart', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n                this._ngZone.runOutsideAngular(function () {\n                    _this._globalListeners.forEach(function (config, name) {\n                        _this._document.addEventListener(name, config.handler, config.options);\n                    });\n                });\n            }\n        };\n        /** Stops dragging a drag item instance. */\n        DragDropRegistry.prototype.stopDragging = function (drag) {\n            this._activeDragInstances.delete(drag);\n            if (this._activeDragInstances.size === 0) {\n                this._clearGlobalListeners();\n            }\n        };\n        /** Gets whether a drag item instance is currently being dragged. */\n        DragDropRegistry.prototype.isDragging = function (drag) {\n            return this._activeDragInstances.has(drag);\n        };\n        DragDropRegistry.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._dragInstances.forEach(function (instance) { return _this.removeDragItem(instance); });\n            this._dropInstances.forEach(function (instance) { return _this.removeDropContainer(instance); });\n            this._clearGlobalListeners();\n            this.pointerMove.complete();\n            this.pointerUp.complete();\n        };\n        /** Clears out the global event listeners from the `document`. */\n        DragDropRegistry.prototype._clearGlobalListeners = function () {\n            var _this = this;\n            this._globalListeners.forEach(function (config, name) {\n                _this._document.removeEventListener(name, config.handler, config.options);\n            });\n            this._globalListeners.clear();\n        };\n        DragDropRegistry.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDropRegistry.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        DragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n        return DragDropRegistry;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default configuration to be used when creating a `DragRef`. */\n    var DEFAULT_CONFIG = {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5\n    };\n    /**\n     * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n     */\n    var DragDrop = /** @class */ (function () {\n        function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n        }\n        /**\n         * Turns an element into a draggable item.\n         * @param element Element to which to attach the dragging functionality.\n         * @param config Object used to configure the dragging behavior.\n         */\n        DragDrop.prototype.createDrag = function (element, config) {\n            if (config === void 0) { config = DEFAULT_CONFIG; }\n            return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n        };\n        /**\n         * Turns an element into a drop list.\n         * @param element Element to which to attach the drop list functionality.\n         */\n        DragDrop.prototype.createDropList = function (element) {\n            return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n        };\n        DragDrop.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDrop.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i2.ViewportRuler },\n            { type: DragDropRegistry }\n        ]; };\n        DragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n        return DragDrop;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n     * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n     * to avoid circular imports.\n     * @docs-private\n     */\n    var CDK_DRAG_PARENT = new i0.InjectionToken('CDK_DRAG_PARENT');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Handle that can be used to drag and CdkDrag instance. */\n    var CdkDragHandle = /** @class */ (function () {\n        function CdkDragHandle(element, parentDrag) {\n            this.element = element;\n            /** Emits when the state of the handle has changed. */\n            this._stateChanges = new rxjs.Subject();\n            this._disabled = false;\n            this._parentDrag = parentDrag;\n            toggleNativeDragInteractions(element.nativeElement, false);\n        }\n        Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n            /** Whether starting to drag through this handle is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._stateChanges.next(this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDragHandle.prototype.ngOnDestroy = function () {\n            this._stateChanges.complete();\n        };\n        CdkDragHandle.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDragHandle]',\n                        host: {\n                            'class': 'cdk-drag-handle'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragHandle.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DRAG_PARENT,] }, { type: i0.Optional }] }\n        ]; };\n        CdkDragHandle.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDragHandleDisabled',] }]\n        };\n        return CdkDragHandle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the placeholder of a CdkDrag when\n     * it is being dragged. The placeholder is displayed in place of the element being dragged.\n     */\n    var CdkDragPlaceholder = /** @class */ (function () {\n        function CdkDragPlaceholder(templateRef) {\n            this.templateRef = templateRef;\n        }\n        CdkDragPlaceholder.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPlaceholder]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPlaceholder.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPlaceholder.propDecorators = {\n            data: [{ type: i0.Input }]\n        };\n        return CdkDragPlaceholder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the preview\n     * of a CdkDrag when it is being dragged.\n     */\n    var CdkDragPreview = /** @class */ (function () {\n        function CdkDragPreview(templateRef) {\n            this.templateRef = templateRef;\n            this._matchSize = false;\n        }\n        Object.defineProperty(CdkDragPreview.prototype, \"matchSize\", {\n            /** Whether the preview should preserve the same size as the item that is being dragged. */\n            get: function () { return this._matchSize; },\n            set: function (value) { this._matchSize = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDragPreview.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPreview]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPreview.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPreview.propDecorators = {\n            data: [{ type: i0.Input }],\n            matchSize: [{ type: i0.Input }]\n        };\n        return CdkDragPreview;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used to configure the\n     * behavior of the drag&drop-related components.\n     */\n    var CDK_DRAG_CONFIG = new i0.InjectionToken('CDK_DRAG_CONFIG');\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     * @docs-private\n     */\n    function CDK_DRAG_CONFIG_FACTORY() {\n        return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n     * Used for avoiding circular imports.\n     */\n    var CDK_DROP_LIST = new i0.InjectionToken('CDK_DROP_LIST');\n    /** Element that can be moved inside a CdkDropList container. */\n    var CdkDrag = /** @class */ (function () {\n        function CdkDrag(\n        /** Element that the draggable is attached to. */\n        element, \n        /** Droppable container that the draggable is a part of. */\n        dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n            var _this = this;\n            this.element = element;\n            this.dropContainer = dropContainer;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewContainerRef = _viewContainerRef;\n            this._dir = _dir;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._destroyed = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new i0.EventEmitter();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new i0.EventEmitter();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new i0.EventEmitter();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new i0.EventEmitter();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new i0.EventEmitter();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = new rxjs.Observable(function (observer) {\n                var subscription = _this._dragRef.moved.pipe(operators.map(function (movedEvent) { return ({\n                    source: _this,\n                    pointerPosition: movedEvent.pointerPosition,\n                    event: movedEvent.event,\n                    delta: movedEvent.delta,\n                    distance: movedEvent.distance\n                }); })).subscribe(observer);\n                return function () {\n                    subscription.unsubscribe();\n                };\n            });\n            this._dragRef = dragDrop.createDrag(element, {\n                dragStartThreshold: config && config.dragStartThreshold != null ?\n                    config.dragStartThreshold : 5,\n                pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                    config.pointerDirectionChangeThreshold : 5,\n                zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n            });\n            this._dragRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            // Note that usually the container is assigned when the drop list is picks up the item, but in\n            // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n            // where there are no items on the first change detection pass, but the items get picked up as\n            // soon as the user triggers another pass by dragging. This is a problem, because the item would\n            // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n            // is too late since the two modes save different kinds of information. We work around it by\n            // assigning the drop container both from here and the list.\n            if (dropContainer) {\n                this._dragRef._withDropContainer(dropContainer._dropListRef);\n                dropContainer.addItem(this);\n            }\n            this._syncInputs(this._dragRef);\n            this._handleEvents(this._dragRef);\n        }\n        Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._dragRef.disabled = this._disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        CdkDrag.prototype.getPlaceholderElement = function () {\n            return this._dragRef.getPlaceholderElement();\n        };\n        /** Returns the root draggable element. */\n        CdkDrag.prototype.getRootElement = function () {\n            return this._dragRef.getRootElement();\n        };\n        /** Resets a standalone drag item to its initial position. */\n        CdkDrag.prototype.reset = function () {\n            this._dragRef.reset();\n        };\n        /**\n         * Gets the pixel coordinates of the draggable outside of a drop container.\n         */\n        CdkDrag.prototype.getFreeDragPosition = function () {\n            return this._dragRef.getFreeDragPosition();\n        };\n        CdkDrag.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.asObservable()\n                .pipe(operators.take(1), operators.takeUntil(this._destroyed))\n                .subscribe(function () {\n                _this._updateRootElement();\n                // Listen for any newly-added handles.\n                _this._handles.changes.pipe(operators.startWith(_this._handles), \n                // Sync the new handles with the DragRef.\n                operators.tap(function (handles) {\n                    var childHandleElements = handles\n                        .filter(function (handle) { return handle._parentDrag === _this; })\n                        .map(function (handle) { return handle.element; });\n                    _this._dragRef.withHandles(childHandleElements);\n                }), \n                // Listen if the state of any of the handles changes.\n                operators.switchMap(function (handles) {\n                    return rxjs.merge.apply(void 0, __spread(handles.map(function (item) {\n                        return item._stateChanges.pipe(operators.startWith(item));\n                    })));\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (handleInstance) {\n                    // Enabled/disable the handle that changed in the DragRef.\n                    var dragRef = _this._dragRef;\n                    var handle = handleInstance.element.nativeElement;\n                    handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n                });\n                if (_this.freeDragPosition) {\n                    _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n                }\n            });\n        };\n        CdkDrag.prototype.ngOnChanges = function (changes) {\n            var rootSelectorChange = changes['rootElementSelector'];\n            var positionChange = changes['freeDragPosition'];\n            // We don't have to react to the first change since it's being\n            // handled in `ngAfterViewInit` where it needs to be deferred.\n            if (rootSelectorChange && !rootSelectorChange.firstChange) {\n                this._updateRootElement();\n            }\n            // Skip the first change since it's being handled in `ngAfterViewInit`.\n            if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        };\n        CdkDrag.prototype.ngOnDestroy = function () {\n            if (this.dropContainer) {\n                this.dropContainer.removeItem(this);\n            }\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        };\n        /** Syncs the root element with the `DragRef`. */\n        CdkDrag.prototype._updateRootElement = function () {\n            var element = this.element.nativeElement;\n            var rootElement = this.rootElementSelector ?\n                getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n            if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n                throw Error(\"cdkDrag must be attached to an element node. \" +\n                    (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n            }\n            this._dragRef.withRootElement(rootElement || element);\n        };\n        /** Gets the boundary element, based on the `boundaryElement` value. */\n        CdkDrag.prototype._getBoundaryElement = function () {\n            var boundary = this.boundaryElement;\n            if (!boundary) {\n                return null;\n            }\n            if (typeof boundary === 'string') {\n                return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n            }\n            var element = coercion.coerceElement(boundary);\n            if (i0.isDevMode() && !element.contains(this.element.nativeElement)) {\n                throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n            }\n            return element;\n        };\n        /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n        CdkDrag.prototype._syncInputs = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                if (!ref.isDragging()) {\n                    var dir = _this._dir;\n                    var dragStartDelay = _this.dragStartDelay;\n                    var placeholder = _this._placeholderTemplate ? {\n                        template: _this._placeholderTemplate.templateRef,\n                        context: _this._placeholderTemplate.data,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    var preview = _this._previewTemplate ? {\n                        template: _this._previewTemplate.templateRef,\n                        context: _this._previewTemplate.data,\n                        matchSize: _this._previewTemplate.matchSize,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    ref.disabled = _this.disabled;\n                    ref.lockAxis = _this.lockAxis;\n                    ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                        dragStartDelay : coercion.coerceNumberProperty(dragStartDelay);\n                    ref.constrainPosition = _this.constrainPosition;\n                    ref.previewClass = _this.previewClass;\n                    ref\n                        .withBoundaryElement(_this._getBoundaryElement())\n                        .withPlaceholderTemplate(placeholder)\n                        .withPreviewTemplate(preview);\n                    if (dir) {\n                        ref.withDirection(dir.value);\n                    }\n                }\n            });\n        };\n        /** Handles the events from the underlying `DragRef`. */\n        CdkDrag.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.started.subscribe(function () {\n                _this.started.emit({ source: _this });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.released.subscribe(function () {\n                _this.released.emit({ source: _this });\n            });\n            ref.ended.subscribe(function (event) {\n                _this.ended.emit({ source: _this, distance: event.distance });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: event.container.data,\n                    item: _this,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: event.container.data,\n                    item: _this\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    item: _this,\n                    distance: event.distance\n                });\n            });\n        };\n        /** Assigns the default input values based on a provided config object. */\n        CdkDrag.prototype._assignDefaults = function (config) {\n            var lockAxis = config.lockAxis, dragStartDelay = config.dragStartDelay, constrainPosition = config.constrainPosition, previewClass = config.previewClass, boundaryElement = config.boundaryElement, draggingDisabled = config.draggingDisabled, rootElementSelector = config.rootElementSelector;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.dragStartDelay = dragStartDelay || 0;\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n            if (constrainPosition) {\n                this.constrainPosition = constrainPosition;\n            }\n            if (previewClass) {\n                this.previewClass = previewClass;\n            }\n            if (boundaryElement) {\n                this.boundaryElement = boundaryElement;\n            }\n            if (rootElementSelector) {\n                this.rootElementSelector = rootElementSelector;\n            }\n        };\n        CdkDrag.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDrag]',\n                        exportAs: 'cdkDrag',\n                        host: {\n                            'class': 'cdk-drag',\n                            '[class.cdk-drag-disabled]': 'disabled',\n                            '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                        },\n                        providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDrag.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DROP_LIST,] }, { type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef }\n        ]; };\n        CdkDrag.propDecorators = {\n            _handles: [{ type: i0.ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n            _previewTemplate: [{ type: i0.ContentChild, args: [CdkDragPreview,] }],\n            _placeholderTemplate: [{ type: i0.ContentChild, args: [CdkDragPlaceholder,] }],\n            data: [{ type: i0.Input, args: ['cdkDragData',] }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDragLockAxis',] }],\n            rootElementSelector: [{ type: i0.Input, args: ['cdkDragRootElement',] }],\n            boundaryElement: [{ type: i0.Input, args: ['cdkDragBoundary',] }],\n            dragStartDelay: [{ type: i0.Input, args: ['cdkDragStartDelay',] }],\n            freeDragPosition: [{ type: i0.Input, args: ['cdkDragFreeDragPosition',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDragDisabled',] }],\n            constrainPosition: [{ type: i0.Input, args: ['cdkDragConstrainPosition',] }],\n            previewClass: [{ type: i0.Input, args: ['cdkDragPreviewClass',] }],\n            started: [{ type: i0.Output, args: ['cdkDragStarted',] }],\n            released: [{ type: i0.Output, args: ['cdkDragReleased',] }],\n            ended: [{ type: i0.Output, args: ['cdkDragEnded',] }],\n            entered: [{ type: i0.Output, args: ['cdkDragEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDragExited',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDragDropped',] }],\n            moved: [{ type: i0.Output, args: ['cdkDragMoved',] }]\n        };\n        return CdkDrag;\n    }());\n    /** Gets the closest ancestor of an element that matches a selector. */\n    function getClosestMatchingAncestor(element, selector) {\n        var currentElement = element.parentElement;\n        while (currentElement) {\n            // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n            if (currentElement.matches ? currentElement.matches(selector) :\n                currentElement.msMatchesSelector(selector)) {\n                return currentElement;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n     * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n     * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n     * from `cdkDropList`.\n     */\n    var CdkDropListGroup = /** @class */ (function () {\n        function CdkDropListGroup() {\n            /** Drop lists registered inside the group. */\n            this._items = new Set();\n            this._disabled = false;\n        }\n        Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from inside this group is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDropListGroup.prototype.ngOnDestroy = function () {\n            this._items.clear();\n        };\n        CdkDropListGroup.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropListGroup]',\n                        exportAs: 'cdkDropListGroup',\n                    },] }\n        ];\n        CdkDropListGroup.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDropListGroupDisabled',] }]\n        };\n        return CdkDropListGroup;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique ids for drop zones. */\n    var _uniqueIdCounter = 0;\n    var ɵ0 = undefined;\n    /** Container that wraps a set of draggable items. */\n    var CdkDropList = /** @class */ (function () {\n        function CdkDropList(\n        /** Element that the drop list is attached to. */\n        element, dragDrop, _changeDetectorRef, _dir, _group, \n        /**\n         * @deprecated _scrollDispatcher parameter to become required.\n         * @breaking-change 11.0.0\n         */\n        _scrollDispatcher, config) {\n            var _this = this;\n            this.element = element;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._group = _group;\n            this._scrollDispatcher = _scrollDispatcher;\n            /** Emits when the list has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /**\n             * Other draggable containers that this container is connected to and into which the\n             * container's items can be transferred. Can either be references to other drop containers,\n             * or their unique IDs.\n             */\n            this.connectedTo = [];\n            /**\n             * Unique ID for the drop zone. Can be used as a reference\n             * in the `connectedTo` of another `CdkDropList`.\n             */\n            this.id = \"cdk-drop-list-\" + _uniqueIdCounter++;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new i0.EventEmitter();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new i0.EventEmitter();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new i0.EventEmitter();\n            /**\n             * Keeps track of the items that are registered with this container. Historically we used to\n             * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n             * well which means that we can't handle cases like dragging the headers of a `mat-table`\n             * correctly. What we do instead is to have the items register themselves with the container\n             * and then we sort them based on their position in the DOM.\n             */\n            this._unsortedItems = new Set();\n            this._dropListRef = dragDrop.createDropList(element);\n            this._dropListRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            this._dropListRef.enterPredicate = function (drag, drop) {\n                return _this.enterPredicate(drag.data, drop.data);\n            };\n            this._setupInputSyncSubscription(this._dropListRef);\n            this._handleEvents(this._dropListRef);\n            CdkDropList._dropLists.push(this);\n            if (_group) {\n                _group._items.add(this);\n            }\n        }\n        Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from this container is disabled. */\n            get: function () {\n                return this._disabled || (!!this._group && this._group.disabled);\n            },\n            set: function (value) {\n                // Usually we sync the directive and ref state right before dragging starts, in order to have\n                // a single point of failure and to avoid having to use setters for everything. `disabled` is\n                // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n                // the user in a disabled state, so we also need to sync it as it's being set.\n                this._dropListRef.disabled = this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Registers an items with the drop list. */\n        CdkDropList.prototype.addItem = function (item) {\n            this._unsortedItems.add(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        };\n        /** Removes an item from the drop list. */\n        CdkDropList.prototype.removeItem = function (item) {\n            this._unsortedItems.delete(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        };\n        /** Gets the registered items in the list, sorted by their position in the DOM. */\n        CdkDropList.prototype.getSortedItems = function () {\n            return Array.from(this._unsortedItems).sort(function (a, b) {\n                var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n                // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n                // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n                // tslint:disable-next-line:no-bitwise\n                return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n            });\n        };\n        CdkDropList.prototype.ngOnDestroy = function () {\n            var index = CdkDropList._dropLists.indexOf(this);\n            if (index > -1) {\n                CdkDropList._dropLists.splice(index, 1);\n            }\n            if (this._group) {\n                this._group._items.delete(this);\n            }\n            this._unsortedItems.clear();\n            this._dropListRef.dispose();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Starts dragging an item.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.start = function () {\n            this._dropListRef.start();\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         *\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer) {\n            this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.enter = function (item, pointerX, pointerY) {\n            this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.exit = function (item) {\n            this._dropListRef.exit(item._dragRef);\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.getItemIndex = function (item) {\n            return this._dropListRef.getItemIndex(item._dragRef);\n        };\n        /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n        CdkDropList.prototype._setupInputSyncSubscription = function (ref) {\n            var _this = this;\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.startWith(this._dir.value), operators.takeUntil(this._destroyed))\n                    .subscribe(function (value) { return ref.withDirection(value); });\n            }\n            ref.beforeStarted.subscribe(function () {\n                var siblings = coercion.coerceArray(_this.connectedTo).map(function (drop) {\n                    return typeof drop === 'string' ?\n                        CdkDropList._dropLists.find(function (list) { return list.id === drop; }) : drop;\n                });\n                if (_this._group) {\n                    _this._group._items.forEach(function (drop) {\n                        if (siblings.indexOf(drop) === -1) {\n                            siblings.push(drop);\n                        }\n                    });\n                }\n                // Note that we resolve the scrollable parents here so that we delay the resolution\n                // as long as possible, ensuring that the element is in its final place in the DOM.\n                // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n                if (!_this._scrollableParentsResolved && _this._scrollDispatcher) {\n                    var scrollableParents = _this._scrollDispatcher\n                        .getAncestorScrollContainers(_this.element)\n                        .map(function (scrollable) { return scrollable.getElementRef().nativeElement; });\n                    _this._dropListRef.withScrollableParents(scrollableParents);\n                    // Only do this once since it involves traversing the DOM and the parents\n                    // shouldn't be able to change without the drop list being destroyed.\n                    _this._scrollableParentsResolved = true;\n                }\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.sortingDisabled = coercion.coerceBooleanProperty(_this.sortingDisabled);\n                ref.autoScrollDisabled = coercion.coerceBooleanProperty(_this.autoScrollDisabled);\n                ref\n                    .connectedTo(siblings.filter(function (drop) { return drop && drop !== _this; }).map(function (list) { return list._dropListRef; }))\n                    .withOrientation(_this.orientation);\n            });\n        };\n        /** Handles events from the underlying DropListRef. */\n        CdkDropList.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                _this._syncItemsWithRef();\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: _this,\n                    item: event.item.data,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: _this,\n                    item: event.item.data\n                });\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.sorted.subscribe(function (event) {\n                _this.sorted.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    container: _this,\n                    item: event.item.data\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    item: event.item.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    distance: event.distance\n                });\n                // Mark for check since all of these events run outside of change\n                // detection and we're not guaranteed for something else to have triggered it.\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        /** Assigns the default input values based on a provided config object. */\n        CdkDropList.prototype._assignDefaults = function (config) {\n            var lockAxis = config.lockAxis, draggingDisabled = config.draggingDisabled, sortingDisabled = config.sortingDisabled, listAutoScrollDisabled = config.listAutoScrollDisabled, listOrientation = config.listOrientation;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n            this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n            this.orientation = listOrientation || 'vertical';\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n        };\n        /** Syncs up the registered drag items with underlying drop list ref. */\n        CdkDropList.prototype._syncItemsWithRef = function () {\n            this._dropListRef.withItems(this.getSortedItems().map(function (item) { return item._dragRef; }));\n        };\n        /** Keeps track of the drop lists that are currently on the page. */\n        CdkDropList._dropLists = [];\n        CdkDropList.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropList], cdk-drop-list',\n                        exportAs: 'cdkDropList',\n                        providers: [\n                            // Prevent child drop lists from picking up the same group as their parent.\n                            { provide: CdkDropListGroup, useValue: ɵ0 },\n                            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                        ],\n                        host: {\n                            'class': 'cdk-drop-list',\n                            '[id]': 'id',\n                            '[class.cdk-drop-list-disabled]': 'disabled',\n                            '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                            '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDropList.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: CdkDropListGroup, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: i2.ScrollDispatcher },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] }\n        ]; };\n        CdkDropList.propDecorators = {\n            connectedTo: [{ type: i0.Input, args: ['cdkDropListConnectedTo',] }],\n            data: [{ type: i0.Input, args: ['cdkDropListData',] }],\n            orientation: [{ type: i0.Input, args: ['cdkDropListOrientation',] }],\n            id: [{ type: i0.Input }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDropListLockAxis',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDropListDisabled',] }],\n            sortingDisabled: [{ type: i0.Input, args: ['cdkDropListSortingDisabled',] }],\n            enterPredicate: [{ type: i0.Input, args: ['cdkDropListEnterPredicate',] }],\n            autoScrollDisabled: [{ type: i0.Input, args: ['cdkDropListAutoScrollDisabled',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDropListDropped',] }],\n            entered: [{ type: i0.Output, args: ['cdkDropListEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDropListExited',] }],\n            sorted: [{ type: i0.Output, args: ['cdkDropListSorted',] }]\n        };\n        return CdkDropList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DragDropModule = /** @class */ (function () {\n        function DragDropModule() {\n        }\n        DragDropModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        exports: [\n                            i2.CdkScrollableModule,\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        providers: [\n                            DragDrop,\n                        ]\n                    },] }\n        ];\n        return DragDropModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CDK_DRAG_CONFIG = CDK_DRAG_CONFIG;\n    exports.CDK_DRAG_CONFIG_FACTORY = CDK_DRAG_CONFIG_FACTORY;\n    exports.CDK_DROP_LIST = CDK_DROP_LIST;\n    exports.CdkDrag = CdkDrag;\n    exports.CdkDragHandle = CdkDragHandle;\n    exports.CdkDragPlaceholder = CdkDragPlaceholder;\n    exports.CdkDragPreview = CdkDragPreview;\n    exports.CdkDropList = CdkDropList;\n    exports.CdkDropListGroup = CdkDropListGroup;\n    exports.DragDrop = DragDrop;\n    exports.DragDropModule = DragDropModule;\n    exports.DragDropRegistry = DragDropRegistry;\n    exports.DragRef = DragRef;\n    exports.DropListRef = DropListRef;\n    exports.copyArrayItem = copyArrayItem;\n    exports.moveItemInArray = moveItemInArray;\n    exports.transferArrayItem = transferArrayItem;\n    exports.ɵangular_material_src_cdk_drag_drop_drag_drop_b = CDK_DRAG_PARENT;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-drag-drop.umd.js.map\n"]}
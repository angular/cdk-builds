{"version":3,"sources":["src/cdk/cdk-drag-drop.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","dragDrop","core","common","scrolling","platform","coercion","rxjs","operators","tslib","bidi","this","i0","i1","i2","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_this","_passiveTransform","x","y","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","_hasStartedDragging","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","pointerPosition","distance","_getDragDistance","delta","_pointerDirectionDelta","_getPointerPositionOnPage","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","registerDragItem","Object","defineProperty","prototype","get","set","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","forEach","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","position","setFreeDragPosition","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent_1","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","_initialContainer","_initialIndex","getItemIndex","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","pipe","startWith","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","getRootNode","elementRect","deepCloneNode","left","top","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","sortingDisabled","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_parentPositions","Map","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","interval","animationFrameScheduler","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","push","_cacheItemPositions","_reset","withItems","items","connectedTo","slice","withOrientation","orientation","elements","_scrollableElements","__spread","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","isPointerNearClientRect","_clientRect","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","__read","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollTop","scrollHeight","clientHeight","scrollLeft","scrollWidth","clientWidth","getViewportSize","window","_cacheParentPositions","scrollPosition","getMutableClientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","_updateAfterScroll","scrolledParent","newTop","newLeft","topDifference","leftDifference","isInsideClientRect","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","getShadowRoot","_supportsShadowDom","ShadowRoot","rect","xThreshold","yThreshold","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","upEvent","e","options","config","_clearGlobalListeners","ngOnDestroy","instance","decorators","Injectable","args","providedIn","ctorParameters","NgZone","Inject","DOCUMENT","ɵprov","ɵɵdefineInjectable","DragDropRegistry_Factory","ɵɵinject","token","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","DragDrop_Factory","CDK_DRAG_PARENT","InjectionToken","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","Directive","selector","host","class","ElementRef","Optional","propDecorators","Input","CdkDragPlaceholder","templateRef","TemplateRef","data","CdkDragPreview","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","dropContainer","_viewContainerRef","_dir","_changeDetectorRef","_destroyed","EventEmitter","Observable","observer","subscription","_dragRef","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","changes","tap","childHandleElements","filter","switchMap","merge","apply","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","_getBoundaryElement","boundary","isDevMode","ref","dir","coerceNumberProperty","emit","markForCheck","draggingDisabled","exportAs","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","useExisting","SkipSelf","ViewContainerRef","Directionality","ChangeDetectorRef","ContentChildren","descendants","ContentChild","Output","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","ngAfterContentInit","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","listAutoScrollDisabled","listOrientation","useValue","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","ScrollDispatcher","DragDropModule","NgModule","declarations","CDK_DRAG_CONFIG_FACTORY","copyArrayItem","currentArray","targetArray","targetIndex","transferArrayItem","ɵangular_material_src_cdk_drag_drop_drag_drop_b"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/scrolling'), require('@angular/cdk/platform'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators'), require('tslib'), require('@angular/cdk/bidi')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/drag-drop', ['exports', '@angular/core', '@angular/common', '@angular/cdk/scrolling', '@angular/cdk/platform', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators', 'tslib', '@angular/cdk/bidi'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.dragDrop = {}), global.ng.core, global.ng.common, global.ng.cdk.scrolling, global.ng.cdk.platform, global.ng.cdk.coercion, global.rxjs, global.rxjs.operators, global.tslib, global.ng.cdk.bidi));\n}(this, (function (exports, i0, i1, i2, platform, coercion, rxjs, operators, tslib, bidi) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Shallow-extends a stylesheet object with another stylesheet object.\n     * @docs-private\n     */\n    function extendStyles(dest, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n        return dest;\n    }\n    /**\n     * Toggles whether the native drag interactions should be enabled for an element.\n     * @param element Element on which to toggle the drag interactions.\n     * @param enable Whether the drag interactions should be enabled.\n     * @docs-private\n     */\n    function toggleNativeDragInteractions(element, enable) {\n        var userSelect = enable ? '' : 'none';\n        extendStyles(element.style, {\n            touchAction: enable ? '' : 'none',\n            webkitUserDrag: enable ? '' : 'none',\n            webkitTapHighlightColor: enable ? '' : 'transparent',\n            userSelect: userSelect,\n            msUserSelect: userSelect,\n            webkitUserSelect: userSelect,\n            MozUserSelect: userSelect\n        });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Parses a CSS time value to milliseconds. */\n    function parseCssTimeUnitsToMs(value) {\n        // Some browsers will return it in seconds, whereas others will return milliseconds.\n        var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n        return parseFloat(value) * multiplier;\n    }\n    /** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n    function getTransformTransitionDurationInMs(element) {\n        var computedStyle = getComputedStyle(element);\n        var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n        var property = transitionedProperties.find(function (prop) { return prop === 'transform' || prop === 'all'; });\n        // If there's no transition for `all` or `transform`, we shouldn't do anything.\n        if (!property) {\n            return 0;\n        }\n        // Get the index of the property that we're interested in and match\n        // it up to the same index in `transition-delay` and `transition-duration`.\n        var propertyIndex = transitionedProperties.indexOf(property);\n        var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n        var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n        return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n            parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n    }\n    /** Parses out multiple values from a computed style into an array. */\n    function parseCssPropertyValue(computedStyle, name) {\n        var value = computedStyle.getPropertyValue(name);\n        return value.split(',').map(function (part) { return part.trim(); });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Options that can be used to bind a passive event listener. */\n    var passiveEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /** Options that can be used to bind an active event listener. */\n    var activeEventListenerOptions = platform.normalizePassiveListenerOptions({ passive: false });\n    /**\n     * Time in milliseconds for which to ignore mouse events, after\n     * receiving a touch event. Used to avoid doing double work for\n     * touch devices where the browser fires fake mouse events, in\n     * addition to touch events.\n     */\n    var MOUSE_EVENT_IGNORE_TIME = 800;\n    /**\n     * Reference to a draggable item. Used to manipulate or dispose of the item.\n     */\n    var DragRef = /** @class */ (function () {\n        function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            var _this = this;\n            this._config = _config;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n            /**\n             * CSS `transform` applied to the element when it isn't being dragged. We need a\n             * passive transform in order for the dragged element to retain its new position\n             * after the user has stopped dragging and because we need to know the relative\n             * position in case they start dragging again. This corresponds to `element.style.transform`.\n             */\n            this._passiveTransform = { x: 0, y: 0 };\n            /** CSS `transform` that is applied to the element while it's being dragged. */\n            this._activeTransform = { x: 0, y: 0 };\n            /** Emits when the item is being moved. */\n            this._moveEvents = new rxjs.Subject();\n            /** Subscription to pointer movement events. */\n            this._pointerMoveSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the event that is dispatched when the user lifts their pointer. */\n            this._pointerUpSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being scrolled. */\n            this._scrollSubscription = rxjs.Subscription.EMPTY;\n            /** Subscription to the viewport being resized. */\n            this._resizeSubscription = rxjs.Subscription.EMPTY;\n            /** Cached reference to the boundary element. */\n            this._boundaryElement = null;\n            /** Whether the native dragging interactions have been enabled on the root element. */\n            this._nativeInteractionsEnabled = true;\n            /** Elements that can be used to drag the draggable item. */\n            this._handles = [];\n            /** Registered handles that are currently disabled. */\n            this._disabledHandles = new Set();\n            /** Layout direction of the item. */\n            this._direction = 'ltr';\n            /**\n             * Amount of milliseconds to wait after the user has put their\n             * pointer down before starting to drag the element.\n             */\n            this.dragStartDelay = 0;\n            this._disabled = false;\n            /** Emits as the drag sequence is being prepared. */\n            this.beforeStarted = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new rxjs.Subject();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new rxjs.Subject();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new rxjs.Subject();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new rxjs.Subject();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new rxjs.Subject();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = this._moveEvents.asObservable();\n            /** Handler for the `mousedown`/`touchstart` events. */\n            this._pointerDown = function (event) {\n                _this.beforeStarted.next();\n                // Delegate the event based on whether it started from a handle or the element itself.\n                if (_this._handles.length) {\n                    var targetHandle = _this._handles.find(function (handle) {\n                        var target = event.target;\n                        return !!target && (target === handle || handle.contains(target));\n                    });\n                    if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                        _this._initializeDragSequence(targetHandle, event);\n                    }\n                }\n                else if (!_this.disabled) {\n                    _this._initializeDragSequence(_this._rootElement, event);\n                }\n            };\n            /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n            this._pointerMove = function (event) {\n                // Prevent the default action as early as possible in order to block\n                // native actions like dragging the selected text or images with the mouse.\n                event.preventDefault();\n                if (!_this._hasStartedDragging) {\n                    var pointerPosition = _this._getPointerPositionOnPage(event);\n                    var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                    var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                    var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                    // Only start dragging after the user has moved more than the minimum distance in either\n                    // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                    // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                    // per pixel of movement (e.g. if the user moves their pointer quickly).\n                    if (isOverThreshold) {\n                        var isDelayElapsed = Date.now() >= _this._dragStartTime + _this._getDragStartDelay(event);\n                        if (!isDelayElapsed) {\n                            _this._endDragSequence(event);\n                            return;\n                        }\n                        // Prevent other drag sequences from starting while something in the container is still\n                        // being dragged. This can happen while we're waiting for the drop animation to finish\n                        // and can cause errors, because some elements might still be moving around.\n                        if (!_this._dropContainer || !_this._dropContainer.isDragging()) {\n                            _this._hasStartedDragging = true;\n                            _this._ngZone.run(function () { return _this._startDragSequence(event); });\n                        }\n                    }\n                    return;\n                }\n                // We only need the preview dimensions if we have a boundary element.\n                if (_this._boundaryElement) {\n                    // Cache the preview element rect if we haven't cached it already or if\n                    // we cached it too early before the element dimensions were computed.\n                    if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                        _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                    }\n                }\n                var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n                _this._hasMoved = true;\n                _this._updatePointerDirectionDelta(constrainedPointerPosition);\n                if (_this._dropContainer) {\n                    _this._updateActiveDropContainer(constrainedPointerPosition);\n                }\n                else {\n                    var activeTransform = _this._activeTransform;\n                    activeTransform.x =\n                        constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                    activeTransform.y =\n                        constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                    _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                    // Apply transform as attribute if dragging and svg element to work for IE\n                    if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                        var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                        _this._rootElement.setAttribute('transform', appliedTransform);\n                    }\n                }\n                // Since this event gets fired for every pixel while dragging, we only\n                // want to fire it if the consumer opted into it. Also we have to\n                // re-enter the zone because we run all of the events on the outside.\n                if (_this._moveEvents.observers.length) {\n                    _this._ngZone.run(function () {\n                        _this._moveEvents.next({\n                            source: _this,\n                            pointerPosition: constrainedPointerPosition,\n                            event: event,\n                            distance: _this._getDragDistance(constrainedPointerPosition),\n                            delta: _this._pointerDirectionDelta\n                        });\n                    });\n                }\n            };\n            /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n            this._pointerUp = function (event) {\n                _this._endDragSequence(event);\n            };\n            this.withRootElement(element);\n            _dragDropRegistry.registerDragItem(this);\n        }\n        Object.defineProperty(DragRef.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n            },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this._disabled) {\n                    this._disabled = newValue;\n                    this._toggleNativeDragInteractions();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        DragRef.prototype.getPlaceholderElement = function () {\n            return this._placeholder;\n        };\n        /** Returns the root draggable element. */\n        DragRef.prototype.getRootElement = function () {\n            return this._rootElement;\n        };\n        /**\n         * Gets the currently-visible element that represents the drag item.\n         * While dragging this is the placeholder, otherwise it's the root element.\n         */\n        DragRef.prototype.getVisibleElement = function () {\n            return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n        };\n        /** Registers the handles that can be used to drag the element. */\n        DragRef.prototype.withHandles = function (handles) {\n            this._handles = handles.map(function (handle) { return coercion.coerceElement(handle); });\n            this._handles.forEach(function (handle) { return toggleNativeDragInteractions(handle, false); });\n            this._toggleNativeDragInteractions();\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag preview.\n         * @param template Template that from which to stamp out the preview.\n         */\n        DragRef.prototype.withPreviewTemplate = function (template) {\n            this._previewTemplate = template;\n            return this;\n        };\n        /**\n         * Registers the template that should be used for the drag placeholder.\n         * @param template Template that from which to stamp out the placeholder.\n         */\n        DragRef.prototype.withPlaceholderTemplate = function (template) {\n            this._placeholderTemplate = template;\n            return this;\n        };\n        /**\n         * Sets an alternate drag root element. The root element is the element that will be moved as\n         * the user is dragging. Passing an alternate root element is useful when trying to enable\n         * dragging on an element that you might not have access to.\n         */\n        DragRef.prototype.withRootElement = function (rootElement) {\n            var element = coercion.coerceElement(rootElement);\n            if (element !== this._rootElement) {\n                if (this._rootElement) {\n                    this._removeRootElementListeners(this._rootElement);\n                }\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                this._initialTransform = undefined;\n                this._rootElement = element;\n            }\n            return this;\n        };\n        /**\n         * Element to which the draggable's position will be constrained.\n         */\n        DragRef.prototype.withBoundaryElement = function (boundaryElement) {\n            var _this = this;\n            this._boundaryElement = boundaryElement ? coercion.coerceElement(boundaryElement) : null;\n            this._resizeSubscription.unsubscribe();\n            if (boundaryElement) {\n                this._resizeSubscription = this._viewportRuler\n                    .change(10)\n                    .subscribe(function () { return _this._containInsideBoundaryOnResize(); });\n            }\n            return this;\n        };\n        /** Removes the dragging functionality from the DOM element. */\n        DragRef.prototype.dispose = function () {\n            this._removeRootElementListeners(this._rootElement);\n            // Do this check before removing from the registry since it'll\n            // stop being considered as dragged once it is removed.\n            if (this.isDragging()) {\n                // Since we move out the element to the end of the body while it's being\n                // dragged, we have to make sure that it's removed if it gets destroyed.\n                removeNode(this._rootElement);\n            }\n            removeNode(this._anchor);\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._dragDropRegistry.removeDragItem(this);\n            this._removeSubscriptions();\n            this.beforeStarted.complete();\n            this.started.complete();\n            this.released.complete();\n            this.ended.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this._moveEvents.complete();\n            this._handles = [];\n            this._disabledHandles.clear();\n            this._dropContainer = undefined;\n            this._resizeSubscription.unsubscribe();\n            this._boundaryElement = this._rootElement = this._placeholderTemplate =\n                this._previewTemplate = this._anchor = null;\n        };\n        /** Checks whether the element is currently being dragged. */\n        DragRef.prototype.isDragging = function () {\n            return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n        };\n        /** Resets a standalone drag item to its initial position. */\n        DragRef.prototype.reset = function () {\n            this._rootElement.style.transform = this._initialTransform || '';\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform = { x: 0, y: 0 };\n        };\n        /**\n         * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n         * @param handle Handle element that should be disabled.\n         */\n        DragRef.prototype.disableHandle = function (handle) {\n            if (this._handles.indexOf(handle) > -1) {\n                this._disabledHandles.add(handle);\n            }\n        };\n        /**\n         * Enables a handle, if it has been disabled.\n         * @param handle Handle element to be enabled.\n         */\n        DragRef.prototype.enableHandle = function (handle) {\n            this._disabledHandles.delete(handle);\n        };\n        /** Sets the layout direction of the draggable item. */\n        DragRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /** Sets the container that the item is part of. */\n        DragRef.prototype._withDropContainer = function (container) {\n            this._dropContainer = container;\n        };\n        /**\n         * Gets the current position in pixels the draggable outside of a drop container.\n         */\n        DragRef.prototype.getFreeDragPosition = function () {\n            var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n            return { x: position.x, y: position.y };\n        };\n        /**\n         * Sets the current position in pixels the draggable outside of a drop container.\n         * @param value New position to be set.\n         */\n        DragRef.prototype.setFreeDragPosition = function (value) {\n            this._activeTransform = { x: 0, y: 0 };\n            this._passiveTransform.x = value.x;\n            this._passiveTransform.y = value.y;\n            if (!this._dropContainer) {\n                this._applyRootElementTransform(value.x, value.y);\n            }\n            return this;\n        };\n        /** Updates the item's sort order based on the last-known pointer position. */\n        DragRef.prototype._sortFromLastPointerPosition = function () {\n            var position = this._pointerPositionAtLastDirectionChange;\n            if (position && this._dropContainer) {\n                this._updateActiveDropContainer(position);\n            }\n        };\n        /** Unsubscribes from the global subscriptions. */\n        DragRef.prototype._removeSubscriptions = function () {\n            this._pointerMoveSubscription.unsubscribe();\n            this._pointerUpSubscription.unsubscribe();\n            this._scrollSubscription.unsubscribe();\n        };\n        /** Destroys the preview element and its ViewRef. */\n        DragRef.prototype._destroyPreview = function () {\n            if (this._preview) {\n                removeNode(this._preview);\n            }\n            if (this._previewRef) {\n                this._previewRef.destroy();\n            }\n            this._preview = this._previewRef = null;\n        };\n        /** Destroys the placeholder element and its ViewRef. */\n        DragRef.prototype._destroyPlaceholder = function () {\n            if (this._placeholder) {\n                removeNode(this._placeholder);\n            }\n            if (this._placeholderRef) {\n                this._placeholderRef.destroy();\n            }\n            this._placeholder = this._placeholderRef = null;\n        };\n        /**\n         * Clears subscriptions and stops the dragging sequence.\n         * @param event Browser event object that ended the sequence.\n         */\n        DragRef.prototype._endDragSequence = function (event) {\n            var _this = this;\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!this._dragDropRegistry.isDragging(this)) {\n                return;\n            }\n            this._removeSubscriptions();\n            this._dragDropRegistry.stopDragging(this);\n            this._toggleNativeDragInteractions();\n            if (this._handles) {\n                this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n            }\n            if (!this._hasStartedDragging) {\n                return;\n            }\n            this.released.next({ source: this });\n            if (this._dropContainer) {\n                // Stop scrolling immediately, instead of waiting for the animation to finish.\n                this._dropContainer._stopScrolling();\n                this._animatePreviewToPlaceholder().then(function () {\n                    _this._cleanupDragArtifacts(event);\n                    _this._cleanupCachedDimensions();\n                    _this._dragDropRegistry.stopDragging(_this);\n                });\n            }\n            else {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                this._passiveTransform.x = this._activeTransform.x;\n                this._passiveTransform.y = this._activeTransform.y;\n                this._ngZone.run(function () {\n                    _this.ended.next({\n                        source: _this,\n                        distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))\n                    });\n                });\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }\n        };\n        /** Starts the dragging sequence. */\n        DragRef.prototype._startDragSequence = function (event) {\n            // Emit the event on the item before the one on the container.\n            this.started.next({ source: this });\n            if (isTouchEvent(event)) {\n                this._lastTouchEventTime = Date.now();\n            }\n            this._toggleNativeDragInteractions();\n            if (this._dropContainer) {\n                var element = this._rootElement;\n                var parent_1 = element.parentNode;\n                var preview = this._preview = this._createPreviewElement();\n                var placeholder = this._placeholder = this._createPlaceholderElement();\n                var anchor = this._anchor = this._anchor || this._document.createComment('');\n                // Insert an anchor node so that we can restore the element's position in the DOM.\n                parent_1.insertBefore(anchor, element);\n                // We move the element out at the end of the body and we make it hidden, because keeping it in\n                // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n                // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n                element.style.display = 'none';\n                this._document.body.appendChild(parent_1.replaceChild(placeholder, element));\n                getPreviewInsertionPoint(this._document).appendChild(preview);\n                this._dropContainer.start();\n                this._initialContainer = this._dropContainer;\n                this._initialIndex = this._dropContainer.getItemIndex(this);\n            }\n            else {\n                this._initialContainer = this._initialIndex = undefined;\n            }\n        };\n        /**\n         * Sets up the different variables and subscriptions\n         * that will be necessary for the dragging sequence.\n         * @param referenceElement Element that started the drag sequence.\n         * @param event Browser event object that started the sequence.\n         */\n        DragRef.prototype._initializeDragSequence = function (referenceElement, event) {\n            var _this = this;\n            // Always stop propagation for the event that initializes\n            // the dragging sequence, in order to prevent it from potentially\n            // starting another sequence for a draggable parent somewhere up the DOM tree.\n            event.stopPropagation();\n            var isDragging = this.isDragging();\n            var isTouchSequence = isTouchEvent(event);\n            var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n            var rootElement = this._rootElement;\n            var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n                this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n            // If the event started from an element with the native HTML drag&drop, it'll interfere\n            // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n            // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n            // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n            // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n            // events from firing on touch devices.\n            if (event.target && event.target.draggable && event.type === 'mousedown') {\n                event.preventDefault();\n            }\n            // Abort if the user is already dragging or is using a mouse button other than the primary one.\n            if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n                return;\n            }\n            // If we've got handles, we need to disable the tap highlight on the entire root element,\n            // otherwise iOS will still add it, even though all the drag interactions on the handle\n            // are disabled.\n            if (this._handles.length) {\n                this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n                rootElement.style.webkitTapHighlightColor = 'transparent';\n            }\n            this._hasStartedDragging = this._hasMoved = false;\n            // Avoid multiple subscriptions and memory leaks when multi touch\n            // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n            this._removeSubscriptions();\n            this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n            this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n            this._scrollSubscription = this._dragDropRegistry.scroll.pipe(operators.startWith(null)).subscribe(function () {\n                _this._scrollPosition = _this._viewportRuler.getViewportScrollPosition();\n            });\n            if (this._boundaryElement) {\n                this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n            }\n            // If we have a custom preview template, the element won't be visible anyway so we avoid the\n            // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n            this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n                { x: 0, y: 0 } :\n                this._getPointerPositionInElement(referenceElement, event);\n            var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n            this._pointerDirectionDelta = { x: 0, y: 0 };\n            this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n            this._dragStartTime = Date.now();\n            this._dragDropRegistry.startDragging(this, event);\n        };\n        /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n        DragRef.prototype._cleanupDragArtifacts = function (event) {\n            var _this = this;\n            // Restore the element's visibility and insert it at its old position in the DOM.\n            // It's important that we maintain the position, because moving the element around in the DOM\n            // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n            // while moving the existing elements in all other cases.\n            this._rootElement.style.display = '';\n            this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n            this._destroyPreview();\n            this._destroyPlaceholder();\n            this._boundaryRect = this._previewRect = undefined;\n            // Re-enter the NgZone since we bound `document` events on the outside.\n            this._ngZone.run(function () {\n                var container = _this._dropContainer;\n                var currentIndex = container.getItemIndex(_this);\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));\n                var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n                _this.ended.next({ source: _this, distance: distance });\n                _this.dropped.next({\n                    item: _this,\n                    currentIndex: currentIndex,\n                    previousIndex: _this._initialIndex,\n                    container: container,\n                    previousContainer: _this._initialContainer,\n                    isPointerOverContainer: isPointerOverContainer,\n                    distance: distance\n                });\n                container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance, _this._initialIndex);\n                _this._dropContainer = _this._initialContainer;\n            });\n        };\n        /**\n         * Updates the item's position in its drop container, or moves it\n         * into a new one, depending on its current drag position.\n         */\n        DragRef.prototype._updateActiveDropContainer = function (_a) {\n            var _this = this;\n            var x = _a.x, y = _a.y;\n            // Drop container that draggable has been moved into.\n            var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n            // If we couldn't find a new container to move the item into, and the item has left its\n            // initial container, check whether the it's over the initial container. This handles the\n            // case where two containers are connected one way and the user tries to undo dragging an\n            // item into a new container.\n            if (!newContainer && this._dropContainer !== this._initialContainer &&\n                this._initialContainer._isOverContainer(x, y)) {\n                newContainer = this._initialContainer;\n            }\n            if (newContainer && newContainer !== this._dropContainer) {\n                this._ngZone.run(function () {\n                    // Notify the old container that the item has left.\n                    _this.exited.next({ item: _this, container: _this._dropContainer });\n                    _this._dropContainer.exit(_this);\n                    // Notify the new container that the item has entered.\n                    _this._dropContainer = newContainer;\n                    _this._dropContainer.enter(_this, x, y, \n                    // If we're re-entering the initial container,\n                    // put item the into its starting index to begin with.\n                    newContainer === _this._initialContainer ? _this._initialIndex : undefined);\n                    _this.entered.next({\n                        item: _this,\n                        container: newContainer,\n                        currentIndex: newContainer.getItemIndex(_this)\n                    });\n                });\n            }\n            this._dropContainer._startScrollingIfNecessary(x, y);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._preview.style.transform =\n                getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        };\n        /**\n         * Creates the element that will be rendered next to the user's pointer\n         * and will be used as a preview of the element that is being dragged.\n         */\n        DragRef.prototype._createPreviewElement = function () {\n            var previewConfig = this._previewTemplate;\n            var previewClass = this.previewClass;\n            var previewTemplate = previewConfig ? previewConfig.template : null;\n            var preview;\n            if (previewTemplate) {\n                var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n                preview = getRootNode(viewRef, this._document);\n                this._previewRef = viewRef;\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n            else {\n                var element = this._rootElement;\n                var elementRect = element.getBoundingClientRect();\n                preview = deepCloneNode(element);\n                preview.style.width = elementRect.width + \"px\";\n                preview.style.height = elementRect.height + \"px\";\n                preview.style.transform = getTransform(elementRect.left, elementRect.top);\n            }\n            extendStyles(preview.style, {\n                // It's important that we disable the pointer events on the preview, because\n                // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n                pointerEvents: 'none',\n                // We have to reset the margin, because it can throw off positioning relative to the viewport.\n                margin: '0',\n                position: 'fixed',\n                top: '0',\n                left: '0',\n                zIndex: '1000'\n            });\n            toggleNativeDragInteractions(preview, false);\n            preview.classList.add('cdk-drag-preview');\n            preview.setAttribute('dir', this._direction);\n            if (previewClass) {\n                if (Array.isArray(previewClass)) {\n                    previewClass.forEach(function (className) { return preview.classList.add(className); });\n                }\n                else {\n                    preview.classList.add(previewClass);\n                }\n            }\n            return preview;\n        };\n        /**\n         * Animates the preview element from its current position to the location of the drop placeholder.\n         * @returns Promise that resolves when the animation completes.\n         */\n        DragRef.prototype._animatePreviewToPlaceholder = function () {\n            var _this = this;\n            // If the user hasn't moved yet, the transitionend event won't fire.\n            if (!this._hasMoved) {\n                return Promise.resolve();\n            }\n            var placeholderRect = this._placeholder.getBoundingClientRect();\n            // Apply the class that adds a transition to the preview.\n            this._preview.classList.add('cdk-drag-animating');\n            // Move the preview to the placeholder position.\n            this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n            // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n            // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n            // apply its style, we take advantage of the available info to figure out whether we need to\n            // bind the event in the first place.\n            var duration = getTransformTransitionDurationInMs(this._preview);\n            if (duration === 0) {\n                return Promise.resolve();\n            }\n            return this._ngZone.runOutsideAngular(function () {\n                return new Promise(function (resolve) {\n                    var handler = (function (event) {\n                        if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                            _this._preview.removeEventListener('transitionend', handler);\n                            resolve();\n                            clearTimeout(timeout);\n                        }\n                    });\n                    // If a transition is short enough, the browser might not fire the `transitionend` event.\n                    // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                    // fire if the transition hasn't completed when it was supposed to.\n                    var timeout = setTimeout(handler, duration * 1.5);\n                    _this._preview.addEventListener('transitionend', handler);\n                });\n            });\n        };\n        /** Creates an element that will be shown instead of the current element while dragging. */\n        DragRef.prototype._createPlaceholderElement = function () {\n            var placeholderConfig = this._placeholderTemplate;\n            var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n            var placeholder;\n            if (placeholderTemplate) {\n                this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n                placeholder = getRootNode(this._placeholderRef, this._document);\n            }\n            else {\n                placeholder = deepCloneNode(this._rootElement);\n            }\n            placeholder.classList.add('cdk-drag-placeholder');\n            return placeholder;\n        };\n        /**\n         * Figures out the coordinates at which an element was picked up.\n         * @param referenceElement Element that initiated the dragging.\n         * @param event Event that initiated the dragging.\n         */\n        DragRef.prototype._getPointerPositionInElement = function (referenceElement, event) {\n            var elementRect = this._rootElement.getBoundingClientRect();\n            var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n            var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n            var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n            var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n            var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n            return {\n                x: referenceRect.left - elementRect.left + x,\n                y: referenceRect.top - elementRect.top + y\n            };\n        };\n        /** Determines the point of the page that was touched by the user. */\n        DragRef.prototype._getPointerPositionOnPage = function (event) {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n            return {\n                x: point.pageX - this._scrollPosition.left,\n                y: point.pageY - this._scrollPosition.top\n            };\n        };\n        /** Gets the pointer position on the page, accounting for any position constraints. */\n        DragRef.prototype._getConstrainedPointerPosition = function (event) {\n            var point = this._getPointerPositionOnPage(event);\n            var constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n            var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n            if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n                constrainedPoint.y = this._pickupPositionOnPage.y;\n            }\n            else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n                constrainedPoint.x = this._pickupPositionOnPage.x;\n            }\n            if (this._boundaryRect) {\n                var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n                var boundaryRect = this._boundaryRect;\n                var previewRect = this._previewRect;\n                var minY = boundaryRect.top + pickupY;\n                var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n                var minX = boundaryRect.left + pickupX;\n                var maxX = boundaryRect.right - (previewRect.width - pickupX);\n                constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n                constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n            }\n            return constrainedPoint;\n        };\n        /** Updates the current drag delta, based on the user's current pointer position on the page. */\n        DragRef.prototype._updatePointerDirectionDelta = function (pointerPositionOnPage) {\n            var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n            var delta = this._pointerDirectionDelta;\n            var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n            // Amount of pixels the user has dragged since the last time the direction changed.\n            var changeX = Math.abs(x - positionSinceLastChange.x);\n            var changeY = Math.abs(y - positionSinceLastChange.y);\n            // Because we handle pointer events on a per-pixel basis, we don't want the delta\n            // to change for every pixel, otherwise anything that depends on it can look erratic.\n            // To make the delta more consistent, we track how much the user has moved since the last\n            // delta change and we only update it after it has reached a certain threshold.\n            if (changeX > this._config.pointerDirectionChangeThreshold) {\n                delta.x = x > positionSinceLastChange.x ? 1 : -1;\n                positionSinceLastChange.x = x;\n            }\n            if (changeY > this._config.pointerDirectionChangeThreshold) {\n                delta.y = y > positionSinceLastChange.y ? 1 : -1;\n                positionSinceLastChange.y = y;\n            }\n            return delta;\n        };\n        /** Toggles the native drag interactions, based on how many handles are registered. */\n        DragRef.prototype._toggleNativeDragInteractions = function () {\n            if (!this._rootElement || !this._handles) {\n                return;\n            }\n            var shouldEnable = this._handles.length > 0 || !this.isDragging();\n            if (shouldEnable !== this._nativeInteractionsEnabled) {\n                this._nativeInteractionsEnabled = shouldEnable;\n                toggleNativeDragInteractions(this._rootElement, shouldEnable);\n            }\n        };\n        /** Removes the manually-added event listeners from the root element. */\n        DragRef.prototype._removeRootElementListeners = function (element) {\n            element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n            element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        };\n        /**\n         * Applies a `transform` to the root element, taking into account any existing transforms on it.\n         * @param x New transform value along the X axis.\n         * @param y New transform value along the Y axis.\n         */\n        DragRef.prototype._applyRootElementTransform = function (x, y) {\n            var transform = getTransform(x, y);\n            // Cache the previous transform amount only after the first drag sequence, because\n            // we don't want our own transforms to stack on top of each other.\n            if (this._initialTransform == null) {\n                this._initialTransform = this._rootElement.style.transform || '';\n            }\n            // Preserve the previous `transform` value, if there was one. Note that we apply our own\n            // transform before the user's, because things like rotation can affect which direction\n            // the element will be translated towards.\n            this._rootElement.style.transform = this._initialTransform ?\n                transform + ' ' + this._initialTransform : transform;\n        };\n        /**\n         * Gets the distance that the user has dragged during the current drag sequence.\n         * @param currentPosition Current position of the user's pointer.\n         */\n        DragRef.prototype._getDragDistance = function (currentPosition) {\n            var pickupPosition = this._pickupPositionOnPage;\n            if (pickupPosition) {\n                return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n            }\n            return { x: 0, y: 0 };\n        };\n        /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n        DragRef.prototype._cleanupCachedDimensions = function () {\n            this._boundaryRect = this._previewRect = undefined;\n        };\n        /**\n         * Checks whether the element is still inside its boundary after the viewport has been resized.\n         * If not, the position is adjusted so that the element fits again.\n         */\n        DragRef.prototype._containInsideBoundaryOnResize = function () {\n            var _a = this._passiveTransform, x = _a.x, y = _a.y;\n            if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n                return;\n            }\n            var boundaryRect = this._boundaryElement.getBoundingClientRect();\n            var elementRect = this._rootElement.getBoundingClientRect();\n            // It's possible that the element got hidden away after dragging (e.g. by switching to a\n            // different tab). Don't do anything in this case so we don't clear the user's position.\n            if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n                (elementRect.width === 0 && elementRect.height === 0)) {\n                return;\n            }\n            var leftOverflow = boundaryRect.left - elementRect.left;\n            var rightOverflow = elementRect.right - boundaryRect.right;\n            var topOverflow = boundaryRect.top - elementRect.top;\n            var bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n            // If the element has become wider than the boundary, we can't\n            // do much to make it fit so we just anchor it to the left.\n            if (boundaryRect.width > elementRect.width) {\n                if (leftOverflow > 0) {\n                    x += leftOverflow;\n                }\n                if (rightOverflow > 0) {\n                    x -= rightOverflow;\n                }\n            }\n            else {\n                x = 0;\n            }\n            // If the element has become taller than the boundary, we can't\n            // do much to make it fit so we just anchor it to the top.\n            if (boundaryRect.height > elementRect.height) {\n                if (topOverflow > 0) {\n                    y += topOverflow;\n                }\n                if (bottomOverflow > 0) {\n                    y -= bottomOverflow;\n                }\n            }\n            else {\n                y = 0;\n            }\n            if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n                this.setFreeDragPosition({ y: y, x: x });\n            }\n        };\n        /** Gets the drag start delay, based on the event type. */\n        DragRef.prototype._getDragStartDelay = function (event) {\n            var value = this.dragStartDelay;\n            if (typeof value === 'number') {\n                return value;\n            }\n            else if (isTouchEvent(event)) {\n                return value.touch;\n            }\n            return value ? value.mouse : 0;\n        };\n        return DragRef;\n    }());\n    /**\n     * Gets a 3d `transform` that can be applied to an element.\n     * @param x Desired position of the element along the X axis.\n     * @param y Desired position of the element along the Y axis.\n     */\n    function getTransform(x, y) {\n        // Round the transforms since some browsers will\n        // blur the elements for sub-pixel transforms.\n        return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n    }\n    /** Creates a deep clone of an element. */\n    function deepCloneNode(node) {\n        var clone = node.cloneNode(true);\n        var descendantsWithId = clone.querySelectorAll('[id]');\n        var descendantCanvases = node.querySelectorAll('canvas');\n        // Remove the `id` to avoid having multiple elements with the same id on the page.\n        clone.removeAttribute('id');\n        for (var i = 0; i < descendantsWithId.length; i++) {\n            descendantsWithId[i].removeAttribute('id');\n        }\n        // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n        // We match up the cloned canvas to their sources using their index in the DOM.\n        if (descendantCanvases.length) {\n            var cloneCanvases = clone.querySelectorAll('canvas');\n            for (var i = 0; i < descendantCanvases.length; i++) {\n                var correspondingCloneContext = cloneCanvases[i].getContext('2d');\n                if (correspondingCloneContext) {\n                    correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n                }\n            }\n        }\n        return clone;\n    }\n    /** Clamps a value between a minimum and a maximum. */\n    function clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    /**\n     * Helper to remove a node from the DOM and to do all the necessary null checks.\n     * @param node Node to be removed.\n     */\n    function removeNode(node) {\n        if (node && node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n    /** Determines whether an event is a touch event. */\n    function isTouchEvent(event) {\n        // This function is called for every pixel that the user has dragged so we need it to be\n        // as fast as possible. Since we only bind mouse events and touch events, we can assume\n        // that if the event's name starts with `t`, it's a touch event.\n        return event.type[0] === 't';\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    function getPreviewInsertionPoint(documentRef) {\n        // We can't use the body if the user is in fullscreen mode,\n        // because the preview will render under the fullscreen element.\n        // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n        return documentRef.fullscreenElement ||\n            documentRef.webkitFullscreenElement ||\n            documentRef.mozFullScreenElement ||\n            documentRef.msFullscreenElement ||\n            documentRef.body;\n    }\n    /**\n     * Gets the root HTML element of an embedded view.\n     * If the root is not an HTML element it gets wrapped in one.\n     */\n    function getRootNode(viewRef, _document) {\n        var rootNode = viewRef.rootNodes[0];\n        if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n            var wrapper = _document.createElement('div');\n            wrapper.appendChild(rootNode);\n            return wrapper;\n        }\n        return rootNode;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Moves an item one index in an array to another.\n     * @param array Array in which to move the item.\n     * @param fromIndex Starting index of the item.\n     * @param toIndex Index to which the item should be moved.\n     */\n    function moveItemInArray(array, fromIndex, toIndex) {\n        var from = clamp$1(fromIndex, array.length - 1);\n        var to = clamp$1(toIndex, array.length - 1);\n        if (from === to) {\n            return;\n        }\n        var target = array[from];\n        var delta = to < from ? -1 : 1;\n        for (var i = from; i !== to; i += delta) {\n            array[i] = array[i + delta];\n        }\n        array[to] = target;\n    }\n    /**\n     * Moves an item from one array to another.\n     * @param currentArray Array from which to transfer the item.\n     * @param targetArray Array into which to put the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     */\n    function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var from = clamp$1(currentIndex, currentArray.length - 1);\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n        }\n    }\n    /**\n     * Copies an item from one array to another, leaving it in its\n     * original position in current array.\n     * @param currentArray Array from which to copy the item.\n     * @param targetArray Array into which is copy the item.\n     * @param currentIndex Index of the item in its current array.\n     * @param targetIndex Index at which to insert the item.\n     *\n     */\n    function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n        var to = clamp$1(targetIndex, targetArray.length);\n        if (currentArray.length) {\n            targetArray.splice(to, 0, currentArray[currentIndex]);\n        }\n    }\n    /** Clamps a number between zero and a maximum. */\n    function clamp$1(value, max) {\n        return Math.max(0, Math.min(max, value));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Proximity, as a ratio to width/height, at which a\n     * dragged item will affect the drop container.\n     */\n    var DROP_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n     * viewport. The value comes from trying it out manually until it feels right.\n     */\n    var SCROLL_PROXIMITY_THRESHOLD = 0.05;\n    /**\n     * Number of pixels to scroll for each frame when auto-scrolling an element.\n     * The value comes from trying it out manually until it feels right.\n     */\n    var AUTO_SCROLL_STEP = 2;\n    /**\n     * Reference to a drop list. Used to manipulate or dispose of the container.\n     */\n    var DropListRef = /** @class */ (function () {\n        function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n            var _this = this;\n            this._dragDropRegistry = _dragDropRegistry;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            /** Whether starting a dragging sequence from this container is disabled. */\n            this.disabled = false;\n            /** Whether sorting items within the list is disabled. */\n            this.sortingDisabled = false;\n            /**\n             * Whether auto-scrolling the view when the user\n             * moves their pointer close to the edges is disabled.\n             */\n            this.autoScrollDisabled = false;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits right before dragging has started. */\n            this.beforeStarted = new rxjs.Subject();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new rxjs.Subject();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new rxjs.Subject();\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new rxjs.Subject();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new rxjs.Subject();\n            /** Whether an item in the list is being dragged. */\n            this._isDragging = false;\n            /** Cache of the dimensions of all the items inside the container. */\n            this._itemPositions = [];\n            /** Cached positions of the scrollable parent elements. */\n            this._parentPositions = new Map();\n            /**\n             * Keeps track of the item that was last swapped with the dragged item, as\n             * well as what direction the pointer was moving in when the swap occured.\n             */\n            this._previousSwap = { drag: null, delta: 0 };\n            /** Drop lists that are connected to the current one. */\n            this._siblings = [];\n            /** Direction in which the list is oriented. */\n            this._orientation = 'vertical';\n            /** Connected siblings that currently have a dragged item. */\n            this._activeSiblings = new Set();\n            /** Layout direction of the drop list. */\n            this._direction = 'ltr';\n            /** Subscription to the window being scrolled. */\n            this._viewportScrollSubscription = rxjs.Subscription.EMPTY;\n            /** Vertical direction in which the list is currently scrolling. */\n            this._verticalScrollDirection = 0 /* NONE */;\n            /** Horizontal direction in which the list is currently scrolling. */\n            this._horizontalScrollDirection = 0 /* NONE */;\n            /** Used to signal to the current auto-scroll sequence when to stop. */\n            this._stopScrollTimers = new rxjs.Subject();\n            /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n            this._cachedShadowRoot = null;\n            /** Starts the interval that'll auto-scroll the element. */\n            this._startScrollInterval = function () {\n                _this._stopScrolling();\n                rxjs.interval(0, rxjs.animationFrameScheduler)\n                    .pipe(operators.takeUntil(_this._stopScrollTimers))\n                    .subscribe(function () {\n                    var node = _this._scrollNode;\n                    if (_this._verticalScrollDirection === 1 /* UP */) {\n                        incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._verticalScrollDirection === 2 /* DOWN */) {\n                        incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                    if (_this._horizontalScrollDirection === 1 /* LEFT */) {\n                        incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                    }\n                    else if (_this._horizontalScrollDirection === 2 /* RIGHT */) {\n                        incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                    }\n                });\n            };\n            this.element = coercion.coerceElement(element);\n            this._document = _document;\n            this.withScrollableParents([this.element]);\n            _dragDropRegistry.registerDropContainer(this);\n        }\n        /** Removes the drop list functionality from the DOM element. */\n        DropListRef.prototype.dispose = function () {\n            this._stopScrolling();\n            this._stopScrollTimers.complete();\n            this._viewportScrollSubscription.unsubscribe();\n            this.beforeStarted.complete();\n            this.entered.complete();\n            this.exited.complete();\n            this.dropped.complete();\n            this.sorted.complete();\n            this._activeSiblings.clear();\n            this._scrollNode = null;\n            this._parentPositions.clear();\n            this._dragDropRegistry.removeDropContainer(this);\n        };\n        /** Whether an item from this list is currently being dragged. */\n        DropListRef.prototype.isDragging = function () {\n            return this._isDragging;\n        };\n        /** Starts dragging an item. */\n        DropListRef.prototype.start = function () {\n            var _this = this;\n            var styles = coercion.coerceElement(this.element).style;\n            this.beforeStarted.next();\n            this._isDragging = true;\n            // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n            // scrolling. The browser seems to round the value based on the snapping points which means\n            // that we can't increment/decrement the scroll position.\n            this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n            styles.scrollSnapType = styles.msScrollSnapType = 'none';\n            this._cacheItems();\n            this._siblings.forEach(function (sibling) { return sibling._startReceiving(_this); });\n            this._viewportScrollSubscription.unsubscribe();\n            this._listenToScrollEvents();\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param index Index at which the item entered. If omitted, the container will try to figure it\n         *   out automatically.\n         */\n        DropListRef.prototype.enter = function (item, pointerX, pointerY, index) {\n            this.start();\n            // If sorting is disabled, we want the item to return to its starting\n            // position if the user is returning it to its initial container.\n            var newIndex;\n            if (index == null) {\n                newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n                if (newIndex === -1) {\n                    // We use the coordinates of where the item entered the drop\n                    // zone to figure out at which index it should be inserted.\n                    newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n                }\n            }\n            else {\n                newIndex = index;\n            }\n            var activeDraggables = this._activeDraggables;\n            var currentIndex = activeDraggables.indexOf(item);\n            var placeholder = item.getPlaceholderElement();\n            var newPositionReference = activeDraggables[newIndex];\n            // If the item at the new position is the same as the item that is being dragged,\n            // it means that we're trying to restore the item to its initial position. In this\n            // case we should use the next item from the list as the reference.\n            if (newPositionReference === item) {\n                newPositionReference = activeDraggables[newIndex + 1];\n            }\n            // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n            // into another container and back again), we have to ensure that it isn't duplicated.\n            if (currentIndex > -1) {\n                activeDraggables.splice(currentIndex, 1);\n            }\n            // Don't use items that are being dragged as a reference, because\n            // their element has been moved down to the bottom of the body.\n            if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n                var element = newPositionReference.getRootElement();\n                element.parentElement.insertBefore(placeholder, element);\n                activeDraggables.splice(newIndex, 0, item);\n            }\n            else {\n                coercion.coerceElement(this.element).appendChild(placeholder);\n                activeDraggables.push(item);\n            }\n            // The transform needs to be cleared so it doesn't throw off the measurements.\n            placeholder.style.transform = '';\n            // Note that the positions were already cached when we called `start` above,\n            // but we need to refresh them since the amount of items has changed.\n            this._cacheItemPositions();\n            this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         */\n        DropListRef.prototype.exit = function (item) {\n            this._reset();\n            this.exited.next({ item: item, container: this });\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         * @param distance Distance the user has dragged since the start of the dragging sequence.\n         * @param previousIndex Index of the item when dragging started.\n         *\n         * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n         */\n        DropListRef.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n            this._reset();\n            // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n            if (previousIndex == null) {\n                previousIndex = previousContainer.getItemIndex(item);\n            }\n            this.dropped.next({ item: item,\n                currentIndex: currentIndex,\n                previousIndex: previousIndex,\n                container: this,\n                previousContainer: previousContainer,\n                isPointerOverContainer: isPointerOverContainer,\n                distance: distance\n            });\n        };\n        /**\n         * Sets the draggable items that are a part of this list.\n         * @param items Items that are a part of this list.\n         */\n        DropListRef.prototype.withItems = function (items) {\n            var _this = this;\n            this._draggables = items;\n            items.forEach(function (item) { return item._withDropContainer(_this); });\n            if (this.isDragging()) {\n                this._cacheItems();\n            }\n            return this;\n        };\n        /** Sets the layout direction of the drop list. */\n        DropListRef.prototype.withDirection = function (direction) {\n            this._direction = direction;\n            return this;\n        };\n        /**\n         * Sets the containers that are connected to this one. When two or more containers are\n         * connected, the user will be allowed to transfer items between them.\n         * @param connectedTo Other containers that the current containers should be connected to.\n         */\n        DropListRef.prototype.connectedTo = function (connectedTo) {\n            this._siblings = connectedTo.slice();\n            return this;\n        };\n        /**\n         * Sets the orientation of the container.\n         * @param orientation New orientation for the container.\n         */\n        DropListRef.prototype.withOrientation = function (orientation) {\n            this._orientation = orientation;\n            return this;\n        };\n        /**\n         * Sets which parent elements are can be scrolled while the user is dragging.\n         * @param elements Elements that can be scrolled.\n         */\n        DropListRef.prototype.withScrollableParents = function (elements) {\n            var element = coercion.coerceElement(this.element);\n            // We always allow the current element to be scrollable\n            // so we need to ensure that it's in the array.\n            this._scrollableElements =\n                elements.indexOf(element) === -1 ? tslib.__spread([element], elements) : elements.slice();\n            return this;\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         */\n        DropListRef.prototype.getItemIndex = function (item) {\n            if (!this._isDragging) {\n                return this._draggables.indexOf(item);\n            }\n            // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n            // The rest of the logic still stands no matter what orientation we're in, however\n            // we need to invert the array when determining the index.\n            var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n                this._itemPositions.slice().reverse() : this._itemPositions;\n            return findIndex(items, function (currentItem) { return currentItem.drag === item; });\n        };\n        /**\n         * Whether the list is able to receive the item that\n         * is currently being dragged inside a connected drop list.\n         */\n        DropListRef.prototype.isReceiving = function () {\n            return this._activeSiblings.size > 0;\n        };\n        /**\n         * Sorts an item inside the container based on its position.\n         * @param item Item to be sorted.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @param pointerDelta Direction in which the pointer is moving along each axis.\n         */\n        DropListRef.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {\n            // Don't sort the item if sorting is disabled or it's out of range.\n            if (this.sortingDisabled || !isPointerNearClientRect(this._clientRect, pointerX, pointerY)) {\n                return;\n            }\n            var siblings = this._itemPositions;\n            var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n            if (newIndex === -1 && siblings.length > 0) {\n                return;\n            }\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentIndex = findIndex(siblings, function (currentItem) { return currentItem.drag === item; });\n            var siblingAtNewPosition = siblings[newIndex];\n            var currentPosition = siblings[currentIndex].clientRect;\n            var newPosition = siblingAtNewPosition.clientRect;\n            var delta = currentIndex > newIndex ? 1 : -1;\n            this._previousSwap.drag = siblingAtNewPosition.drag;\n            this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n            // How many pixels the item's placeholder should be offset.\n            var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n            // How many pixels all the other items should be offset.\n            var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n            // Save the previous order of the items before moving the item to its new index.\n            // We use this to check whether an item has been moved as a result of the sorting.\n            var oldOrder = siblings.slice();\n            // Shuffle the array in place.\n            moveItemInArray(siblings, currentIndex, newIndex);\n            this.sorted.next({\n                previousIndex: currentIndex,\n                currentIndex: newIndex,\n                container: this,\n                item: item\n            });\n            siblings.forEach(function (sibling, index) {\n                // Don't do anything if the position hasn't changed.\n                if (oldOrder[index] === sibling) {\n                    return;\n                }\n                var isDraggedItem = sibling.drag === item;\n                var offset = isDraggedItem ? itemOffset : siblingOffset;\n                var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                    sibling.drag.getRootElement();\n                // Update the offset to reflect the new position.\n                sibling.offset += offset;\n                // Since we're moving the items with a `transform`, we need to adjust their cached\n                // client rects to reflect their new position, as well as swap their positions in the cache.\n                // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n                // elements may be mid-animation which will give us a wrong result.\n                if (isHorizontal) {\n                    // Round the transforms since some browsers will\n                    // blur the elements, for sub-pixel transforms.\n                    elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                    adjustClientRect(sibling.clientRect, 0, offset);\n                }\n                else {\n                    elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                    adjustClientRect(sibling.clientRect, offset, 0);\n                }\n            });\n        };\n        /**\n         * Checks whether the user's pointer is close to the edges of either the\n         * viewport or the drop list and starts the auto-scroll sequence.\n         * @param pointerX User's pointer position along the x axis.\n         * @param pointerY User's pointer position along the y axis.\n         */\n        DropListRef.prototype._startScrollingIfNecessary = function (pointerX, pointerY) {\n            var _this = this;\n            if (this.autoScrollDisabled) {\n                return;\n            }\n            var scrollNode;\n            var verticalScrollDirection = 0 /* NONE */;\n            var horizontalScrollDirection = 0 /* NONE */;\n            // Check whether we should start scrolling any of the parent containers.\n            this._parentPositions.forEach(function (position, element) {\n                var _a;\n                // We have special handling for the `document` below. Also this would be\n                // nicer with a  for...of loop, but it requires changing a compiler flag.\n                if (element === _this._document || !position.clientRect || scrollNode) {\n                    return;\n                }\n                if (isPointerNearClientRect(position.clientRect, pointerX, pointerY)) {\n                    _a = tslib.__read(getElementScrollDirections(element, position.clientRect, pointerX, pointerY), 2), verticalScrollDirection = _a[0], horizontalScrollDirection = _a[1];\n                    if (verticalScrollDirection || horizontalScrollDirection) {\n                        scrollNode = element;\n                    }\n                }\n            });\n            // Otherwise check if we can start scrolling the viewport.\n            if (!verticalScrollDirection && !horizontalScrollDirection) {\n                var _a = this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                var clientRect = { width: width, height: height, top: 0, right: width, bottom: height, left: 0 };\n                verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n                horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n                scrollNode = window;\n            }\n            if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n                this._verticalScrollDirection = verticalScrollDirection;\n                this._horizontalScrollDirection = horizontalScrollDirection;\n                this._scrollNode = scrollNode;\n                if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._stopScrolling();\n                }\n            }\n        };\n        /** Stops any currently-running auto-scroll sequences. */\n        DropListRef.prototype._stopScrolling = function () {\n            this._stopScrollTimers.next();\n        };\n        /** Caches the positions of the configured scrollable parents. */\n        DropListRef.prototype._cacheParentPositions = function () {\n            var _this = this;\n            this._parentPositions.clear();\n            this._parentPositions.set(this._document, {\n                scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n            });\n            this._scrollableElements.forEach(function (element) {\n                var clientRect = getMutableClientRect(element);\n                // We keep the ClientRect cached in two properties, because it's referenced in a lot of\n                // performance-sensitive places and we want to avoid the extra lookups. The `element` is\n                // guaranteed to always be in the `_scrollableElements` so this should always match.\n                if (element === _this.element) {\n                    _this._clientRect = clientRect;\n                }\n                _this._parentPositions.set(element, {\n                    scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                    clientRect: clientRect\n                });\n            });\n        };\n        /** Refreshes the position cache of the items and sibling containers. */\n        DropListRef.prototype._cacheItemPositions = function () {\n            var isHorizontal = this._orientation === 'horizontal';\n            this._itemPositions = this._activeDraggables.map(function (drag) {\n                var elementToMeasure = drag.getVisibleElement();\n                return { drag: drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n            }).sort(function (a, b) {\n                return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                    a.clientRect.top - b.clientRect.top;\n            });\n        };\n        /** Resets the container to its initial state. */\n        DropListRef.prototype._reset = function () {\n            var _this = this;\n            this._isDragging = false;\n            var styles = coercion.coerceElement(this.element).style;\n            styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n            // TODO(crisbeto): may have to wait for the animations to finish.\n            this._activeDraggables.forEach(function (item) { return item.getRootElement().style.transform = ''; });\n            this._siblings.forEach(function (sibling) { return sibling._stopReceiving(_this); });\n            this._activeDraggables = [];\n            this._itemPositions = [];\n            this._previousSwap.drag = null;\n            this._previousSwap.delta = 0;\n            this._stopScrolling();\n            this._viewportScrollSubscription.unsubscribe();\n            this._parentPositions.clear();\n        };\n        /**\n         * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n         * @param currentIndex Index of the item currently being dragged.\n         * @param siblings All of the items in the list.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getSiblingOffsetPx = function (currentIndex, siblings, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var currentPosition = siblings[currentIndex].clientRect;\n            var immediateSibling = siblings[currentIndex + delta * -1];\n            var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n            if (immediateSibling) {\n                var start = isHorizontal ? 'left' : 'top';\n                var end = isHorizontal ? 'right' : 'bottom';\n                // Get the spacing between the start of the current item and the end of the one immediately\n                // after it in the direction in which the user is dragging, or vice versa. We add it to the\n                // offset in order to push the element to where it will be when it's inline and is influenced\n                // by the `margin` of its siblings.\n                if (delta === -1) {\n                    siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n                }\n                else {\n                    siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n                }\n            }\n            return siblingOffset;\n        };\n        /**\n         * Gets the offset in pixels by which the item that is being dragged should be moved.\n         * @param currentPosition Current position of the item.\n         * @param newPosition Position of the item where the current item should be moved.\n         * @param delta Direction in which the user is moving.\n         */\n        DropListRef.prototype._getItemOffsetPx = function (currentPosition, newPosition, delta) {\n            var isHorizontal = this._orientation === 'horizontal';\n            var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                newPosition.top - currentPosition.top;\n            // Account for differences in the item width/height.\n            if (delta === -1) {\n                itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                    newPosition.height - currentPosition.height;\n            }\n            return itemOffset;\n        };\n        /**\n         * Gets the index of an item in the drop container, based on the position of the user's pointer.\n         * @param item Item that is being sorted.\n         * @param pointerX Position of the user's pointer along the X axis.\n         * @param pointerY Position of the user's pointer along the Y axis.\n         * @param delta Direction in which the user is moving their pointer.\n         */\n        DropListRef.prototype._getItemIndexFromPointerPosition = function (item, pointerX, pointerY, delta) {\n            var _this = this;\n            var isHorizontal = this._orientation === 'horizontal';\n            return findIndex(this._itemPositions, function (_a, _, array) {\n                var drag = _a.drag, clientRect = _a.clientRect;\n                if (drag === item) {\n                    // If there's only one item left in the container, it must be\n                    // the dragged item itself so we use it as a reference.\n                    return array.length < 2;\n                }\n                if (delta) {\n                    var direction = isHorizontal ? delta.x : delta.y;\n                    // If the user is still hovering over the same item as last time, and they didn't change\n                    // the direction in which they're dragging, we don't consider it a direction swap.\n                    if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                        return false;\n                    }\n                }\n                return isHorizontal ?\n                    // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                    pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n            });\n        };\n        /** Caches the current items in the list and their positions. */\n        DropListRef.prototype._cacheItems = function () {\n            this._activeDraggables = this._draggables.slice();\n            this._cacheItemPositions();\n            this._cacheParentPositions();\n        };\n        /**\n         * Updates the internal state of the container after a scroll event has happened.\n         * @param scrolledParent Element that was scrolled.\n         * @param newTop New top scroll position.\n         * @param newLeft New left scroll position.\n         */\n        DropListRef.prototype._updateAfterScroll = function (scrolledParent, newTop, newLeft) {\n            var _this = this;\n            var scrollPosition = this._parentPositions.get(scrolledParent).scrollPosition;\n            var topDifference = scrollPosition.top - newTop;\n            var leftDifference = scrollPosition.left - newLeft;\n            // Go through and update the cached positions of the scroll\n            // parents that are inside the element that was scrolled.\n            this._parentPositions.forEach(function (position, node) {\n                if (position.clientRect && scrolledParent !== node && scrolledParent.contains(node)) {\n                    adjustClientRect(position.clientRect, topDifference, leftDifference);\n                }\n            });\n            // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n            // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n            // behavior where we might be measuring the element before its position has changed.\n            this._itemPositions.forEach(function (_a) {\n                var clientRect = _a.clientRect;\n                adjustClientRect(clientRect, topDifference, leftDifference);\n            });\n            // We need two loops for this, because we want all of the cached\n            // positions to be up-to-date before we re-sort the item.\n            this._itemPositions.forEach(function (_a) {\n                var drag = _a.drag;\n                if (_this._dragDropRegistry.isDragging(drag)) {\n                    // We need to re-sort the item manually, because the pointer move\n                    // events won't be dispatched while the user is scrolling.\n                    drag._sortFromLastPointerPosition();\n                }\n            });\n            scrollPosition.top = newTop;\n            scrollPosition.left = newLeft;\n        };\n        /**\n         * Checks whether the user's pointer is positioned over the container.\n         * @param x Pointer position along the X axis.\n         * @param y Pointer position along the Y axis.\n         */\n        DropListRef.prototype._isOverContainer = function (x, y) {\n            return isInsideClientRect(this._clientRect, x, y);\n        };\n        /**\n         * Figures out whether an item should be moved into a sibling\n         * drop container, based on its current position.\n         * @param item Drag item that is being moved.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._getSiblingContainerFromPosition = function (item, x, y) {\n            return this._siblings.find(function (sibling) { return sibling._canReceive(item, x, y); });\n        };\n        /**\n         * Checks whether the drop list can receive the passed-in item.\n         * @param item Item that is being dragged into the list.\n         * @param x Position of the item along the X axis.\n         * @param y Position of the item along the Y axis.\n         */\n        DropListRef.prototype._canReceive = function (item, x, y) {\n            if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n                return false;\n            }\n            var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n            // If there's no element at the pointer position, then\n            // the client rect is probably scrolled out of the view.\n            if (!elementFromPoint) {\n                return false;\n            }\n            var nativeElement = coercion.coerceElement(this.element);\n            // The `ClientRect`, that we're using to find the container over which the user is\n            // hovering, doesn't give us any information on whether the element has been scrolled\n            // out of the view or whether it's overlapping with other containers. This means that\n            // we could end up transferring the item into a container that's invisible or is positioned\n            // below another one. We use the result from `elementFromPoint` to get the top-most element\n            // at the pointer position and to find whether it's one of the intersecting drop containers.\n            return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n        };\n        /**\n         * Called by one of the connected drop lists when a dragging sequence has started.\n         * @param sibling Sibling in which dragging has started.\n         */\n        DropListRef.prototype._startReceiving = function (sibling) {\n            var activeSiblings = this._activeSiblings;\n            if (!activeSiblings.has(sibling)) {\n                activeSiblings.add(sibling);\n                this._cacheParentPositions();\n                this._listenToScrollEvents();\n            }\n        };\n        /**\n         * Called by a connected drop list when dragging has stopped.\n         * @param sibling Sibling whose dragging has stopped.\n         */\n        DropListRef.prototype._stopReceiving = function (sibling) {\n            this._activeSiblings.delete(sibling);\n            this._viewportScrollSubscription.unsubscribe();\n        };\n        /**\n         * Starts listening to scroll events on the viewport.\n         * Used for updating the internal state of the list.\n         */\n        DropListRef.prototype._listenToScrollEvents = function () {\n            var _this = this;\n            this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function (event) {\n                if (_this.isDragging()) {\n                    var target = event.target;\n                    var position = _this._parentPositions.get(target);\n                    if (position) {\n                        var newTop = void 0;\n                        var newLeft = void 0;\n                        if (target === _this._document) {\n                            var scrollPosition = _this._viewportRuler.getViewportScrollPosition();\n                            newTop = scrollPosition.top;\n                            newLeft = scrollPosition.left;\n                        }\n                        else {\n                            newTop = target.scrollTop;\n                            newLeft = target.scrollLeft;\n                        }\n                        _this._updateAfterScroll(target, newTop, newLeft);\n                    }\n                }\n                else if (_this.isReceiving()) {\n                    _this._cacheParentPositions();\n                }\n            });\n        };\n        /**\n         * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n         * than saving it in property directly on init, because we want to resolve it as late as possible\n         * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n         * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n         */\n        DropListRef.prototype._getShadowRoot = function () {\n            if (!this._cachedShadowRoot) {\n                this._cachedShadowRoot = getShadowRoot(coercion.coerceElement(this.element)) || this._document;\n            }\n            return this._cachedShadowRoot;\n        };\n        return DropListRef;\n    }());\n    /**\n     * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n     * @param clientRect `ClientRect` that should be updated.\n     * @param top Amount to add to the `top` position.\n     * @param left Amount to add to the `left` position.\n     */\n    function adjustClientRect(clientRect, top, left) {\n        clientRect.top += top;\n        clientRect.bottom = clientRect.top + clientRect.height;\n        clientRect.left += left;\n        clientRect.right = clientRect.left + clientRect.width;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to a ClientRect.\n     * @param rect ClientRect to check against.\n     * @param pointerX Coordinates along the X axis.\n     * @param pointerY Coordinates along the Y axis.\n     */\n    function isPointerNearClientRect(rect, pointerX, pointerY) {\n        var top = rect.top, right = rect.right, bottom = rect.bottom, left = rect.left, width = rect.width, height = rect.height;\n        var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Finds the index of an item that matches a predicate function. Used as an equivalent\n     * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n     * @param array Array in which to look for matches.\n     * @param predicate Function used to determine whether an item is a match.\n     */\n    function findIndex(array, predicate) {\n        for (var i = 0; i < array.length; i++) {\n            if (predicate(array[i], i, array)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Checks whether some coordinates are within a `ClientRect`.\n     * @param clientRect ClientRect that is being checked.\n     * @param x Coordinates along the X axis.\n     * @param y Coordinates along the Y axis.\n     */\n    function isInsideClientRect(clientRect, x, y) {\n        var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n        return y >= top && y <= bottom && x >= left && x <= right;\n    }\n    /** Gets a mutable version of an element's bounding `ClientRect`. */\n    function getMutableClientRect(element) {\n        var clientRect = element.getBoundingClientRect();\n        // We need to clone the `clientRect` here, because all the values on it are readonly\n        // and we need to be able to update them. Also we can't use a spread here, because\n        // the values on a `ClientRect` aren't own properties. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n        return {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n        };\n    }\n    /**\n     * Increments the vertical scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementVerticalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(0, amount);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollTop += amount;\n        }\n    }\n    /**\n     * Increments the horizontal scroll position of a node.\n     * @param node Node whose scroll position should change.\n     * @param amount Amount of pixels that the `node` should be scrolled.\n     */\n    function incrementHorizontalScroll(node, amount) {\n        if (node === window) {\n            node.scrollBy(amount, 0);\n        }\n        else {\n            // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n            node.scrollLeft += amount;\n        }\n    }\n    /**\n     * Gets whether the vertical auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getVerticalScrollDirection(clientRect, pointerY) {\n        var top = clientRect.top, bottom = clientRect.bottom, height = clientRect.height;\n        var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n            return 1 /* UP */;\n        }\n        else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n            return 2 /* DOWN */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets whether the horizontal auto-scroll direction of a node.\n     * @param clientRect Dimensions of the node.\n     * @param pointerX Position of the user's pointer along the x axis.\n     */\n    function getHorizontalScrollDirection(clientRect, pointerX) {\n        var left = clientRect.left, right = clientRect.right, width = clientRect.width;\n        var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n        if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n            return 1 /* LEFT */;\n        }\n        else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n            return 2 /* RIGHT */;\n        }\n        return 0 /* NONE */;\n    }\n    /**\n     * Gets the directions in which an element node should be scrolled,\n     * assuming that the user's pointer is already within it scrollable region.\n     * @param element Element for which we should calculate the scroll direction.\n     * @param clientRect Bounding client rectangle of the element.\n     * @param pointerX Position of the user's pointer along the x axis.\n     * @param pointerY Position of the user's pointer along the y axis.\n     */\n    function getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n        var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n        var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n        var verticalScrollDirection = 0 /* NONE */;\n        var horizontalScrollDirection = 0 /* NONE */;\n        // Note that we here we do some extra checks for whether the element is actually scrollable in\n        // a certain direction and we only assign the scroll direction if it is. We do this so that we\n        // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n        // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n        if (computedVertical) {\n            var scrollTop = element.scrollTop;\n            if (computedVertical === 1 /* UP */) {\n                if (scrollTop > 0) {\n                    verticalScrollDirection = 1 /* UP */;\n                }\n            }\n            else if (element.scrollHeight - scrollTop > element.clientHeight) {\n                verticalScrollDirection = 2 /* DOWN */;\n            }\n        }\n        if (computedHorizontal) {\n            var scrollLeft = element.scrollLeft;\n            if (computedHorizontal === 1 /* LEFT */) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = 1 /* LEFT */;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = 2 /* RIGHT */;\n            }\n        }\n        return [verticalScrollDirection, horizontalScrollDirection];\n    }\n    /** Gets the shadow root of an element, if any. */\n    function getShadowRoot(element) {\n        if (platform._supportsShadowDom()) {\n            var rootNode = element.getRootNode ? element.getRootNode() : null;\n            if (rootNode instanceof ShadowRoot) {\n                return rootNode;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event options that can be used to bind an active, capturing event. */\n    var activeCapturingEventOptions = platform.normalizePassiveListenerOptions({\n        passive: false,\n        capture: true\n    });\n    /**\n     * Service that keeps track of all the drag item and drop container\n     * instances, and manages global event listeners on the `document`.\n     * @docs-private\n     */\n    // Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n    // to avoid circular imports. If we were to reference them here, importing the registry into the\n    // classes that are registering themselves will introduce a circular import.\n    var DragDropRegistry = /** @class */ (function () {\n        function DragDropRegistry(_ngZone, _document) {\n            var _this = this;\n            this._ngZone = _ngZone;\n            /** Registered drop container instances. */\n            this._dropInstances = new Set();\n            /** Registered drag item instances. */\n            this._dragInstances = new Set();\n            /** Drag item instances that are currently being dragged. */\n            this._activeDragInstances = new Set();\n            /** Keeps track of the event listeners that we've bound to the `document`. */\n            this._globalListeners = new Map();\n            /**\n             * Emits the `touchmove` or `mousemove` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerMove = new rxjs.Subject();\n            /**\n             * Emits the `touchend` or `mouseup` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerUp = new rxjs.Subject();\n            /** Emits when the viewport has been scrolled while the user is dragging an item. */\n            this.scroll = new rxjs.Subject();\n            /**\n             * Event listener that will prevent the default browser action while the user is dragging.\n             * @param event Event whose default action should be prevented.\n             */\n            this._preventDefaultWhileDragging = function (event) {\n                if (_this._activeDragInstances.size) {\n                    event.preventDefault();\n                }\n            };\n            this._document = _document;\n        }\n        /** Adds a drop container to the registry. */\n        DragDropRegistry.prototype.registerDropContainer = function (drop) {\n            if (!this._dropInstances.has(drop)) {\n                this._dropInstances.add(drop);\n            }\n        };\n        /** Adds a drag item instance to the registry. */\n        DragDropRegistry.prototype.registerDragItem = function (drag) {\n            var _this = this;\n            this._dragInstances.add(drag);\n            // The `touchmove` event gets bound once, ahead of time, because WebKit\n            // won't preventDefault on a dynamically-added `touchmove` listener.\n            // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n            if (this._dragInstances.size === 1) {\n                this._ngZone.runOutsideAngular(function () {\n                    // The event handler has to be explicitly active,\n                    // because newer browsers make it passive by default.\n                    _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n                });\n            }\n        };\n        /** Removes a drop container from the registry. */\n        DragDropRegistry.prototype.removeDropContainer = function (drop) {\n            this._dropInstances.delete(drop);\n        };\n        /** Removes a drag item instance from the registry. */\n        DragDropRegistry.prototype.removeDragItem = function (drag) {\n            this._dragInstances.delete(drag);\n            this.stopDragging(drag);\n            if (this._dragInstances.size === 0) {\n                this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }\n        };\n        /**\n         * Starts the dragging sequence for a drag instance.\n         * @param drag Drag instance which is being dragged.\n         * @param event Event that initiated the dragging.\n         */\n        DragDropRegistry.prototype.startDragging = function (drag, event) {\n            var _this = this;\n            // Do not process the same drag twice to avoid memory leaks and redundant listeners\n            if (this._activeDragInstances.has(drag)) {\n                return;\n            }\n            this._activeDragInstances.add(drag);\n            if (this._activeDragInstances.size === 1) {\n                var isTouchEvent = event.type.startsWith('touch');\n                var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n                var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n                // We explicitly bind __active__ listeners here, because newer browsers will default to\n                // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n                // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n                this._globalListeners\n                    .set(moveEvent, {\n                    handler: function (e) { return _this.pointerMove.next(e); },\n                    options: activeCapturingEventOptions\n                })\n                    .set(upEvent, {\n                    handler: function (e) { return _this.pointerUp.next(e); },\n                    options: true\n                })\n                    .set('scroll', {\n                    handler: function (e) { return _this.scroll.next(e); },\n                    // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                    // the document. See https://github.com/angular/components/issues/17144.\n                    options: true\n                })\n                    // Preventing the default action on `mousemove` isn't enough to disable text selection\n                    // on Safari so we need to prevent the selection event as well. Alternatively this can\n                    // be done by setting `user-select: none` on the `body`, however it has causes a style\n                    // recalculation which can be expensive on pages with a lot of elements.\n                    .set('selectstart', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n                this._ngZone.runOutsideAngular(function () {\n                    _this._globalListeners.forEach(function (config, name) {\n                        _this._document.addEventListener(name, config.handler, config.options);\n                    });\n                });\n            }\n        };\n        /** Stops dragging a drag item instance. */\n        DragDropRegistry.prototype.stopDragging = function (drag) {\n            this._activeDragInstances.delete(drag);\n            if (this._activeDragInstances.size === 0) {\n                this._clearGlobalListeners();\n            }\n        };\n        /** Gets whether a drag item instance is currently being dragged. */\n        DragDropRegistry.prototype.isDragging = function (drag) {\n            return this._activeDragInstances.has(drag);\n        };\n        DragDropRegistry.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._dragInstances.forEach(function (instance) { return _this.removeDragItem(instance); });\n            this._dropInstances.forEach(function (instance) { return _this.removeDropContainer(instance); });\n            this._clearGlobalListeners();\n            this.pointerMove.complete();\n            this.pointerUp.complete();\n        };\n        /** Clears out the global event listeners from the `document`. */\n        DragDropRegistry.prototype._clearGlobalListeners = function () {\n            var _this = this;\n            this._globalListeners.forEach(function (config, name) {\n                _this._document.removeEventListener(name, config.handler, config.options);\n            });\n            this._globalListeners.clear();\n        };\n        DragDropRegistry.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDropRegistry.ctorParameters = function () { return [\n            { type: i0.NgZone },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] }\n        ]; };\n        DragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n        return DragDropRegistry;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Default configuration to be used when creating a `DragRef`. */\n    var DEFAULT_CONFIG = {\n        dragStartThreshold: 5,\n        pointerDirectionChangeThreshold: 5\n    };\n    /**\n     * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n     */\n    var DragDrop = /** @class */ (function () {\n        function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n        }\n        /**\n         * Turns an element into a draggable item.\n         * @param element Element to which to attach the dragging functionality.\n         * @param config Object used to configure the dragging behavior.\n         */\n        DragDrop.prototype.createDrag = function (element, config) {\n            if (config === void 0) { config = DEFAULT_CONFIG; }\n            return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n        };\n        /**\n         * Turns an element into a drop list.\n         * @param element Element to which to attach the drop list functionality.\n         */\n        DragDrop.prototype.createDropList = function (element) {\n            return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n        };\n        DragDrop.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        /** @nocollapse */\n        DragDrop.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i2.ViewportRuler },\n            { type: DragDropRegistry }\n        ]; };\n        DragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n        return DragDrop;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n     * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n     * to avoid circular imports.\n     * @docs-private\n     */\n    var CDK_DRAG_PARENT = new i0.InjectionToken('CDK_DRAG_PARENT');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Handle that can be used to drag and CdkDrag instance. */\n    var CdkDragHandle = /** @class */ (function () {\n        function CdkDragHandle(element, parentDrag) {\n            this.element = element;\n            /** Emits when the state of the handle has changed. */\n            this._stateChanges = new rxjs.Subject();\n            this._disabled = false;\n            this._parentDrag = parentDrag;\n            toggleNativeDragInteractions(element.nativeElement, false);\n        }\n        Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n            /** Whether starting to drag through this handle is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._stateChanges.next(this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDragHandle.prototype.ngOnDestroy = function () {\n            this._stateChanges.complete();\n        };\n        CdkDragHandle.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDragHandle]',\n                        host: {\n                            'class': 'cdk-drag-handle'\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragHandle.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DRAG_PARENT,] }, { type: i0.Optional }] }\n        ]; };\n        CdkDragHandle.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDragHandleDisabled',] }]\n        };\n        return CdkDragHandle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the placeholder of a CdkDrag when\n     * it is being dragged. The placeholder is displayed in place of the element being dragged.\n     */\n    var CdkDragPlaceholder = /** @class */ (function () {\n        function CdkDragPlaceholder(templateRef) {\n            this.templateRef = templateRef;\n        }\n        CdkDragPlaceholder.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPlaceholder]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPlaceholder.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPlaceholder.propDecorators = {\n            data: [{ type: i0.Input }]\n        };\n        return CdkDragPlaceholder;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Element that will be used as a template for the preview\n     * of a CdkDrag when it is being dragged.\n     */\n    var CdkDragPreview = /** @class */ (function () {\n        function CdkDragPreview(templateRef) {\n            this.templateRef = templateRef;\n        }\n        CdkDragPreview.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: 'ng-template[cdkDragPreview]'\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDragPreview.ctorParameters = function () { return [\n            { type: i0.TemplateRef }\n        ]; };\n        CdkDragPreview.propDecorators = {\n            data: [{ type: i0.Input }]\n        };\n        return CdkDragPreview;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used to configure the\n     * behavior of the drag&drop-related components.\n     */\n    var CDK_DRAG_CONFIG = new i0.InjectionToken('CDK_DRAG_CONFIG');\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     * @docs-private\n     */\n    function CDK_DRAG_CONFIG_FACTORY() {\n        return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n     * Used for avoiding circular imports.\n     */\n    var CDK_DROP_LIST = new i0.InjectionToken('CDK_DROP_LIST');\n    /** Element that can be moved inside a CdkDropList container. */\n    var CdkDrag = /** @class */ (function () {\n        function CdkDrag(\n        /** Element that the draggable is attached to. */\n        element, \n        /** Droppable container that the draggable is a part of. */\n        dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n            var _this = this;\n            this.element = element;\n            this.dropContainer = dropContainer;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewContainerRef = _viewContainerRef;\n            this._dir = _dir;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._destroyed = new rxjs.Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new i0.EventEmitter();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new i0.EventEmitter();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new i0.EventEmitter();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new i0.EventEmitter();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new i0.EventEmitter();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = new rxjs.Observable(function (observer) {\n                var subscription = _this._dragRef.moved.pipe(operators.map(function (movedEvent) { return ({\n                    source: _this,\n                    pointerPosition: movedEvent.pointerPosition,\n                    event: movedEvent.event,\n                    delta: movedEvent.delta,\n                    distance: movedEvent.distance\n                }); })).subscribe(observer);\n                return function () {\n                    subscription.unsubscribe();\n                };\n            });\n            this._dragRef = dragDrop.createDrag(element, {\n                dragStartThreshold: config && config.dragStartThreshold != null ?\n                    config.dragStartThreshold : 5,\n                pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                    config.pointerDirectionChangeThreshold : 5\n            });\n            this._dragRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            // Note that usually the container is assigned when the drop list is picks up the item, but in\n            // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n            // where there are no items on the first change detection pass, but the items get picked up as\n            // soon as the user triggers another pass by dragging. This is a problem, because the item would\n            // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n            // is too late since the two modes save different kinds of information. We work around it by\n            // assigning the drop container both from here and the list.\n            if (dropContainer) {\n                this._dragRef._withDropContainer(dropContainer._dropListRef);\n                dropContainer.addItem(this);\n            }\n            this._syncInputs(this._dragRef);\n            this._handleEvents(this._dragRef);\n        }\n        Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n            /** Whether starting to drag this element is disabled. */\n            get: function () {\n                return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n            },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._dragRef.disabled = this._disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        CdkDrag.prototype.getPlaceholderElement = function () {\n            return this._dragRef.getPlaceholderElement();\n        };\n        /** Returns the root draggable element. */\n        CdkDrag.prototype.getRootElement = function () {\n            return this._dragRef.getRootElement();\n        };\n        /** Resets a standalone drag item to its initial position. */\n        CdkDrag.prototype.reset = function () {\n            this._dragRef.reset();\n        };\n        /**\n         * Gets the pixel coordinates of the draggable outside of a drop container.\n         */\n        CdkDrag.prototype.getFreeDragPosition = function () {\n            return this._dragRef.getFreeDragPosition();\n        };\n        CdkDrag.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.asObservable()\n                .pipe(operators.take(1), operators.takeUntil(this._destroyed))\n                .subscribe(function () {\n                _this._updateRootElement();\n                // Listen for any newly-added handles.\n                _this._handles.changes.pipe(operators.startWith(_this._handles), \n                // Sync the new handles with the DragRef.\n                operators.tap(function (handles) {\n                    var childHandleElements = handles\n                        .filter(function (handle) { return handle._parentDrag === _this; })\n                        .map(function (handle) { return handle.element; });\n                    _this._dragRef.withHandles(childHandleElements);\n                }), \n                // Listen if the state of any of the handles changes.\n                operators.switchMap(function (handles) {\n                    return rxjs.merge.apply(void 0, tslib.__spread(handles.map(function (item) {\n                        return item._stateChanges.pipe(operators.startWith(item));\n                    })));\n                }), operators.takeUntil(_this._destroyed)).subscribe(function (handleInstance) {\n                    // Enabled/disable the handle that changed in the DragRef.\n                    var dragRef = _this._dragRef;\n                    var handle = handleInstance.element.nativeElement;\n                    handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n                });\n                if (_this.freeDragPosition) {\n                    _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n                }\n            });\n        };\n        CdkDrag.prototype.ngOnChanges = function (changes) {\n            var rootSelectorChange = changes['rootElementSelector'];\n            var positionChange = changes['freeDragPosition'];\n            // We don't have to react to the first change since it's being\n            // handled in `ngAfterViewInit` where it needs to be deferred.\n            if (rootSelectorChange && !rootSelectorChange.firstChange) {\n                this._updateRootElement();\n            }\n            // Skip the first change since it's being handled in `ngAfterViewInit`.\n            if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        };\n        CdkDrag.prototype.ngOnDestroy = function () {\n            if (this.dropContainer) {\n                this.dropContainer.removeItem(this);\n            }\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        };\n        /** Syncs the root element with the `DragRef`. */\n        CdkDrag.prototype._updateRootElement = function () {\n            var element = this.element.nativeElement;\n            var rootElement = this.rootElementSelector ?\n                getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n            if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n                throw Error(\"cdkDrag must be attached to an element node. \" +\n                    (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n            }\n            this._dragRef.withRootElement(rootElement || element);\n        };\n        /** Gets the boundary element, based on the `boundaryElement` value. */\n        CdkDrag.prototype._getBoundaryElement = function () {\n            var boundary = this.boundaryElement;\n            if (!boundary) {\n                return null;\n            }\n            if (typeof boundary === 'string') {\n                return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n            }\n            var element = coercion.coerceElement(boundary);\n            if (i0.isDevMode() && !element.contains(this.element.nativeElement)) {\n                throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n            }\n            return element;\n        };\n        /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n        CdkDrag.prototype._syncInputs = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                if (!ref.isDragging()) {\n                    var dir = _this._dir;\n                    var dragStartDelay = _this.dragStartDelay;\n                    var placeholder = _this._placeholderTemplate ? {\n                        template: _this._placeholderTemplate.templateRef,\n                        context: _this._placeholderTemplate.data,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    var preview = _this._previewTemplate ? {\n                        template: _this._previewTemplate.templateRef,\n                        context: _this._previewTemplate.data,\n                        viewContainer: _this._viewContainerRef\n                    } : null;\n                    ref.disabled = _this.disabled;\n                    ref.lockAxis = _this.lockAxis;\n                    ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                        dragStartDelay : coercion.coerceNumberProperty(dragStartDelay);\n                    ref.constrainPosition = _this.constrainPosition;\n                    ref.previewClass = _this.previewClass;\n                    ref\n                        .withBoundaryElement(_this._getBoundaryElement())\n                        .withPlaceholderTemplate(placeholder)\n                        .withPreviewTemplate(preview);\n                    if (dir) {\n                        ref.withDirection(dir.value);\n                    }\n                }\n            });\n        };\n        /** Handles the events from the underlying `DragRef`. */\n        CdkDrag.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.started.subscribe(function () {\n                _this.started.emit({ source: _this });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.released.subscribe(function () {\n                _this.released.emit({ source: _this });\n            });\n            ref.ended.subscribe(function (event) {\n                _this.ended.emit({ source: _this, distance: event.distance });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: event.container.data,\n                    item: _this,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: event.container.data,\n                    item: _this\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    item: _this,\n                    distance: event.distance\n                });\n            });\n        };\n        /** Assigns the default input values based on a provided config object. */\n        CdkDrag.prototype._assignDefaults = function (config) {\n            var lockAxis = config.lockAxis, dragStartDelay = config.dragStartDelay, constrainPosition = config.constrainPosition, previewClass = config.previewClass, boundaryElement = config.boundaryElement, draggingDisabled = config.draggingDisabled, rootElementSelector = config.rootElementSelector;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.dragStartDelay = dragStartDelay || 0;\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n            if (constrainPosition) {\n                this.constrainPosition = constrainPosition;\n            }\n            if (previewClass) {\n                this.previewClass = previewClass;\n            }\n            if (boundaryElement) {\n                this.boundaryElement = boundaryElement;\n            }\n            if (rootElementSelector) {\n                this.rootElementSelector = rootElementSelector;\n            }\n        };\n        CdkDrag.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDrag]',\n                        exportAs: 'cdkDrag',\n                        host: {\n                            'class': 'cdk-drag',\n                            '[class.cdk-drag-disabled]': 'disabled',\n                            '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                        },\n                        providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDrag.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [CDK_DROP_LIST,] }, { type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: undefined, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },\n            { type: i0.NgZone },\n            { type: i0.ViewContainerRef },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef }\n        ]; };\n        CdkDrag.propDecorators = {\n            _handles: [{ type: i0.ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n            _previewTemplate: [{ type: i0.ContentChild, args: [CdkDragPreview,] }],\n            _placeholderTemplate: [{ type: i0.ContentChild, args: [CdkDragPlaceholder,] }],\n            data: [{ type: i0.Input, args: ['cdkDragData',] }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDragLockAxis',] }],\n            rootElementSelector: [{ type: i0.Input, args: ['cdkDragRootElement',] }],\n            boundaryElement: [{ type: i0.Input, args: ['cdkDragBoundary',] }],\n            dragStartDelay: [{ type: i0.Input, args: ['cdkDragStartDelay',] }],\n            freeDragPosition: [{ type: i0.Input, args: ['cdkDragFreeDragPosition',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDragDisabled',] }],\n            constrainPosition: [{ type: i0.Input, args: ['cdkDragConstrainPosition',] }],\n            previewClass: [{ type: i0.Input, args: ['cdkDragPreviewClass',] }],\n            started: [{ type: i0.Output, args: ['cdkDragStarted',] }],\n            released: [{ type: i0.Output, args: ['cdkDragReleased',] }],\n            ended: [{ type: i0.Output, args: ['cdkDragEnded',] }],\n            entered: [{ type: i0.Output, args: ['cdkDragEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDragExited',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDragDropped',] }],\n            moved: [{ type: i0.Output, args: ['cdkDragMoved',] }]\n        };\n        return CdkDrag;\n    }());\n    /** Gets the closest ancestor of an element that matches a selector. */\n    function getClosestMatchingAncestor(element, selector) {\n        var currentElement = element.parentElement;\n        while (currentElement) {\n            // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n            if (currentElement.matches ? currentElement.matches(selector) :\n                currentElement.msMatchesSelector(selector)) {\n                return currentElement;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n     * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n     * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n     * from `cdkDropList`.\n     */\n    var CdkDropListGroup = /** @class */ (function () {\n        function CdkDropListGroup() {\n            /** Drop lists registered inside the group. */\n            this._items = new Set();\n            this._disabled = false;\n        }\n        Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from inside this group is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDropListGroup.prototype.ngOnDestroy = function () {\n            this._items.clear();\n        };\n        CdkDropListGroup.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropListGroup]',\n                        exportAs: 'cdkDropListGroup',\n                    },] }\n        ];\n        CdkDropListGroup.propDecorators = {\n            disabled: [{ type: i0.Input, args: ['cdkDropListGroupDisabled',] }]\n        };\n        return CdkDropListGroup;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique ids for drop zones. */\n    var _uniqueIdCounter = 0;\n    var ɵ0 = undefined;\n    /** Container that wraps a set of draggable items. */\n    var CdkDropList = /** @class */ (function () {\n        function CdkDropList(\n        /** Element that the drop list is attached to. */\n        element, dragDrop, _changeDetectorRef, _dir, _group, \n        /**\n         * @deprecated _scrollDispatcher parameter to become required.\n         * @breaking-change 11.0.0\n         */\n        _scrollDispatcher, config) {\n            var _this = this;\n            this.element = element;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._group = _group;\n            this._scrollDispatcher = _scrollDispatcher;\n            /** Emits when the list has been destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /**\n             * Other draggable containers that this container is connected to and into which the\n             * container's items can be transferred. Can either be references to other drop containers,\n             * or their unique IDs.\n             */\n            this.connectedTo = [];\n            /**\n             * Unique ID for the drop zone. Can be used as a reference\n             * in the `connectedTo` of another `CdkDropList`.\n             */\n            this.id = \"cdk-drop-list-\" + _uniqueIdCounter++;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = function () { return true; };\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new i0.EventEmitter();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new i0.EventEmitter();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new i0.EventEmitter();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new i0.EventEmitter();\n            /**\n             * Keeps track of the items that are registered with this container. Historically we used to\n             * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n             * well which means that we can't handle cases like dragging the headers of a `mat-table`\n             * correctly. What we do instead is to have the items register themselves with the container\n             * and then we sort them based on their position in the DOM.\n             */\n            this._unsortedItems = new Set();\n            this._dropListRef = dragDrop.createDropList(element);\n            this._dropListRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            this._dropListRef.enterPredicate = function (drag, drop) {\n                return _this.enterPredicate(drag.data, drop.data);\n            };\n            this._setupInputSyncSubscription(this._dropListRef);\n            this._handleEvents(this._dropListRef);\n            CdkDropList._dropLists.push(this);\n            if (_group) {\n                _group._items.add(this);\n            }\n        }\n        Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n            /** Whether starting a dragging sequence from this container is disabled. */\n            get: function () {\n                return this._disabled || (!!this._group && this._group.disabled);\n            },\n            set: function (value) {\n                // Usually we sync the directive and ref state right before dragging starts, in order to have\n                // a single point of failure and to avoid having to use setters for everything. `disabled` is\n                // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n                // the user in a disabled state, so we also need to sync it as it's being set.\n                this._dropListRef.disabled = this._disabled = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkDropList.prototype.ngAfterContentInit = function () {\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (this._scrollDispatcher) {\n                var scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(function (scrollable) { return scrollable.getElementRef().nativeElement; });\n                this._dropListRef.withScrollableParents(scrollableParents);\n            }\n        };\n        /** Registers an items with the drop list. */\n        CdkDropList.prototype.addItem = function (item) {\n            this._unsortedItems.add(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        };\n        /** Removes an item from the drop list. */\n        CdkDropList.prototype.removeItem = function (item) {\n            this._unsortedItems.delete(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        };\n        /** Gets the registered items in the list, sorted by their position in the DOM. */\n        CdkDropList.prototype.getSortedItems = function () {\n            return Array.from(this._unsortedItems).sort(function (a, b) {\n                var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n                // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n                // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n                // tslint:disable-next-line:no-bitwise\n                return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n            });\n        };\n        CdkDropList.prototype.ngOnDestroy = function () {\n            var index = CdkDropList._dropLists.indexOf(this);\n            if (index > -1) {\n                CdkDropList._dropLists.splice(index, 1);\n            }\n            if (this._group) {\n                this._group._items.delete(this);\n            }\n            this._unsortedItems.clear();\n            this._dropListRef.dispose();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n        /**\n         * Starts dragging an item.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.start = function () {\n            this._dropListRef.start();\n        };\n        /**\n         * Drops an item into this container.\n         * @param item Item being dropped into the container.\n         * @param currentIndex Index at which the item should be inserted.\n         * @param previousContainer Container from which the item got dragged in.\n         * @param isPointerOverContainer Whether the user's pointer was over the\n         *    container when the item was dropped.\n         *\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer) {\n            this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n        };\n        /**\n         * Emits an event to indicate that the user moved an item into the container.\n         * @param item Item that was moved into the container.\n         * @param pointerX Position of the item along the X axis.\n         * @param pointerY Position of the item along the Y axis.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.enter = function (item, pointerX, pointerY) {\n            this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n        };\n        /**\n         * Removes an item from the container after it was dragged into another container by the user.\n         * @param item Item that was dragged out.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.exit = function (item) {\n            this._dropListRef.exit(item._dragRef);\n        };\n        /**\n         * Figures out the index of an item in the container.\n         * @param item Item whose index should be determined.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        CdkDropList.prototype.getItemIndex = function (item) {\n            return this._dropListRef.getItemIndex(item._dragRef);\n        };\n        /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n        CdkDropList.prototype._setupInputSyncSubscription = function (ref) {\n            var _this = this;\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.startWith(this._dir.value), operators.takeUntil(this._destroyed))\n                    .subscribe(function (value) { return ref.withDirection(value); });\n            }\n            ref.beforeStarted.subscribe(function () {\n                var siblings = coercion.coerceArray(_this.connectedTo).map(function (drop) {\n                    return typeof drop === 'string' ?\n                        CdkDropList._dropLists.find(function (list) { return list.id === drop; }) : drop;\n                });\n                if (_this._group) {\n                    _this._group._items.forEach(function (drop) {\n                        if (siblings.indexOf(drop) === -1) {\n                            siblings.push(drop);\n                        }\n                    });\n                }\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.sortingDisabled = coercion.coerceBooleanProperty(_this.sortingDisabled);\n                ref.autoScrollDisabled = coercion.coerceBooleanProperty(_this.autoScrollDisabled);\n                ref\n                    .connectedTo(siblings.filter(function (drop) { return drop && drop !== _this; }).map(function (list) { return list._dropListRef; }))\n                    .withOrientation(_this.orientation);\n            });\n        };\n        /** Handles events from the underlying DropListRef. */\n        CdkDropList.prototype._handleEvents = function (ref) {\n            var _this = this;\n            ref.beforeStarted.subscribe(function () {\n                _this._syncItemsWithRef();\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(function (event) {\n                _this.entered.emit({\n                    container: _this,\n                    item: event.item.data,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(function (event) {\n                _this.exited.emit({\n                    container: _this,\n                    item: event.item.data\n                });\n                _this._changeDetectorRef.markForCheck();\n            });\n            ref.sorted.subscribe(function (event) {\n                _this.sorted.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    container: _this,\n                    item: event.item.data\n                });\n            });\n            ref.dropped.subscribe(function (event) {\n                _this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    item: event.item.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    distance: event.distance\n                });\n                // Mark for check since all of these events run outside of change\n                // detection and we're not guaranteed for something else to have triggered it.\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n        /** Assigns the default input values based on a provided config object. */\n        CdkDropList.prototype._assignDefaults = function (config) {\n            var lockAxis = config.lockAxis, draggingDisabled = config.draggingDisabled, sortingDisabled = config.sortingDisabled, listAutoScrollDisabled = config.listAutoScrollDisabled, listOrientation = config.listOrientation;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n            this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n            this.orientation = listOrientation || 'vertical';\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n        };\n        /** Syncs up the registered drag items with underlying drop list ref. */\n        CdkDropList.prototype._syncItemsWithRef = function () {\n            this._dropListRef.withItems(this.getSortedItems().map(function (item) { return item._dragRef; }));\n        };\n        /** Keeps track of the drop lists that are currently on the page. */\n        CdkDropList._dropLists = [];\n        CdkDropList.decorators = [\n            { type: i0.Directive, args: [{\n                        selector: '[cdkDropList], cdk-drop-list',\n                        exportAs: 'cdkDropList',\n                        providers: [\n                            // Prevent child drop lists from picking up the same group as their parent.\n                            { provide: CdkDropListGroup, useValue: ɵ0 },\n                            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                        ],\n                        host: {\n                            'class': 'cdk-drop-list',\n                            '[id]': 'id',\n                            '[class.cdk-drop-list-disabled]': 'disabled',\n                            '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                            '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkDropList.ctorParameters = function () { return [\n            { type: i0.ElementRef },\n            { type: DragDrop },\n            { type: i0.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },\n            { type: CdkDropListGroup, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },\n            { type: i2.ScrollDispatcher },\n            { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CDK_DRAG_CONFIG,] }] }\n        ]; };\n        CdkDropList.propDecorators = {\n            connectedTo: [{ type: i0.Input, args: ['cdkDropListConnectedTo',] }],\n            data: [{ type: i0.Input, args: ['cdkDropListData',] }],\n            orientation: [{ type: i0.Input, args: ['cdkDropListOrientation',] }],\n            id: [{ type: i0.Input }],\n            lockAxis: [{ type: i0.Input, args: ['cdkDropListLockAxis',] }],\n            disabled: [{ type: i0.Input, args: ['cdkDropListDisabled',] }],\n            sortingDisabled: [{ type: i0.Input, args: ['cdkDropListSortingDisabled',] }],\n            enterPredicate: [{ type: i0.Input, args: ['cdkDropListEnterPredicate',] }],\n            autoScrollDisabled: [{ type: i0.Input, args: ['cdkDropListAutoScrollDisabled',] }],\n            dropped: [{ type: i0.Output, args: ['cdkDropListDropped',] }],\n            entered: [{ type: i0.Output, args: ['cdkDropListEntered',] }],\n            exited: [{ type: i0.Output, args: ['cdkDropListExited',] }],\n            sorted: [{ type: i0.Output, args: ['cdkDropListSorted',] }]\n        };\n        return CdkDropList;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DragDropModule = /** @class */ (function () {\n        function DragDropModule() {\n        }\n        DragDropModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        declarations: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        exports: [\n                            CdkDropList,\n                            CdkDropListGroup,\n                            CdkDrag,\n                            CdkDragHandle,\n                            CdkDragPreview,\n                            CdkDragPlaceholder,\n                        ],\n                        providers: [\n                            DragDrop,\n                        ]\n                    },] }\n        ];\n        return DragDropModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CDK_DRAG_CONFIG = CDK_DRAG_CONFIG;\n    exports.CDK_DRAG_CONFIG_FACTORY = CDK_DRAG_CONFIG_FACTORY;\n    exports.CDK_DROP_LIST = CDK_DROP_LIST;\n    exports.CdkDrag = CdkDrag;\n    exports.CdkDragHandle = CdkDragHandle;\n    exports.CdkDragPlaceholder = CdkDragPlaceholder;\n    exports.CdkDragPreview = CdkDragPreview;\n    exports.CdkDropList = CdkDropList;\n    exports.CdkDropListGroup = CdkDropListGroup;\n    exports.DragDrop = DragDrop;\n    exports.DragDropModule = DragDropModule;\n    exports.DragDropRegistry = DragDropRegistry;\n    exports.DragRef = DragRef;\n    exports.DropListRef = DropListRef;\n    exports.copyArrayItem = copyArrayItem;\n    exports.moveItemInArray = moveItemInArray;\n    exports.transferArrayItem = transferArrayItem;\n    exports.ɵangular_material_src_cdk_drag_drop_drag_drop_b = CDK_DRAG_PARENT;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-drag-drop.umd.js.map\n"]}
{"version":3,"file":"cdk-drag-drop.umd.min.js","sources":["../../src/cdk/drag-drop/directives/drag.ts","../../src/cdk/drag-drop/directives/drop-list-group.ts","../../src/cdk/drag-drop/directives/drop-list.ts","../../src/cdk/drag-drop/drag-drop-module.ts","../../src/cdk/drag-drop/drag-styling.ts","../../src/cdk/drag-drop/transition-duration.ts","../../src/cdk/drag-drop/drag-ref.ts","../../src/cdk/drag-drop/drag-utils.ts","../../src/cdk/drag-drop/drop-list-ref.ts","../../src/cdk/drag-drop/drag-drop-registry.ts","../../src/cdk/drag-drop/drag-drop.ts","../../src/cdk/drag-drop/drop-list-container.ts","../../src/cdk/drag-drop/drag-parent.ts","../../src/cdk/drag-drop/directives/drag-handle.ts","../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../src/cdk/drag-drop/directives/drag-preview.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  isDevMode,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview, {static: false}) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder, {static: false}) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Node or selector that will be used to determine the element to which the draggable's\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\n   * will be matched starting from the element's parent and going up the DOM until a match\n   * has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found\n   * @deprecated Use `boundaryElement` instead.\n   * @breaking-change 9.0.0\n   */\n  get boundaryElementSelector(): string {\n    return typeof this.boundaryElement === 'string' ? this.boundaryElement : undefined!;\n  }\n  set boundaryElementSelector(selector: string) {\n    this.boundaryElement = selector;\n  }\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta,\n          distance: movedEvent.distance\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n      /** Element that the draggable is attached to. */\n      public element: ElementRef<HTMLElement>,\n      /** Droppable container that the draggable is a part of. */\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\n      private _viewContainerRef: ViewContainerRef, @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this._dragRef = dragDrop.createDrag(element, config);\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  private _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n    }\n\n    const element = coerceElement(boundary);\n\n    if (isDevMode() && !element.contains(this.element.nativeElement)) {\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n    }\n\n    return element;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(event => {\n      this.ended.emit({source: this, distance: event.distance});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this,\n        distance: event.distance\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  AfterContentInit,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input('cdkDropListSortingDisabled')\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\n  set sortingDisabled(value: boolean) {\n    this._sortingDisabled = coerceBooleanProperty(value);\n  }\n  private _sortingDisabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n  @Input('cdkDropListAutoScrollDisabled')\n  autoScrollDisabled: boolean = false;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n      /** Element that the drop list is attached to. */\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir?: Directionality,\n      @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref.autoScrollDisabled = this.autoScrollDisabled;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        distance: event.distance\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being scrolled. */\n  private _scrollSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef, distance: Point}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    distance: Point;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = this._moveEvents.asObservable();\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {x: position.x, y: position.y};\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): this {\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._pointerPositionAtLastDirectionChange;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(position);\n    }\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold) {\n        const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\n        if (!isDelayElapsed) {\n          this._endDragSequence(event);\n          return;\n        }\n\n        // Prevent other drag sequences from starting while something in the container is still\n        // being dragged. This can happen while we're waiting for the drop animation to finish\n        // and can cause errors, because some elements might still be moving around.\n        if (!this._dropContainer || !this._dropContainer.isDragging()) {\n          this._hasStartedDragging = true;\n          this._ngZone.run(() => this._startDragSequence(event));\n        }\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEvents.observers.length) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          distance: this._getDragDistance(constrainedPointerPosition),\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    this._endDragSequence(event);\n  }\n\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      getPreviewInsertionPoint(this._document).appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeSubscriptions();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe(() => {\n      this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n    });\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n      const isPointerOverContainer = container._isOverContainer(\n        pointerPosition.x, pointerPosition.y);\n\n      this.ended.next({source: this, distance});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n        this.entered.next({\n          item: this,\n          container: newContainer!,\n          currentIndex: newContainer!.getItemIndex(this)\n        });\n      });\n    }\n\n    this._dropContainer!._startScrollingIfNecessary(x, y);\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      constrainedPoint.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      constrainedPoint.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n      constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n    }\n\n    return constrainedPoint;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyRootElementTransform(x: number, y: number) {\n    const transform = getTransform(x, y);\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    this._rootElement.style.transform = this._initialTransform ?\n      transform + ' ' + this._initialTransform  : transform;\n  }\n\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  private _getDragDistance(currentPosition: Point): Point {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\n    }\n\n    return {x: 0, y: 0};\n  }\n\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  private _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n  }\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const descendantCanvases = node.querySelectorAll('canvas');\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n  // We match up the cloned canvas to their sources using their index in the DOM.\n  if (descendantCanvases.length) {\n    const cloneCanvases = clone.querySelectorAll('canvas');\n\n    for (let i = 0; i < descendantCanvases.length; i++) {\n      const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n\n      if (correspondingCloneContext) {\n        correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n      }\n    }\n  }\n\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return documentRef.fullscreenElement ||\n         documentRef.webkitFullscreenElement ||\n         documentRef.mozFullScreenElement ||\n         documentRef.msFullscreenElement ||\n         documentRef.body;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {moveItemInArray} from './drag-utils';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {DragRefInternal as DragRef, Point} from './drag-ref';\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/** Object holding the scroll position of something. */\ninterface ScrollPosition {\n  top: number;\n  left: number;\n}\n\n/** Vertical direction in which we can auto-scroll. */\nconst enum AutoScrollVerticalDirection {NONE, UP, DOWN}\n\n/** Horizontal direction in which we can auto-scroll. */\nconst enum AutoScrollHorizontalDirection {NONE, LEFT, RIGHT}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  element: HTMLElement | ElementRef<HTMLElement>;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = true;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Whether auto-scrolling the view when the user\n   * moves their pointer close to the edges is disabled.\n   */\n  autoScrollDisabled: boolean = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean,\n    distance: Point;\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Keeps track of the container's scroll position. */\n  private _scrollPosition: ScrollPosition = {top: 0, left: 0};\n\n  /** Keeps track of the scroll position of the viewport. */\n  private _viewportScrollPosition: ScrollPosition = {top: 0, left: 0};\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  /** Subscription to the window being scrolled. */\n  private _viewportScrollSubscription = Subscription.EMPTY;\n\n  /** Vertical direction in which the list is currently scrolling. */\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n\n  /** Horizontal direction in which the list is currently scrolling. */\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  /** Node that is being auto-scrolled. */\n  private _scrollNode: HTMLElement | Window;\n\n  /** Used to signal to the current auto-scroll sequence when to stop. */\n  private _stopScrollTimers = new Subject<void>();\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any,\n    /**\n     * @deprecated _ngZone and _viewportRuler parameters to be made required.\n     * @breaking-change 9.0.0\n     */\n    private _ngZone?: NgZone,\n    private _viewportRuler?: ViewportRuler) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._removeListeners();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null!;\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    const element = coerceElement(this.element);\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._cacheItems();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n    this._removeListeners();\n\n    // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.\n    if (this._ngZone) {\n      this._ngZone.runOutsideAngular(() => element.addEventListener('scroll', this._handleScroll));\n    } else {\n      element.addEventListener('scroll', this._handleScroll);\n    }\n\n    // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.\n    if (this._viewportRuler) {\n      this._listenToScrollEvents();\n    }\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.start();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n    if (newIndex === -1) {\n      // We use the coordinates of where the item entered the drop\n      // zone to figure out at which index it should be inserted.\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      coerceElement(this.element).appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @breaking-change 9.0.0 `distance` parameter to become required.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean, distance: Point = {x: 0, y: 0}): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      this._cacheItems();\n    }\n\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode: HTMLElement | Window | undefined;\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n    // Check whether we should start scrolling the container.\n    if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n      const element = coerceElement(this.element);\n\n      [verticalScrollDirection, horizontalScrollDirection] =\n          getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\n\n      if (verticalScrollDirection || horizontalScrollDirection) {\n        scrollNode = element;\n      }\n    }\n\n    // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.\n    // Otherwise check if we can start scrolling the viewport.\n    if (this._viewportRuler && !verticalScrollDirection && !horizontalScrollDirection) {\n      const {width, height} = this._viewportRuler.getViewportSize();\n      const clientRect = {width, height, top: 0, right: width, bottom: height, left: 0};\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\n        scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.\n        if (this._ngZone) {\n          this._ngZone.runOutsideAngular(this._startScrollInterval);\n        } else {\n          this._startScrollInterval();\n        }\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    const element = coerceElement(this.element);\n    this._clientRect = getMutableClientRect(element);\n    this._scrollPosition = {top: element.scrollTop, left: element.scrollLeft};\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      return {drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure)};\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._stopScrolling();\n    this._removeListeners();\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /** Caches the current items in the list and their positions. */\n  private _cacheItems(): void {\n    this._activeDraggables = this._draggables.slice();\n    this._cacheItemPositions();\n    this._cacheOwnPosition();\n  }\n\n  /**\n   * Updates the internal state of the container after a scroll event has happened.\n   * @param scrollPosition Object that is keeping track of the scroll position.\n   * @param newTop New top scroll position.\n   * @param newLeft New left scroll position.\n   * @param extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n   *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n   *  the `ClientRect` of the list.\n   */\n  private _updateAfterScroll(scrollPosition: ScrollPosition, newTop: number, newLeft: number,\n    extraClientRect?: ClientRect) {\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n\n    if (extraClientRect) {\n      adjustClientRect(extraClientRect, topDifference, leftDifference);\n    }\n\n    // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n    // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n    // behavior where we might be measuring the element before its position has changed.\n    this._itemPositions.forEach(({clientRect}) => {\n      adjustClientRect(clientRect, topDifference, leftDifference);\n    });\n\n    // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n    this._itemPositions.forEach(({drag}) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n  }\n\n  /** Handles the container being scrolled. Has to be an arrow function to preserve the context. */\n  private _handleScroll = () => {\n    if (!this.isDragging()) {\n      return;\n    }\n\n    const element = coerceElement(this.element);\n    this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n  }\n\n  /** Removes the event listeners associated with this drop list. */\n  private _removeListeners() {\n    coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n    this._viewportScrollSubscription.unsubscribe();\n  }\n\n  /** Starts the interval that'll auto-scroll the element. */\n  private _startScrollInterval = () => {\n    this._stopScrolling();\n\n    interval(0, animationFrameScheduler)\n      .pipe(takeUntil(this._stopScrollTimers))\n      .subscribe(() => {\n        const node = this._scrollNode;\n\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n          incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n          incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n        }\n\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n          incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n          incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n        }\n      });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y) as HTMLElement | null;\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const nativeElement = coerceElement(this.element);\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n      this._listenToScrollEvents();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n  }\n\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n  private _listenToScrollEvents() {\n    this._viewportScrollPosition = this._viewportRuler!.getViewportScrollPosition();\n    this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(() => {\n      if (this.isDragging()) {\n        const newPosition = this._viewportRuler!.getViewportScrollPosition();\n        this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left,\n                                this._clientRect);\n      } else if (this.isReceiving()) {\n        this._cacheOwnPosition();\n      }\n    });\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element: Element): ClientRect {\n  const clientRect = element.getBoundingClientRect();\n\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node: HTMLElement | Window, amount: number) {\n  if (node === window) {\n    (node as Window).scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    (node as HTMLElement).scrollTop += amount;\n  }\n}\n\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node: HTMLElement | Window, amount: number) {\n  if (node === window) {\n    (node as Window).scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    (node as HTMLElement).scrollLeft += amount;\n  }\n}\n\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect: ClientRect, pointerY: number) {\n  const {top, bottom, height} = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return AutoScrollVerticalDirection.UP;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return AutoScrollVerticalDirection.DOWN;\n  }\n\n  return AutoScrollVerticalDirection.NONE;\n}\n\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect: ClientRect, pointerX: number) {\n  const {left, right, width} = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return AutoScrollHorizontalDirection.LEFT;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return AutoScrollHorizontalDirection.RIGHT;\n  }\n\n  return AutoScrollHorizontalDirection.NONE;\n}\n\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element: HTMLElement, clientRect: ClientRect, pointerX: number,\n  pointerY: number): [AutoScrollVerticalDirection, AutoScrollHorizontalDirection] {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === AutoScrollVerticalDirection.UP) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = AutoScrollVerticalDirection.UP;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /** Emits when the viewport has been scrolled while the user is dragging an item. */\n  readonly scroll: Subject<Event> = new Subject<Event>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.has(drag)) {\n      return;\n    }\n\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        .set('scroll', {\n          handler: (e: Event) => this.scroll.next(e)\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone,\n        this._viewportRuler);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n"],"names":["this","_dir","_changeDetectorRef","_destroyed","Subject","dragStartDelay","_disabled","started","EventEmitter","released","ended","entered","exited","dropped","moved","Observable","observer","subscription","_this","_dragRef","pipe","map","movedEvent","source","pointerPosition","event","delta","distance","subscribe","unsubscribe","dragDrop","createDrag","element","config","data","_syncInputs","_handleEvents","Object","defineProperty","CdkDrag","prototype","boundaryElement","selector","dropContainer","disabled","value","coerceBooleanProperty","getPlaceholderElement","getRootElement","reset","getFreeDragPosition","ngAfterViewInit","_ngZone","onStable","asObservable","take","takeUntil","_updateRootElement","_handles","changes","startWith","tap","handles","childHandleElements","filter","handle","_parentDrag","withHandles","switchMap","merge","apply","item","_stateChanges","handleInstance","dragRef","nativeElement","disableHandle","enableHandle","freeDragPosition","setFreeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","ngOnDestroy","next","complete","dispose","rootElement","rootElementSelector","getClosestMatchingAncestor","nodeType","_document","ELEMENT_NODE","Error","nodeName","withRootElement","_getBoundaryElement","boundary","coerceElement","isDevMode","contains","ref","beforeStarted","isDragging","dir","placeholder","_placeholderTemplate","template","templateRef","context","viewContainer","_viewContainerRef","preview","_previewTemplate","lockAxis","coerceNumberProperty","constrainPosition","withBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","emit","markForCheck","container","currentIndex","previousIndex","previousContainer","isPointerOverContainer","type","Directive","args","exportAs","host","class","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","CDK_DRAG_PARENT","useExisting","ElementRef","undefined","decorators","Inject","CDK_DROP_LIST","Optional","SkipSelf","DOCUMENT","NgZone","ViewContainerRef","CDK_DRAG_CONFIG","Directionality","DragDrop","ChangeDetectorRef","ContentChildren","CdkDragHandle","descendants","ContentChild","CdkDragPreview","static","CdkDragPlaceholder","Input","Output","CdkDropListGroup","_items","Set","clear","_uniqueIdCounter","CdkDropList","_group","connectedTo","orientation","id","_sortingDisabled","enterPredicate","autoScrollDisabled","sorted","_dropListRef","createDropList","drag","drop","_dropLists","push","add","ngAfterContentInit","_draggables","items","withItems","index","indexOf","splice","delete","start","enter","pointerX","pointerY","exit","getItemIndex","_sortItem","pointerDelta","_getSiblingContainerFromPosition","x","y","result","_isOverContainer","change","siblings","coerceArray","find","list","forEach","sortingDisabled","withOrientation","useValue","CDK_DROP_LIST_CONTAINER","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","forwardRef","DragDropModule","NgModule","declarations","exports","extendStyles","dest","key","hasOwnProperty","toggleNativeDragInteractions","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","toLowerCase","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getTransform","Math","round","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","length","cloneCanvases","correspondingCloneContext","getContext","drawImage","clamp","min","max","removeElement","parentNode","removeChild","isTouchEvent","getPreviewInsertionPoint","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","body","moveItemInArray","array","fromIndex","toIndex","from","to","target","transferArrayItem","currentArray","targetArray","targetIndex","copyArrayItem","adjustClientRect","clientRect","top","left","bottom","height","right","width","findIndex","predicate","isInsideClientRect","getMutableClientRect","getBoundingClientRect","incrementVerticalScroll","amount","window","scrollBy","scrollTop","incrementHorizontalScroll","scrollLeft","getVerticalScrollDirection","yThreshold","SCROLL_PROXIMITY_THRESHOLD","getHorizontalScrollDirection","xThreshold","getElementScrollDirections","computedVertical","computedHorizontal","verticalScrollDirection","horizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","CDK_DRAG_CONFIG_FACTORY","dragStartThreshold","pointerDirectionChangeThreshold","currentElement","matches","msMatchesSelector","parentElement","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","_pointerDown","targetHandle","has","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","run","_getDragDistance","_pointerDirectionDelta","_getPointerPositionOnPage","abs","Date","now","_dragStartTime","_endDragSequence","_startDragSequence","_pointerUp","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","_removeRootElementListeners","addEventListener","_initialTransform","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","_nextSibling","transform","direction","_withDropContainer","position","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","_lastTouchEventTime","nextSibling","_createPreviewElement","_createPlaceholderElement","display","appendChild","replaceChild","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","_initialContainer","pointerMove","pointerUp","scroll","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","insertBefore","_a","newContainer","_startScrollingIfNecessary","previewConfig","previewTemplate","viewRef","createEmbeddedView","rootNodes","elementRect","pointerEvents","zIndex","classList","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","dropContainerLock","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","shouldEnable","currentPosition","pickupPosition","AUTO_SCROLL_STEP","DropListRef","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_handleScroll","_updateAfterScroll","_startScrollInterval","interval","animationFrameScheduler","_scrollNode","registerDropContainer","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_cacheItemPositions","_reset","slice","reverse","currentItem","isReceiving","size","_isPointerNearDropContainer","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","_clientRect","_b","getViewportSize","_cacheOwnPosition","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","_canReceive","elementFromPoint","activeSiblings","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","startsWith","moveEvent","upEvent","set","e","options","_clearGlobalListeners","Array","instance","Injectable","providedIn","DEFAULT_CONFIG","ViewportRuler","InjectionToken","parentDrag","TemplateRef","factory"],"mappings":"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"}
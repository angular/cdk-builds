{"version":3,"sources":["src/cdk/cdk-observers.umd.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","ng","cdk","observers","coercion","core","rxjs","operators","this","i0","_interopNamespace","e","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","i0__namespace","MutationObserverFactory","prototype","callback","MutationObserver","ɵprov","ɵɵdefineInjectable","MutationObserverFactory_Factory","token","providedIn","decorators","type","Injectable","args","ContentObserver","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","_this","_","element","_cleanupObserver","observe","elementOrRef","coerceElement","Observable","observer","subscription","_observeElement","subscribe","unsubscribe","_unobserveElement","has","count","stream_1","Subject","mutations","next","characterData","childList","subtree","set","stream","_b","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","ctorParameters","ObserversModule","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","EventEmitter","_disabled","_currentSubscription","value","coerceBooleanProperty","_unsubscribe","_subscribe","configurable","_debounce","coerceNumberProperty","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","debounceTime","_a","Directive","selector","exportAs","ElementRef","NgZone","propDecorators","Output","Input","NgModule","declarations","providers"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/observers', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.observers = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, coercion, i0, rxjs, operators) { 'use strict';\n\n    function _interopNamespace(e) {\n        if (e && e.__esModule) return e;\n        var n = Object.create(null);\n        if (e) {\n            Object.keys(e).forEach(function (k) {\n                if (k !== 'default') {\n                    var d = Object.getOwnPropertyDescriptor(e, k);\n                    Object.defineProperty(n, k, d.get ? d : {\n                        enumerable: true,\n                        get: function () {\n                            return e[k];\n                        }\n                    });\n                }\n            });\n        }\n        n['default'] = e;\n        return Object.freeze(n);\n    }\n\n    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n     * @docs-private\n     */\n    var MutationObserverFactory = /** @class */ (function () {\n        function MutationObserverFactory() {\n        }\n        MutationObserverFactory.prototype.create = function (callback) {\n            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n        };\n        return MutationObserverFactory;\n    }());\n    MutationObserverFactory.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n    MutationObserverFactory.decorators = [\n        { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** An injectable service that allows watching elements for changes to their content. */\n    var ContentObserver = /** @class */ (function () {\n        function ContentObserver(_mutationObserverFactory) {\n            this._mutationObserverFactory = _mutationObserverFactory;\n            /** Keeps track of the existing MutationObservers so they can be reused. */\n            this._observedElements = new Map();\n        }\n        ContentObserver.prototype.ngOnDestroy = function () {\n            var _this = this;\n            this._observedElements.forEach(function (_, element) { return _this._cleanupObserver(element); });\n        };\n        ContentObserver.prototype.observe = function (elementOrRef) {\n            var _this = this;\n            var element = coercion.coerceElement(elementOrRef);\n            return new rxjs.Observable(function (observer) {\n                var stream = _this._observeElement(element);\n                var subscription = stream.subscribe(observer);\n                return function () {\n                    subscription.unsubscribe();\n                    _this._unobserveElement(element);\n                };\n            });\n        };\n        /**\n         * Observes the given element by using the existing MutationObserver if available, or creating a\n         * new one if not.\n         */\n        ContentObserver.prototype._observeElement = function (element) {\n            if (!this._observedElements.has(element)) {\n                var stream_1 = new rxjs.Subject();\n                var observer = this._mutationObserverFactory.create(function (mutations) { return stream_1.next(mutations); });\n                if (observer) {\n                    observer.observe(element, {\n                        characterData: true,\n                        childList: true,\n                        subtree: true\n                    });\n                }\n                this._observedElements.set(element, { observer: observer, stream: stream_1, count: 1 });\n            }\n            else {\n                this._observedElements.get(element).count++;\n            }\n            return this._observedElements.get(element).stream;\n        };\n        /**\n         * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n         * observing this element.\n         */\n        ContentObserver.prototype._unobserveElement = function (element) {\n            if (this._observedElements.has(element)) {\n                this._observedElements.get(element).count--;\n                if (!this._observedElements.get(element).count) {\n                    this._cleanupObserver(element);\n                }\n            }\n        };\n        /** Clean up the underlying MutationObserver for the specified element. */\n        ContentObserver.prototype._cleanupObserver = function (element) {\n            if (this._observedElements.has(element)) {\n                var _b = this._observedElements.get(element), observer = _b.observer, stream = _b.stream;\n                if (observer) {\n                    observer.disconnect();\n                }\n                stream.complete();\n                this._observedElements.delete(element);\n            }\n        };\n        return ContentObserver;\n    }());\n    ContentObserver.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(i0__namespace.ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n    ContentObserver.decorators = [\n        { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    ContentObserver.ctorParameters = function () { return [\n        { type: MutationObserverFactory }\n    ]; };\n    /**\n     * Directive that triggers a callback whenever the content of\n     * its associated element has changed.\n     */\n    var CdkObserveContent = /** @class */ (function () {\n        function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n            this._contentObserver = _contentObserver;\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            /** Event emitted for each change in the element's content. */\n            this.event = new i0.EventEmitter();\n            this._disabled = false;\n            this._currentSubscription = null;\n        }\n        Object.defineProperty(CdkObserveContent.prototype, \"disabled\", {\n            /**\n             * Whether observing content is disabled. This option can be used\n             * to disconnect the underlying MutationObserver until it is needed.\n             */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._disabled ? this._unsubscribe() : this._subscribe();\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(CdkObserveContent.prototype, \"debounce\", {\n            /** Debounce interval for emitting the changes. */\n            get: function () { return this._debounce; },\n            set: function (value) {\n                this._debounce = coercion.coerceNumberProperty(value);\n                this._subscribe();\n            },\n            enumerable: false,\n            configurable: true\n        });\n        CdkObserveContent.prototype.ngAfterContentInit = function () {\n            if (!this._currentSubscription && !this.disabled) {\n                this._subscribe();\n            }\n        };\n        CdkObserveContent.prototype.ngOnDestroy = function () {\n            this._unsubscribe();\n        };\n        CdkObserveContent.prototype._subscribe = function () {\n            var _this = this;\n            this._unsubscribe();\n            var stream = this._contentObserver.observe(this._elementRef);\n            // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n            // Consider brining it back inside the zone next time we're making breaking changes.\n            // Bringing it back inside can cause things like infinite change detection loops and changed\n            // after checked errors if people's code isn't handling it properly.\n            this._ngZone.runOutsideAngular(function () {\n                _this._currentSubscription =\n                    (_this.debounce ? stream.pipe(operators.debounceTime(_this.debounce)) : stream).subscribe(_this.event);\n            });\n        };\n        CdkObserveContent.prototype._unsubscribe = function () {\n            var _a;\n            (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        };\n        return CdkObserveContent;\n    }());\n    CdkObserveContent.decorators = [\n        { type: i0.Directive, args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                },] }\n    ];\n    CdkObserveContent.ctorParameters = function () { return [\n        { type: ContentObserver },\n        { type: i0.ElementRef },\n        { type: i0.NgZone }\n    ]; };\n    CdkObserveContent.propDecorators = {\n        event: [{ type: i0.Output, args: ['cdkObserveContent',] }],\n        disabled: [{ type: i0.Input, args: ['cdkObserveContentDisabled',] }],\n        debounce: [{ type: i0.Input }]\n    };\n    var ObserversModule = /** @class */ (function () {\n        function ObserversModule() {\n        }\n        return ObserversModule;\n    }());\n    ObserversModule.decorators = [\n        { type: i0.NgModule, args: [{\n                    exports: [CdkObserveContent],\n                    declarations: [CdkObserveContent],\n                    providers: [MutationObserverFactory]\n                },] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.CdkObserveContent = CdkObserveContent;\n    exports.ContentObserver = ContentObserver;\n    exports.MutationObserverFactory = MutationObserverFactory;\n    exports.ObserversModule = ObserversModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-observers.umd.js.map\n"]}
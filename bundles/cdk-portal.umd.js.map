{"version":3,"file":"cdk-portal.umd.js","sources":["../../../../../../src/cdk/portal/portal-errors.ts","../../../../../../src/cdk/portal/portal.ts","../../../../../../src/cdk/portal/dom-portal-outlet.ts","../../../../../../src/cdk/portal/portal-directives.ts","../../../../../../src/cdk/portal/portal-injector.ts","../../../../../../src/cdk/portal/public-api.ts","../../../../../../src/cdk/portal/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n              'a ComponentPortal or a TemplatePortal.');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector,\n    ComponentFactoryResolver,\n} from '@angular/core';\nimport {\n    throwNullPortalOutletError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalOutletAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (host == null) {\n      throwNullPortalOutletError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return <T> host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** [Optional] Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * Defaults to using the resolver from the outlet that the portal is attached to.\n   */\n  componentFactoryResolver?: ComponentFactoryResolver | null;\n\n  constructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null,\n      componentFactoryResolver?: ComponentFactoryResolver | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef: TemplateRef<C>;\n\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef: ViewContainerRef;\n\n  /** Contextual data to be passed in to the embedded view. */\n  context: C | undefined;\n\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalOutletAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal, DomPortal} from './portal';\n\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  private _document: Document;\n\n  constructor(\n      /** Element into which the content is projected. */\n      public outletElement: Element,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _appRef: ApplicationRef,\n      private _defaultInjector: Injector,\n\n      /**\n       * @deprecated `_document` Parameter to be made required.\n       * @breaking-change 10.0.0\n       */\n      _document?: any) {\n    super();\n    this._document = _document;\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.injector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 10.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    element.parentNode.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  }\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  dispose(): void {\n    super.dispose();\n    if (this.outletElement.parentNode != null) {\n      this.outletElement.parentNode.removeChild(this.outletElement);\n    }\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [{\n    provide: CdkPortal,\n    useExisting: TemplatePortalDirective\n  }]\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n  inputs: ['portal: cdkPortalOutlet']\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _document: Document;\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _viewContainerRef: ViewContainerRef,\n\n      /**\n       * @deprecated `_document` parameter to be made required.\n       * @breaking-change 9.0.0\n       */\n      @Inject(DOCUMENT) _document?: any) {\n    super();\n    this._document = _document;\n  }\n\n  /** Portal associated with the Portal outlet. */\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\n      new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedPortal = null;\n    this._attachedRef = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    const ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.injector);\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 9.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  }\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n           nativeElement : nativeElement.parentNode!) as HTMLElement;\n  }\n\n  static ngAcceptInputType_portal: Portal<any> | null | undefined | '';\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: ['portal: cdkPortalHost'],\n  providers: [{\n    provide: CdkPortalOutlet,\n    useExisting: PortalHostDirective\n  }]\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n\n@NgModule({\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nexport class PortalInjector implements Injector {\n  constructor(\n    private _parentInjector: Injector,\n    private _customTokens: WeakMap<any, any>) { }\n\n  get(token: any, notFoundValue?: any): any {\n    const value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './portal';\nexport * from './dom-portal-outlet';\nexport * from './portal-directives';\nexport * from './portal-injector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["__extends","ElementRef","Directive","TemplateRef","ViewContainerRef","EventEmitter","ComponentFactoryResolver","Inject","DOCUMENT","Output","NgModule"],"mappings":"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"}
{"version":3,"sources":["src/cdk/cdk-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","testing","tslib","this","TestKey","ComponentHarness","locatorFactory","prototype","host","__awaiter","__generator","_a","rootElement","documentRootLocatorFactory","locatorFor","queries","_i","arguments","length","apply","__spread","locatorForOptional","locatorForAll","forceStabilize","waitForTasksOutsideAngular","HarnessPredicate","harnessType","options","_predicates","_descriptions","_addBaseOptions","stringMatches","value","pattern","label","sent","test","add","description","predicate","push","addOption","name","option","undefined","_valueAsString","JSON","stringify","_","v","RegExp","toString","replace","item","filter","harnesses","results","_this","Promise","all","map","h","evaluate","i","harness","p","reduce","combined","current","getDescription","join","getSelector","_ancestor","split","part","trim","hostSelector","ancestor","selector","matchesSelector","HarnessEnvironment","rawRootElement","createTestElement","createEnvironment","getDocumentRoot","_assertResultFound","_getAllHarnessesAndTestElements","_getDescriptionForLocatorForQueries","harnessLoaderFor","_b","getAllRawElements","_getDescriptionForHarnessLoaderQuery","harnessLoaderForOptional","elements","harnessLoaderForAll","element","getHarness","query","getAllHarnesses","getChildLoader","getAllChildLoaders","e","createComponentHarness","allQueries","harnessQueries","elementQueries","harnessTypes","rawElements","skipSelectorCheck","perElementMatches","_c","_parseQueries","e_1","Set","queries_1","__values","queries_1_1","next","done","e_1_1","error","return","call","size","rawElement","testElement","_getQueryResultForElement","_removeDuplicateQueryResults","concat","testElementMatched","matchedHarnessTypes","dedupedMatches","results_1","results_1_1","result","e_2","has","constructor","e_2_1","queryDescriptions","Error","desc","_getDescriptionForTestElementQuery","_getDescriptionForComponentHarnessQuery","harnessPredicate","Object","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/testing', ['exports', 'tslib'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.testing = {}), global.tslib));\n}(this, (function (exports, tslib) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base class for component harnesses that all component harness authors should extend. This base\n     * component harness provides the basic ability to locate element and sub-component harness. It\n     * should be inherited when defining user's own harness.\n     */\n    var ComponentHarness = /** @class */ (function () {\n        function ComponentHarness(locatorFactory) {\n            this.locatorFactory = locatorFactory;\n        }\n        /** Gets a `Promise` for the `TestElement` representing the host element of the component. */\n        ComponentHarness.prototype.host = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorFactory.rootElement];\n                });\n            });\n        };\n        /**\n         * Gets a `LocatorFactory` for the document root element. This factory can be used to create\n         * locators for elements that a component creates outside of its own root element. (e.g. by\n         * appending to document.body).\n         */\n        ComponentHarness.prototype.documentRootLocatorFactory = function () {\n            return this.locatorFactory.documentRootLocatorFactory();\n        };\n        /**\n         * Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance\n         * or element under the host element of this `ComponentHarness`.\n         * @param queries A list of queries specifying which harnesses and elements to search for:\n         *   - A `string` searches for elements matching the CSS selector specified by the string.\n         *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\n         *     given class.\n         *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\n         *     predicate.\n         * @return An asynchronous locator function that searches for and returns a `Promise` for the\n         *   first element or harness matching the given search criteria. Matches are ordered first by\n         *   order in the DOM, and second by order in the queries list. If no matches are found, the\n         *   `Promise` rejects. The type that the `Promise` resolves to is a union of all result types for\n         *   each query.\n         *\n         * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\n         * `DivHarness.hostSelector === 'div'`:\n         * - `await ch.locatorFor(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`\n         * - `await ch.locatorFor('div', DivHarness)()` gets a `TestElement` instance for `#d1`\n         * - `await ch.locatorFor('span')()` throws because the `Promise` rejects.\n         */\n        ComponentHarness.prototype.locatorFor = function () {\n            var _a;\n            var queries = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                queries[_i] = arguments[_i];\n            }\n            return (_a = this.locatorFactory).locatorFor.apply(_a, tslib.__spread(queries));\n        };\n        /**\n         * Creates an asynchronous locator function that can be used to find a `ComponentHarness` instance\n         * or element under the host element of this `ComponentHarness`.\n         * @param queries A list of queries specifying which harnesses and elements to search for:\n         *   - A `string` searches for elements matching the CSS selector specified by the string.\n         *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\n         *     given class.\n         *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\n         *     predicate.\n         * @return An asynchronous locator function that searches for and returns a `Promise` for the\n         *   first element or harness matching the given search criteria. Matches are ordered first by\n         *   order in the DOM, and second by order in the queries list. If no matches are found, the\n         *   `Promise` is resolved with `null`. The type that the `Promise` resolves to is a union of all\n         *   result types for each query or null.\n         *\n         * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\n         * `DivHarness.hostSelector === 'div'`:\n         * - `await ch.locatorForOptional(DivHarness, 'div')()` gets a `DivHarness` instance for `#d1`\n         * - `await ch.locatorForOptional('div', DivHarness)()` gets a `TestElement` instance for `#d1`\n         * - `await ch.locatorForOptional('span')()` gets `null`.\n         */\n        ComponentHarness.prototype.locatorForOptional = function () {\n            var _a;\n            var queries = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                queries[_i] = arguments[_i];\n            }\n            return (_a = this.locatorFactory).locatorForOptional.apply(_a, tslib.__spread(queries));\n        };\n        /**\n         * Creates an asynchronous locator function that can be used to find `ComponentHarness` instances\n         * or elements under the host element of this `ComponentHarness`.\n         * @param queries A list of queries specifying which harnesses and elements to search for:\n         *   - A `string` searches for elements matching the CSS selector specified by the string.\n         *   - A `ComponentHarness` constructor searches for `ComponentHarness` instances matching the\n         *     given class.\n         *   - A `HarnessPredicate` searches for `ComponentHarness` instances matching the given\n         *     predicate.\n         * @return An asynchronous locator function that searches for and returns a `Promise` for all\n         *   elements and harnesses matching the given search criteria. Matches are ordered first by\n         *   order in the DOM, and second by order in the queries list. If an element matches more than\n         *   one `ComponentHarness` class, the locator gets an instance of each for the same element. If\n         *   an element matches multiple `string` selectors, only one `TestElement` instance is returned\n         *   for that element. The type that the `Promise` resolves to is an array where each element is\n         *   the union of all result types for each query.\n         *\n         * e.g. Given the following DOM: `<div id=\"d1\" /><div id=\"d2\" />`, and assuming\n         * `DivHarness.hostSelector === 'div'` and `IdIsD1Harness.hostSelector === '#d1'`:\n         * - `await ch.locatorForAll(DivHarness, 'div')()` gets `[\n         *     DivHarness, // for #d1\n         *     TestElement, // for #d1\n         *     DivHarness, // for #d2\n         *     TestElement // for #d2\n         *   ]`\n         * - `await ch.locatorForAll('div', '#d1')()` gets `[\n         *     TestElement, // for #d1\n         *     TestElement // for #d2\n         *   ]`\n         * - `await ch.locatorForAll(DivHarness, IdIsD1Harness)()` gets `[\n         *     DivHarness, // for #d1\n         *     IdIsD1Harness, // for #d1\n         *     DivHarness // for #d2\n         *   ]`\n         * - `await ch.locatorForAll('span')()` gets `[]`.\n         */\n        ComponentHarness.prototype.locatorForAll = function () {\n            var _a;\n            var queries = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                queries[_i] = arguments[_i];\n            }\n            return (_a = this.locatorFactory).locatorForAll.apply(_a, tslib.__spread(queries));\n        };\n        /**\n         * Flushes change detection and async tasks in the Angular zone.\n         * In most cases it should not be necessary to call this manually. However, there may be some edge\n         * cases where it is needed to fully flush animation events.\n         */\n        ComponentHarness.prototype.forceStabilize = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorFactory.forceStabilize()];\n                });\n            });\n        };\n        /**\n         * Waits for all scheduled or running async tasks to complete. This allows harness\n         * authors to wait for async tasks outside of the Angular zone.\n         */\n        ComponentHarness.prototype.waitForTasksOutsideAngular = function () {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    return [2 /*return*/, this.locatorFactory.waitForTasksOutsideAngular()];\n                });\n            });\n        };\n        return ComponentHarness;\n    }());\n    /**\n     * A class used to associate a ComponentHarness class with predicates functions that can be used to\n     * filter instances of the class.\n     */\n    var HarnessPredicate = /** @class */ (function () {\n        function HarnessPredicate(harnessType, options) {\n            this.harnessType = harnessType;\n            this._predicates = [];\n            this._descriptions = [];\n            this._addBaseOptions(options);\n        }\n        /**\n         * Checks if the specified nullable string value matches the given pattern.\n         * @param value The nullable string value to check, or a Promise resolving to the\n         *   nullable string value.\n         * @param pattern The pattern the value is expected to match. If `pattern` is a string,\n         *   `value` is expected to match exactly. If `pattern` is a regex, a partial match is\n         *   allowed. If `pattern` is `null`, the value is expected to be `null`.\n         * @return Whether the value matches the pattern.\n         */\n        HarnessPredicate.stringMatches = function (value, pattern) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, value];\n                        case 1:\n                            value = _a.sent();\n                            if (pattern === null) {\n                                return [2 /*return*/, value === null];\n                            }\n                            else if (value === null) {\n                                return [2 /*return*/, false];\n                            }\n                            return [2 /*return*/, typeof pattern === 'string' ? value === pattern : pattern.test(value)];\n                    }\n                });\n            });\n        };\n        /**\n         * Adds a predicate function to be run against candidate harnesses.\n         * @param description A description of this predicate that may be used in error messages.\n         * @param predicate An async predicate function.\n         * @return this (for method chaining).\n         */\n        HarnessPredicate.prototype.add = function (description, predicate) {\n            this._descriptions.push(description);\n            this._predicates.push(predicate);\n            return this;\n        };\n        /**\n         * Adds a predicate function that depends on an option value to be run against candidate\n         * harnesses. If the option value is undefined, the predicate will be ignored.\n         * @param name The name of the option (may be used in error messages).\n         * @param option The option value.\n         * @param predicate The predicate function to run if the option value is not undefined.\n         * @return this (for method chaining).\n         */\n        HarnessPredicate.prototype.addOption = function (name, option, predicate) {\n            if (option !== undefined) {\n                this.add(name + \" = \" + _valueAsString(option), function (item) { return predicate(item, option); });\n            }\n            return this;\n        };\n        /**\n         * Filters a list of harnesses on this predicate.\n         * @param harnesses The list of harnesses to filter.\n         * @return A list of harnesses that satisfy this predicate.\n         */\n        HarnessPredicate.prototype.filter = function (harnesses) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var results;\n                var _this = this;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, Promise.all(harnesses.map(function (h) { return _this.evaluate(h); }))];\n                        case 1:\n                            results = _a.sent();\n                            return [2 /*return*/, harnesses.filter(function (_, i) { return results[i]; })];\n                    }\n                });\n            });\n        };\n        /**\n         * Evaluates whether the given harness satisfies this predicate.\n         * @param harness The harness to check\n         * @return A promise that resolves to true if the harness satisfies this predicate,\n         *   and resolves to false otherwise.\n         */\n        HarnessPredicate.prototype.evaluate = function (harness) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var results;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, Promise.all(this._predicates.map(function (p) { return p(harness); }))];\n                        case 1:\n                            results = _a.sent();\n                            return [2 /*return*/, results.reduce(function (combined, current) { return combined && current; }, true)];\n                    }\n                });\n            });\n        };\n        /** Gets a description of this predicate for use in error messages. */\n        HarnessPredicate.prototype.getDescription = function () {\n            return this._descriptions.join(', ');\n        };\n        /** Gets the selector used to find candidate elements. */\n        HarnessPredicate.prototype.getSelector = function () {\n            var _this = this;\n            return this._ancestor.split(',')\n                .map(function (part) { return (part.trim() + \" \" + _this.harnessType.hostSelector).trim(); })\n                .join(',');\n        };\n        /** Adds base options common to all harness types. */\n        HarnessPredicate.prototype._addBaseOptions = function (options) {\n            var _this = this;\n            this._ancestor = options.ancestor || '';\n            if (this._ancestor) {\n                this._descriptions.push(\"has ancestor matching selector \\\"\" + this._ancestor + \"\\\"\");\n            }\n            var selector = options.selector;\n            if (selector !== undefined) {\n                this.add(\"host matches selector \\\"\" + selector + \"\\\"\", function (item) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                    return tslib.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, item.host()];\n                            case 1: return [2 /*return*/, (_a.sent()).matchesSelector(selector)];\n                        }\n                    });\n                }); });\n            }\n        };\n        return HarnessPredicate;\n    }());\n    /** Represent a value as a string for the purpose of logging. */\n    function _valueAsString(value) {\n        if (value === undefined) {\n            return 'undefined';\n        }\n        // `JSON.stringify` doesn't handle RegExp properly, so we need a custom replacer.\n        try {\n            return JSON.stringify(value, function (_, v) {\n                return v instanceof RegExp ? \"/\" + v.toString() + \"/\" :\n                    typeof v === 'string' ? v.replace('/\\//g', '\\\\/') : v;\n            }).replace(/\"\\/\\//g, '\\\\/').replace(/\\/\\/\"/g, '\\\\/').replace(/\\\\\\//g, '/');\n        }\n        catch (_a) {\n            // `JSON.stringify` will throw if the object is cyclical,\n            // in this case the best we can do is report the value as `{...}`.\n            return '{...}';\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Base harness environment class that can be extended to allow `ComponentHarness`es to be used in\n     * different test environments (e.g. testbed, protractor, etc.). This class implements the\n     * functionality of both a `HarnessLoader` and `LocatorFactory`. This class is generic on the raw\n     * element type, `E`, used by the particular test environment.\n     */\n    var HarnessEnvironment = /** @class */ (function () {\n        function HarnessEnvironment(rawRootElement) {\n            this.rawRootElement = rawRootElement;\n            this.rootElement = this.createTestElement(rawRootElement);\n        }\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.documentRootLocatorFactory = function () {\n            return this.createEnvironment(this.getDocumentRoot());\n        };\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.locatorFor = function () {\n            var _this = this;\n            var queries = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                queries[_i] = arguments[_i];\n            }\n            return function () { return _assertResultFound(_this._getAllHarnessesAndTestElements(queries), _getDescriptionForLocatorForQueries(queries)); };\n        };\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.locatorForOptional = function () {\n            var _this = this;\n            var queries = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                queries[_i] = arguments[_i];\n            }\n            return function () { return tslib.__awaiter(_this, void 0, void 0, function () { return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getAllHarnessesAndTestElements(queries)];\n                    case 1: return [2 /*return*/, (_a.sent())[0] || null];\n                }\n            }); }); };\n        };\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.locatorForAll = function () {\n            var _this = this;\n            var queries = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                queries[_i] = arguments[_i];\n            }\n            return function () { return _this._getAllHarnessesAndTestElements(queries); };\n        };\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.harnessLoaderFor = function (selector) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = this.createEnvironment;\n                            return [4 /*yield*/, _assertResultFound(this.getAllRawElements(selector), [_getDescriptionForHarnessLoaderQuery(selector)])];\n                        case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.harnessLoaderForOptional = function (selector) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var elements;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getAllRawElements(selector)];\n                        case 1:\n                            elements = _a.sent();\n                            return [2 /*return*/, elements[0] ? this.createEnvironment(elements[0]) : null];\n                    }\n                });\n            });\n        };\n        // Implemented as part of the `LocatorFactory` interface.\n        HarnessEnvironment.prototype.harnessLoaderForAll = function (selector) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var elements;\n                var _this = this;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getAllRawElements(selector)];\n                        case 1:\n                            elements = _a.sent();\n                            return [2 /*return*/, elements.map(function (element) { return _this.createEnvironment(element); })];\n                    }\n                });\n            });\n        };\n        // Implemented as part of the `HarnessLoader` interface.\n        HarnessEnvironment.prototype.getHarness = function (query) {\n            return this.locatorFor(query)();\n        };\n        // Implemented as part of the `HarnessLoader` interface.\n        HarnessEnvironment.prototype.getAllHarnesses = function (query) {\n            return this.locatorForAll(query)();\n        };\n        // Implemented as part of the `HarnessLoader` interface.\n        HarnessEnvironment.prototype.getChildLoader = function (selector) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a;\n                return tslib.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _a = this.createEnvironment;\n                            return [4 /*yield*/, _assertResultFound(this.getAllRawElements(selector), [_getDescriptionForHarnessLoaderQuery(selector)])];\n                        case 1: return [2 /*return*/, _a.apply(this, [_b.sent()])];\n                    }\n                });\n            });\n        };\n        // Implemented as part of the `HarnessLoader` interface.\n        HarnessEnvironment.prototype.getAllChildLoaders = function (selector) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _this = this;\n                return tslib.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.getAllRawElements(selector)];\n                        case 1: return [2 /*return*/, (_a.sent()).map(function (e) { return _this.createEnvironment(e); })];\n                    }\n                });\n            });\n        };\n        /** Creates a `ComponentHarness` for the given harness type with the given raw host element. */\n        HarnessEnvironment.prototype.createComponentHarness = function (harnessType, element) {\n            return new harnessType(this.createEnvironment(element));\n        };\n        /**\n         * Matches the given raw elements with the given list of element and harness queries to produce a\n         * list of matched harnesses and test elements.\n         */\n        HarnessEnvironment.prototype._getAllHarnessesAndTestElements = function (queries) {\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, allQueries, harnessQueries, elementQueries, harnessTypes, rawElements, skipSelectorCheck, perElementMatches;\n                var _b;\n                var _this = this;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _a = _parseQueries(queries), allQueries = _a.allQueries, harnessQueries = _a.harnessQueries, elementQueries = _a.elementQueries, harnessTypes = _a.harnessTypes;\n                            return [4 /*yield*/, this.getAllRawElements(tslib.__spread(elementQueries, harnessQueries.map(function (predicate) { return predicate.getSelector(); })).join(','))];\n                        case 1:\n                            rawElements = _c.sent();\n                            skipSelectorCheck = (elementQueries.length === 0 && harnessTypes.size === 1) ||\n                                harnessQueries.length === 0;\n                            return [4 /*yield*/, Promise.all(rawElements.map(function (rawElement) { return tslib.__awaiter(_this, void 0, void 0, function () {\n                                    var testElement, allResultsForElement;\n                                    var _this = this;\n                                    return tslib.__generator(this, function (_a) {\n                                        switch (_a.label) {\n                                            case 0:\n                                                testElement = this.createTestElement(rawElement);\n                                                return [4 /*yield*/, Promise.all(\n                                                    // For each query, get `null` if it doesn't match, or a `TestElement` or\n                                                    // `ComponentHarness` as appropriate if it does match. This gives us everything that\n                                                    // matches the current raw element, but it may contain duplicate entries (e.g. multiple\n                                                    // `TestElement` or multiple `ComponentHarness` of the same type.\n                                                    allQueries.map(function (query) {\n                                                        return _this._getQueryResultForElement(query, rawElement, testElement, skipSelectorCheck);\n                                                    }))];\n                                            case 1:\n                                                allResultsForElement = _a.sent();\n                                                return [2 /*return*/, _removeDuplicateQueryResults(allResultsForElement)];\n                                        }\n                                    });\n                                }); }))];\n                        case 2:\n                            perElementMatches = _c.sent();\n                            return [2 /*return*/, (_b = []).concat.apply(_b, tslib.__spread(perElementMatches))];\n                    }\n                });\n            });\n        };\n        /**\n         * Check whether the given query matches the given element, if it does return the matched\n         * `TestElement` or `ComponentHarness`, if it does not, return null. In cases where the caller\n         * knows for sure that the query matches the element's selector, `skipSelectorCheck` can be used\n         * to skip verification and optimize performance.\n         */\n        HarnessEnvironment.prototype._getQueryResultForElement = function (query, rawElement, testElement, skipSelectorCheck) {\n            if (skipSelectorCheck === void 0) { skipSelectorCheck = false; }\n            return tslib.__awaiter(this, void 0, void 0, function () {\n                var _a, _b, harness;\n                return tslib.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            if (!(typeof query === 'string')) return [3 /*break*/, 3];\n                            _a = skipSelectorCheck;\n                            if (_a) return [3 /*break*/, 2];\n                            return [4 /*yield*/, testElement.matchesSelector(query)];\n                        case 1:\n                            _a = (_c.sent());\n                            _c.label = 2;\n                        case 2: return [2 /*return*/, ((_a) ? testElement : null)];\n                        case 3:\n                            _b = skipSelectorCheck;\n                            if (_b) return [3 /*break*/, 5];\n                            return [4 /*yield*/, testElement.matchesSelector(query.getSelector())];\n                        case 4:\n                            _b = (_c.sent());\n                            _c.label = 5;\n                        case 5:\n                            if (!_b) return [3 /*break*/, 7];\n                            harness = this.createComponentHarness(query.harnessType, rawElement);\n                            return [4 /*yield*/, query.evaluate(harness)];\n                        case 6: return [2 /*return*/, (_c.sent()) ? harness : null];\n                        case 7: return [2 /*return*/, null];\n                    }\n                });\n            });\n        };\n        return HarnessEnvironment;\n    }());\n    /**\n     * Parses a list of queries in the format accepted by the `locatorFor*` methods into an easier to\n     * work with format.\n     */\n    function _parseQueries(queries) {\n        var e_1, _a;\n        var allQueries = [];\n        var harnessQueries = [];\n        var elementQueries = [];\n        var harnessTypes = new Set();\n        try {\n            for (var queries_1 = tslib.__values(queries), queries_1_1 = queries_1.next(); !queries_1_1.done; queries_1_1 = queries_1.next()) {\n                var query = queries_1_1.value;\n                if (typeof query === 'string') {\n                    allQueries.push(query);\n                    elementQueries.push(query);\n                }\n                else {\n                    var predicate = query instanceof HarnessPredicate ? query : new HarnessPredicate(query, {});\n                    allQueries.push(predicate);\n                    harnessQueries.push(predicate);\n                    harnessTypes.add(predicate.harnessType);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (queries_1_1 && !queries_1_1.done && (_a = queries_1.return)) _a.call(queries_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return { allQueries: allQueries, harnessQueries: harnessQueries, elementQueries: elementQueries, harnessTypes: harnessTypes };\n    }\n    /**\n     * Removes duplicate query results for a particular element. (e.g. multiple `TestElement`\n     * instances or multiple instances of the same `ComponentHarness` class.\n     */\n    function _removeDuplicateQueryResults(results) {\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var testElementMatched, matchedHarnessTypes, dedupedMatches, results_1, results_1_1, result;\n            var e_2, _a;\n            return tslib.__generator(this, function (_b) {\n                testElementMatched = false;\n                matchedHarnessTypes = new Set();\n                dedupedMatches = [];\n                try {\n                    for (results_1 = tslib.__values(results), results_1_1 = results_1.next(); !results_1_1.done; results_1_1 = results_1.next()) {\n                        result = results_1_1.value;\n                        if (!result) {\n                            continue;\n                        }\n                        if (result instanceof ComponentHarness) {\n                            if (!matchedHarnessTypes.has(result.constructor)) {\n                                matchedHarnessTypes.add(result.constructor);\n                                dedupedMatches.push(result);\n                            }\n                        }\n                        else if (!testElementMatched) {\n                            testElementMatched = true;\n                            dedupedMatches.push(result);\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (results_1_1 && !results_1_1.done && (_a = results_1.return)) _a.call(results_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                return [2 /*return*/, dedupedMatches];\n            });\n        });\n    }\n    /** Verifies that there is at least one result in an array. */\n    function _assertResultFound(results, queryDescriptions) {\n        return tslib.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, results];\n                    case 1:\n                        result = (_a.sent())[0];\n                        if (result == undefined) {\n                            throw Error(\"Failed to find element matching one of the following queries:\\n\" +\n                                queryDescriptions.map(function (desc) { return \"(\" + desc + \")\"; }).join(',\\n'));\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    }\n    /** Gets a list of description strings from a list of queries. */\n    function _getDescriptionForLocatorForQueries(queries) {\n        return queries.map(function (query) { return typeof query === 'string' ?\n            _getDescriptionForTestElementQuery(query) : _getDescriptionForComponentHarnessQuery(query); });\n    }\n    /** Gets a description string for a `ComponentHarness` query. */\n    function _getDescriptionForComponentHarnessQuery(query) {\n        var harnessPredicate = query instanceof HarnessPredicate ? query : new HarnessPredicate(query, {});\n        var _a = harnessPredicate.harnessType, name = _a.name, hostSelector = _a.hostSelector;\n        var description = name + \" with host element matching selector: \\\"\" + hostSelector + \"\\\"\";\n        var constraints = harnessPredicate.getDescription();\n        return description + (constraints ?\n            \" satisfying the constraints: \" + harnessPredicate.getDescription() : '');\n    }\n    /** Gets a description string for a `TestElement` query. */\n    function _getDescriptionForTestElementQuery(selector) {\n        return \"TestElement for element matching selector: \\\"\" + selector + \"\\\"\";\n    }\n    /** Gets a description string for a `HarnessLoader` query. */\n    function _getDescriptionForHarnessLoaderQuery(selector) {\n        return \"HarnessLoader for element matching selector: \\\"\" + selector + \"\\\"\";\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    (function (TestKey) {\n        TestKey[TestKey[\"BACKSPACE\"] = 0] = \"BACKSPACE\";\n        TestKey[TestKey[\"TAB\"] = 1] = \"TAB\";\n        TestKey[TestKey[\"ENTER\"] = 2] = \"ENTER\";\n        TestKey[TestKey[\"SHIFT\"] = 3] = \"SHIFT\";\n        TestKey[TestKey[\"CONTROL\"] = 4] = \"CONTROL\";\n        TestKey[TestKey[\"ALT\"] = 5] = \"ALT\";\n        TestKey[TestKey[\"ESCAPE\"] = 6] = \"ESCAPE\";\n        TestKey[TestKey[\"PAGE_UP\"] = 7] = \"PAGE_UP\";\n        TestKey[TestKey[\"PAGE_DOWN\"] = 8] = \"PAGE_DOWN\";\n        TestKey[TestKey[\"END\"] = 9] = \"END\";\n        TestKey[TestKey[\"HOME\"] = 10] = \"HOME\";\n        TestKey[TestKey[\"LEFT_ARROW\"] = 11] = \"LEFT_ARROW\";\n        TestKey[TestKey[\"UP_ARROW\"] = 12] = \"UP_ARROW\";\n        TestKey[TestKey[\"RIGHT_ARROW\"] = 13] = \"RIGHT_ARROW\";\n        TestKey[TestKey[\"DOWN_ARROW\"] = 14] = \"DOWN_ARROW\";\n        TestKey[TestKey[\"INSERT\"] = 15] = \"INSERT\";\n        TestKey[TestKey[\"DELETE\"] = 16] = \"DELETE\";\n        TestKey[TestKey[\"F1\"] = 17] = \"F1\";\n        TestKey[TestKey[\"F2\"] = 18] = \"F2\";\n        TestKey[TestKey[\"F3\"] = 19] = \"F3\";\n        TestKey[TestKey[\"F4\"] = 20] = \"F4\";\n        TestKey[TestKey[\"F5\"] = 21] = \"F5\";\n        TestKey[TestKey[\"F6\"] = 22] = \"F6\";\n        TestKey[TestKey[\"F7\"] = 23] = \"F7\";\n        TestKey[TestKey[\"F8\"] = 24] = \"F8\";\n        TestKey[TestKey[\"F9\"] = 25] = \"F9\";\n        TestKey[TestKey[\"F10\"] = 26] = \"F10\";\n        TestKey[TestKey[\"F11\"] = 27] = \"F11\";\n        TestKey[TestKey[\"F12\"] = 28] = \"F12\";\n        TestKey[TestKey[\"META\"] = 29] = \"META\";\n    })(exports.TestKey || (exports.TestKey = {}));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.ComponentHarness = ComponentHarness;\n    exports.HarnessEnvironment = HarnessEnvironment;\n    exports.HarnessPredicate = HarnessPredicate;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-testing.umd.js.map\n"]}
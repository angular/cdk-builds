{"version":3,"file":"cdk-testing.umd.min.js","sources":["../../src/cdk/testing/event-objects.ts","../../src/cdk/testing/dispatch-events.ts","../../src/cdk/testing/element-focus.ts","../../src/cdk/testing/type-in-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Modifier keys that may be held while typing. */\nexport interface ModifierKeys {\n  control?: boolean;\n  alt?: boolean;\n  shift?: boolean;\n  meta?: boolean;\n}\n\n/**\n * Creates a browser MouseEvent with the specified options.\n * @docs-private\n */\nexport function createMouseEvent(type: string, x = 0, y = 0, button = 0) {\n  const event = document.createEvent('MouseEvent');\n  const originalPreventDefault = event.preventDefault;\n\n  event.initMouseEvent(type,\n    true, /* canBubble */\n    true, /* cancelable */\n    window, /* view */\n    0, /* detail */\n    x, /* screenX */\n    y, /* screenY */\n    x, /* clientX */\n    y, /* clientY */\n    false, /* ctrlKey */\n    false, /* altKey */\n    false, /* shiftKey */\n    false, /* metaKey */\n    button, /* button */\n    null /* relatedTarget */);\n\n  // `initMouseEvent` doesn't allow us to pass the `buttons` and\n  // defaults it to 0 which looks like a fake event.\n  Object.defineProperty(event, 'buttons', {get: () => 1});\n\n  // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\n  event.preventDefault = function() {\n    Object.defineProperty(event, 'defaultPrevented', { get: () => true });\n    return originalPreventDefault.apply(this, arguments);\n  };\n\n  return event;\n}\n\n/**\n * Creates a browser TouchEvent with the specified pointer coordinates.\n * @docs-private\n */\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0) {\n  // In favor of creating events that work for most of the browsers, the event is created\n  // as a basic UI Event. The necessary details for the event will be set manually.\n  const event = document.createEvent('UIEvent');\n  const touchDetails = {pageX, pageY};\n\n  // TS3.6 removes the initUIEvent method and suggests porting to \"new UIEvent()\".\n  (event as any).initUIEvent(type, true, true, window, 0);\n\n  // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n  // the touch details.\n  Object.defineProperties(event, {\n    touches: {value: [touchDetails]},\n    targetTouches: {value: [touchDetails]},\n    changedTouches: {value: [touchDetails]}\n  });\n\n  return event;\n}\n\n/**\n * Dispatches a keydown event from an element.\n * @docs-private\n */\nexport function createKeyboardEvent(type: string, keyCode: number = 0, key: string = '',\n                                    target?: Element, modifiers: ModifierKeys = {}) {\n  const event = document.createEvent('KeyboardEvent') as any;\n  const originalPreventDefault = event.preventDefault;\n\n  // Firefox does not support `initKeyboardEvent`, but supports `initKeyEvent`.\n  if (event.initKeyEvent) {\n    event.initKeyEvent(type, true, true, window, modifiers.control, modifiers.alt, modifiers.shift,\n        modifiers.meta, keyCode);\n  } else {\n    // `initKeyboardEvent` expects to receive modifiers as a whitespace-delimited string\n    // See https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent\n    const modifiersStr = (modifiers.control ? 'Control ' : '' + modifiers.alt ? 'Alt ' : '' +\n        modifiers.shift ? 'Shift ' : '' + modifiers.meta ? 'Meta' : '').trim();\n    event.initKeyboardEvent(type,\n        true, /* canBubble */\n        true, /* cancelable */\n        window, /* view */\n        0, /* char */\n        key, /* key */\n        0, /* location */\n        modifiersStr, /* modifiersList */\n        false /* repeat */);\n  }\n\n  // Webkit Browsers don't set the keyCode when calling the init function.\n  // See related bug https://bugs.webkit.org/show_bug.cgi?id=16735\n  Object.defineProperties(event, {\n    keyCode: { get: () => keyCode },\n    key: { get: () => key },\n    target: { get: () => target },\n    ctrlKey: { get: () => !!modifiers.control },\n    altKey: { get: () => !!modifiers.alt },\n    shiftKey: { get: () => !!modifiers.shift },\n    metaKey: { get: () => !!modifiers.meta }\n  });\n\n  // IE won't set `defaultPrevented` on synthetic events so we need to do it manually.\n  event.preventDefault = function() {\n    Object.defineProperty(event, 'defaultPrevented', { get: () => true });\n    return originalPreventDefault.apply(this, arguments);\n  };\n\n  return event;\n}\n\n/**\n * Creates a fake event object with any desired event type.\n * @docs-private\n */\nexport function createFakeEvent(type: string, canBubble = false, cancelable = true) {\n  const event = document.createEvent('Event');\n  event.initEvent(type, canBubble, cancelable);\n  return event;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  createFakeEvent,\n  createKeyboardEvent,\n  createMouseEvent,\n  createTouchEvent,\n  ModifierKeys\n} from './event-objects';\n\n/**\n * Utility to dispatch any event on a Node.\n * @docs-private\n */\nexport function dispatchEvent(node: Node | Window, event: Event): Event {\n  node.dispatchEvent(event);\n  return event;\n}\n\n/**\n * Shorthand to dispatch a fake event on a specified node.\n * @docs-private\n */\nexport function dispatchFakeEvent(node: Node | Window, type: string, canBubble?: boolean): Event {\n  return dispatchEvent(node, createFakeEvent(type, canBubble));\n}\n\n/**\n * Shorthand to dispatch a keyboard event with a specified key code.\n * @docs-private\n */\nexport function dispatchKeyboardEvent(node: Node, type: string, keyCode?: number, key?: string,\n                                      target?: Element, modifiers?: ModifierKeys): KeyboardEvent {\n  return dispatchEvent(node,\n      createKeyboardEvent(type, keyCode, key, target, modifiers)) as KeyboardEvent;\n}\n\n/**\n * Shorthand to dispatch a mouse event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchMouseEvent(node: Node, type: string, x = 0, y = 0,\n  event = createMouseEvent(type, x, y)): MouseEvent {\n  return dispatchEvent(node, event) as MouseEvent;\n}\n\n/**\n * Shorthand to dispatch a touch event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchTouchEvent(node: Node, type: string, x = 0, y = 0) {\n  return dispatchEvent(node, createTouchEvent(type, x, y));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dispatchFakeEvent} from './dispatch-events';\n\nfunction triggerFocusChange(element: HTMLElement, event: 'focus' | 'blur') {\n  let eventFired = false;\n  const handler = () => eventFired = true;\n  element.addEventListener(event, handler);\n  element[event]();\n  element.removeEventListener(event, handler);\n  if (!eventFired) {\n    dispatchFakeEvent(element, event);\n  }\n}\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers, like IE11, will call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n * @docs-private\n */\nexport function patchElementFocus(element: HTMLElement) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n\n/** @docs-private */\nexport function triggerFocus(element: HTMLElement) {\n  triggerFocusChange(element, 'focus');\n}\n\n/** @docs-private */\nexport function triggerBlur(element: HTMLElement) {\n  triggerFocusChange(element, 'blur');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dispatchFakeEvent, dispatchKeyboardEvent} from './dispatch-events';\nimport {triggerFocus} from './element-focus';\nimport {ModifierKeys} from './event-objects';\n\n/**\n * Checks whether the given Element is a text input element.\n * @docs-private\n */\nexport function isTextInput(element: Element): element is HTMLInputElement | HTMLTextAreaElement {\n  return element.nodeName.toLowerCase() === 'input' ||\n      element.nodeName.toLowerCase() === 'textarea' ;\n}\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param element Element onto which to set the value.\n * @param keys The keys to send to the element.\n * @docs-private\n */\nexport function typeInElement(\n    element: HTMLElement, ...keys: (string | {keyCode?: number, key?: string})[]): void;\n\n/**\n * Focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param element Element onto which to set the value.\n * @param modifiers Modifier keys that are held while typing.\n * @param keys The keys to send to the element.\n * @docs-private\n */\nexport function typeInElement(element: HTMLElement, modifiers: ModifierKeys,\n                              ...keys: (string | {keyCode?: number, key?: string})[]): void;\n\nexport function typeInElement(element: HTMLElement, ...modifiersAndKeys: any) {\n  const first = modifiersAndKeys[0];\n  let modifiers: ModifierKeys;\n  let rest: (string | {keyCode?: number, key?: string})[];\n  if (typeof first !== 'string' && first.keyCode === undefined && first.key === undefined) {\n    modifiers = first;\n    rest = modifiersAndKeys.slice(1);\n  } else {\n    modifiers = {};\n    rest = modifiersAndKeys;\n  }\n  const keys: {keyCode?: number, key?: string}[] = rest\n      .map(k => typeof k === 'string' ?\n          k.split('').map(c => ({keyCode: c.toUpperCase().charCodeAt(0), key: c})) : [k])\n      .reduce((arr, k) => arr.concat(k), []);\n\n  triggerFocus(element);\n  for (const key of keys) {\n    dispatchKeyboardEvent(element, 'keydown', key.keyCode, key.key, element, modifiers);\n    dispatchKeyboardEvent(element, 'keypress', key.keyCode, key.key, element, modifiers);\n    if (isTextInput(element) && key.key && key.key.length === 1) {\n      element.value += key.key;\n      dispatchFakeEvent(element, 'input');\n    }\n    dispatchKeyboardEvent(element, 'keyup', key.keyCode, key.key, element, modifiers);\n  }\n}\n\n/**\n * Clears the text in an input or textarea element.\n * @docs-private\n */\nexport function clearElement(element: HTMLInputElement | HTMLTextAreaElement) {\n  triggerFocus(element as HTMLElement);\n  element.value = '';\n  dispatchFakeEvent(element, 'input');\n}\n"],"names":["createMouseEvent","type","x","y","button","event","document","createEvent","originalPreventDefault","preventDefault","initMouseEvent","window","Object","defineProperty","get","apply","this","arguments","createTouchEvent","pageX","pageY","touchDetails","initUIEvent","defineProperties","touches","value","targetTouches","changedTouches","createKeyboardEvent","keyCode","key","target","modifiers","initKeyEvent","control","alt","shift","meta","modifiersStr","trim","initKeyboardEvent","ctrlKey","altKey","shiftKey","metaKey","createFakeEvent","canBubble","cancelable","initEvent","dispatchEvent","node","dispatchFakeEvent","dispatchKeyboardEvent","dispatchMouseEvent","dispatchTouchEvent","triggerFocusChange","element","eventFired","handler","addEventListener","removeEventListener","patchElementFocus","focus","blur","triggerFocus","triggerBlur","isTextInput","nodeName","toLowerCase","typeInElement","modifiersAndKeys","_i","length","rest","first","undefined","slice","keys","map","k","split","c","toUpperCase","charCodeAt","reduce","arr","concat","_a","keys_1","clearElement"],"mappings":";;;;;;;6PAoBA,SAAgBA,GAAiBC,EAAcC,EAAOC,EAAOC,OAA7D,KAAAF,IAA+CA,EAA/C,OAAA,KAAAC,IAAsDA,EAAtD,OAAA,KAAAC,IAA6DA,EAA7D,EACA,IAAQC,GAAQC,SAASC,YAAY,cAC7BC,EAAyBH,EAAMI,cA4BrC,OA1BAJ,GAAMK,eAAeT,GACnB,GACA,EACAU,OACA,EACAT,EACAC,EACAD,EACAC,GACA,GACA,GACA,GACA,EACAC,EACA,MAIFQ,OAAOC,eAAeR,EAAO,WAAYS,IAAG,WAAQ,MAAA,MAGpDT,EAAMI,eAAc,WAElB,MADAG,QAAOC,eAAeR,EAAO,oBAAsBS,IAAG,WAAQ,OAAA,KACvDN,EAAuBO,MAAMC,KAAMC,YAGrCZ,EAOT,QAAgBa,GAAiBjB,EAAckB,EAAWC,OAA1D,KAAAD,IAA+CA,EAA/C,OAAA,KAAAC,IAA0DA,EAA1D,EAGA,IAAQf,GAAQC,SAASC,YAAY,WAC7Bc,GAAgBF,MAAxBA,EAA+BC,MAA/BA,EAaE,OAVA,GAAeE,YAAYrB,GAAM,GAAM,EAAMU,OAAQ,GAIrDC,OAAOW,iBAAiBlB,GACtBmB,SAAUC,OAAQJ,IAClBK,eAAgBD,OAAQJ,IACxBM,gBAAiBF,OAAQJ,MAGpBhB,EAOT,QAAgBuB,GAAoB3B,EAAc4B,EAAqBC,EACnCC,EAAkBC,OADtD,KAAAH,IAAkDA,EAAlD,OAAA,KAAAC,IAAuEA,EAAvE,QACA,KAAAE,IAAsDA,KACtD,IAAQ3B,GAAQC,SAASC,YAAY,iBAC7BC,EAAyBH,EAAMI,cAGrC,IAAIJ,EAAM4B,aACR5B,EAAM4B,aAAahC,GAAM,GAAM,EAAMU,OAAQqB,EAAUE,QAASF,EAAUG,IAAKH,EAAUI,MACrFJ,EAAUK,KAAMR,OACf,CAGT,GAAUS,IAAgBN,EAAUE,QAAU,WAAa,GAAKF,EAAUG,IAAM,OAAS,GACjFH,EAAUI,MAAQ,SAAW,GAAKJ,EAAUK,KAAO,OAAS,IAAIE,MACpElC,GAAMmC,kBAAkBvC,GACpB,GACA,EACAU,OACA,EACAmB,EACA,EACAQ,GACA,GAqBN,MAhBA1B,QAAOW,iBAAiBlB,GACtBwB,SAAWf,IAAG,WAAQ,MAAAe,KACtBC,KAAOhB,IAAG,WAAQ,MAAAgB,KAClBC,QAAUjB,IAAG,WAAQ,MAAAiB,KACrBU,SAAW3B,IAAG,WAAQ,QAAEkB,EAAUE,UAClCQ,QAAU5B,IAAG,WAAQ,QAAEkB,EAAUG,MACjCQ,UAAY7B,IAAG,WAAQ,QAAEkB,EAAUI,QACnCQ,SAAW9B,IAAG,WAAQ,QAAEkB,EAAUK,SAIpChC,EAAMI,eAAc,WAElB,MADAG,QAAOC,eAAeR,EAAO,oBAAsBS,IAAG,WAAQ,OAAA,KACvDN,EAAuBO,MAAMC,KAAMC,YAGrCZ,EAOT,QAAgBwC,GAAgB5C,EAAc6C,EAAmBC,OAAjE,KAAAD,IAA8CA,GAA9C,OAAA,KAAAC,IAAiEA,GAAjE,EACA,IAAQ1C,GAAQC,SAASC,YAAY,QAEnC,OADAF,GAAM2C,UAAU/C,EAAM6C,EAAWC,GAC1B1C,EClHT,QAAgB4C,GAAcC,EAAqB7C,GAEjD,MADA6C,GAAKD,cAAc5C,GACZA,EAOT,QAAgB8C,GAAkBD,EAAqBjD,EAAc6C,GACnE,MAAOG,GAAcC,EAAML,EAAgB5C,EAAM6C,IAOnD,QAAgBM,GAAsBF,EAAYjD,EAAc4B,EAAkBC,EAC5CC,EAAkBC,GACtD,MAAOiB,GAAcC,EACjBtB,EAAoB3B,EAAM4B,EAASC,EAAKC,EAAQC,IAOtD,QAAgBqB,GAAmBH,EAAYjD,EAAcC,EAAOC,EAClEE,GACA,WAFF,KAAAH,IAA6DA,EAA7D,OAAA,KAAAC,IAAoEA,EAApE,OACA,KAAAE,IAAEA,EAAQL,EAAiBC,EAAMC,EAAGC,IAC3B8C,EAAcC,EAAM7C,GAO7B,QAAgBiD,GAAmBJ,EAAYjD,EAAcC,EAAOC,GAClE,WADF,KAAAD,IAA6DA,EAA7D,OAAA,KAAAC,IAAoEA,EAApE,GACS8C,EAAcC,EAAMhC,EAAiBjB,EAAMC,EAAGC,IC/CvD,QAASoD,GAAmBC,EAAsBnD,GAClD,GAAMoD,IAAa,EACXC,EAAO,WAAS,MAAAD,IAAa,EACnCD,GAAQG,iBAAiBtD,EAAOqD,GAChCF,EAAQnD,KACRmD,EAAQI,oBAAoBvD,EAAOqD,GAC9BD,GACHN,EAAkBK,EAASnD,GAU/B,QAAgBwD,GAAkBL,GAChCA,EAAQM,MAAK,WAAS,MAAAX,GAAkBK,EAAS,UACjDA,EAAQO,KAAI,WAAS,MAAAZ,GAAkBK,EAAS,SAIlD,QAAgBQ,GAAaR,GAC3BD,EAAmBC,EAAS,SAI9B,QAAgBS,GAAYT,GAC1BD,EAAmBC,EAAS,QCvB9B,QAAgBU,GAAYV,GAC1B,MAA0C,UAAnCA,EAAQW,SAASC,eACe,aAAnCZ,EAAQW,SAASC,cAwBvB,QAAgBC,GAAcb,GAA9B,IAAoD,GAApDc,MAAAC,EAAA,EAAoDA,EAApDtD,UAAAuD,OAAoDD,IAAAD,EAApDC,EAAA,GAAAtD,UAAAsD,EACA,IACMvC,GACAyC,EAFEC,EAAQJ,EAAiB,EAGV,iBAAVI,QAAwCC,KAAlBD,EAAM7C,aAAuC8C,KAAdD,EAAM5C,KACpEE,EAAY0C,EACZD,EAAOH,EAAiBM,MAAM,KAE9B5C,KACAyC,EAAOH,EAEX,IAAQO,GAA2CJ,EAC5CK,IAAG,SAACC,GAAK,MAAa,gBAANA,GACbA,EAAEC,MAAM,IAAIF,IAAG,SAACG,GAAK,OAAEpD,QAASoD,EAAEC,cAAcC,WAAW,GAAIrD,IAAKmD,MAAQF,KAC/EK,OAAM,SAAEC,EAAKN,GAAM,MAAAM,GAAIC,OAAOP,OAEnCf,GAAaR,EACb,KAAkB,GAApB+B,GAAA,EAAoBC,EAApBX,EAAoBU,EAApBC,EAAAhB,OAAoBe,IAAM,CAAnB,GAAMzD,GAAb0D,EAAAD,EACInC,GAAsBI,EAAS,UAAW1B,EAAID,QAASC,EAAIA,IAAK0B,EAASxB,GACzEoB,EAAsBI,EAAS,WAAY1B,EAAID,QAASC,EAAIA,IAAK0B,EAASxB,GACtEkC,EAAYV,IAAY1B,EAAIA,KAA0B,IAAnBA,EAAIA,IAAI0C,SAC7ChB,EAAQ/B,OAASK,EAAIA,IACrBqB,EAAkBK,EAAS,UAE7BJ,EAAsBI,EAAS,QAAS1B,EAAID,QAASC,EAAIA,IAAK0B,EAASxB,IAQ3E,QAAgByD,GAAajC,GAC3BQ,EAAY,GACZR,EAAQ/B,MAAQ,GAChB0B,EAAkBK,EAAS"}
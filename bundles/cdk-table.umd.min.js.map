{"version":3,"sources":["src/cdk/cdk-table.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","table","tslib","bidi","coercion","collections","platform","common","core","rxjs","operators","this","tslib_1","mixinHasStickyInput","base","_super","class_1","args","_i","arguments","length","_this","apply","__spread","_sticky","_hasStickyChanged","__extends","Object","defineProperty","prototype","get","set","v","prevValue","coerceBooleanProperty","enumerable","configurable","hasStickyChanged","resetStickyChanged","BaseCdkCell","CdkCellDef","template","decorators","type","Directive","selector","ctorParameters","TemplateRef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_stickyEnd","_name","name","cssClassFriendlyName","replace","inputs","providers","provide","useExisting","propDecorators","Input","stickyEnd","cell","ContentChild","static","headerCell","footerCell","CdkColumnDefBase","CdkHeaderCell","columnDef","elementRef","call","host","class","role","ElementRef","nativeElement","classList","add","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","IterableDiffers","CdkHeaderRowDefBase","CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ngOnDestroy","ViewContainerRef","CdkHeaderRow","Component","moduleId","id","changeDetection","ChangeDetectionStrategy","Default","encapsulation","ViewEncapsulation","None","CdkFooterRow","CdkRow","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_isBrowser","clearStickyPositioning","rows","stickyDirections","e_1","_a","rows_1","__values","rows_1_1","next","done","row","value","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","e_1_1","error","return","updateStickyColumns","stickyStartStates","stickyEndStates","e_2","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","rows_2","rows_2_1","_addStickyStyle","e_2_1","stickRows","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","updateStickyFooterContainer","tableElement","tfoot","querySelector","element","e_3","stickyDirections_1","stickyDirections_1_1","style","e_3_1","zIndex","_getCalculatedZIndex","dir","remove","dirValue","cssText","e_4","zIndexIncrements","top","bottom","left","right","STICKY_DIRECTIONS_1","STICKY_DIRECTIONS_1_1","e_4_1","firstRowCells","push","width","widths","positions","nextPosition","getTableUnknownColumnError","Error","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","CdkTable","RowViewRef","EmbeddedViewRef","_changeDetectorRef","_elementRef","_dir","_document","_platform","_onDestroy","Subject","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","setAttribute","nodeName","_trackByFn","fn","isDevMode","console","warn","JSON","stringify","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","dataRow","trackBy","dataIndex","data","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","getTableMissingRowDefsError","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","complete","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","map","def","sticky","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","Array","from","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeQueryListAndSet","_contentColumnDefs","getTableDuplicateColumnNameError","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","multiTemplateDataRows","getTableMultipleDefaultRowDefsError","_defaultRowDef","columnsDiffReducer","acc","reduce","unsubscribe","dataStream","connect","Observable","isArray","of","undefined","getTableUnknownDataSourceError","pipe","takeUntil","subscribe","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","getTableMissingMatchingRowDefError","renderIndex","outlet","index","createEmbeddedView","_b","_getCellTemplates","_c","markForCheck","count","first","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","sections_1","sections_1_1","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","change","exportAs","ChangeDetectorRef","String","Attribute","Directionality","Optional","Inject","DOCUMENT","Platform","ViewChild","ContentChildren","queryList","toArray","concat","TEXT_COLUMN_OPTIONS","InjectionToken","CdkTextColumn","_table","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","defaultHeaderTextTransform","toUpperCase","slice","EXPORTED_DECLARATIONS","CdkTableModule","NgModule","imports","CommonModule","declarations","DataSource"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/cdk/platform'), require('@angular/common'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/table', ['exports', 'tslib', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/cdk/platform', '@angular/common', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.table = {}), global.tslib, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.collections, global.ng.cdk.platform, global.ng.common, global.ng.core, global.rxjs, global.rxjs.operators));\n}(this, function (exports, tslib_1, bidi, coercion, collections, platform, common, core, rxjs, operators) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Mixin to provide a directive with a function that checks if the sticky input has been\n     * changed since the last time the function was called. Essentially adds a dirty-check to the\n     * sticky value.\n     * @docs-private\n     */\n    function mixinHasStickyInput(base) {\n        return /** @class */ (function (_super) {\n            tslib_1.__extends(class_1, _super);\n            function class_1() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var _this = _super.apply(this, tslib_1.__spread(args)) || this;\n                _this._sticky = false;\n                /** Whether the sticky input has changed since it was last checked. */\n                _this._hasStickyChanged = false;\n                return _this;\n            }\n            Object.defineProperty(class_1.prototype, \"sticky\", {\n                /** Whether sticky positioning should be applied. */\n                get: function () { return this._sticky; },\n                set: function (v) {\n                    var prevValue = this._sticky;\n                    this._sticky = coercion.coerceBooleanProperty(v);\n                    this._hasStickyChanged = prevValue !== this._sticky;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /** Whether the sticky value has changed since this was last called. */\n            class_1.prototype.hasStickyChanged = function () {\n                var hasStickyChanged = this._hasStickyChanged;\n                this._hasStickyChanged = false;\n                return hasStickyChanged;\n            };\n            /** Resets the dirty check for cases where the sticky state has been used without checking. */\n            class_1.prototype.resetStickyChanged = function () {\n                this._hasStickyChanged = false;\n            };\n            return class_1;\n        }(base));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Cell definition for a CDK table.\n     * Captures the template of a column's data row cell as well as cell-specific properties.\n     */\n    var CdkCellDef = /** @class */ (function () {\n        function CdkCellDef(/** @docs-private */ template) {\n            this.template = template;\n        }\n        CdkCellDef.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkCellDef]' },] }\n        ];\n        /** @nocollapse */\n        CdkCellDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkCellDef;\n    }());\n    /**\n     * Header cell definition for a CDK table.\n     * Captures the template of a column's header cell and as well as cell-specific properties.\n     */\n    var CdkHeaderCellDef = /** @class */ (function () {\n        function CdkHeaderCellDef(/** @docs-private */ template) {\n            this.template = template;\n        }\n        CdkHeaderCellDef.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkHeaderCellDef]' },] }\n        ];\n        /** @nocollapse */\n        CdkHeaderCellDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkHeaderCellDef;\n    }());\n    /**\n     * Footer cell definition for a CDK table.\n     * Captures the template of a column's footer cell and as well as cell-specific properties.\n     */\n    var CdkFooterCellDef = /** @class */ (function () {\n        function CdkFooterCellDef(/** @docs-private */ template) {\n            this.template = template;\n        }\n        CdkFooterCellDef.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkFooterCellDef]' },] }\n        ];\n        /** @nocollapse */\n        CdkFooterCellDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkFooterCellDef;\n    }());\n    // Boilerplate for applying mixins to CdkColumnDef.\n    /** @docs-private */\n    var CdkColumnDefBase = /** @class */ (function () {\n        function CdkColumnDefBase() {\n        }\n        return CdkColumnDefBase;\n    }());\n    var _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n    /**\n     * Column definition for the CDK table.\n     * Defines a set of cells available for a table column.\n     */\n    var CdkColumnDef = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkColumnDef, _super);\n        function CdkColumnDef() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this._stickyEnd = false;\n            return _this;\n        }\n        Object.defineProperty(CdkColumnDef.prototype, \"name\", {\n            /** Unique name for this column. */\n            get: function () {\n                return this._name;\n            },\n            set: function (name) {\n                // If the directive is set without a name (updated programatically), then this setter will\n                // trigger with an empty string and should not overwrite the programatically set value.\n                if (!name) {\n                    return;\n                }\n                this._name = name;\n                this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkColumnDef.prototype, \"stickyEnd\", {\n            /**\n             * Whether this column should be sticky positioned on the end of the row. Should make sure\n             * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n             * has been changed.\n             */\n            get: function () {\n                return this._stickyEnd;\n            },\n            set: function (v) {\n                var prevValue = this._stickyEnd;\n                this._stickyEnd = coercion.coerceBooleanProperty(v);\n                this._hasStickyChanged = prevValue !== this._stickyEnd;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkColumnDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkColumnDef]',\n                        inputs: ['sticky'],\n                        providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                    },] }\n        ];\n        CdkColumnDef.propDecorators = {\n            name: [{ type: core.Input, args: ['cdkColumnDef',] }],\n            stickyEnd: [{ type: core.Input, args: ['stickyEnd',] }],\n            cell: [{ type: core.ContentChild, args: [CdkCellDef, { static: false },] }],\n            headerCell: [{ type: core.ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n            footerCell: [{ type: core.ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n        };\n        return CdkColumnDef;\n    }(_CdkColumnDefBase));\n    /** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n    var BaseCdkCell = /** @class */ (function () {\n        function BaseCdkCell(columnDef, elementRef) {\n            var columnClassName = \"cdk-column-\" + columnDef.cssClassFriendlyName;\n            elementRef.nativeElement.classList.add(columnClassName);\n        }\n        return BaseCdkCell;\n    }());\n    /** Header cell template container that adds the right classes and role. */\n    var CdkHeaderCell = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkHeaderCell, _super);\n        function CdkHeaderCell(columnDef, elementRef) {\n            return _super.call(this, columnDef, elementRef) || this;\n        }\n        CdkHeaderCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-header-cell, th[cdk-header-cell]',\n                        host: {\n                            'class': 'cdk-header-cell',\n                            'role': 'columnheader',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkHeaderCell.ctorParameters = function () { return [\n            { type: CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return CdkHeaderCell;\n    }(BaseCdkCell));\n    /** Footer cell template container that adds the right classes and role. */\n    var CdkFooterCell = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkFooterCell, _super);\n        function CdkFooterCell(columnDef, elementRef) {\n            return _super.call(this, columnDef, elementRef) || this;\n        }\n        CdkFooterCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                        host: {\n                            'class': 'cdk-footer-cell',\n                            'role': 'gridcell',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkFooterCell.ctorParameters = function () { return [\n            { type: CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return CdkFooterCell;\n    }(BaseCdkCell));\n    /** Cell template container that adds the right classes and role. */\n    var CdkCell = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkCell, _super);\n        function CdkCell(columnDef, elementRef) {\n            return _super.call(this, columnDef, elementRef) || this;\n        }\n        CdkCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-cell, td[cdk-cell]',\n                        host: {\n                            'class': 'cdk-cell',\n                            'role': 'gridcell',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkCell.ctorParameters = function () { return [\n            { type: CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return CdkCell;\n    }(BaseCdkCell));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The row template that can be used by the mat-table. Should not be used outside of the\n     * material library.\n     */\n    var CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n    /**\n     * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n     * for changes and notifying the table.\n     */\n    var BaseRowDef = /** @class */ (function () {\n        function BaseRowDef(\n        /** @docs-private */ template, _differs) {\n            this.template = template;\n            this._differs = _differs;\n        }\n        BaseRowDef.prototype.ngOnChanges = function (changes) {\n            // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n            // of the columns property or an empty array if none is provided.\n            if (!this._columnsDiffer) {\n                var columns = (changes['columns'] && changes['columns'].currentValue) || [];\n                this._columnsDiffer = this._differs.find(columns).create();\n                this._columnsDiffer.diff(columns);\n            }\n        };\n        /**\n         * Returns the difference between the current columns and the columns from the last diff, or null\n         * if there is no difference.\n         */\n        BaseRowDef.prototype.getColumnsDiff = function () {\n            return this._columnsDiffer.diff(this.columns);\n        };\n        /** Gets this row def's relevant cell template from the provided column def. */\n        BaseRowDef.prototype.extractCellTemplate = function (column) {\n            if (this instanceof CdkHeaderRowDef) {\n                return column.headerCell.template;\n            }\n            if (this instanceof CdkFooterRowDef) {\n                return column.footerCell.template;\n            }\n            else {\n                return column.cell.template;\n            }\n        };\n        return BaseRowDef;\n    }());\n    // Boilerplate for applying mixins to CdkHeaderRowDef.\n    /** @docs-private */\n    var CdkHeaderRowDefBase = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkHeaderRowDefBase, _super);\n        function CdkHeaderRowDefBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return CdkHeaderRowDefBase;\n    }(BaseRowDef));\n    var _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n    /**\n     * Header row definition for the CDK table.\n     * Captures the header row's template and other header properties such as the columns to display.\n     */\n    var CdkHeaderRowDef = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkHeaderRowDef, _super);\n        function CdkHeaderRowDef(template, _differs) {\n            return _super.call(this, template, _differs) || this;\n        }\n        // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n        // Explicitly define it so that the method is called as part of the Angular lifecycle.\n        CdkHeaderRowDef.prototype.ngOnChanges = function (changes) {\n            _super.prototype.ngOnChanges.call(this, changes);\n        };\n        CdkHeaderRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkHeaderRowDef]',\n                        inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkHeaderRowDef.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.IterableDiffers }\n        ]; };\n        return CdkHeaderRowDef;\n    }(_CdkHeaderRowDefBase));\n    // Boilerplate for applying mixins to CdkFooterRowDef.\n    /** @docs-private */\n    var CdkFooterRowDefBase = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkFooterRowDefBase, _super);\n        function CdkFooterRowDefBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return CdkFooterRowDefBase;\n    }(BaseRowDef));\n    var _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n    /**\n     * Footer row definition for the CDK table.\n     * Captures the footer row's template and other footer properties such as the columns to display.\n     */\n    var CdkFooterRowDef = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkFooterRowDef, _super);\n        function CdkFooterRowDef(template, _differs) {\n            return _super.call(this, template, _differs) || this;\n        }\n        // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n        // Explicitly define it so that the method is called as part of the Angular lifecycle.\n        CdkFooterRowDef.prototype.ngOnChanges = function (changes) {\n            _super.prototype.ngOnChanges.call(this, changes);\n        };\n        CdkFooterRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkFooterRowDef]',\n                        inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkFooterRowDef.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.IterableDiffers }\n        ]; };\n        return CdkFooterRowDef;\n    }(_CdkFooterRowDefBase));\n    /**\n     * Data row definition for the CDK table.\n     * Captures the header row's template and other row properties such as the columns to display and\n     * a when predicate that describes when this row should be used.\n     */\n    var CdkRowDef = /** @class */ (function (_super) {\n        tslib_1.__extends(CdkRowDef, _super);\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        function CdkRowDef(template, _differs) {\n            return _super.call(this, template, _differs) || this;\n        }\n        CdkRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkRowDef]',\n                        inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkRowDef.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.IterableDiffers }\n        ]; };\n        return CdkRowDef;\n    }(BaseRowDef));\n    /**\n     * Outlet for rendering cells inside of a row or header row.\n     * @docs-private\n     */\n    var CdkCellOutlet = /** @class */ (function () {\n        function CdkCellOutlet(_viewContainer) {\n            this._viewContainer = _viewContainer;\n            CdkCellOutlet.mostRecentCellOutlet = this;\n        }\n        CdkCellOutlet.prototype.ngOnDestroy = function () {\n            // If this was the last outlet being rendered in the view, remove the reference\n            // from the static property after it has been destroyed to avoid leaking memory.\n            if (CdkCellOutlet.mostRecentCellOutlet === this) {\n                CdkCellOutlet.mostRecentCellOutlet = null;\n            }\n        };\n        /**\n         * Static property containing the latest constructed instance of this class.\n         * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n         * createEmbeddedView. After one of these components are created, this property will provide\n         * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n         * construct the cells with the provided context.\n         */\n        CdkCellOutlet.mostRecentCellOutlet = null;\n        CdkCellOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkCellOutlet]' },] }\n        ];\n        /** @nocollapse */\n        CdkCellOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef }\n        ]; };\n        return CdkCellOutlet;\n    }());\n    /** Header template container that contains the cell outlet. Adds the right class and role. */\n    var CdkHeaderRow = /** @class */ (function () {\n        function CdkHeaderRow() {\n        }\n        CdkHeaderRow.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'cdk-header-row, tr[cdk-header-row]',\n                        template: CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'cdk-header-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        return CdkHeaderRow;\n    }());\n    /** Footer template container that contains the cell outlet. Adds the right class and role. */\n    var CdkFooterRow = /** @class */ (function () {\n        function CdkFooterRow() {\n        }\n        CdkFooterRow.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                        template: CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'cdk-footer-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        return CdkFooterRow;\n    }());\n    /** Data row template container that contains the cell outlet. Adds the right class and role. */\n    var CdkRow = /** @class */ (function () {\n        function CdkRow() {\n        }\n        CdkRow.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'cdk-row, tr[cdk-row]',\n                        template: CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'cdk-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        return CdkRow;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * List of all possible directions that can be used for sticky positioning.\n     * @docs-private\n     */\n    var STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n    /**\n     * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n     * @docs-private\n     */\n    var StickyStyler = /** @class */ (function () {\n        /**\n         * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n         *     that uses the native `<table>` element.\n         * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n         *     sticky positioning applied.\n         * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n         *     by reversing left/right positions.\n         * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n         */\n        function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser) {\n            if (_isBrowser === void 0) { _isBrowser = true; }\n            this._isNativeHtmlTable = _isNativeHtmlTable;\n            this._stickCellCss = _stickCellCss;\n            this.direction = direction;\n            this._isBrowser = _isBrowser;\n        }\n        /**\n         * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n         * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n         * @param rows The list of rows that should be cleared from sticking in the provided directions\n         * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n         */\n        StickyStyler.prototype.clearStickyPositioning = function (rows, stickyDirections) {\n            var e_1, _a;\n            try {\n                for (var rows_1 = tslib_1.__values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n                    var row = rows_1_1.value;\n                    // If the row isn't an element (e.g. if it's an `ng-container`),\n                    // it won't have inline styles or `children` so we skip it.\n                    if (row.nodeType !== row.ELEMENT_NODE) {\n                        continue;\n                    }\n                    this._removeStickyStyle(row, stickyDirections);\n                    for (var i = 0; i < row.children.length; i++) {\n                        var cell = row.children[i];\n                        this._removeStickyStyle(cell, stickyDirections);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /**\n         * Applies sticky left and right positions to the cells of each row according to the sticky\n         * states of the rendered column definitions.\n         * @param rows The rows that should have its set of cells stuck according to the sticky states.\n         * @param stickyStartStates A list of boolean states where each state represents whether the cell\n         *     in this index position should be stuck to the start of the row.\n         * @param stickyEndStates A list of boolean states where each state represents whether the cell\n         *     in this index position should be stuck to the end of the row.\n         */\n        StickyStyler.prototype.updateStickyColumns = function (rows, stickyStartStates, stickyEndStates) {\n            var e_2, _a;\n            var hasStickyColumns = stickyStartStates.some(function (state) { return state; }) || stickyEndStates.some(function (state) { return state; });\n            if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n                return;\n            }\n            var firstRow = rows[0];\n            var numCells = firstRow.children.length;\n            var cellWidths = this._getCellWidths(firstRow);\n            var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            var isRtl = this.direction === 'rtl';\n            try {\n                for (var rows_2 = tslib_1.__values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n                    var row = rows_2_1.value;\n                    for (var i = 0; i < numCells; i++) {\n                        var cell = row.children[i];\n                        if (stickyStartStates[i]) {\n                            this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                        }\n                        if (stickyEndStates[i]) {\n                            this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                        }\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        };\n        /**\n         * Applies sticky positioning to the row's cells if using the native table layout, and to the\n         * row itself otherwise.\n         * @param rowsToStick The list of rows that should be stuck according to their corresponding\n         *     sticky state and to the provided top or bottom position.\n         * @param stickyStates A list of boolean states where each state represents whether the row\n         *     should be stuck in the particular top or bottom position.\n         * @param position The position direction in which the row should be stuck if that row should be\n         *     sticky.\n         *\n         */\n        StickyStyler.prototype.stickRows = function (rowsToStick, stickyStates, position) {\n            // Since we can't measure the rows on the server, we can't stick the rows properly.\n            if (!this._isBrowser) {\n                return;\n            }\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on.\n            var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n            var stickyHeight = 0;\n            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!stickyStates[rowIndex]) {\n                    continue;\n                }\n                var row = rows[rowIndex];\n                if (this._isNativeHtmlTable) {\n                    for (var j = 0; j < row.children.length; j++) {\n                        var cell = row.children[j];\n                        this._addStickyStyle(cell, position, stickyHeight);\n                    }\n                }\n                else {\n                    // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                    // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                    this._addStickyStyle(row, position, stickyHeight);\n                }\n                if (rowIndex === rows.length - 1) {\n                    // prevent unnecessary reflow from getBoundingClientRect()\n                    return;\n                }\n                stickyHeight += row.getBoundingClientRect().height;\n            }\n        };\n        /**\n         * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n         * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n         * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n         * the tfoot element.\n         */\n        StickyStyler.prototype.updateStickyFooterContainer = function (tableElement, stickyStates) {\n            if (!this._isNativeHtmlTable) {\n                return;\n            }\n            var tfoot = tableElement.querySelector('tfoot');\n            if (stickyStates.some(function (state) { return !state; })) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0);\n            }\n        };\n        /**\n         * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n         * the zIndex, removing each of the provided sticky directions, and removing the\n         * sticky position if there are no more directions.\n         */\n        StickyStyler.prototype._removeStickyStyle = function (element, stickyDirections) {\n            var e_3, _a;\n            try {\n                for (var stickyDirections_1 = tslib_1.__values(stickyDirections), stickyDirections_1_1 = stickyDirections_1.next(); !stickyDirections_1_1.done; stickyDirections_1_1 = stickyDirections_1.next()) {\n                    var dir = stickyDirections_1_1.value;\n                    element.style[dir] = '';\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (stickyDirections_1_1 && !stickyDirections_1_1.done && (_a = stickyDirections_1.return)) _a.call(stickyDirections_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            element.style.zIndex = this._getCalculatedZIndex(element);\n            // If the element no longer has any more sticky directions, remove sticky positioning and\n            // the sticky CSS class.\n            var hasDirection = STICKY_DIRECTIONS.some(function (dir) { return !!element.style[dir]; });\n            if (!hasDirection) {\n                element.style.position = '';\n                element.classList.remove(this._stickCellCss);\n            }\n        };\n        /**\n         * Adds the sticky styling to the element by adding the sticky style class, changing position\n         * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n         * direction and value.\n         */\n        StickyStyler.prototype._addStickyStyle = function (element, dir, dirValue) {\n            element.classList.add(this._stickCellCss);\n            element.style[dir] = dirValue + \"px\";\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        };\n        /**\n         * Calculate what the z-index should be for the element, depending on what directions (top,\n         * bottom, left, right) have been set. It should be true that elements with a top direction\n         * should have the highest index since these are elements like a table header. If any of those\n         * elements are also sticky in another direction, then they should appear above other elements\n         * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n         * (e.g. footer rows) should then be next in the ordering such that they are below the header\n         * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n         * should minimally increment so that they are above non-sticky elements but below top and bottom\n         * elements.\n         */\n        StickyStyler.prototype._getCalculatedZIndex = function (element) {\n            var e_4, _a;\n            var zIndexIncrements = {\n                top: 100,\n                bottom: 10,\n                left: 1,\n                right: 1,\n            };\n            var zIndex = 0;\n            try {\n                for (var STICKY_DIRECTIONS_1 = tslib_1.__values(STICKY_DIRECTIONS), STICKY_DIRECTIONS_1_1 = STICKY_DIRECTIONS_1.next(); !STICKY_DIRECTIONS_1_1.done; STICKY_DIRECTIONS_1_1 = STICKY_DIRECTIONS_1.next()) {\n                    var dir = STICKY_DIRECTIONS_1_1.value;\n                    if (element.style[dir]) {\n                        zIndex += zIndexIncrements[dir];\n                    }\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (STICKY_DIRECTIONS_1_1 && !STICKY_DIRECTIONS_1_1.done && (_a = STICKY_DIRECTIONS_1.return)) _a.call(STICKY_DIRECTIONS_1);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            return zIndex ? \"\" + zIndex : '';\n        };\n        /** Gets the widths for each cell in the provided row. */\n        StickyStyler.prototype._getCellWidths = function (row) {\n            var cellWidths = [];\n            var firstRowCells = row.children;\n            for (var i = 0; i < firstRowCells.length; i++) {\n                var cell = firstRowCells[i];\n                cellWidths.push(cell.getBoundingClientRect().width);\n            }\n            return cellWidths;\n        };\n        /**\n         * Determines the left and right positions of each sticky column cell, which will be the\n         * accumulation of all sticky column cell widths to the left and right, respectively.\n         * Non-sticky cells do not need to have a value set since their positions will not be applied.\n         */\n        StickyStyler.prototype._getStickyStartColumnPositions = function (widths, stickyStates) {\n            var positions = [];\n            var nextPosition = 0;\n            for (var i = 0; i < widths.length; i++) {\n                if (stickyStates[i]) {\n                    positions[i] = nextPosition;\n                    nextPosition += widths[i];\n                }\n            }\n            return positions;\n        };\n        /**\n         * Determines the left and right positions of each sticky column cell, which will be the\n         * accumulation of all sticky column cell widths to the left and right, respectively.\n         * Non-sticky cells do not need to have a value set since their positions will not be applied.\n         */\n        StickyStyler.prototype._getStickyEndColumnPositions = function (widths, stickyStates) {\n            var positions = [];\n            var nextPosition = 0;\n            for (var i = widths.length; i > 0; i--) {\n                if (stickyStates[i]) {\n                    positions[i] = nextPosition;\n                    nextPosition += widths[i];\n                }\n            }\n            return positions;\n        };\n        return StickyStyler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when attempting to find an unexisting column.\n     * @param id Id whose lookup failed.\n     * @docs-private\n     */\n    function getTableUnknownColumnError(id) {\n        return Error(\"Could not find column with id \\\"\" + id + \"\\\".\");\n    }\n    /**\n     * Returns an error to be thrown when two column definitions have the same name.\n     * @docs-private\n     */\n    function getTableDuplicateColumnNameError(name) {\n        return Error(\"Duplicate column definition name provided: \\\"\" + name + \"\\\".\");\n    }\n    /**\n     * Returns an error to be thrown when there are multiple rows that are missing a when function.\n     * @docs-private\n     */\n    function getTableMultipleDefaultRowDefsError() {\n        return Error(\"There can only be one default row without a when predicate function.\");\n    }\n    /**\n     * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n     * @docs-private\n     */\n    function getTableMissingMatchingRowDefError(data) {\n        return Error(\"Could not find a matching row definition for the\" +\n            (\"provided row data: \" + JSON.stringify(data)));\n    }\n    /**\n     * Returns an error to be thrown when there is no row definitions present in the content.\n     * @docs-private\n     */\n    function getTableMissingRowDefsError() {\n        return Error('Missing definitions for header, footer, and row; ' +\n            'cannot determine which columns should be rendered.');\n    }\n    /**\n     * Returns an error to be thrown when the data source does not match the compatible types.\n     * @docs-private\n     */\n    function getTableUnknownDataSourceError() {\n        return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n    }\n    /**\n     * Returns an error to be thrown when the text column cannot find a parent table to inject.\n     * @docs-private\n     */\n    function getTableTextColumnMissingParentTableError() {\n        return Error(\"Text column could not find a parent table for registration.\");\n    }\n    /**\n     * Returns an error to be thrown when a table text column doesn't have a name.\n     * @docs-private\n     */\n    function getTableTextColumnMissingNameError() {\n        return Error(\"Table text column must have a name.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n     * @docs-private\n     */\n    var DataRowOutlet = /** @class */ (function () {\n        function DataRowOutlet(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n        DataRowOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[rowOutlet]' },] }\n        ];\n        /** @nocollapse */\n        DataRowOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: core.ElementRef }\n        ]; };\n        return DataRowOutlet;\n    }());\n    /**\n     * Provides a handle for the table to grab the view container's ng-container to insert the header.\n     * @docs-private\n     */\n    var HeaderRowOutlet = /** @class */ (function () {\n        function HeaderRowOutlet(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n        HeaderRowOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[headerRowOutlet]' },] }\n        ];\n        /** @nocollapse */\n        HeaderRowOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: core.ElementRef }\n        ]; };\n        return HeaderRowOutlet;\n    }());\n    /**\n     * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n     * @docs-private\n     */\n    var FooterRowOutlet = /** @class */ (function () {\n        function FooterRowOutlet(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n        FooterRowOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[footerRowOutlet]' },] }\n        ];\n        /** @nocollapse */\n        FooterRowOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: core.ElementRef }\n        ]; };\n        return FooterRowOutlet;\n    }());\n    /**\n     * The table template that can be used by the mat-table. Should not be used outside of the\n     * material library.\n     * @docs-private\n     */\n    var CDK_TABLE_TEMPLATE = \n    // Note that according to MDN, the `caption` element has to be projected as the **first**\n    // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n    \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n    /**\n     * Class used to conveniently type the embedded view ref for rows with a context.\n     * @docs-private\n     */\n    var RowViewRef = /** @class */ (function (_super) {\n        tslib_1.__extends(RowViewRef, _super);\n        function RowViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return RowViewRef;\n    }(core.EmbeddedViewRef));\n    /**\n     * A data table that can render a header row, data rows, and a footer row.\n     * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n     * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n     * connect function that will return an Observable stream that emits the data array to render.\n     */\n    var CdkTable = /** @class */ (function () {\n        function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n            this._differs = _differs;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._dir = _dir;\n            this._platform = _platform;\n            /** Subject that emits when the component has been destroyed. */\n            this._onDestroy = new rxjs.Subject();\n            /**\n             * Map of all the user's defined columns (header, data, and footer cell template) identified by\n             * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n             * any custom column definitions added to `_customColumnDefs`.\n             */\n            this._columnDefsByName = new Map();\n            /**\n             * Column definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * column definitions as *its* content child.\n             */\n            this._customColumnDefs = new Set();\n            /**\n             * Data row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * built-in data rows as *its* content child.\n             */\n            this._customRowDefs = new Set();\n            /**\n             * Header row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * built-in header rows as *its* content child.\n             */\n            this._customHeaderRowDefs = new Set();\n            /**\n             * Footer row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n             * built-in footer row as *its* content child.\n             */\n            this._customFooterRowDefs = new Set();\n            /**\n             * Whether the header row definition has been changed. Triggers an update to the header row after\n             * content is checked. Initialized as true so that the table renders the initial set of rows.\n             */\n            this._headerRowDefChanged = true;\n            /**\n             * Whether the footer row definition has been changed. Triggers an update to the footer row after\n             * content is checked. Initialized as true so that the table renders the initial set of rows.\n             */\n            this._footerRowDefChanged = true;\n            /**\n             * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n             * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n             * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n             * and row template matches, which allows the `IterableDiffer` to check rows by reference\n             * and understand which rows are added/moved/removed.\n             *\n             * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n             * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n             * contains an array of created pairs. The array is necessary to handle cases where the data\n             * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n             * stored.\n             */\n            this._cachedRenderRowsMap = new Map();\n            /**\n             * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n             * table subclasses.\n             */\n            this.stickyCssClass = 'cdk-table-sticky';\n            this._multiTemplateDataRows = false;\n            // TODO(andrewseguin): Remove max value as the end index\n            //   and instead calculate the view on init and scroll.\n            /**\n             * Stream containing the latest information on what rows are being displayed on screen.\n             * Can be used by the data source to as a heuristic of what data should be provided.\n             *\n             * @docs-private\n             */\n            this.viewChange = new rxjs.BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n            if (!role) {\n                this._elementRef.nativeElement.setAttribute('role', 'grid');\n            }\n            this._document = _document;\n            this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n        }\n        Object.defineProperty(CdkTable.prototype, \"trackBy\", {\n            /**\n             * Tracking function that will be used to check the differences in data changes. Used similarly\n             * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n             * relative to the function to know if a row should be added/removed/moved.\n             * Accepts a function that takes two parameters, `index` and `item`.\n             */\n            get: function () {\n                return this._trackByFn;\n            },\n            set: function (fn) {\n                if (core.isDevMode() && fn != null && typeof fn !== 'function' && console &&\n                    console.warn) {\n                    console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \".\");\n                }\n                this._trackByFn = fn;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTable.prototype, \"dataSource\", {\n            /**\n             * The table's source of data, which can be provided in three ways (in order of complexity):\n             *   - Simple data array (each object represents one table row)\n             *   - Stream that emits a data array each time the array changes\n             *   - `DataSource` object that implements the connect/disconnect interface.\n             *\n             * If a data array is provided, the table must be notified when the array's objects are\n             * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n             * render the diff since the last table render. If the data array reference is changed, the table\n             * will automatically trigger an update to the rows.\n             *\n             * When providing an Observable stream, the table will trigger an update automatically when the\n             * stream emits a new array of data.\n             *\n             * Finally, when providing a `DataSource` object, the table will use the Observable stream\n             * provided by the connect function and trigger updates when that stream emits new data array\n             * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n             * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n             * subscriptions registered during the connect process).\n             */\n            get: function () {\n                return this._dataSource;\n            },\n            set: function (dataSource) {\n                if (this._dataSource !== dataSource) {\n                    this._switchDataSource(dataSource);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTable.prototype, \"multiTemplateDataRows\", {\n            /**\n             * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n             * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n             * dataobject will render the first row that evaluates its when predicate to true, in the order\n             * defined in the table, or otherwise the default row which does not have a when predicate.\n             */\n            get: function () {\n                return this._multiTemplateDataRows;\n            },\n            set: function (v) {\n                this._multiTemplateDataRows = coercion.coerceBooleanProperty(v);\n                // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n                // this setter will be invoked before the row outlet has been defined hence the null check.\n                if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n                    this._forceRenderDataRows();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTable.prototype.ngOnInit = function () {\n            var _this = this;\n            this._setupStickyStyler();\n            if (this._isNativeHtmlTable) {\n                this._applyNativeTableSections();\n            }\n            // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n            // the user has provided a custom trackBy, return the result of that function as evaluated\n            // with the values of the `RenderRow`'s data and index.\n            this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n                return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n            });\n        };\n        CdkTable.prototype.ngAfterContentChecked = function () {\n            // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n            this._cacheRowDefs();\n            this._cacheColumnDefs();\n            // Make sure that the user has at least added header, footer, or data row def.\n            if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n                throw getTableMissingRowDefsError();\n            }\n            // Render updates if the list of columns have been changed for the header, row, or footer defs.\n            this._renderUpdatedColumns();\n            // If the header row definition has been changed, trigger a render to the header row.\n            if (this._headerRowDefChanged) {\n                this._forceRenderHeaderRows();\n                this._headerRowDefChanged = false;\n            }\n            // If the footer row definition has been changed, trigger a render to the footer row.\n            if (this._footerRowDefChanged) {\n                this._forceRenderFooterRows();\n                this._footerRowDefChanged = false;\n            }\n            // If there is a data source and row definitions, connect to the data source unless a\n            // connection has already been made.\n            if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n                this._observeRenderChanges();\n            }\n            this._checkStickyStates();\n        };\n        CdkTable.prototype.ngOnDestroy = function () {\n            this._rowOutlet.viewContainer.clear();\n            this._headerRowOutlet.viewContainer.clear();\n            this._footerRowOutlet.viewContainer.clear();\n            this._cachedRenderRowsMap.clear();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (collections.isDataSource(this.dataSource)) {\n                this.dataSource.disconnect(this);\n            }\n        };\n        /**\n         * Renders rows based on the table's latest set of data, which was either provided directly as an\n         * input or retrieved through an Observable stream (directly or from a DataSource).\n         * Checks for differences in the data since the last diff to perform only the necessary\n         * changes (add/remove/move rows).\n         *\n         * If the table's data source is a DataSource or Observable, this will be invoked automatically\n         * each time the provided Observable stream emits a new data array. Otherwise if your data is\n         * an array, this function will need to be called to render any changes.\n         */\n        CdkTable.prototype.renderRows = function () {\n            var _this = this;\n            this._renderRows = this._getAllRenderRows();\n            var changes = this._dataDiffer.diff(this._renderRows);\n            if (!changes) {\n                return;\n            }\n            var viewContainer = this._rowOutlet.viewContainer;\n            changes.forEachOperation(function (record, prevIndex, currentIndex) {\n                if (record.previousIndex == null) {\n                    _this._insertRow(record.item, currentIndex);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(prevIndex);\n                }\n                else {\n                    var view = viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n            // Update the meta context of a row's context data (index, count, first, last, ...)\n            this._updateRowIndexContext();\n            // Update rows that did not get added/removed/moved but may have had their identity changed,\n            // e.g. if trackBy matched data on some property but the actual data reference changed.\n            changes.forEachIdentityChange(function (record) {\n                var rowView = viewContainer.get(record.currentIndex);\n                rowView.context.$implicit = record.item.data;\n            });\n            this.updateStickyColumnStyles();\n        };\n        /**\n         * Sets the header row definition to be used. Overrides the header row definition gathered by\n         * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n         * table's content is checked.\n         * @docs-private\n         * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n         * @breaking-change 8.0.0\n         */\n        CdkTable.prototype.setHeaderRowDef = function (headerRowDef) {\n            this._customHeaderRowDefs = new Set([headerRowDef]);\n            this._headerRowDefChanged = true;\n        };\n        /**\n         * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n         * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n         * table's content is checked.\n         * @docs-private\n         * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n         * @breaking-change 8.0.0\n         */\n        CdkTable.prototype.setFooterRowDef = function (footerRowDef) {\n            this._customFooterRowDefs = new Set([footerRowDef]);\n            this._footerRowDefChanged = true;\n        };\n        /** Adds a column definition that was not included as part of the content children. */\n        CdkTable.prototype.addColumnDef = function (columnDef) {\n            this._customColumnDefs.add(columnDef);\n        };\n        /** Removes a column definition that was not included as part of the content children. */\n        CdkTable.prototype.removeColumnDef = function (columnDef) {\n            this._customColumnDefs.delete(columnDef);\n        };\n        /** Adds a row definition that was not included as part of the content children. */\n        CdkTable.prototype.addRowDef = function (rowDef) {\n            this._customRowDefs.add(rowDef);\n        };\n        /** Removes a row definition that was not included as part of the content children. */\n        CdkTable.prototype.removeRowDef = function (rowDef) {\n            this._customRowDefs.delete(rowDef);\n        };\n        /** Adds a header row definition that was not included as part of the content children. */\n        CdkTable.prototype.addHeaderRowDef = function (headerRowDef) {\n            this._customHeaderRowDefs.add(headerRowDef);\n            this._headerRowDefChanged = true;\n        };\n        /** Removes a header row definition that was not included as part of the content children. */\n        CdkTable.prototype.removeHeaderRowDef = function (headerRowDef) {\n            this._customHeaderRowDefs.delete(headerRowDef);\n            this._headerRowDefChanged = true;\n        };\n        /** Adds a footer row definition that was not included as part of the content children. */\n        CdkTable.prototype.addFooterRowDef = function (footerRowDef) {\n            this._customFooterRowDefs.add(footerRowDef);\n            this._footerRowDefChanged = true;\n        };\n        /** Removes a footer row definition that was not included as part of the content children. */\n        CdkTable.prototype.removeFooterRowDef = function (footerRowDef) {\n            this._customFooterRowDefs.delete(footerRowDef);\n            this._footerRowDefChanged = true;\n        };\n        /**\n         * Updates the header sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n         * automatically called when the header row changes its displayed set of columns, or if its\n         * sticky input changes. May be called manually for cases where the cell content changes outside\n         * of these events.\n         */\n        CdkTable.prototype.updateStickyHeaderRowStyles = function () {\n            var headerRows = this._getRenderedRows(this._headerRowOutlet);\n            var tableElement = this._elementRef.nativeElement;\n            // Hide the thead element if there are no header rows. This is necessary to satisfy\n            // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n            // required child `row`.\n            var thead = tableElement.querySelector('thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n            var stickyStates = this._headerRowDefs.map(function (def) { return def.sticky; });\n            this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n            this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n            // Reset the dirty state of the sticky input change since it has been used.\n            this._headerRowDefs.forEach(function (def) { return def.resetStickyChanged(); });\n        };\n        /**\n         * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n         * automatically called when the footer row changes its displayed set of columns, or if its\n         * sticky input changes. May be called manually for cases where the cell content changes outside\n         * of these events.\n         */\n        CdkTable.prototype.updateStickyFooterRowStyles = function () {\n            var footerRows = this._getRenderedRows(this._footerRowOutlet);\n            var tableElement = this._elementRef.nativeElement;\n            // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n            // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n            // required child `row`.\n            var tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n            var stickyStates = this._footerRowDefs.map(function (def) { return def.sticky; });\n            this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n            this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n            this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n            // Reset the dirty state of the sticky input change since it has been used.\n            this._footerRowDefs.forEach(function (def) { return def.resetStickyChanged(); });\n        };\n        /**\n         * Updates the column sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the left and right. Then sticky styles are added for the left and right according\n         * to the column definitions for each cell in each row. This is automatically called when\n         * the data source provides a new set of data or when a column definition changes its sticky\n         * input. May be called manually for cases where the cell content changes outside of these events.\n         */\n        CdkTable.prototype.updateStickyColumnStyles = function () {\n            var _this = this;\n            var headerRows = this._getRenderedRows(this._headerRowOutlet);\n            var dataRows = this._getRenderedRows(this._rowOutlet);\n            var footerRows = this._getRenderedRows(this._footerRowOutlet);\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning(tslib_1.__spread(headerRows, dataRows, footerRows), ['left', 'right']);\n            // Update the sticky styles for each header row depending on the def's sticky state\n            headerRows.forEach(function (headerRow, i) {\n                _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);\n            });\n            // Update the sticky styles for each data row depending on its def's sticky state\n            this._rowDefs.forEach(function (rowDef) {\n                // Collect all the rows rendered with this row definition.\n                var rows = [];\n                for (var i = 0; i < dataRows.length; i++) {\n                    if (_this._renderRows[i].rowDef === rowDef) {\n                        rows.push(dataRows[i]);\n                    }\n                }\n                _this._addStickyColumnStyles(rows, rowDef);\n            });\n            // Update the sticky styles for each footer row depending on the def's sticky state\n            footerRows.forEach(function (footerRow, i) {\n                _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);\n            });\n            // Reset the dirty state of the sticky input change since it has been used.\n            Array.from(this._columnDefsByName.values()).forEach(function (def) { return def.resetStickyChanged(); });\n        };\n        /**\n         * Get the list of RenderRow objects to render according to the current list of data and defined\n         * row definitions. If the previous list already contained a particular pair, it should be reused\n         * so that the differ equates their references.\n         */\n        CdkTable.prototype._getAllRenderRows = function () {\n            var renderRows = [];\n            // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n            // new cache while unused ones can be picked up by garbage collection.\n            var prevCachedRenderRows = this._cachedRenderRowsMap;\n            this._cachedRenderRowsMap = new Map();\n            // For each data object, get the list of rows that should be rendered, represented by the\n            // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n            for (var i = 0; i < this._data.length; i++) {\n                var data = this._data[i];\n                var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n                if (!this._cachedRenderRowsMap.has(data)) {\n                    this._cachedRenderRowsMap.set(data, new WeakMap());\n                }\n                for (var j = 0; j < renderRowsForData.length; j++) {\n                    var renderRow = renderRowsForData[j];\n                    var cache = this._cachedRenderRowsMap.get(renderRow.data);\n                    if (cache.has(renderRow.rowDef)) {\n                        cache.get(renderRow.rowDef).push(renderRow);\n                    }\n                    else {\n                        cache.set(renderRow.rowDef, [renderRow]);\n                    }\n                    renderRows.push(renderRow);\n                }\n            }\n            return renderRows;\n        };\n        /**\n         * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n         * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n         * `(T, CdkRowDef)` pair.\n         */\n        CdkTable.prototype._getRenderRowsForData = function (data, dataIndex, cache) {\n            var rowDefs = this._getRowDefs(data, dataIndex);\n            return rowDefs.map(function (rowDef) {\n                var cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n                if (cachedRenderRows.length) {\n                    var dataRow = cachedRenderRows.shift();\n                    dataRow.dataIndex = dataIndex;\n                    return dataRow;\n                }\n                else {\n                    return { data: data, rowDef: rowDef, dataIndex: dataIndex };\n                }\n            });\n        };\n        /** Update the map containing the content's column definitions. */\n        CdkTable.prototype._cacheColumnDefs = function () {\n            var _this = this;\n            this._columnDefsByName.clear();\n            var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n            columnDefs.forEach(function (columnDef) {\n                if (_this._columnDefsByName.has(columnDef.name)) {\n                    throw getTableDuplicateColumnNameError(columnDef.name);\n                }\n                _this._columnDefsByName.set(columnDef.name, columnDef);\n            });\n        };\n        /** Update the list of all available row definitions that can be used. */\n        CdkTable.prototype._cacheRowDefs = function () {\n            this._headerRowDefs =\n                mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n            this._footerRowDefs =\n                mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n            this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n            // After all row definitions are determined, find the row definition to be considered default.\n            var defaultRowDefs = this._rowDefs.filter(function (def) { return !def.when; });\n            if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n                throw getTableMultipleDefaultRowDefsError();\n            }\n            this._defaultRowDef = defaultRowDefs[0];\n        };\n        /**\n         * Check if the header, data, or footer rows have changed what columns they want to display or\n         * whether the sticky states have changed for the header or footer. If there is a diff, then\n         * re-render that section.\n         */\n        CdkTable.prototype._renderUpdatedColumns = function () {\n            var columnsDiffReducer = function (acc, def) { return acc || !!def.getColumnsDiff(); };\n            // Force re-render data rows if the list of column definitions have changed.\n            if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderDataRows();\n            }\n            // Force re-render header/footer rows if the list of column definitions have changed..\n            if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderHeaderRows();\n            }\n            if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderFooterRows();\n            }\n        };\n        /**\n         * Switch to the provided data source by resetting the data and unsubscribing from the current\n         * render change subscription if one exists. If the data source is null, interpret this by\n         * clearing the row outlet. Otherwise start listening for new data.\n         */\n        CdkTable.prototype._switchDataSource = function (dataSource) {\n            this._data = [];\n            if (collections.isDataSource(this.dataSource)) {\n                this.dataSource.disconnect(this);\n            }\n            // Stop listening for data from the previous data source.\n            if (this._renderChangeSubscription) {\n                this._renderChangeSubscription.unsubscribe();\n                this._renderChangeSubscription = null;\n            }\n            if (!dataSource) {\n                if (this._dataDiffer) {\n                    this._dataDiffer.diff([]);\n                }\n                this._rowOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n        };\n        /** Set up a subscription for the data provided by the data source. */\n        CdkTable.prototype._observeRenderChanges = function () {\n            var _this = this;\n            // If no data source has been set, there is nothing to observe for changes.\n            if (!this.dataSource) {\n                return;\n            }\n            var dataStream;\n            if (collections.isDataSource(this.dataSource)) {\n                dataStream = this.dataSource.connect(this);\n            }\n            else if (this.dataSource instanceof rxjs.Observable) {\n                dataStream = this.dataSource;\n            }\n            else if (Array.isArray(this.dataSource)) {\n                dataStream = rxjs.of(this.dataSource);\n            }\n            if (dataStream === undefined) {\n                throw getTableUnknownDataSourceError();\n            }\n            this._renderChangeSubscription = dataStream.pipe(operators.takeUntil(this._onDestroy)).subscribe(function (data) {\n                _this._data = data || [];\n                _this.renderRows();\n            });\n        };\n        /**\n         * Clears any existing content in the header row outlet and creates a new embedded view\n         * in the outlet using the header row definition.\n         */\n        CdkTable.prototype._forceRenderHeaderRows = function () {\n            var _this = this;\n            // Clear the header row outlet if any content exists.\n            if (this._headerRowOutlet.viewContainer.length > 0) {\n                this._headerRowOutlet.viewContainer.clear();\n            }\n            this._headerRowDefs.forEach(function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); });\n            this.updateStickyHeaderRowStyles();\n            this.updateStickyColumnStyles();\n        };\n        /**\n         * Clears any existing content in the footer row outlet and creates a new embedded view\n         * in the outlet using the footer row definition.\n         */\n        CdkTable.prototype._forceRenderFooterRows = function () {\n            var _this = this;\n            // Clear the footer row outlet if any content exists.\n            if (this._footerRowOutlet.viewContainer.length > 0) {\n                this._footerRowOutlet.viewContainer.clear();\n            }\n            this._footerRowDefs.forEach(function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); });\n            this.updateStickyFooterRowStyles();\n            this.updateStickyColumnStyles();\n        };\n        /** Adds the sticky column styles for the rows according to the columns' stick states. */\n        CdkTable.prototype._addStickyColumnStyles = function (rows, rowDef) {\n            var _this = this;\n            var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n                var columnDef = _this._columnDefsByName.get(columnName);\n                if (!columnDef) {\n                    throw getTableUnknownColumnError(columnName);\n                }\n                return columnDef;\n            });\n            var stickyStartStates = columnDefs.map(function (columnDef) { return columnDef.sticky; });\n            var stickyEndStates = columnDefs.map(function (columnDef) { return columnDef.stickyEnd; });\n            this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n        };\n        /** Gets the list of rows that have been rendered in the row outlet. */\n        CdkTable.prototype._getRenderedRows = function (rowOutlet) {\n            var renderedRows = [];\n            for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n                var viewRef = rowOutlet.viewContainer.get(i);\n                renderedRows.push(viewRef.rootNodes[0]);\n            }\n            return renderedRows;\n        };\n        /**\n         * Get the matching row definitions that should be used for this row data. If there is only\n         * one row definition, it is returned. Otherwise, find the row definitions that has a when\n         * predicate that returns true with the data. If none return true, return the default row\n         * definition.\n         */\n        CdkTable.prototype._getRowDefs = function (data, dataIndex) {\n            if (this._rowDefs.length == 1) {\n                return [this._rowDefs[0]];\n            }\n            var rowDefs = [];\n            if (this.multiTemplateDataRows) {\n                rowDefs = this._rowDefs.filter(function (def) { return !def.when || def.when(dataIndex, data); });\n            }\n            else {\n                var rowDef = this._rowDefs.find(function (def) { return def.when && def.when(dataIndex, data); }) || this._defaultRowDef;\n                if (rowDef) {\n                    rowDefs.push(rowDef);\n                }\n            }\n            if (!rowDefs.length) {\n                throw getTableMissingMatchingRowDefError(data);\n            }\n            return rowDefs;\n        };\n        /**\n         * Create the embedded view for the data row template and place it in the correct index location\n         * within the data row view container.\n         */\n        CdkTable.prototype._insertRow = function (renderRow, renderIndex) {\n            var rowDef = renderRow.rowDef;\n            var context = { $implicit: renderRow.data };\n            this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n        };\n        /**\n         * Creates a new row template in the outlet and fills it with the set of cell templates.\n         * Optionally takes a context to provide to the row and cells, as well as an optional index\n         * of where to place the new row template in the outlet.\n         */\n        CdkTable.prototype._renderRow = function (outlet, rowDef, index, context) {\n            var e_1, _a;\n            if (context === void 0) { context = {}; }\n            // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n            outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n            try {\n                for (var _b = tslib_1.__values(this._getCellTemplates(rowDef)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var cellTemplate = _c.value;\n                    if (CdkCellOutlet.mostRecentCellOutlet) {\n                        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Updates the index-related context for each row to reflect any changes in the index of the rows,\n         * e.g. first/last/even/odd.\n         */\n        CdkTable.prototype._updateRowIndexContext = function () {\n            var viewContainer = this._rowOutlet.viewContainer;\n            for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n                var viewRef = viewContainer.get(renderIndex);\n                var context = viewRef.context;\n                context.count = count;\n                context.first = renderIndex === 0;\n                context.last = renderIndex === count - 1;\n                context.even = renderIndex % 2 === 0;\n                context.odd = !context.even;\n                if (this.multiTemplateDataRows) {\n                    context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                    context.renderIndex = renderIndex;\n                }\n                else {\n                    context.index = this._renderRows[renderIndex].dataIndex;\n                }\n            }\n        };\n        /** Gets the column definitions for the provided row def. */\n        CdkTable.prototype._getCellTemplates = function (rowDef) {\n            var _this = this;\n            if (!rowDef || !rowDef.columns) {\n                return [];\n            }\n            return Array.from(rowDef.columns, function (columnId) {\n                var column = _this._columnDefsByName.get(columnId);\n                if (!column) {\n                    throw getTableUnknownColumnError(columnId);\n                }\n                return rowDef.extractCellTemplate(column);\n            });\n        };\n        /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n        CdkTable.prototype._applyNativeTableSections = function () {\n            var e_2, _a;\n            var documentFragment = this._document.createDocumentFragment();\n            var sections = [\n                { tag: 'thead', outlet: this._headerRowOutlet },\n                { tag: 'tbody', outlet: this._rowOutlet },\n                { tag: 'tfoot', outlet: this._footerRowOutlet },\n            ];\n            try {\n                for (var sections_1 = tslib_1.__values(sections), sections_1_1 = sections_1.next(); !sections_1_1.done; sections_1_1 = sections_1.next()) {\n                    var section = sections_1_1.value;\n                    var element = this._document.createElement(section.tag);\n                    element.setAttribute('role', 'rowgroup');\n                    element.appendChild(section.outlet.elementRef.nativeElement);\n                    documentFragment.appendChild(element);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (sections_1_1 && !sections_1_1.done && (_a = sections_1.return)) _a.call(sections_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            // Use a DocumentFragment so we don't hit the DOM on each iteration.\n            this._elementRef.nativeElement.appendChild(documentFragment);\n        };\n        /**\n         * Forces a re-render of the data rows. Should be called in cases where there has been an input\n         * change that affects the evaluation of which rows should be rendered, e.g. toggling\n         * `multiTemplateDataRows` or adding/removing row definitions.\n         */\n        CdkTable.prototype._forceRenderDataRows = function () {\n            this._dataDiffer.diff([]);\n            this._rowOutlet.viewContainer.clear();\n            this.renderRows();\n            this.updateStickyColumnStyles();\n        };\n        /**\n         * Checks if there has been a change in sticky states since last check and applies the correct\n         * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n         * during a change detection and after the inputs are settled (after content check).\n         */\n        CdkTable.prototype._checkStickyStates = function () {\n            var stickyCheckReducer = function (acc, d) {\n                return acc || d.hasStickyChanged();\n            };\n            // Note that the check needs to occur for every definition since it notifies the definition\n            // that it can reset its dirty state. Using another operator like `some` may short-circuit\n            // remaining definitions and leave them in an unchecked state.\n            if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n                this.updateStickyHeaderRowStyles();\n            }\n            if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n                this.updateStickyFooterRowStyles();\n            }\n            if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n                this.updateStickyColumnStyles();\n            }\n        };\n        /**\n         * Creates the sticky styler that will be used for sticky rows and columns. Listens\n         * for directionality changes and provides the latest direction to the styler. Re-applies column\n         * stickiness when directionality changes.\n         */\n        CdkTable.prototype._setupStickyStyler = function () {\n            var _this = this;\n            var direction = this._dir ? this._dir.value : 'ltr';\n            this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n            (this._dir ? this._dir.change : rxjs.of())\n                .pipe(operators.takeUntil(this._onDestroy))\n                .subscribe(function (value) {\n                _this._stickyStyler.direction = value;\n                _this.updateStickyColumnStyles();\n            });\n        };\n        CdkTable.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'cdk-table, table[cdk-table]',\n                        exportAs: 'cdkTable',\n                        template: CDK_TABLE_TEMPLATE,\n                        host: {\n                            'class': 'cdk-table',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                        // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                        // declared elsewhere, they are checked when their declaration points are checked.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkTable.ctorParameters = function () { return [\n            { type: core.IterableDiffers },\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef },\n            { type: String, decorators: [{ type: core.Attribute, args: ['role',] }] },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: platform.Platform }\n        ]; };\n        CdkTable.propDecorators = {\n            trackBy: [{ type: core.Input }],\n            dataSource: [{ type: core.Input }],\n            multiTemplateDataRows: [{ type: core.Input }],\n            _rowOutlet: [{ type: core.ViewChild, args: [DataRowOutlet, { static: true },] }],\n            _headerRowOutlet: [{ type: core.ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n            _footerRowOutlet: [{ type: core.ViewChild, args: [FooterRowOutlet, { static: true },] }],\n            _contentColumnDefs: [{ type: core.ContentChildren, args: [CdkColumnDef,] }],\n            _contentRowDefs: [{ type: core.ContentChildren, args: [CdkRowDef,] }],\n            _contentHeaderRowDefs: [{ type: core.ContentChildren, args: [CdkHeaderRowDef,] }],\n            _contentFooterRowDefs: [{ type: core.ContentChildren, args: [CdkFooterRowDef,] }]\n        };\n        return CdkTable;\n    }());\n    /** Utility function that gets a merged list of the entries in a QueryList and values of a Set. */\n    function mergeQueryListAndSet(queryList, set) {\n        return queryList.toArray().concat(Array.from(set));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to specify the text column options. */\n    var TEXT_COLUMN_OPTIONS = new core.InjectionToken('text-column-options');\n    /**\n     * Column that simply shows text content for the header and row cells. Assumes that the table\n     * is using the native table implementation (`<table>`).\n     *\n     * By default, the name of this column will be the header text and data property accessor.\n     * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n     * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n     * input.\n     */\n    var CdkTextColumn = /** @class */ (function () {\n        function CdkTextColumn(_table, _options) {\n            this._table = _table;\n            this._options = _options;\n            /** Alignment of the cell values. */\n            this.justify = 'start';\n            this._options = _options || {};\n        }\n        Object.defineProperty(CdkTextColumn.prototype, \"name\", {\n            /** Column name that should be used to reference this column. */\n            get: function () {\n                return this._name;\n            },\n            set: function (name) {\n                this._name = name;\n                // With Ivy, inputs can be initialized before static query results are\n                // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n                this._syncColumnDefName();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTextColumn.prototype.ngOnInit = function () {\n            this._syncColumnDefName();\n            if (this.headerText === undefined) {\n                this.headerText = this._createDefaultHeaderText();\n            }\n            if (!this.dataAccessor) {\n                this.dataAccessor =\n                    this._options.defaultDataAccessor || (function (data, name) { return data[name]; });\n            }\n            if (this._table) {\n                // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n                // since the columnDef will not pick up its content by the time the table finishes checking\n                // its content and initializing the rows.\n                this.columnDef.cell = this.cell;\n                this.columnDef.headerCell = this.headerCell;\n                this._table.addColumnDef(this.columnDef);\n            }\n            else {\n                throw getTableTextColumnMissingParentTableError();\n            }\n        };\n        CdkTextColumn.prototype.ngOnDestroy = function () {\n            if (this._table) {\n                this._table.removeColumnDef(this.columnDef);\n            }\n        };\n        /**\n         * Creates a default header text. Use the options' header text transformation function if one\n         * has been provided. Otherwise simply capitalize the column name.\n         */\n        CdkTextColumn.prototype._createDefaultHeaderText = function () {\n            var name = this.name;\n            if (core.isDevMode() && !name) {\n                throw getTableTextColumnMissingNameError();\n            }\n            if (this._options && this._options.defaultHeaderTextTransform) {\n                return this._options.defaultHeaderTextTransform(name);\n            }\n            return name[0].toUpperCase() + name.slice(1);\n        };\n        /** Synchronizes the column definition name with the text column name. */\n        CdkTextColumn.prototype._syncColumnDefName = function () {\n            if (this.columnDef) {\n                this.columnDef.name = this.name;\n            }\n        };\n        CdkTextColumn.decorators = [\n            { type: core.Component, args: [{\n                        moduleId: module.id,\n                        selector: 'cdk-text-column',\n                        template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n                        encapsulation: core.ViewEncapsulation.None,\n                        // Change detection is intentionally not set to OnPush. This component's template will be provided\n                        // to the table to be inserted into its view. This is problematic when change detection runs since\n                        // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                        // mean's the template in the table's view will not have the updated value (and in fact will cause\n                        // an ExpressionChangedAfterItHasBeenCheckedError).\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkTextColumn.ctorParameters = function () { return [\n            { type: CdkTable, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n        ]; };\n        CdkTextColumn.propDecorators = {\n            name: [{ type: core.Input }],\n            headerText: [{ type: core.Input }],\n            dataAccessor: [{ type: core.Input }],\n            justify: [{ type: core.Input }],\n            columnDef: [{ type: core.ViewChild, args: [CdkColumnDef, { static: true },] }],\n            cell: [{ type: core.ViewChild, args: [CdkCellDef, { static: true },] }],\n            headerCell: [{ type: core.ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n        };\n        return CdkTextColumn;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [\n        CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n    ];\n    var CdkTableModule = /** @class */ (function () {\n        function CdkTableModule() {\n        }\n        CdkTableModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS\n                    },] }\n        ];\n        return CdkTableModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.DataSource = collections.DataSource;\n    exports.DataRowOutlet = DataRowOutlet;\n    exports.HeaderRowOutlet = HeaderRowOutlet;\n    exports.FooterRowOutlet = FooterRowOutlet;\n    exports.CDK_TABLE_TEMPLATE = CDK_TABLE_TEMPLATE;\n    exports.CdkTable = CdkTable;\n    exports.CdkCellDef = CdkCellDef;\n    exports.CdkHeaderCellDef = CdkHeaderCellDef;\n    exports.CdkFooterCellDef = CdkFooterCellDef;\n    exports.CdkColumnDef = CdkColumnDef;\n    exports.BaseCdkCell = BaseCdkCell;\n    exports.CdkHeaderCell = CdkHeaderCell;\n    exports.CdkFooterCell = CdkFooterCell;\n    exports.CdkCell = CdkCell;\n    exports.CDK_ROW_TEMPLATE = CDK_ROW_TEMPLATE;\n    exports.BaseRowDef = BaseRowDef;\n    exports.CdkHeaderRowDef = CdkHeaderRowDef;\n    exports.CdkFooterRowDef = CdkFooterRowDef;\n    exports.CdkRowDef = CdkRowDef;\n    exports.CdkCellOutlet = CdkCellOutlet;\n    exports.CdkHeaderRow = CdkHeaderRow;\n    exports.CdkFooterRow = CdkFooterRow;\n    exports.CdkRow = CdkRow;\n    exports.CdkTableModule = CdkTableModule;\n    exports.STICKY_DIRECTIONS = STICKY_DIRECTIONS;\n    exports.StickyStyler = StickyStyler;\n    exports.mixinHasStickyInput = mixinHasStickyInput;\n    exports.TEXT_COLUMN_OPTIONS = TEXT_COLUMN_OPTIONS;\n    exports.CdkTextColumn = CdkTextColumn;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=cdk-table.umd.js.map\n"]}
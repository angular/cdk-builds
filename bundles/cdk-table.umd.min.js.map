{"version":3,"sources":["src/cdk/cdk-table.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","cdk","table","bidi","coercion","collections","platform","common","core","rxjs","operators","this","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","mixinHasStickyInput","base","_super","class_1","args","_i","_this","apply","_sticky","_hasStickyChanged","defineProperty","get","set","v","prevValue","coerceBooleanProperty","enumerable","configurable","hasStickyChanged","resetStickyChanged","BaseCdkCell","CDK_TABLE","InjectionToken","TEXT_COLUMN_OPTIONS","CdkCellDef","template","decorators","type","Directive","selector","ctorParameters","TemplateRef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_table","_stickyEnd","_name","name","cssClassFriendlyName","replace","inputs","providers","provide","useExisting","undefined","Inject","Optional","propDecorators","Input","stickyEnd","cell","ContentChild","headerCell","footerCell","CdkColumnDefBase","CdkHeaderCell","columnDef","elementRef","host","class","role","ElementRef","nativeElement","classList","add","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","IterableDiffers","CdkHeaderRowDefBase","CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ngOnDestroy","ViewContainerRef","CdkHeaderRow","Component","changeDetection","ChangeDetectionStrategy","Default","encapsulation","ViewEncapsulation","None","CdkFooterRow","CdkRow","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_isBrowser","clearStickyPositioning","rows","stickyDirections","e_1","_a","rows_1","rows_1_1","row","nodeType","ELEMENT_NODE","_removeStickyStyle","children","e_1_1","return","updateStickyColumns","stickyStartStates","stickyEndStates","e_2","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","rows_2","rows_2_1","_addStickyStyle","e_2_1","stickRows","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","updateStickyFooterContainer","tableElement","tfoot","querySelector","element","e_3","stickyDirections_1","stickyDirections_1_1","style","e_3_1","zIndex","_getCalculatedZIndex","dir","remove","dirValue","cssText","e_4","zIndexIncrements","top","bottom","left","right","_b","_c","e_4_1","firstRowCells","width","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","CdkTable","RowViewRef","EmbeddedViewRef","_changeDetectorRef","_elementRef","_dir","_document","_platform","_onDestroy","Subject","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","BehaviorSubject","start","end","Number","MAX_VALUE","setAttribute","nodeName","_trackByFn","fn","isDevMode","console","warn","JSON","stringify","_dataSource","dataSource","_switchDataSource","_rowOutlet","_forceRenderDataRows","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","dataRow","trackBy","dataIndex","data","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","getTableMissingRowDefsError","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","complete","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","map","def","sticky","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","from","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","getTableDuplicateColumnNameError","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","multiTemplateDataRows","getTableMultipleDefaultRowDefsError","_defaultRowDef","columnsDiffReducer","acc","reduce","unsubscribe","dataStream","connect","isObservable","isArray","of","getTableUnknownDataSourceError","pipe","takeUntil","subscribe","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","getTableMissingMatchingRowDefError","renderIndex","outlet","index","createEmbeddedView","_getCellTemplates","markForCheck","count","first","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","sections_1","sections_1_1","section","createElement","appendChild","stickyCheckReducer","isBrowser","change","items","exportAs","ChangeDetectorRef","String","Attribute","Directionality","DOCUMENT","Platform","ViewChild","static","ContentChildren","descendants","array","CdkTextColumn","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","defaultHeaderTextTransform","toUpperCase","slice","EXPORTED_DECLARATIONS","CdkTableModule","NgModule","declarations","DataSource"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/cdk/platform'), require('@angular/common'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('@angular/cdk/table', ['exports', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/cdk/platform', '@angular/common', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.table = {}), global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.collections, global.ng.cdk.platform, global.ng.common, global.ng.core, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, bidi, coercion, collections, platform, common, core, rxjs, operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Mixin to provide a directive with a function that checks if the sticky input has been\n     * changed since the last time the function was called. Essentially adds a dirty-check to the\n     * sticky value.\n     * @docs-private\n     */\n    function mixinHasStickyInput(base) {\n        return /** @class */ (function (_super) {\n            __extends(class_1, _super);\n            function class_1() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var _this = _super.apply(this, __spread(args)) || this;\n                _this._sticky = false;\n                /** Whether the sticky input has changed since it was last checked. */\n                _this._hasStickyChanged = false;\n                return _this;\n            }\n            Object.defineProperty(class_1.prototype, \"sticky\", {\n                /** Whether sticky positioning should be applied. */\n                get: function () { return this._sticky; },\n                set: function (v) {\n                    var prevValue = this._sticky;\n                    this._sticky = coercion.coerceBooleanProperty(v);\n                    this._hasStickyChanged = prevValue !== this._sticky;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /** Whether the sticky value has changed since this was last called. */\n            class_1.prototype.hasStickyChanged = function () {\n                var hasStickyChanged = this._hasStickyChanged;\n                this._hasStickyChanged = false;\n                return hasStickyChanged;\n            };\n            /** Resets the dirty check for cases where the sticky state has been used without checking. */\n            class_1.prototype.resetStickyChanged = function () {\n                this._hasStickyChanged = false;\n            };\n            return class_1;\n        }(base));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to provide a table to some of the sub-components without causing a circular dependency.\n     * @docs-private\n     */\n    var CDK_TABLE = new core.InjectionToken('CDK_TABLE');\n    /** Injection token that can be used to specify the text column options. */\n    var TEXT_COLUMN_OPTIONS = new core.InjectionToken('text-column-options');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Cell definition for a CDK table.\n     * Captures the template of a column's data row cell as well as cell-specific properties.\n     */\n    var CdkCellDef = /** @class */ (function () {\n        function CdkCellDef(/** @docs-private */ template) {\n            this.template = template;\n        }\n        CdkCellDef.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkCellDef]' },] }\n        ];\n        /** @nocollapse */\n        CdkCellDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkCellDef;\n    }());\n    /**\n     * Header cell definition for a CDK table.\n     * Captures the template of a column's header cell and as well as cell-specific properties.\n     */\n    var CdkHeaderCellDef = /** @class */ (function () {\n        function CdkHeaderCellDef(/** @docs-private */ template) {\n            this.template = template;\n        }\n        CdkHeaderCellDef.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkHeaderCellDef]' },] }\n        ];\n        /** @nocollapse */\n        CdkHeaderCellDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkHeaderCellDef;\n    }());\n    /**\n     * Footer cell definition for a CDK table.\n     * Captures the template of a column's footer cell and as well as cell-specific properties.\n     */\n    var CdkFooterCellDef = /** @class */ (function () {\n        function CdkFooterCellDef(/** @docs-private */ template) {\n            this.template = template;\n        }\n        CdkFooterCellDef.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkFooterCellDef]' },] }\n        ];\n        /** @nocollapse */\n        CdkFooterCellDef.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return CdkFooterCellDef;\n    }());\n    // Boilerplate for applying mixins to CdkColumnDef.\n    /** @docs-private */\n    var CdkColumnDefBase = /** @class */ (function () {\n        function CdkColumnDefBase() {\n        }\n        return CdkColumnDefBase;\n    }());\n    var _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n    /**\n     * Column definition for the CDK table.\n     * Defines a set of cells available for a table column.\n     */\n    var CdkColumnDef = /** @class */ (function (_super) {\n        __extends(CdkColumnDef, _super);\n        function CdkColumnDef(_table) {\n            var _this = _super.call(this) || this;\n            _this._table = _table;\n            _this._stickyEnd = false;\n            return _this;\n        }\n        Object.defineProperty(CdkColumnDef.prototype, \"name\", {\n            /** Unique name for this column. */\n            get: function () {\n                return this._name;\n            },\n            set: function (name) {\n                // If the directive is set without a name (updated programatically), then this setter will\n                // trigger with an empty string and should not overwrite the programatically set value.\n                if (name) {\n                    this._name = name;\n                    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkColumnDef.prototype, \"stickyEnd\", {\n            /**\n             * Whether this column should be sticky positioned on the end of the row. Should make sure\n             * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n             * has been changed.\n             */\n            get: function () {\n                return this._stickyEnd;\n            },\n            set: function (v) {\n                var prevValue = this._stickyEnd;\n                this._stickyEnd = coercion.coerceBooleanProperty(v);\n                this._hasStickyChanged = prevValue !== this._stickyEnd;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkColumnDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkColumnDef]',\n                        inputs: ['sticky'],\n                        providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkColumnDef.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Inject, args: [CDK_TABLE,] }, { type: core.Optional }] }\n        ]; };\n        CdkColumnDef.propDecorators = {\n            name: [{ type: core.Input, args: ['cdkColumnDef',] }],\n            stickyEnd: [{ type: core.Input, args: ['stickyEnd',] }],\n            cell: [{ type: core.ContentChild, args: [CdkCellDef,] }],\n            headerCell: [{ type: core.ContentChild, args: [CdkHeaderCellDef,] }],\n            footerCell: [{ type: core.ContentChild, args: [CdkFooterCellDef,] }]\n        };\n        return CdkColumnDef;\n    }(_CdkColumnDefBase));\n    /** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\n    var BaseCdkCell = /** @class */ (function () {\n        function BaseCdkCell(columnDef, elementRef) {\n            var columnClassName = \"cdk-column-\" + columnDef.cssClassFriendlyName;\n            elementRef.nativeElement.classList.add(columnClassName);\n        }\n        return BaseCdkCell;\n    }());\n    /** Header cell template container that adds the right classes and role. */\n    var CdkHeaderCell = /** @class */ (function (_super) {\n        __extends(CdkHeaderCell, _super);\n        function CdkHeaderCell(columnDef, elementRef) {\n            return _super.call(this, columnDef, elementRef) || this;\n        }\n        CdkHeaderCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-header-cell, th[cdk-header-cell]',\n                        host: {\n                            'class': 'cdk-header-cell',\n                            'role': 'columnheader',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkHeaderCell.ctorParameters = function () { return [\n            { type: CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return CdkHeaderCell;\n    }(BaseCdkCell));\n    /** Footer cell template container that adds the right classes and role. */\n    var CdkFooterCell = /** @class */ (function (_super) {\n        __extends(CdkFooterCell, _super);\n        function CdkFooterCell(columnDef, elementRef) {\n            return _super.call(this, columnDef, elementRef) || this;\n        }\n        CdkFooterCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                        host: {\n                            'class': 'cdk-footer-cell',\n                            'role': 'gridcell',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkFooterCell.ctorParameters = function () { return [\n            { type: CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return CdkFooterCell;\n    }(BaseCdkCell));\n    /** Cell template container that adds the right classes and role. */\n    var CdkCell = /** @class */ (function (_super) {\n        __extends(CdkCell, _super);\n        function CdkCell(columnDef, elementRef) {\n            return _super.call(this, columnDef, elementRef) || this;\n        }\n        CdkCell.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'cdk-cell, td[cdk-cell]',\n                        host: {\n                            'class': 'cdk-cell',\n                            'role': 'gridcell',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkCell.ctorParameters = function () { return [\n            { type: CdkColumnDef },\n            { type: core.ElementRef }\n        ]; };\n        return CdkCell;\n    }(BaseCdkCell));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * The row template that can be used by the mat-table. Should not be used outside of the\n     * material library.\n     */\n    var CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n    /**\n     * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n     * for changes and notifying the table.\n     */\n    var BaseRowDef = /** @class */ (function () {\n        function BaseRowDef(\n        /** @docs-private */ template, _differs) {\n            this.template = template;\n            this._differs = _differs;\n        }\n        BaseRowDef.prototype.ngOnChanges = function (changes) {\n            // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n            // of the columns property or an empty array if none is provided.\n            if (!this._columnsDiffer) {\n                var columns = (changes['columns'] && changes['columns'].currentValue) || [];\n                this._columnsDiffer = this._differs.find(columns).create();\n                this._columnsDiffer.diff(columns);\n            }\n        };\n        /**\n         * Returns the difference between the current columns and the columns from the last diff, or null\n         * if there is no difference.\n         */\n        BaseRowDef.prototype.getColumnsDiff = function () {\n            return this._columnsDiffer.diff(this.columns);\n        };\n        /** Gets this row def's relevant cell template from the provided column def. */\n        BaseRowDef.prototype.extractCellTemplate = function (column) {\n            if (this instanceof CdkHeaderRowDef) {\n                return column.headerCell.template;\n            }\n            if (this instanceof CdkFooterRowDef) {\n                return column.footerCell.template;\n            }\n            else {\n                return column.cell.template;\n            }\n        };\n        return BaseRowDef;\n    }());\n    // Boilerplate for applying mixins to CdkHeaderRowDef.\n    /** @docs-private */\n    var CdkHeaderRowDefBase = /** @class */ (function (_super) {\n        __extends(CdkHeaderRowDefBase, _super);\n        function CdkHeaderRowDefBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return CdkHeaderRowDefBase;\n    }(BaseRowDef));\n    var _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n    /**\n     * Header row definition for the CDK table.\n     * Captures the header row's template and other header properties such as the columns to display.\n     */\n    var CdkHeaderRowDef = /** @class */ (function (_super) {\n        __extends(CdkHeaderRowDef, _super);\n        function CdkHeaderRowDef(template, _differs, _table) {\n            var _this = _super.call(this, template, _differs) || this;\n            _this._table = _table;\n            return _this;\n        }\n        // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n        // Explicitly define it so that the method is called as part of the Angular lifecycle.\n        CdkHeaderRowDef.prototype.ngOnChanges = function (changes) {\n            _super.prototype.ngOnChanges.call(this, changes);\n        };\n        CdkHeaderRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkHeaderRowDef]',\n                        inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkHeaderRowDef.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.IterableDiffers },\n            { type: undefined, decorators: [{ type: core.Inject, args: [CDK_TABLE,] }, { type: core.Optional }] }\n        ]; };\n        return CdkHeaderRowDef;\n    }(_CdkHeaderRowDefBase));\n    // Boilerplate for applying mixins to CdkFooterRowDef.\n    /** @docs-private */\n    var CdkFooterRowDefBase = /** @class */ (function (_super) {\n        __extends(CdkFooterRowDefBase, _super);\n        function CdkFooterRowDefBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return CdkFooterRowDefBase;\n    }(BaseRowDef));\n    var _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n    /**\n     * Footer row definition for the CDK table.\n     * Captures the footer row's template and other footer properties such as the columns to display.\n     */\n    var CdkFooterRowDef = /** @class */ (function (_super) {\n        __extends(CdkFooterRowDef, _super);\n        function CdkFooterRowDef(template, _differs, _table) {\n            var _this = _super.call(this, template, _differs) || this;\n            _this._table = _table;\n            return _this;\n        }\n        // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n        // Explicitly define it so that the method is called as part of the Angular lifecycle.\n        CdkFooterRowDef.prototype.ngOnChanges = function (changes) {\n            _super.prototype.ngOnChanges.call(this, changes);\n        };\n        CdkFooterRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkFooterRowDef]',\n                        inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkFooterRowDef.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.IterableDiffers },\n            { type: undefined, decorators: [{ type: core.Inject, args: [CDK_TABLE,] }, { type: core.Optional }] }\n        ]; };\n        return CdkFooterRowDef;\n    }(_CdkFooterRowDefBase));\n    /**\n     * Data row definition for the CDK table.\n     * Captures the header row's template and other row properties such as the columns to display and\n     * a when predicate that describes when this row should be used.\n     */\n    var CdkRowDef = /** @class */ (function (_super) {\n        __extends(CdkRowDef, _super);\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        function CdkRowDef(template, _differs, _table) {\n            var _this = _super.call(this, template, _differs) || this;\n            _this._table = _table;\n            return _this;\n        }\n        CdkRowDef.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[cdkRowDef]',\n                        inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                    },] }\n        ];\n        /** @nocollapse */\n        CdkRowDef.ctorParameters = function () { return [\n            { type: core.TemplateRef },\n            { type: core.IterableDiffers },\n            { type: undefined, decorators: [{ type: core.Inject, args: [CDK_TABLE,] }, { type: core.Optional }] }\n        ]; };\n        return CdkRowDef;\n    }(BaseRowDef));\n    /**\n     * Outlet for rendering cells inside of a row or header row.\n     * @docs-private\n     */\n    var CdkCellOutlet = /** @class */ (function () {\n        function CdkCellOutlet(_viewContainer) {\n            this._viewContainer = _viewContainer;\n            CdkCellOutlet.mostRecentCellOutlet = this;\n        }\n        CdkCellOutlet.prototype.ngOnDestroy = function () {\n            // If this was the last outlet being rendered in the view, remove the reference\n            // from the static property after it has been destroyed to avoid leaking memory.\n            if (CdkCellOutlet.mostRecentCellOutlet === this) {\n                CdkCellOutlet.mostRecentCellOutlet = null;\n            }\n        };\n        /**\n         * Static property containing the latest constructed instance of this class.\n         * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n         * createEmbeddedView. After one of these components are created, this property will provide\n         * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n         * construct the cells with the provided context.\n         */\n        CdkCellOutlet.mostRecentCellOutlet = null;\n        CdkCellOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[cdkCellOutlet]' },] }\n        ];\n        /** @nocollapse */\n        CdkCellOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef }\n        ]; };\n        return CdkCellOutlet;\n    }());\n    /** Header template container that contains the cell outlet. Adds the right class and role. */\n    var CdkHeaderRow = /** @class */ (function () {\n        function CdkHeaderRow() {\n        }\n        CdkHeaderRow.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-header-row, tr[cdk-header-row]',\n                        template: CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'cdk-header-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        return CdkHeaderRow;\n    }());\n    /** Footer template container that contains the cell outlet. Adds the right class and role. */\n    var CdkFooterRow = /** @class */ (function () {\n        function CdkFooterRow() {\n        }\n        CdkFooterRow.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                        template: CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'cdk-footer-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        return CdkFooterRow;\n    }());\n    /** Data row template container that contains the cell outlet. Adds the right class and role. */\n    var CdkRow = /** @class */ (function () {\n        function CdkRow() {\n        }\n        CdkRow.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-row, tr[cdk-row]',\n                        template: CDK_ROW_TEMPLATE,\n                        host: {\n                            'class': 'cdk-row',\n                            'role': 'row',\n                        },\n                        // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        encapsulation: core.ViewEncapsulation.None\n                    }] }\n        ];\n        return CdkRow;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * List of all possible directions that can be used for sticky positioning.\n     * @docs-private\n     */\n    var STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n    /**\n     * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n     * @docs-private\n     */\n    var StickyStyler = /** @class */ (function () {\n        /**\n         * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n         *     that uses the native `<table>` element.\n         * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n         *     sticky positioning applied.\n         * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n         *     by reversing left/right positions.\n         * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n         */\n        function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser) {\n            if (_isBrowser === void 0) { _isBrowser = true; }\n            this._isNativeHtmlTable = _isNativeHtmlTable;\n            this._stickCellCss = _stickCellCss;\n            this.direction = direction;\n            this._isBrowser = _isBrowser;\n        }\n        /**\n         * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n         * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n         * @param rows The list of rows that should be cleared from sticking in the provided directions\n         * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n         */\n        StickyStyler.prototype.clearStickyPositioning = function (rows, stickyDirections) {\n            var e_1, _a;\n            try {\n                for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {\n                    var row = rows_1_1.value;\n                    // If the row isn't an element (e.g. if it's an `ng-container`),\n                    // it won't have inline styles or `children` so we skip it.\n                    if (row.nodeType !== row.ELEMENT_NODE) {\n                        continue;\n                    }\n                    this._removeStickyStyle(row, stickyDirections);\n                    for (var i = 0; i < row.children.length; i++) {\n                        var cell = row.children[i];\n                        this._removeStickyStyle(cell, stickyDirections);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /**\n         * Applies sticky left and right positions to the cells of each row according to the sticky\n         * states of the rendered column definitions.\n         * @param rows The rows that should have its set of cells stuck according to the sticky states.\n         * @param stickyStartStates A list of boolean states where each state represents whether the cell\n         *     in this index position should be stuck to the start of the row.\n         * @param stickyEndStates A list of boolean states where each state represents whether the cell\n         *     in this index position should be stuck to the end of the row.\n         */\n        StickyStyler.prototype.updateStickyColumns = function (rows, stickyStartStates, stickyEndStates) {\n            var e_2, _a;\n            var hasStickyColumns = stickyStartStates.some(function (state) { return state; }) || stickyEndStates.some(function (state) { return state; });\n            if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n                return;\n            }\n            var firstRow = rows[0];\n            var numCells = firstRow.children.length;\n            var cellWidths = this._getCellWidths(firstRow);\n            var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            var isRtl = this.direction === 'rtl';\n            try {\n                for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {\n                    var row = rows_2_1.value;\n                    for (var i = 0; i < numCells; i++) {\n                        var cell = row.children[i];\n                        if (stickyStartStates[i]) {\n                            this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                        }\n                        if (stickyEndStates[i]) {\n                            this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                        }\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        };\n        /**\n         * Applies sticky positioning to the row's cells if using the native table layout, and to the\n         * row itself otherwise.\n         * @param rowsToStick The list of rows that should be stuck according to their corresponding\n         *     sticky state and to the provided top or bottom position.\n         * @param stickyStates A list of boolean states where each state represents whether the row\n         *     should be stuck in the particular top or bottom position.\n         * @param position The position direction in which the row should be stuck if that row should be\n         *     sticky.\n         *\n         */\n        StickyStyler.prototype.stickRows = function (rowsToStick, stickyStates, position) {\n            // Since we can't measure the rows on the server, we can't stick the rows properly.\n            if (!this._isBrowser) {\n                return;\n            }\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on.\n            var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n            var stickyHeight = 0;\n            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!stickyStates[rowIndex]) {\n                    continue;\n                }\n                var row = rows[rowIndex];\n                if (this._isNativeHtmlTable) {\n                    for (var j = 0; j < row.children.length; j++) {\n                        var cell = row.children[j];\n                        this._addStickyStyle(cell, position, stickyHeight);\n                    }\n                }\n                else {\n                    // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                    // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                    this._addStickyStyle(row, position, stickyHeight);\n                }\n                if (rowIndex === rows.length - 1) {\n                    // prevent unnecessary reflow from getBoundingClientRect()\n                    return;\n                }\n                stickyHeight += row.getBoundingClientRect().height;\n            }\n        };\n        /**\n         * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n         * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n         * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n         * the tfoot element.\n         */\n        StickyStyler.prototype.updateStickyFooterContainer = function (tableElement, stickyStates) {\n            if (!this._isNativeHtmlTable) {\n                return;\n            }\n            var tfoot = tableElement.querySelector('tfoot');\n            if (stickyStates.some(function (state) { return !state; })) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0);\n            }\n        };\n        /**\n         * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n         * the zIndex, removing each of the provided sticky directions, and removing the\n         * sticky position if there are no more directions.\n         */\n        StickyStyler.prototype._removeStickyStyle = function (element, stickyDirections) {\n            var e_3, _a;\n            try {\n                for (var stickyDirections_1 = __values(stickyDirections), stickyDirections_1_1 = stickyDirections_1.next(); !stickyDirections_1_1.done; stickyDirections_1_1 = stickyDirections_1.next()) {\n                    var dir = stickyDirections_1_1.value;\n                    element.style[dir] = '';\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (stickyDirections_1_1 && !stickyDirections_1_1.done && (_a = stickyDirections_1.return)) _a.call(stickyDirections_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            element.style.zIndex = this._getCalculatedZIndex(element);\n            // If the element no longer has any more sticky directions, remove sticky positioning and\n            // the sticky CSS class.\n            var hasDirection = STICKY_DIRECTIONS.some(function (dir) { return !!element.style[dir]; });\n            if (!hasDirection) {\n                element.style.position = '';\n                element.classList.remove(this._stickCellCss);\n            }\n        };\n        /**\n         * Adds the sticky styling to the element by adding the sticky style class, changing position\n         * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n         * direction and value.\n         */\n        StickyStyler.prototype._addStickyStyle = function (element, dir, dirValue) {\n            element.classList.add(this._stickCellCss);\n            element.style[dir] = dirValue + \"px\";\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        };\n        /**\n         * Calculate what the z-index should be for the element, depending on what directions (top,\n         * bottom, left, right) have been set. It should be true that elements with a top direction\n         * should have the highest index since these are elements like a table header. If any of those\n         * elements are also sticky in another direction, then they should appear above other elements\n         * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n         * (e.g. footer rows) should then be next in the ordering such that they are below the header\n         * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n         * should minimally increment so that they are above non-sticky elements but below top and bottom\n         * elements.\n         */\n        StickyStyler.prototype._getCalculatedZIndex = function (element) {\n            var e_4, _a;\n            var zIndexIncrements = {\n                top: 100,\n                bottom: 10,\n                left: 1,\n                right: 1,\n            };\n            var zIndex = 0;\n            try {\n                // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n                // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n                // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n                for (var _b = __values(STICKY_DIRECTIONS), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var dir = _c.value;\n                    if (element.style[dir]) {\n                        zIndex += zIndexIncrements[dir];\n                    }\n                }\n            }\n            catch (e_4_1) { e_4 = { error: e_4_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_4) throw e_4.error; }\n            }\n            return zIndex ? \"\" + zIndex : '';\n        };\n        /** Gets the widths for each cell in the provided row. */\n        StickyStyler.prototype._getCellWidths = function (row) {\n            var cellWidths = [];\n            var firstRowCells = row.children;\n            for (var i = 0; i < firstRowCells.length; i++) {\n                var cell = firstRowCells[i];\n                cellWidths.push(cell.getBoundingClientRect().width);\n            }\n            return cellWidths;\n        };\n        /**\n         * Determines the left and right positions of each sticky column cell, which will be the\n         * accumulation of all sticky column cell widths to the left and right, respectively.\n         * Non-sticky cells do not need to have a value set since their positions will not be applied.\n         */\n        StickyStyler.prototype._getStickyStartColumnPositions = function (widths, stickyStates) {\n            var positions = [];\n            var nextPosition = 0;\n            for (var i = 0; i < widths.length; i++) {\n                if (stickyStates[i]) {\n                    positions[i] = nextPosition;\n                    nextPosition += widths[i];\n                }\n            }\n            return positions;\n        };\n        /**\n         * Determines the left and right positions of each sticky column cell, which will be the\n         * accumulation of all sticky column cell widths to the left and right, respectively.\n         * Non-sticky cells do not need to have a value set since their positions will not be applied.\n         */\n        StickyStyler.prototype._getStickyEndColumnPositions = function (widths, stickyStates) {\n            var positions = [];\n            var nextPosition = 0;\n            for (var i = widths.length; i > 0; i--) {\n                if (stickyStates[i]) {\n                    positions[i] = nextPosition;\n                    nextPosition += widths[i];\n                }\n            }\n            return positions;\n        };\n        return StickyStyler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Returns an error to be thrown when attempting to find an unexisting column.\n     * @param id Id whose lookup failed.\n     * @docs-private\n     */\n    function getTableUnknownColumnError(id) {\n        return Error(\"Could not find column with id \\\"\" + id + \"\\\".\");\n    }\n    /**\n     * Returns an error to be thrown when two column definitions have the same name.\n     * @docs-private\n     */\n    function getTableDuplicateColumnNameError(name) {\n        return Error(\"Duplicate column definition name provided: \\\"\" + name + \"\\\".\");\n    }\n    /**\n     * Returns an error to be thrown when there are multiple rows that are missing a when function.\n     * @docs-private\n     */\n    function getTableMultipleDefaultRowDefsError() {\n        return Error(\"There can only be one default row without a when predicate function.\");\n    }\n    /**\n     * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n     * @docs-private\n     */\n    function getTableMissingMatchingRowDefError(data) {\n        return Error(\"Could not find a matching row definition for the\" +\n            (\"provided row data: \" + JSON.stringify(data)));\n    }\n    /**\n     * Returns an error to be thrown when there is no row definitions present in the content.\n     * @docs-private\n     */\n    function getTableMissingRowDefsError() {\n        return Error('Missing definitions for header, footer, and row; ' +\n            'cannot determine which columns should be rendered.');\n    }\n    /**\n     * Returns an error to be thrown when the data source does not match the compatible types.\n     * @docs-private\n     */\n    function getTableUnknownDataSourceError() {\n        return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n    }\n    /**\n     * Returns an error to be thrown when the text column cannot find a parent table to inject.\n     * @docs-private\n     */\n    function getTableTextColumnMissingParentTableError() {\n        return Error(\"Text column could not find a parent table for registration.\");\n    }\n    /**\n     * Returns an error to be thrown when a table text column doesn't have a name.\n     * @docs-private\n     */\n    function getTableTextColumnMissingNameError() {\n        return Error(\"Table text column must have a name.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n     * @docs-private\n     */\n    var DataRowOutlet = /** @class */ (function () {\n        function DataRowOutlet(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n        DataRowOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[rowOutlet]' },] }\n        ];\n        /** @nocollapse */\n        DataRowOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: core.ElementRef }\n        ]; };\n        return DataRowOutlet;\n    }());\n    /**\n     * Provides a handle for the table to grab the view container's ng-container to insert the header.\n     * @docs-private\n     */\n    var HeaderRowOutlet = /** @class */ (function () {\n        function HeaderRowOutlet(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n        HeaderRowOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[headerRowOutlet]' },] }\n        ];\n        /** @nocollapse */\n        HeaderRowOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: core.ElementRef }\n        ]; };\n        return HeaderRowOutlet;\n    }());\n    /**\n     * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n     * @docs-private\n     */\n    var FooterRowOutlet = /** @class */ (function () {\n        function FooterRowOutlet(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n        FooterRowOutlet.decorators = [\n            { type: core.Directive, args: [{ selector: '[footerRowOutlet]' },] }\n        ];\n        /** @nocollapse */\n        FooterRowOutlet.ctorParameters = function () { return [\n            { type: core.ViewContainerRef },\n            { type: core.ElementRef }\n        ]; };\n        return FooterRowOutlet;\n    }());\n    /**\n     * The table template that can be used by the mat-table. Should not be used outside of the\n     * material library.\n     * @docs-private\n     */\n    var CDK_TABLE_TEMPLATE = \n    // Note that according to MDN, the `caption` element has to be projected as the **first**\n    // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n    \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n    /**\n     * Class used to conveniently type the embedded view ref for rows with a context.\n     * @docs-private\n     */\n    var RowViewRef = /** @class */ (function (_super) {\n        __extends(RowViewRef, _super);\n        function RowViewRef() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return RowViewRef;\n    }(core.EmbeddedViewRef));\n    /**\n     * A data table that can render a header row, data rows, and a footer row.\n     * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n     * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n     * connect function that will return an Observable stream that emits the data array to render.\n     */\n    var CdkTable = /** @class */ (function () {\n        function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n            this._differs = _differs;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._dir = _dir;\n            this._platform = _platform;\n            /** Subject that emits when the component has been destroyed. */\n            this._onDestroy = new rxjs.Subject();\n            /**\n             * Map of all the user's defined columns (header, data, and footer cell template) identified by\n             * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n             * any custom column definitions added to `_customColumnDefs`.\n             */\n            this._columnDefsByName = new Map();\n            /**\n             * Column definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * column definitions as *its* content child.\n             */\n            this._customColumnDefs = new Set();\n            /**\n             * Data row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * built-in data rows as *its* content child.\n             */\n            this._customRowDefs = new Set();\n            /**\n             * Header row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * built-in header rows as *its* content child.\n             */\n            this._customHeaderRowDefs = new Set();\n            /**\n             * Footer row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n             * built-in footer row as *its* content child.\n             */\n            this._customFooterRowDefs = new Set();\n            /**\n             * Whether the header row definition has been changed. Triggers an update to the header row after\n             * content is checked. Initialized as true so that the table renders the initial set of rows.\n             */\n            this._headerRowDefChanged = true;\n            /**\n             * Whether the footer row definition has been changed. Triggers an update to the footer row after\n             * content is checked. Initialized as true so that the table renders the initial set of rows.\n             */\n            this._footerRowDefChanged = true;\n            /**\n             * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n             * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n             * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n             * and row template matches, which allows the `IterableDiffer` to check rows by reference\n             * and understand which rows are added/moved/removed.\n             *\n             * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n             * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n             * contains an array of created pairs. The array is necessary to handle cases where the data\n             * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n             * stored.\n             */\n            this._cachedRenderRowsMap = new Map();\n            /**\n             * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n             * table subclasses.\n             */\n            this.stickyCssClass = 'cdk-table-sticky';\n            this._multiTemplateDataRows = false;\n            // TODO(andrewseguin): Remove max value as the end index\n            //   and instead calculate the view on init and scroll.\n            /**\n             * Stream containing the latest information on what rows are being displayed on screen.\n             * Can be used by the data source to as a heuristic of what data should be provided.\n             *\n             * @docs-private\n             */\n            this.viewChange = new rxjs.BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n            if (!role) {\n                this._elementRef.nativeElement.setAttribute('role', 'grid');\n            }\n            this._document = _document;\n            this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n        }\n        Object.defineProperty(CdkTable.prototype, \"trackBy\", {\n            /**\n             * Tracking function that will be used to check the differences in data changes. Used similarly\n             * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n             * relative to the function to know if a row should be added/removed/moved.\n             * Accepts a function that takes two parameters, `index` and `item`.\n             */\n            get: function () {\n                return this._trackByFn;\n            },\n            set: function (fn) {\n                if (core.isDevMode() && fn != null && typeof fn !== 'function' && console &&\n                    console.warn) {\n                    console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \".\");\n                }\n                this._trackByFn = fn;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTable.prototype, \"dataSource\", {\n            /**\n             * The table's source of data, which can be provided in three ways (in order of complexity):\n             *   - Simple data array (each object represents one table row)\n             *   - Stream that emits a data array each time the array changes\n             *   - `DataSource` object that implements the connect/disconnect interface.\n             *\n             * If a data array is provided, the table must be notified when the array's objects are\n             * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n             * render the diff since the last table render. If the data array reference is changed, the table\n             * will automatically trigger an update to the rows.\n             *\n             * When providing an Observable stream, the table will trigger an update automatically when the\n             * stream emits a new array of data.\n             *\n             * Finally, when providing a `DataSource` object, the table will use the Observable stream\n             * provided by the connect function and trigger updates when that stream emits new data array\n             * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n             * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n             * subscriptions registered during the connect process).\n             */\n            get: function () {\n                return this._dataSource;\n            },\n            set: function (dataSource) {\n                if (this._dataSource !== dataSource) {\n                    this._switchDataSource(dataSource);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CdkTable.prototype, \"multiTemplateDataRows\", {\n            /**\n             * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n             * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n             * dataobject will render the first row that evaluates its when predicate to true, in the order\n             * defined in the table, or otherwise the default row which does not have a when predicate.\n             */\n            get: function () {\n                return this._multiTemplateDataRows;\n            },\n            set: function (v) {\n                this._multiTemplateDataRows = coercion.coerceBooleanProperty(v);\n                // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n                // this setter will be invoked before the row outlet has been defined hence the null check.\n                if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n                    this._forceRenderDataRows();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTable.prototype.ngOnInit = function () {\n            var _this = this;\n            this._setupStickyStyler();\n            if (this._isNativeHtmlTable) {\n                this._applyNativeTableSections();\n            }\n            // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n            // the user has provided a custom trackBy, return the result of that function as evaluated\n            // with the values of the `RenderRow`'s data and index.\n            this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {\n                return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n            });\n        };\n        CdkTable.prototype.ngAfterContentChecked = function () {\n            // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n            this._cacheRowDefs();\n            this._cacheColumnDefs();\n            // Make sure that the user has at least added header, footer, or data row def.\n            if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n                throw getTableMissingRowDefsError();\n            }\n            // Render updates if the list of columns have been changed for the header, row, or footer defs.\n            this._renderUpdatedColumns();\n            // If the header row definition has been changed, trigger a render to the header row.\n            if (this._headerRowDefChanged) {\n                this._forceRenderHeaderRows();\n                this._headerRowDefChanged = false;\n            }\n            // If the footer row definition has been changed, trigger a render to the footer row.\n            if (this._footerRowDefChanged) {\n                this._forceRenderFooterRows();\n                this._footerRowDefChanged = false;\n            }\n            // If there is a data source and row definitions, connect to the data source unless a\n            // connection has already been made.\n            if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n                this._observeRenderChanges();\n            }\n            this._checkStickyStates();\n        };\n        CdkTable.prototype.ngOnDestroy = function () {\n            this._rowOutlet.viewContainer.clear();\n            this._headerRowOutlet.viewContainer.clear();\n            this._footerRowOutlet.viewContainer.clear();\n            this._cachedRenderRowsMap.clear();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (collections.isDataSource(this.dataSource)) {\n                this.dataSource.disconnect(this);\n            }\n        };\n        /**\n         * Renders rows based on the table's latest set of data, which was either provided directly as an\n         * input or retrieved through an Observable stream (directly or from a DataSource).\n         * Checks for differences in the data since the last diff to perform only the necessary\n         * changes (add/remove/move rows).\n         *\n         * If the table's data source is a DataSource or Observable, this will be invoked automatically\n         * each time the provided Observable stream emits a new data array. Otherwise if your data is\n         * an array, this function will need to be called to render any changes.\n         */\n        CdkTable.prototype.renderRows = function () {\n            var _this = this;\n            this._renderRows = this._getAllRenderRows();\n            var changes = this._dataDiffer.diff(this._renderRows);\n            if (!changes) {\n                return;\n            }\n            var viewContainer = this._rowOutlet.viewContainer;\n            changes.forEachOperation(function (record, prevIndex, currentIndex) {\n                if (record.previousIndex == null) {\n                    _this._insertRow(record.item, currentIndex);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(prevIndex);\n                }\n                else {\n                    var view = viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n            // Update the meta context of a row's context data (index, count, first, last, ...)\n            this._updateRowIndexContext();\n            // Update rows that did not get added/removed/moved but may have had their identity changed,\n            // e.g. if trackBy matched data on some property but the actual data reference changed.\n            changes.forEachIdentityChange(function (record) {\n                var rowView = viewContainer.get(record.currentIndex);\n                rowView.context.$implicit = record.item.data;\n            });\n            this.updateStickyColumnStyles();\n        };\n        /**\n         * Sets the header row definition to be used. Overrides the header row definition gathered by\n         * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n         * table's content is checked.\n         * @docs-private\n         * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n         * @breaking-change 8.0.0\n         */\n        CdkTable.prototype.setHeaderRowDef = function (headerRowDef) {\n            this._customHeaderRowDefs = new Set([headerRowDef]);\n            this._headerRowDefChanged = true;\n        };\n        /**\n         * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n         * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n         * table's content is checked.\n         * @docs-private\n         * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n         * @breaking-change 8.0.0\n         */\n        CdkTable.prototype.setFooterRowDef = function (footerRowDef) {\n            this._customFooterRowDefs = new Set([footerRowDef]);\n            this._footerRowDefChanged = true;\n        };\n        /** Adds a column definition that was not included as part of the content children. */\n        CdkTable.prototype.addColumnDef = function (columnDef) {\n            this._customColumnDefs.add(columnDef);\n        };\n        /** Removes a column definition that was not included as part of the content children. */\n        CdkTable.prototype.removeColumnDef = function (columnDef) {\n            this._customColumnDefs.delete(columnDef);\n        };\n        /** Adds a row definition that was not included as part of the content children. */\n        CdkTable.prototype.addRowDef = function (rowDef) {\n            this._customRowDefs.add(rowDef);\n        };\n        /** Removes a row definition that was not included as part of the content children. */\n        CdkTable.prototype.removeRowDef = function (rowDef) {\n            this._customRowDefs.delete(rowDef);\n        };\n        /** Adds a header row definition that was not included as part of the content children. */\n        CdkTable.prototype.addHeaderRowDef = function (headerRowDef) {\n            this._customHeaderRowDefs.add(headerRowDef);\n            this._headerRowDefChanged = true;\n        };\n        /** Removes a header row definition that was not included as part of the content children. */\n        CdkTable.prototype.removeHeaderRowDef = function (headerRowDef) {\n            this._customHeaderRowDefs.delete(headerRowDef);\n            this._headerRowDefChanged = true;\n        };\n        /** Adds a footer row definition that was not included as part of the content children. */\n        CdkTable.prototype.addFooterRowDef = function (footerRowDef) {\n            this._customFooterRowDefs.add(footerRowDef);\n            this._footerRowDefChanged = true;\n        };\n        /** Removes a footer row definition that was not included as part of the content children. */\n        CdkTable.prototype.removeFooterRowDef = function (footerRowDef) {\n            this._customFooterRowDefs.delete(footerRowDef);\n            this._footerRowDefChanged = true;\n        };\n        /**\n         * Updates the header sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n         * automatically called when the header row changes its displayed set of columns, or if its\n         * sticky input changes. May be called manually for cases where the cell content changes outside\n         * of these events.\n         */\n        CdkTable.prototype.updateStickyHeaderRowStyles = function () {\n            var headerRows = this._getRenderedRows(this._headerRowOutlet);\n            var tableElement = this._elementRef.nativeElement;\n            // Hide the thead element if there are no header rows. This is necessary to satisfy\n            // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n            // required child `row`.\n            var thead = tableElement.querySelector('thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n            var stickyStates = this._headerRowDefs.map(function (def) { return def.sticky; });\n            this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n            this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n            // Reset the dirty state of the sticky input change since it has been used.\n            this._headerRowDefs.forEach(function (def) { return def.resetStickyChanged(); });\n        };\n        /**\n         * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n         * automatically called when the footer row changes its displayed set of columns, or if its\n         * sticky input changes. May be called manually for cases where the cell content changes outside\n         * of these events.\n         */\n        CdkTable.prototype.updateStickyFooterRowStyles = function () {\n            var footerRows = this._getRenderedRows(this._footerRowOutlet);\n            var tableElement = this._elementRef.nativeElement;\n            // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n            // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n            // required child `row`.\n            var tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n            var stickyStates = this._footerRowDefs.map(function (def) { return def.sticky; });\n            this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n            this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n            this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n            // Reset the dirty state of the sticky input change since it has been used.\n            this._footerRowDefs.forEach(function (def) { return def.resetStickyChanged(); });\n        };\n        /**\n         * Updates the column sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the left and right. Then sticky styles are added for the left and right according\n         * to the column definitions for each cell in each row. This is automatically called when\n         * the data source provides a new set of data or when a column definition changes its sticky\n         * input. May be called manually for cases where the cell content changes outside of these events.\n         */\n        CdkTable.prototype.updateStickyColumnStyles = function () {\n            var _this = this;\n            var headerRows = this._getRenderedRows(this._headerRowOutlet);\n            var dataRows = this._getRenderedRows(this._rowOutlet);\n            var footerRows = this._getRenderedRows(this._footerRowOutlet);\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning(__spread(headerRows, dataRows, footerRows), ['left', 'right']);\n            // Update the sticky styles for each header row depending on the def's sticky state\n            headerRows.forEach(function (headerRow, i) {\n                _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);\n            });\n            // Update the sticky styles for each data row depending on its def's sticky state\n            this._rowDefs.forEach(function (rowDef) {\n                // Collect all the rows rendered with this row definition.\n                var rows = [];\n                for (var i = 0; i < dataRows.length; i++) {\n                    if (_this._renderRows[i].rowDef === rowDef) {\n                        rows.push(dataRows[i]);\n                    }\n                }\n                _this._addStickyColumnStyles(rows, rowDef);\n            });\n            // Update the sticky styles for each footer row depending on the def's sticky state\n            footerRows.forEach(function (footerRow, i) {\n                _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);\n            });\n            // Reset the dirty state of the sticky input change since it has been used.\n            Array.from(this._columnDefsByName.values()).forEach(function (def) { return def.resetStickyChanged(); });\n        };\n        /**\n         * Get the list of RenderRow objects to render according to the current list of data and defined\n         * row definitions. If the previous list already contained a particular pair, it should be reused\n         * so that the differ equates their references.\n         */\n        CdkTable.prototype._getAllRenderRows = function () {\n            var renderRows = [];\n            // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n            // new cache while unused ones can be picked up by garbage collection.\n            var prevCachedRenderRows = this._cachedRenderRowsMap;\n            this._cachedRenderRowsMap = new Map();\n            // For each data object, get the list of rows that should be rendered, represented by the\n            // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n            for (var i = 0; i < this._data.length; i++) {\n                var data = this._data[i];\n                var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n                if (!this._cachedRenderRowsMap.has(data)) {\n                    this._cachedRenderRowsMap.set(data, new WeakMap());\n                }\n                for (var j = 0; j < renderRowsForData.length; j++) {\n                    var renderRow = renderRowsForData[j];\n                    var cache = this._cachedRenderRowsMap.get(renderRow.data);\n                    if (cache.has(renderRow.rowDef)) {\n                        cache.get(renderRow.rowDef).push(renderRow);\n                    }\n                    else {\n                        cache.set(renderRow.rowDef, [renderRow]);\n                    }\n                    renderRows.push(renderRow);\n                }\n            }\n            return renderRows;\n        };\n        /**\n         * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n         * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n         * `(T, CdkRowDef)` pair.\n         */\n        CdkTable.prototype._getRenderRowsForData = function (data, dataIndex, cache) {\n            var rowDefs = this._getRowDefs(data, dataIndex);\n            return rowDefs.map(function (rowDef) {\n                var cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n                if (cachedRenderRows.length) {\n                    var dataRow = cachedRenderRows.shift();\n                    dataRow.dataIndex = dataIndex;\n                    return dataRow;\n                }\n                else {\n                    return { data: data, rowDef: rowDef, dataIndex: dataIndex };\n                }\n            });\n        };\n        /** Update the map containing the content's column definitions. */\n        CdkTable.prototype._cacheColumnDefs = function () {\n            var _this = this;\n            this._columnDefsByName.clear();\n            var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n            columnDefs.forEach(function (columnDef) {\n                if (_this._columnDefsByName.has(columnDef.name)) {\n                    throw getTableDuplicateColumnNameError(columnDef.name);\n                }\n                _this._columnDefsByName.set(columnDef.name, columnDef);\n            });\n        };\n        /** Update the list of all available row definitions that can be used. */\n        CdkTable.prototype._cacheRowDefs = function () {\n            this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n            this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n            this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n            // After all row definitions are determined, find the row definition to be considered default.\n            var defaultRowDefs = this._rowDefs.filter(function (def) { return !def.when; });\n            if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n                throw getTableMultipleDefaultRowDefsError();\n            }\n            this._defaultRowDef = defaultRowDefs[0];\n        };\n        /**\n         * Check if the header, data, or footer rows have changed what columns they want to display or\n         * whether the sticky states have changed for the header or footer. If there is a diff, then\n         * re-render that section.\n         */\n        CdkTable.prototype._renderUpdatedColumns = function () {\n            var columnsDiffReducer = function (acc, def) { return acc || !!def.getColumnsDiff(); };\n            // Force re-render data rows if the list of column definitions have changed.\n            if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderDataRows();\n            }\n            // Force re-render header/footer rows if the list of column definitions have changed..\n            if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderHeaderRows();\n            }\n            if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderFooterRows();\n            }\n        };\n        /**\n         * Switch to the provided data source by resetting the data and unsubscribing from the current\n         * render change subscription if one exists. If the data source is null, interpret this by\n         * clearing the row outlet. Otherwise start listening for new data.\n         */\n        CdkTable.prototype._switchDataSource = function (dataSource) {\n            this._data = [];\n            if (collections.isDataSource(this.dataSource)) {\n                this.dataSource.disconnect(this);\n            }\n            // Stop listening for data from the previous data source.\n            if (this._renderChangeSubscription) {\n                this._renderChangeSubscription.unsubscribe();\n                this._renderChangeSubscription = null;\n            }\n            if (!dataSource) {\n                if (this._dataDiffer) {\n                    this._dataDiffer.diff([]);\n                }\n                this._rowOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n        };\n        /** Set up a subscription for the data provided by the data source. */\n        CdkTable.prototype._observeRenderChanges = function () {\n            var _this = this;\n            // If no data source has been set, there is nothing to observe for changes.\n            if (!this.dataSource) {\n                return;\n            }\n            var dataStream;\n            if (collections.isDataSource(this.dataSource)) {\n                dataStream = this.dataSource.connect(this);\n            }\n            else if (rxjs.isObservable(this.dataSource)) {\n                dataStream = this.dataSource;\n            }\n            else if (Array.isArray(this.dataSource)) {\n                dataStream = rxjs.of(this.dataSource);\n            }\n            if (dataStream === undefined) {\n                throw getTableUnknownDataSourceError();\n            }\n            this._renderChangeSubscription = dataStream.pipe(operators.takeUntil(this._onDestroy)).subscribe(function (data) {\n                _this._data = data || [];\n                _this.renderRows();\n            });\n        };\n        /**\n         * Clears any existing content in the header row outlet and creates a new embedded view\n         * in the outlet using the header row definition.\n         */\n        CdkTable.prototype._forceRenderHeaderRows = function () {\n            var _this = this;\n            // Clear the header row outlet if any content exists.\n            if (this._headerRowOutlet.viewContainer.length > 0) {\n                this._headerRowOutlet.viewContainer.clear();\n            }\n            this._headerRowDefs.forEach(function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); });\n            this.updateStickyHeaderRowStyles();\n            this.updateStickyColumnStyles();\n        };\n        /**\n         * Clears any existing content in the footer row outlet and creates a new embedded view\n         * in the outlet using the footer row definition.\n         */\n        CdkTable.prototype._forceRenderFooterRows = function () {\n            var _this = this;\n            // Clear the footer row outlet if any content exists.\n            if (this._footerRowOutlet.viewContainer.length > 0) {\n                this._footerRowOutlet.viewContainer.clear();\n            }\n            this._footerRowDefs.forEach(function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); });\n            this.updateStickyFooterRowStyles();\n            this.updateStickyColumnStyles();\n        };\n        /** Adds the sticky column styles for the rows according to the columns' stick states. */\n        CdkTable.prototype._addStickyColumnStyles = function (rows, rowDef) {\n            var _this = this;\n            var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {\n                var columnDef = _this._columnDefsByName.get(columnName);\n                if (!columnDef) {\n                    throw getTableUnknownColumnError(columnName);\n                }\n                return columnDef;\n            });\n            var stickyStartStates = columnDefs.map(function (columnDef) { return columnDef.sticky; });\n            var stickyEndStates = columnDefs.map(function (columnDef) { return columnDef.stickyEnd; });\n            this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n        };\n        /** Gets the list of rows that have been rendered in the row outlet. */\n        CdkTable.prototype._getRenderedRows = function (rowOutlet) {\n            var renderedRows = [];\n            for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n                var viewRef = rowOutlet.viewContainer.get(i);\n                renderedRows.push(viewRef.rootNodes[0]);\n            }\n            return renderedRows;\n        };\n        /**\n         * Get the matching row definitions that should be used for this row data. If there is only\n         * one row definition, it is returned. Otherwise, find the row definitions that has a when\n         * predicate that returns true with the data. If none return true, return the default row\n         * definition.\n         */\n        CdkTable.prototype._getRowDefs = function (data, dataIndex) {\n            if (this._rowDefs.length == 1) {\n                return [this._rowDefs[0]];\n            }\n            var rowDefs = [];\n            if (this.multiTemplateDataRows) {\n                rowDefs = this._rowDefs.filter(function (def) { return !def.when || def.when(dataIndex, data); });\n            }\n            else {\n                var rowDef = this._rowDefs.find(function (def) { return def.when && def.when(dataIndex, data); }) || this._defaultRowDef;\n                if (rowDef) {\n                    rowDefs.push(rowDef);\n                }\n            }\n            if (!rowDefs.length) {\n                throw getTableMissingMatchingRowDefError(data);\n            }\n            return rowDefs;\n        };\n        /**\n         * Create the embedded view for the data row template and place it in the correct index location\n         * within the data row view container.\n         */\n        CdkTable.prototype._insertRow = function (renderRow, renderIndex) {\n            var rowDef = renderRow.rowDef;\n            var context = { $implicit: renderRow.data };\n            this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n        };\n        /**\n         * Creates a new row template in the outlet and fills it with the set of cell templates.\n         * Optionally takes a context to provide to the row and cells, as well as an optional index\n         * of where to place the new row template in the outlet.\n         */\n        CdkTable.prototype._renderRow = function (outlet, rowDef, index, context) {\n            var e_1, _a;\n            if (context === void 0) { context = {}; }\n            // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n            outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n            try {\n                for (var _b = __values(this._getCellTemplates(rowDef)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var cellTemplate = _c.value;\n                    if (CdkCellOutlet.mostRecentCellOutlet) {\n                        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n        /**\n         * Updates the index-related context for each row to reflect any changes in the index of the rows,\n         * e.g. first/last/even/odd.\n         */\n        CdkTable.prototype._updateRowIndexContext = function () {\n            var viewContainer = this._rowOutlet.viewContainer;\n            for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n                var viewRef = viewContainer.get(renderIndex);\n                var context = viewRef.context;\n                context.count = count;\n                context.first = renderIndex === 0;\n                context.last = renderIndex === count - 1;\n                context.even = renderIndex % 2 === 0;\n                context.odd = !context.even;\n                if (this.multiTemplateDataRows) {\n                    context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                    context.renderIndex = renderIndex;\n                }\n                else {\n                    context.index = this._renderRows[renderIndex].dataIndex;\n                }\n            }\n        };\n        /** Gets the column definitions for the provided row def. */\n        CdkTable.prototype._getCellTemplates = function (rowDef) {\n            var _this = this;\n            if (!rowDef || !rowDef.columns) {\n                return [];\n            }\n            return Array.from(rowDef.columns, function (columnId) {\n                var column = _this._columnDefsByName.get(columnId);\n                if (!column) {\n                    throw getTableUnknownColumnError(columnId);\n                }\n                return rowDef.extractCellTemplate(column);\n            });\n        };\n        /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n        CdkTable.prototype._applyNativeTableSections = function () {\n            var e_2, _a;\n            var documentFragment = this._document.createDocumentFragment();\n            var sections = [\n                { tag: 'thead', outlet: this._headerRowOutlet },\n                { tag: 'tbody', outlet: this._rowOutlet },\n                { tag: 'tfoot', outlet: this._footerRowOutlet },\n            ];\n            try {\n                for (var sections_1 = __values(sections), sections_1_1 = sections_1.next(); !sections_1_1.done; sections_1_1 = sections_1.next()) {\n                    var section = sections_1_1.value;\n                    var element = this._document.createElement(section.tag);\n                    element.setAttribute('role', 'rowgroup');\n                    element.appendChild(section.outlet.elementRef.nativeElement);\n                    documentFragment.appendChild(element);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (sections_1_1 && !sections_1_1.done && (_a = sections_1.return)) _a.call(sections_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            // Use a DocumentFragment so we don't hit the DOM on each iteration.\n            this._elementRef.nativeElement.appendChild(documentFragment);\n        };\n        /**\n         * Forces a re-render of the data rows. Should be called in cases where there has been an input\n         * change that affects the evaluation of which rows should be rendered, e.g. toggling\n         * `multiTemplateDataRows` or adding/removing row definitions.\n         */\n        CdkTable.prototype._forceRenderDataRows = function () {\n            this._dataDiffer.diff([]);\n            this._rowOutlet.viewContainer.clear();\n            this.renderRows();\n            this.updateStickyColumnStyles();\n        };\n        /**\n         * Checks if there has been a change in sticky states since last check and applies the correct\n         * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n         * during a change detection and after the inputs are settled (after content check).\n         */\n        CdkTable.prototype._checkStickyStates = function () {\n            var stickyCheckReducer = function (acc, d) {\n                return acc || d.hasStickyChanged();\n            };\n            // Note that the check needs to occur for every definition since it notifies the definition\n            // that it can reset its dirty state. Using another operator like `some` may short-circuit\n            // remaining definitions and leave them in an unchecked state.\n            if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n                this.updateStickyHeaderRowStyles();\n            }\n            if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n                this.updateStickyFooterRowStyles();\n            }\n            if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n                this.updateStickyColumnStyles();\n            }\n        };\n        /**\n         * Creates the sticky styler that will be used for sticky rows and columns. Listens\n         * for directionality changes and provides the latest direction to the styler. Re-applies column\n         * stickiness when directionality changes.\n         */\n        CdkTable.prototype._setupStickyStyler = function () {\n            var _this = this;\n            var direction = this._dir ? this._dir.value : 'ltr';\n            this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n            (this._dir ? this._dir.change : rxjs.of())\n                .pipe(operators.takeUntil(this._onDestroy))\n                .subscribe(function (value) {\n                _this._stickyStyler.direction = value;\n                _this.updateStickyColumnStyles();\n            });\n        };\n        /** Filters definitions that belong to this table from a QueryList. */\n        CdkTable.prototype._getOwnDefs = function (items) {\n            var _this = this;\n            return items.filter(function (item) { return !item._table || item._table === _this; });\n        };\n        CdkTable.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-table, table[cdk-table]',\n                        exportAs: 'cdkTable',\n                        template: CDK_TABLE_TEMPLATE,\n                        host: {\n                            'class': 'cdk-table',\n                        },\n                        encapsulation: core.ViewEncapsulation.None,\n                        // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                        // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                        // declared elsewhere, they are checked when their declaration points are checked.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        providers: [{ provide: CDK_TABLE, useExisting: CdkTable }]\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkTable.ctorParameters = function () { return [\n            { type: core.IterableDiffers },\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef },\n            { type: String, decorators: [{ type: core.Attribute, args: ['role',] }] },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: platform.Platform }\n        ]; };\n        CdkTable.propDecorators = {\n            trackBy: [{ type: core.Input }],\n            dataSource: [{ type: core.Input }],\n            multiTemplateDataRows: [{ type: core.Input }],\n            _rowOutlet: [{ type: core.ViewChild, args: [DataRowOutlet, { static: true },] }],\n            _headerRowOutlet: [{ type: core.ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n            _footerRowOutlet: [{ type: core.ViewChild, args: [FooterRowOutlet, { static: true },] }],\n            _contentColumnDefs: [{ type: core.ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n            _contentRowDefs: [{ type: core.ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n            _contentHeaderRowDefs: [{ type: core.ContentChildren, args: [CdkHeaderRowDef, {\n                            descendants: true\n                        },] }],\n            _contentFooterRowDefs: [{ type: core.ContentChildren, args: [CdkFooterRowDef, {\n                            descendants: true\n                        },] }]\n        };\n        return CdkTable;\n    }());\n    /** Utility function that gets a merged list of the entries in an array and values of a Set. */\n    function mergeArrayAndSet(array, set) {\n        return array.concat(Array.from(set));\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Column that simply shows text content for the header and row cells. Assumes that the table\n     * is using the native table implementation (`<table>`).\n     *\n     * By default, the name of this column will be the header text and data property accessor.\n     * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n     * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n     * input.\n     */\n    var CdkTextColumn = /** @class */ (function () {\n        function CdkTextColumn(_table, _options) {\n            this._table = _table;\n            this._options = _options;\n            /** Alignment of the cell values. */\n            this.justify = 'start';\n            this._options = _options || {};\n        }\n        Object.defineProperty(CdkTextColumn.prototype, \"name\", {\n            /** Column name that should be used to reference this column. */\n            get: function () {\n                return this._name;\n            },\n            set: function (name) {\n                this._name = name;\n                // With Ivy, inputs can be initialized before static query results are\n                // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n                this._syncColumnDefName();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CdkTextColumn.prototype.ngOnInit = function () {\n            this._syncColumnDefName();\n            if (this.headerText === undefined) {\n                this.headerText = this._createDefaultHeaderText();\n            }\n            if (!this.dataAccessor) {\n                this.dataAccessor =\n                    this._options.defaultDataAccessor || (function (data, name) { return data[name]; });\n            }\n            if (this._table) {\n                // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n                // since the columnDef will not pick up its content by the time the table finishes checking\n                // its content and initializing the rows.\n                this.columnDef.cell = this.cell;\n                this.columnDef.headerCell = this.headerCell;\n                this._table.addColumnDef(this.columnDef);\n            }\n            else {\n                throw getTableTextColumnMissingParentTableError();\n            }\n        };\n        CdkTextColumn.prototype.ngOnDestroy = function () {\n            if (this._table) {\n                this._table.removeColumnDef(this.columnDef);\n            }\n        };\n        /**\n         * Creates a default header text. Use the options' header text transformation function if one\n         * has been provided. Otherwise simply capitalize the column name.\n         */\n        CdkTextColumn.prototype._createDefaultHeaderText = function () {\n            var name = this.name;\n            if (core.isDevMode() && !name) {\n                throw getTableTextColumnMissingNameError();\n            }\n            if (this._options && this._options.defaultHeaderTextTransform) {\n                return this._options.defaultHeaderTextTransform(name);\n            }\n            return name[0].toUpperCase() + name.slice(1);\n        };\n        /** Synchronizes the column definition name with the text column name. */\n        CdkTextColumn.prototype._syncColumnDefName = function () {\n            if (this.columnDef) {\n                this.columnDef.name = this.name;\n            }\n        };\n        CdkTextColumn.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'cdk-text-column',\n                        template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n                        encapsulation: core.ViewEncapsulation.None,\n                        // Change detection is intentionally not set to OnPush. This component's template will be provided\n                        // to the table to be inserted into its view. This is problematic when change detection runs since\n                        // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                        // mean's the template in the table's view will not have the updated value (and in fact will cause\n                        // an ExpressionChangedAfterItHasBeenCheckedError).\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default\n                    }] }\n        ];\n        /** @nocollapse */\n        CdkTextColumn.ctorParameters = function () { return [\n            { type: CdkTable, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n        ]; };\n        CdkTextColumn.propDecorators = {\n            name: [{ type: core.Input }],\n            headerText: [{ type: core.Input }],\n            dataAccessor: [{ type: core.Input }],\n            justify: [{ type: core.Input }],\n            columnDef: [{ type: core.ViewChild, args: [CdkColumnDef, { static: true },] }],\n            cell: [{ type: core.ViewChild, args: [CdkCellDef, { static: true },] }],\n            headerCell: [{ type: core.ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n        };\n        return CdkTextColumn;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var EXPORTED_DECLARATIONS = [\n        CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n    ];\n    var CdkTableModule = /** @class */ (function () {\n        function CdkTableModule() {\n        }\n        CdkTableModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: EXPORTED_DECLARATIONS,\n                        declarations: EXPORTED_DECLARATIONS\n                    },] }\n        ];\n        return CdkTableModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    Object.defineProperty(exports, 'DataSource', {\n        enumerable: true,\n        get: function () {\n            return collections.DataSource;\n        }\n    });\n    exports.BaseCdkCell = BaseCdkCell;\n    exports.BaseRowDef = BaseRowDef;\n    exports.CDK_ROW_TEMPLATE = CDK_ROW_TEMPLATE;\n    exports.CDK_TABLE = CDK_TABLE;\n    exports.CDK_TABLE_TEMPLATE = CDK_TABLE_TEMPLATE;\n    exports.CdkCell = CdkCell;\n    exports.CdkCellDef = CdkCellDef;\n    exports.CdkCellOutlet = CdkCellOutlet;\n    exports.CdkColumnDef = CdkColumnDef;\n    exports.CdkFooterCell = CdkFooterCell;\n    exports.CdkFooterCellDef = CdkFooterCellDef;\n    exports.CdkFooterRow = CdkFooterRow;\n    exports.CdkFooterRowDef = CdkFooterRowDef;\n    exports.CdkHeaderCell = CdkHeaderCell;\n    exports.CdkHeaderCellDef = CdkHeaderCellDef;\n    exports.CdkHeaderRow = CdkHeaderRow;\n    exports.CdkHeaderRowDef = CdkHeaderRowDef;\n    exports.CdkRow = CdkRow;\n    exports.CdkRowDef = CdkRowDef;\n    exports.CdkTable = CdkTable;\n    exports.CdkTableModule = CdkTableModule;\n    exports.CdkTextColumn = CdkTextColumn;\n    exports.DataRowOutlet = DataRowOutlet;\n    exports.FooterRowOutlet = FooterRowOutlet;\n    exports.HeaderRowOutlet = HeaderRowOutlet;\n    exports.STICKY_DIRECTIONS = STICKY_DIRECTIONS;\n    exports.StickyStyler = StickyStyler;\n    exports.TEXT_COLUMN_OPTIONS = TEXT_COLUMN_OPTIONS;\n    exports.mixinHasStickyInput = mixinHasStickyInput;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=cdk-table.umd.js.map\n"]}
{"version":3,"file":"observers.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/observers/observe-content.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NumberInput, coerceElement, coerceNumberProperty} from '../coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {Observable, Observer, Subject, Subscription} from 'rxjs';\nimport {debounceTime, filter, map} from 'rxjs/operators';\n\n// Angular may add, remove, or edit comment nodes during change detection. We don't care about\n// these changes because they don't affect the user-preceived content, and worse it can cause\n// infinite change detection cycles where the change detection updates a comment, triggering the\n// MutationObserver, triggering another change detection and kicking the cycle off again.\nfunction shouldIgnoreRecord(record: MutationRecord) {\n  // Ignore changes to comment text.\n  if (record.type === 'characterData' && record.target instanceof Comment) {\n    return true;\n  }\n  // Ignore addition / removal of comments.\n  if (record.type === 'childList') {\n    for (let i = 0; i < record.addedNodes.length; i++) {\n      if (!(record.addedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    for (let i = 0; i < record.removedNodes.length; i++) {\n      if (!(record.removedNodes[i] instanceof Comment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // Observe everything else.\n  return false;\n}\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  private _mutationObserverFactory = inject(MutationObserverFactory);\n\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<\n    Element,\n    {\n      observer: MutationObserver | null;\n      readonly stream: Subject<MutationRecord[]>;\n      count: number;\n    }\n  >();\n\n  private _ngZone = inject(NgZone);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream\n        .pipe(\n          map(records => records.filter(record => !shouldIgnoreRecord(record))),\n          filter(records => !!records.length),\n        )\n        .subscribe(records => {\n          this._ngZone.run(() => {\n            observer.next(records);\n          });\n        });\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._observedElements.has(element)) {\n        const stream = new Subject<MutationRecord[]>();\n        const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n        if (observer) {\n          observer.observe(element, {\n            characterData: true,\n            childList: true,\n            subtree: true,\n          });\n        }\n        this._observedElements.set(element, {observer, stream, count: 1});\n      } else {\n        this._observedElements.get(element)!.count++;\n      }\n      return this._observedElements.get(element)!.stream;\n    });\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  private _contentObserver = inject(ContentObserver);\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input({alias: 'cdkObserveContentDisabled', transform: booleanAttribute})\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number {\n    return this._debounce;\n  }\n  set debounce(value: NumberInput) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    this._currentSubscription = (\n      this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream\n    ).subscribe(this.event);\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n}\n\n@NgModule({\n  imports: [CdkObserveContent],\n  exports: [CdkObserveContent],\n  providers: [MutationObserverFactory],\n})\nexport class ObserversModule {}\n"],"names":["shouldIgnoreRecord","record","type","i","addedNodes","length","Comment","removedNodes","create","callback","MutationObserver","i0","ɵɵngDeclareClassMetadata","minVersion","version","ngImport","MutationObserverFactory","decorators","Map","NgZone","ngOnDestroy","_observedElements","forEach","_","element","_cleanupObserver","observe","elementOrRef","coerceElement","Observable","observer","_observeElement","subscription","stream","pipe","map","records","filter","subscribe","_ngZone","run","next","unsubscribe","_unobserveElement","has","characterData","set","count","get","disconnect","delete","ɵɵngDeclareFactory","ContentObserver","deps","target","ɵɵFactoryTarget","Injectable","ɵɵngDeclareInjectable","providedIn","args","ctorParameters","inject","disabled","_subscribe","transform","booleanAttribute","ObserversModule","NgModule"],"mappings":"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"}
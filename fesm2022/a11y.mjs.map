{"version":3,"file":"a11y.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/aria-describer/aria-reference.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/aria-describer/aria-describer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/key-manager/noop-tree-key-manager.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/focus-trap/configurable-focus-trap.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/focus-trap/focus-trap-manager.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  if (ids.some(existingId => existingId.trim() === id)) {\n    return;\n  }\n  ids.push(id);\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: `aria-${string}`, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  id = id.trim();\n  const filteredIds = ids.filter(val => val !== id);\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  const attrValue = el.getAttribute(attr);\n  return attrValue?.match(/\\S+/g) ?? [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, OnDestroy, APP_ID, inject, DOCUMENT} from '@angular/core';\nimport {Platform} from '../../platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '../../private';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/**\n * ID used for the body container where all messages are appended.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 14.0.0\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/**\n * ID prefix used for each created message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/**\n * Attribute given to each host element that is described by a message element.\n * @deprecated To be turned into a private variable.\n * @breaking-change 14.0.0\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _platform = inject(Platform);\n  private _document = inject(DOCUMENT);\n\n  /** Map of all registered message elements that have been placed into the document. */\n  private _messageRegistry = new Map<string | Element, RegisteredMessage>();\n\n  /** Container for all registered messages. */\n  private _messagesContainer: HTMLElement | null = null;\n\n  /** Unique ID for the service. */\n  private readonly _id = `${nextId++}`;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n    this._id = inject(APP_ID) + '-' + nextId++;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string, role?: string): void;\n\n  /**\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\n   */\n  describe(hostElement: Element, message: HTMLElement): void;\n\n  describe(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message, this._id);\n      this._messageRegistry.set(key, {messageElement: message, referenceCount: 0});\n    } else if (!this._messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message. */\n  removeDescription(hostElement: Element, message: string, role?: string): void;\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: HTMLElement): void;\n\n  removeDescription(hostElement: Element, message: string | HTMLElement, role?: string): void {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = this._messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (this._messagesContainer?.childNodes.length === 0) {\n      this._messagesContainer.remove();\n      this._messagesContainer = null;\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(\n      `[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}=\"${this._id}\"]`,\n    );\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    this._messagesContainer?.remove();\n    this._messagesContainer = null;\n    this._messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string, role?: string) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement, this._id);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n    this._messagesContainer!.appendChild(messageElement);\n    this._messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(key: string | Element) {\n    this._messageRegistry.get(key)?.messageElement?.remove();\n    this._messageRegistry.delete(key);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (this._messagesContainer) {\n      return;\n    }\n\n    const containerClassName = 'cdk-describedby-message-container';\n    const serverContainers = this._document.querySelectorAll(\n      `.${containerClassName}[platform=\"server\"]`,\n    );\n\n    for (let i = 0; i < serverContainers.length; i++) {\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      serverContainers[i].remove();\n    }\n\n    const messagesContainer = this._document.createElement('div');\n\n    // We add `visibility: hidden` in order to prevent text in this container from\n    // being searchable by the browser's Ctrl + F functionality.\n    // Screen-readers will still read the description for elements with aria-describedby even\n    // when the description element is not visible.\n    messagesContainer.style.visibility = 'hidden';\n    // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n    // the description element doesn't impact page layout.\n    messagesContainer.classList.add(containerClassName);\n    messagesContainer.classList.add('cdk-visually-hidden');\n\n    if (!this._platform.isBrowser) {\n      messagesContainer.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(messagesContainer);\n    this._messagesContainer = messagesContainer;\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(\n      id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0,\n    );\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, key: string | Element) {\n    const registeredMessage = this._messageRegistry.get(key)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, key: string | Element): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = this._messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string | HTMLElement | void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message: string | Element, role?: string): string | Element {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element: HTMLElement, serviceId: string) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Subject} from 'rxjs';\nimport {TREE_KEY_MANAGER} from './tree-key-manager';\nimport {TreeKeyManagerItem, TreeKeyManagerStrategy} from './tree-key-manager-strategy';\nimport {Provider} from '@angular/core';\n\n// NoopTreeKeyManager is a \"noop\" implementation of TreeKeyMangerStrategy. Methods are noops. Does\n// not emit to streams.\n//\n// Used for applications built before TreeKeyManager to opt-out of TreeKeyManager and revert to\n// legacy behavior.\n/**\n * @docs-private\n *\n * Opt-out of Tree of key manager behavior.\n *\n * When provided, Tree has same focus management behavior as before TreeKeyManager was introduced.\n *  - Tree does not respond to keyboard interaction\n *  - Tree node allows tabindex to be set by Input binding\n *  - Tree node allows tabindex to be set by attribute binding\n *\n * @deprecated NoopTreeKeyManager deprecated. Use TreeKeyManager or inject a\n * TreeKeyManagerStrategy instead. To be removed in a future version.\n *\n * @breaking-change 21.0.0\n */\nexport class NoopTreeKeyManager<T extends TreeKeyManagerItem> implements TreeKeyManagerStrategy<T> {\n  readonly _isNoopTreeKeyManager = true;\n\n  // Provide change as required by TreeKeyManagerStrategy. NoopTreeKeyManager is a \"noop\"\n  // implementation that does not emit to streams.\n  readonly change = new Subject<T | null>();\n\n  destroy() {\n    this.change.complete();\n  }\n\n  onKeydown() {\n    // noop\n  }\n\n  getActiveItemIndex() {\n    // Always return null. NoopTreeKeyManager is a \"noop\" implementation that does not maintain\n    // the active item.\n    return null;\n  }\n\n  getActiveItem() {\n    // Always return null. NoopTreeKeyManager is a \"noop\" implementation that does not maintain\n    // the active item.\n    return null;\n  }\n\n  focusItem() {\n    // noop\n  }\n}\n\n/**\n * @docs-private\n *\n * Opt-out of Tree of key manager behavior.\n *\n * When provided, Tree has same focus management behavior as before TreeKeyManager was introduced.\n *  - Tree does not respond to keyboard interaction\n *  - Tree node allows tabindex to be set by Input binding\n *  - Tree node allows tabindex to be set by attribute binding\n *\n * @deprecated NoopTreeKeyManager deprecated. Use TreeKeyManager or inject a\n * TreeKeyManagerStrategy instead. To be removed in a future version.\n *\n * @breaking-change 21.0.0\n */\nexport const NOOP_TREE_KEY_MANAGER_FACTORY_PROVIDER: Provider = {\n  provide: TREE_KEY_MANAGER,\n  useFactory: () => () => new NoopTreeKeyManager(),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\nimport {FocusTrap} from './focus-trap';\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {FocusTrapManager, ManagedFocusTrap} from './focus-trap-manager';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  override get enabled(): boolean {\n    return this._enabled;\n  }\n  override set enabled(value: boolean) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n\n  constructor(\n    _element: HTMLElement,\n    _checker: InteractivityChecker,\n    _ngZone: NgZone,\n    _document: Document,\n    private _focusTrapManager: FocusTrapManager,\n    private _inertStrategy: FocusTrapInertStrategy,\n    config: ConfigurableFocusTrapConfig,\n    injector?: Injector,\n  ) {\n    super(_element, _checker, _ngZone, _document, config.defer, injector);\n    this._focusTrapManager.register(this);\n  }\n\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  override destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\n  /** Focus event handler. */\n  private _listener: ((e: FocusEvent) => void) | null = null;\n\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap: ConfigurableFocusTrap): void {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener!, true);\n    }\n\n    this._listener = (e: FocusEvent) => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener!, true);\n    });\n  }\n\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap: ConfigurableFocusTrap): void {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener!, true);\n    this._listener = null;\n  }\n\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  private _trapFocus(focusTrap: ConfigurableFocusTrap, event: FocusEvent) {\n    const target = event.target as HTMLElement;\n    const focusTrapRoot = focusTrap._element;\n\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (target && !focusTrapRoot.contains(target) && !target.closest?.('div.cdk-overlay-pane')) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n */\nexport interface ManagedFocusTrap {\n  _enable(): void;\n  _disable(): void;\n  focusInitialElementWhenReady(): Promise<boolean>;\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapManager {\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\n  // top of the stack is active.\n  private _focusTrapStack: ManagedFocusTrap[] = [];\n\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap: ManagedFocusTrap): void {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap: ManagedFocusTrap): void {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injectable, Injector, NgZone, inject, DOCUMENT} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\nimport {EventListenerFocusTrapInertStrategy} from './event-listener-inert-strategy';\nimport {FOCUS_TRAP_INERT_STRATEGY, FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {FocusTrapManager} from './focus-trap-manager';\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n@Injectable({providedIn: 'root'})\nexport class ConfigurableFocusTrapFactory {\n  private _checker = inject(InteractivityChecker);\n  private _ngZone = inject(NgZone);\n  private _focusTrapManager = inject(FocusTrapManager);\n\n  private _document = inject(DOCUMENT);\n  private _inertStrategy: FocusTrapInertStrategy;\n\n  private readonly _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const inertStrategy = inject(FOCUS_TRAP_INERT_STRATEGY, {optional: true});\n\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param config The focus trap configuration.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\n\n  /**\n   * @deprecated Pass a config object instead of the `deferCaptureElements` flag.\n   * @breaking-change 11.0.0\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\n\n  create(\n    element: HTMLElement,\n    config: ConfigurableFocusTrapConfig | boolean = {defer: false},\n  ): ConfigurableFocusTrap {\n    let configObject: ConfigurableFocusTrapConfig;\n    if (typeof config === 'boolean') {\n      configObject = {defer: config};\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      this._focusTrapManager,\n      this._inertStrategy,\n      configObject,\n      this._injector,\n    );\n  }\n}\n"],"names":["addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","trim","push","setAttribute","join","ID_DELIMITER","removeAriaReferencedId","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","nextId","inject","Platform","_id","constructor","APP_ID","describe","hostElement","message","role","setMessageId","_messageRegistry","set","key","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","getKey","registeredMessage","get","_messagesContainer","remove","ngOnDestroy","describedElements","_document","querySelectorAll","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","i","length","_removeCdkDescribedByReferenceIds","removeAttribute","clear","createElement","_createMessagesContainer","appendChild","delete","containerClassName","messagesContainer","style","visibility","body","element","originalReferenceIds","serviceId","onKeydown","getActiveItemIndex","getActiveItem","ConfigurableFocusTrap","FocusTrap","_focusTrapManager","enabled","value","_enabled","_element","_checker","_ngZone","_inertStrategy","config","injector","defer","register","destroy","_listener","focusTrap","removeEventListener","e","_trapFocus","runOutsideAngular","addEventListener","allowFocus","setTimeout","_focusTrapStack","filter","ft","stack","ConfigurableFocusTrapFactory","InteractivityChecker","NgZone","FocusTrapManager","DOCUMENT","_injector","Injector","inertStrategy","FOCUS_TRAP_INERT_STRATEGY","optional","EventListenerFocusTrapInertStrategy","create","configObject"],"mappings":"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"}
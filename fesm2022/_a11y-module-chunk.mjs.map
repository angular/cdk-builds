{"version":3,"file":"_a11y-module-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/focus-trap/focus-trap.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/live-announcer/live-announcer-tokens.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/live-announcer/live-announcer.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/a11y-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../../platform';\nimport {Injectable, inject} from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether it is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n  private _platform = inject(Platform);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server ðŸ˜Ž\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return (\n      isPotentiallyFocusable(element) &&\n      !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element))\n    );\n  }\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(\n    element.offsetWidth ||\n    element.offsetHeight ||\n    (typeof element.getClientRects === 'function' && element.getClientRects().length)\n  );\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return (\n    nodeName === 'input' ||\n    nodeName === 'select' ||\n    nodeName === 'button' ||\n    nodeName === 'textarea'\n  );\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return (\n    inputType === 'text' ||\n    inputType === 'password' ||\n    nodeName === 'select' ||\n    nodeName === 'textarea'\n  );\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return (\n    isNativeFormElement(element) ||\n    isAnchorWithHref(element) ||\n    element.hasAttribute('contenteditable') ||\n    hasValidTabIndex(element)\n  );\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return (node.ownerDocument && node.ownerDocument.defaultView) || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform, _getFocusedElementPierceShadowDom} from '../../platform';\n\nimport {\n  AfterContentInit,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Injectable,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  afterNextRender,\n  booleanAttribute,\n  inject,\n  DOCUMENT,\n} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '../../private';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false,\n    /** @breaking-change 20.0.0 param to become required */\n    readonly _injector?: Injector,\n  ) {\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      startAnchor.remove();\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      endAnchor.remove();\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options?: FocusOptions): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const markers = this._element.querySelectorAll(\n      `[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`,\n    ) as NodeListOf<HTMLElement>;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      for (let i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n              `attribute will be removed in 8.0.0.`,\n            markers[i],\n          );\n        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n          console.warn(\n            `Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n              `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n              `will be removed in 8.0.0.`,\n            markers[i],\n          );\n        }\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length\n      ? markers[markers.length - 1]\n      : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options?: FocusOptions): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(\n      `[cdk-focus-initial], ` + `[cdkFocusInitial]`,\n    ) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        redirectToElement.hasAttribute(`cdk-focus-initial`)\n      ) {\n        console.warn(\n          `Found use of deprecated attribute 'cdk-focus-initial', ` +\n            `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n            `will be removed in 8.0.0`,\n          redirectToElement,\n        );\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if (\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !this._checker.isFocusable(redirectToElement)\n      ) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options?: FocusOptions): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    const children = root.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getFirstTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    const children = root.children;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const tabbableChild =\n        children[i].nodeType === this._document.ELEMENT_NODE\n          ? this._getLastTabbableElement(children[i] as HTMLElement)\n          : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    // TODO: remove this conditional when injector is required in the constructor.\n    if (this._injector) {\n      afterNextRender(fn, {injector: this._injector});\n    } else {\n      setTimeout(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _checker = inject(InteractivityChecker);\n  private _ngZone = inject(NgZone);\n\n  private _document = inject(DOCUMENT);\n  private _injector = inject(Injector);\n\n  constructor(...args: unknown[]);\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n      element,\n      this._checker,\n      this._ngZone,\n      this._document,\n      deferCaptureElements,\n      this._injector,\n    );\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _focusTrapFactory = inject(FocusTrapFactory);\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input({alias: 'cdkTrapFocus', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this.focusTrap?.enabled || false;\n  }\n  set enabled(value: boolean) {\n    if (this.focusTrap) {\n      this.focusTrap.enabled = value;\n    }\n  }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input({alias: 'cdkTrapFocusAutoCapture', transform: booleanAttribute}) autoCapture: boolean;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const platform = inject(Platform);\n\n    if (platform.isBrowser) {\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n  }\n\n  ngOnDestroy() {\n    this.focusTrap?.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap?.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (this.focusTrap && !this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (\n      autoCaptureChange &&\n      !autoCaptureChange.firstChange &&\n      this.autoCapture &&\n      this.focusTrap?.hasAttached()\n    ) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap?.focusInitialElementWhenReady();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement | null>(\n  'liveAnnouncerElement',\n  {\n    providedIn: 'root',\n    factory: () => null,\n  },\n);\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken<LiveAnnouncerDefaultOptions>(\n  'LIVE_ANNOUNCER_DEFAULT_OPTIONS',\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ContentObserver} from '../../observers';\n\nimport {\n  Directive,\n  ElementRef,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  inject,\n  DOCUMENT,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\nimport {_CdkPrivateStyleLoader, _VisuallyHiddenLoader} from '../../private';\n\nlet uniqueIds = 0;\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _defaultOptions = inject<LiveAnnouncerDefaultOptions>(LIVE_ANNOUNCER_DEFAULT_OPTIONS, {\n    optional: true,\n  });\n\n  private _liveElement: HTMLElement;\n  private _document = inject(DOCUMENT);\n  private _previousTimeout: ReturnType<typeof setTimeout>;\n  private _currentPromise: Promise<void> | undefined;\n  private _currentResolve: (() => void) | undefined;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const elementToken = inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, {optional: true});\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screen readers.\n   * @param message Message to be announced to the screen reader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n        defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    if (this._liveElement.id) {\n      this._exposeAnnouncerToModals(this._liveElement.id);\n    }\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      if (!this._currentPromise) {\n        this._currentPromise = new Promise(resolve => (this._currentResolve = resolve));\n      }\n\n      clearTimeout(this._previousTimeout);\n      this._previousTimeout = setTimeout(() => {\n        this._liveElement.textContent = message;\n\n        if (typeof duration === 'number') {\n          this._previousTimeout = setTimeout(() => this.clear(), duration);\n        }\n\n        // For some reason in tests this can be undefined\n        // Probably related to ZoneJS and every other thing that patches browser APIs in tests\n        this._currentResolve?.();\n        this._currentPromise = this._currentResolve = undefined;\n      }, 100);\n\n      return this._currentPromise;\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    this._liveElement?.remove();\n    this._liveElement = null!;\n    this._currentResolve?.();\n    this._currentPromise = this._currentResolve = undefined;\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].remove();\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n  /**\n   * Some browsers won't expose the accessibility node of the live announcer element if there is an\n   * `aria-modal` and the live announcer is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live announcer element.\n   */\n  private _exposeAnnouncerToModals(id: string) {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `SnakBarContainer` and other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modals = this._document.querySelectorAll(\n      'body > .cdk-overlay-container [aria-modal=\"true\"]',\n    );\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n}\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  private _elementRef = inject(ElementRef);\n  private _liveAnnouncer = inject(LiveAnnouncer);\n  private _contentObserver = inject(ContentObserver);\n  private _ngZone = inject(NgZone);\n\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness {\n    return this._politeness;\n  }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  /** Time in milliseconds after which to clear out the announcer element. */\n  @Input('cdkAriaLiveDuration') duration: number;\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {inject, Injectable, OnDestroy, DOCUMENT} from '@angular/core';\nimport {BreakpointObserver} from '../../layout';\nimport {Platform} from '../../platform';\n\nimport {Subscription} from 'rxjs';\n\n/** Set of possible high-contrast mode backgrounds. */\nexport enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector implements OnDestroy {\n  private _platform = inject(Platform);\n\n  /**\n   * Figuring out the high contrast mode and adding the body classes can cause\n   * some expensive layouts. This flag is used to ensure that we only do it once.\n   */\n  private _hasCheckedHighContrastMode: boolean;\n  private _document = inject(DOCUMENT);\n  private _breakpointSubscription: Subscription;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    this._breakpointSubscription = inject(BreakpointObserver)\n      .observe('(forced-colors: active)')\n      .subscribe(() => {\n        if (this._hasCheckedHighContrastMode) {\n          this._hasCheckedHighContrastMode = false;\n          this._applyBodyHighContrastModeCssClasses();\n        }\n      });\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle =\n      documentWindow && documentWindow.getComputedStyle\n        ? documentWindow.getComputedStyle(testElement)\n        : null;\n    const computedColor = ((computedStyle && computedStyle.backgroundColor) || '').replace(\n      / /g,\n      '',\n    );\n    testElement.remove();\n\n    switch (computedColor) {\n      // Pre Windows 11 dark theme.\n      case 'rgb(0,0,0)':\n      // Windows 11 dark themes.\n      case 'rgb(45,50,54)':\n      case 'rgb(32,32,32)':\n        return HighContrastMode.WHITE_ON_BLACK;\n      // Pre Windows 11 light theme.\n      case 'rgb(255,255,255)':\n      // Windows 11 light theme.\n      case 'rgb(255,250,239)':\n        return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  ngOnDestroy(): void {\n    this._breakpointSubscription.unsubscribe();\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      bodyClasses.remove(\n        HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS,\n        BLACK_ON_WHITE_CSS_CLASS,\n        WHITE_ON_BLACK_CSS_CLASS,\n      );\n      this._hasCheckedHighContrastMode = true;\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ObserversModule} from '../observers';\nimport {NgModule, inject} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n@NgModule({\n  imports: [ObserversModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor() {\n    inject(HighContrastModeDetector)._applyBodyHighContrastModeCssClasses();\n  }\n}\n"],"names":["IsFocusableConfig","ignoreVisibility","InteractivityChecker","_platform","inject","Platform","isTabbable","element","getTabIndexValue","frameElement","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","isFocusable","config","Éµfac","i0","ÉµÉµngDeclareFactory","minVersion","version","ngImport","type","deps","target","ÉµÉµFactoryTarget","Injectable","Éµprov","ÉµÉµngDeclareInjectable","providedIn","decorators","args","ctorParameters","getFrameElement","window","hasGeometry","offsetWidth","offsetHeight","isHiddenInput","isInputElement","isAnchorElement","hasAttribute","hasValidTabIndex","tabIndex","isNaN","parseInt","_hasAttached","startAnchorListener","focusLastTabbableElement","enabled","_enabled","_startAnchor","_endAnchor","_toggleAnchorTabIndex","value","constructor","_element","_checker","_ngZone","_document","deferAnchors","_injector","endAnchor","startAnchor","removeEventListener","remove","endAnchorListener","attachAnchors","_createAnchor","addEventListener","parentNode","insertBefore","nextSibling","focusInitialElementWhenReady","options","focusFirstTabbableElementWhenReady","Promise","resolve","warn","bound","markers","i","length","_getFirstTabbableElement","redirectToElement","querySelector","ngDevMode","focusableChild","focus","focusFirstTabbableElement","_getRegionBoundary","root","children","ELEMENT_NODE","tabbableChild","_getLastTabbableElement","nodeType","createElement","anchor","classList","add","isEnabled","_executeOnStable","fn","afterNextRender","injector","FocusTrapFactory","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","LIVE_ANNOUNCER_DEFAULT_OPTIONS","InjectionToken","LiveAnnouncer","NgZone","_defaultOptions","optional","DOCUMENT","_currentResolve","elementToken","LIVE_ANNOUNCER_ELEMENT_TOKEN","_liveElement","_createLiveElement","announce","message","defaultOptions","duration","clear","clearTimeout","_previousTimeout","politeness","_exposeAnnouncerToModals","id","runOutsideAngular","_currentPromise","setTimeout","undefined","textContent","getElementsByClassName","elementClass","liveEl","previousElements","setAttribute","uniqueIds","body","appendChild","querySelectorAll","ElementRef","HighContrastMode","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","subscribe","_hasCheckedHighContrastMode","_applyBodyHighContrastModeCssClasses","getHighContrastMode","isBrowser","NONE","style","backgroundColor","position","defaultView","computedStyle","documentWindow","getComputedStyle","testElement","computedColor","WHITE_ON_BLACK","BLACK_ON_WHITE","ngOnDestroy","A11yModule","HighContrastModeDetector","NgModule","Éµmod","ÉµÉµngDeclareNgModule","imports","ObserversModule","CdkAriaLive","CdkTrapFocus","CdkMonitorFocus","exports"],"mappings":"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"}
{"version":3,"file":"_scrolling-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/platform/features/scrolling.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED,\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType | undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean | undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if (document.documentElement?.style && 'scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function | undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n        scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.remove();\n  }\n  return rtlScrollAxisType;\n}\n"],"names":["RtlScrollAxisType","rtlScrollAxisType","supportsScrollBehavior","document","Element","scrollBehaviorSupported","toString","NORMAL","scrollContainer","createElement","containerStyle","style","dir","width","overflow","visibility","pointerEvents","position","content","appendChild","scrollLeft"],"mappings":";;AAeEA,EAAAA,iBAAA,CAAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;;;AANU,CAAA,EAAA,iBAAA,KAAAA,iBAAA,GAAA,EAAA,CAAA,CAAA;IAmBZC,iBAAA;;AAMA,SAAAC,sBAAA,GAAA;;AAMM,IAAA,IAAA,OAAAC,QAAA,KAAAA,QAAAA,IAAAA,CAAAA,QAAA,IAAAC,OAAAA,OAAA,oBAAAA,OAA8B,EAAA;6BAChC,GAAA,KAAA;AAGA,MAAA,OAAAC,uBAAA;;6FAEO,EAAA;;KAGL,MAAA;;0BAMwD,EAAA;oFAGvB,CAAAC,QAAA,EAAA,CAAA;OAGrC,MAAA;QAEAD,uBAAA,GAAA,KAAA;;;;;;;;IAgBE,OAAAL,iBAAA,CAAAO,MAAA;;;AAIA,IAAA,MAAAC,eAAA,GAAAL,QAA4B,CAAAM,aAAA,CAAA,KAAA,CAAA;AAC5B,IAAA,MAAAC,cAAA,GAAAF,eAAA,CAAAG,KAAA;IACAH,eAAA,CAAAI,GAAA,GAAe,KAAA;kBAET,CAAAC,KAAA,GAAkB,KAAA;AACxBH,IAAAA,cAAA,CAAAI,QAAA,GAAA,MAAA;IAEAJ,cAAA,CAAAK,UAAsB,GAAA,QAAA;AAEtBL,IAAAA,cAAA,CAAAM,aAAA,GAAA,MAAA;IACAN,cAAA,CAAAO,qBAA0B;AAE1B,IAAA,MAAAC,OAAA,GAAAf,QAAoB,CAAAM,aAAA,CAAA,KAAkB,CAAA;sBAEqD,GAAAS,OAAA,CAAAP,KAAA;sBACG,GAAA,KAAA;uBACvC,GAAA,KAAA;AACvDH,IAAAA,2BAAoB,CAAAU,OAAA,CAAe;kBAC0DC,WAAA,CAAAX,eAAA,CAAA;qBACE,GAAAR,iBAAA,CAAAO,MAAA;IAK3F,IAAAC,eAAA,CAAAY,UAAgB,KAAA,CAAA,EAAA;;;;;;;;;;;"}
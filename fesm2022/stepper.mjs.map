{"version":3,"file":"stepper.mjs","sources":["../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/stepper/step-header.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/stepper/step-label.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/stepper/stepper.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/stepper/stepper-button.ts","../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/stepper/stepper-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, inject} from '@angular/core';\nimport {FocusableOption} from '../a11y';\n\n@Directive({\n  selector: '[cdkStepHeader]',\n  host: {\n    'role': 'tab',\n  },\n})\nexport class CdkStepHeader implements FocusableOption {\n  _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Focuses the step header. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, TemplateRef, inject} from '@angular/core';\n\n@Directive({\n  selector: '[cdkStepLabel]',\n})\nexport class CdkStepLabel {\n  template = inject<TemplateRef<any>>(TemplateRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator, FocusableOption, FocusKeyManager} from '../a11y';\nimport {Direction, Directionality} from '../bidi';\nimport {ENTER, hasModifierKey, SPACE} from '../keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  AfterContentInit,\n  booleanAttribute,\n  numberAttribute,\n  inject,\n  signal,\n  computed,\n} from '@angular/core';\nimport {\n  ControlContainer,\n  type AbstractControl,\n  type NgForm,\n  type FormGroupDirective,\n} from '@angular/forms';\nimport {_getFocusedElementPierceShadowDom} from '../platform';\nimport {Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {CdkStepHeader} from './step-header';\nimport {CdkStepLabel} from './step-label';\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal' | 'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error',\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const STEPPER_GLOBAL_OPTIONS = new InjectionToken<StepperOptions>('STEPPER_GLOBAL_OPTIONS');\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content/></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _stepper = inject(CdkStepper);\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\n\n  /** Forms that have been projected into the step. */\n  @ContentChildren(\n    // Note: we look for `ControlContainer` here, because both `NgForm` and `FormGroupDirective`\n    // provides themselves as such, but we don't want to have a concrete reference to both of\n    // the directives. The type is marked as `Partial` in case we run into a class that provides\n    // itself as `ControlContainer` but doesn't have the same interface as the directives.\n    ControlContainer,\n    {\n      descendants: true,\n    },\n  )\n  protected _childForms: QueryList<Partial<NgForm | FormGroupDirective>> | undefined;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef, {static: true}) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: AbstractControl;\n\n  /** Whether user has attempted to move away from the step. */\n  get interacted(): boolean {\n    return this._interacted();\n  }\n  set interacted(value: boolean) {\n    this._interacted.set(value);\n  }\n  private _interacted = signal(false);\n\n  /** Emits when the user has attempted to move away from the step. */\n  @Output('interacted')\n  readonly interactedStream: EventEmitter<CdkStep> = new EventEmitter<CdkStep>();\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input()\n  get state(): StepState {\n    return this._state()!;\n  }\n  set state(value: StepState) {\n    this._state.set(value);\n  }\n  private _state = signal<StepState | undefined>(undefined);\n\n  /** Whether the user can return to this step once it has been marked as completed. */\n  @Input({transform: booleanAttribute})\n  get editable(): boolean {\n    return this._editable()!;\n  }\n  set editable(value: boolean) {\n    this._editable.set(value);\n  }\n  private _editable = signal(true);\n\n  /** Whether the completion of step is optional. */\n  @Input({transform: booleanAttribute}) optional: boolean = false;\n\n  /** Whether step is marked as completed. */\n  @Input({transform: booleanAttribute})\n  get completed(): boolean {\n    const override = this._completedOverride();\n    const interacted = this._interacted();\n\n    if (override != null) {\n      return override;\n    }\n\n    return interacted && (!this.stepControl || this.stepControl.valid);\n  }\n  set completed(value: boolean) {\n    this._completedOverride.set(value);\n  }\n  _completedOverride = signal<boolean | null>(null);\n\n  /** Current index of the step within the stepper. */\n  readonly index = signal(-1);\n\n  /** Whether the step is selected. */\n  readonly isSelected = computed<boolean>(() => this._stepper.selectedIndex === this.index());\n\n  /** Type of indicator that should be shown for the step. */\n  readonly indicatorType = computed<StepState>(() => {\n    const selected = this.isSelected();\n    const completed = this.completed;\n    const defaultState = this._state() ?? STEP_STATE.NUMBER;\n    const editable = this._editable();\n\n    if (this._showError() && this.hasError && !selected) {\n      return STEP_STATE.ERROR;\n    }\n\n    if (this._displayDefaultIndicatorType) {\n      if (!completed || selected) {\n        return STEP_STATE.NUMBER;\n      }\n      return editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    } else {\n      if (completed && !selected) {\n        return STEP_STATE.DONE;\n      } else if (completed && selected) {\n        return defaultState;\n      }\n      return editable && selected ? STEP_STATE.EDIT : defaultState;\n    }\n  });\n\n  /** Whether the user can navigate to the step. */\n  readonly isNavigable = computed<boolean>(() => {\n    const isSelected = this.isSelected();\n    const isCompleted = this.completed;\n    return isCompleted || isSelected || !this._stepper.linear;\n  });\n\n  /** Whether step has an error. */\n  @Input({transform: booleanAttribute})\n  get hasError(): boolean {\n    const customError = this._customError();\n    return customError == null ? this._getDefaultError() : customError;\n  }\n  set hasError(value: boolean) {\n    this._customError.set(value);\n  }\n  private _customError = signal<boolean | null>(null);\n\n  private _getDefaultError() {\n    return this.interacted && !!this.stepControl?.invalid;\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const stepperOptions = inject<StepperOptions>(STEPPER_GLOBAL_OPTIONS, {optional: true});\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this._interacted.set(false);\n\n    if (this._completedOverride() != null) {\n      this._completedOverride.set(false);\n    }\n\n    if (this._customError() != null) {\n      this._customError.set(false);\n    }\n\n    if (this.stepControl) {\n      // Reset the forms since the default error state matchers will show errors on submit and we\n      // want the form to be back to its initial state (see #29781). Submitted state is on the\n      // individual directives, rather than the control, so we need to reset them ourselves.\n      this._childForms?.forEach(form => form.resetForm?.());\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n\n  _markAsInteracted() {\n    if (!this._interacted()) {\n      this._interacted.set(true);\n      this.interactedStream.emit(this);\n    }\n  }\n\n  /** Determines whether the error state can be shown. */\n  _showError(): boolean {\n    // We want to show the error state either if the user opted into/out of it using the\n    // global options, or if they've explicitly set it through the `hasError` input.\n    return this._stepperOptions.showError ?? this._customError() != null;\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterContentInit, AfterViewInit, OnDestroy {\n  private _dir = inject(Directionality, {optional: true});\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  protected _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption> | undefined;\n\n  /** Full list of steps inside the stepper, including inside nested steppers. */\n  @ContentChildren(CdkStep, {descendants: true}) _steps: QueryList<CdkStep>;\n\n  /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n  readonly steps: QueryList<CdkStep> = new QueryList<CdkStep>();\n\n  /** The list of step headers of the steps in the stepper. */\n  @ContentChildren(CdkStepHeader, {descendants: true}) _stepHeader: QueryList<CdkStepHeader>;\n\n  /** List of step headers sorted based on their DOM order. */\n  private _sortedHeaders = new QueryList<CdkStepHeader>();\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input({transform: booleanAttribute}) linear: boolean = false;\n\n  /** The index of the selected step. */\n  @Input({transform: numberAttribute})\n  get selectedIndex(): number {\n    return this._selectedIndex();\n  }\n  set selectedIndex(index: number) {\n    if (this._steps) {\n      // Ensure that the index can't be out of bounds.\n      if (!this._isValidIndex(index) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this.selectedIndex !== index) {\n        this.selected?._markAsInteracted();\n\n        if (\n          !this._anyControlsInvalidOrPending(index) &&\n          (index >= this.selectedIndex || this.steps.toArray()[index].editable)\n        ) {\n          this._updateSelectedItemIndex(index);\n        }\n      }\n    } else {\n      this._selectedIndex.set(index);\n    }\n  }\n  private _selectedIndex = signal(0);\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep | undefined {\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n  }\n  set selected(step: CdkStep | undefined) {\n    this.selectedIndex = step && this.steps ? this.steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output() readonly selectionChange = new EventEmitter<StepperSelectionEvent>();\n\n  /** Output to support two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Used to track unique ID for each stepper component. */\n  private _groupId = inject(_IdGenerator).getId('cdk-stepper-');\n\n  /** Orientation of the stepper. */\n  @Input()\n  get orientation(): StepperOrientation {\n    return this._orientation;\n  }\n  set orientation(value: StepperOrientation) {\n    // This is a protected method so that `MatStepper` can hook into it.\n    this._orientation = value;\n\n    if (this._keyManager) {\n      this._keyManager.withVerticalOrientation(value === 'vertical');\n    }\n  }\n  private _orientation: StepperOrientation = 'horizontal';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterContentInit() {\n    this._steps.changes\n      .pipe(startWith(this._steps), takeUntil(this._destroyed))\n      .subscribe((steps: QueryList<CdkStep>) => {\n        this.steps.reset(steps.filter(step => step._stepper === this));\n        this.steps.forEach((step, index) => step.index.set(index));\n        this.steps.notifyOnChanges();\n      });\n  }\n\n  ngAfterViewInit() {\n    // If the step headers are defined outside of the `ngFor` that renders the steps, like in the\n    // Material stepper, they won't appear in the `QueryList` in the same order as they're\n    // rendered in the DOM which will lead to incorrect keyboard navigation. We need to sort\n    // them manually to ensure that they're correct. Alternatively, we can change the Material\n    // template to inline the headers in the `ngFor`, but that'll result in a lot of\n    // code duplication. See #23539.\n    this._stepHeader.changes\n      .pipe(startWith(this._stepHeader), takeUntil(this._destroyed))\n      .subscribe((headers: QueryList<CdkStepHeader>) => {\n        this._sortedHeaders.reset(\n          headers.toArray().sort((a, b) => {\n            const documentPosition = a._elementRef.nativeElement.compareDocumentPosition(\n              b._elementRef.nativeElement,\n            );\n\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n          }),\n        );\n        this._sortedHeaders.notifyOnChanges();\n      });\n\n    // Note that while the step headers are content children by default, any components that\n    // extend this one might have them as view children. We initialize the keyboard handling in\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\n    this._keyManager = new FocusKeyManager<FocusableOption>(this._sortedHeaders)\n      .withWrap()\n      .withHomeAndEnd()\n      .withVerticalOrientation(this._orientation === 'vertical');\n\n    // The selected index may have changed between when the component was created and when the\n    // key manager was initialized. Use `updateActiveItem` so it's correct, but it doesn't steal\n    // away focus from the user.\n    this._keyManager.updateActiveItem(this.selectedIndex);\n\n    (this._dir ? (this._dir.change as Observable<Direction>) : observableOf<Direction>())\n      .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n      .subscribe(direction => this._keyManager?.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItem(this.selectedIndex);\n\n    // No need to `takeUntil` here, because we're the ones destroying `steps`.\n    this.steps.changes.subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex.set(Math.max(this.selectedIndex - 1, 0));\n      }\n    });\n\n    // The logic which asserts that the selected index is within bounds doesn't run before the\n    // steps are initialized, because we don't how many steps there are yet so we may have an\n    // invalid index on init. If that's the case, auto-correct to the default so we don't throw.\n    if (!this._isValidIndex(this.selectedIndex)) {\n      this._selectedIndex.set(0);\n    }\n\n    // For linear step and selected index is greater than zero,\n    // set all the previous steps to interacted so that we can navigate to previous steps.\n    if (this.linear && this.selectedIndex > 0) {\n      const visitedSteps = this.steps.toArray().slice(0, this._selectedIndex());\n\n      for (const step of visitedSteps) {\n        step._markAsInteracted();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this.steps.destroy();\n    this._sortedHeaders.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex() + 1, this.steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex() - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this.steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `${this._groupId}-label-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `${this._groupId}-content-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex();\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex(): number | null {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex();\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this.steps.toArray();\n    const selectedIndex = this._selectedIndex();\n\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    if (this._keyManager) {\n      this._containsFocus()\n        ? this._keyManager.setActiveItem(newIndex)\n        : this._keyManager.updateActiveItem(newIndex);\n    }\n\n    this._selectedIndex.set(newIndex);\n    this.selectedIndexChange.emit(newIndex);\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const hasModifier = hasModifierKey(event);\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    if (\n      manager?.activeItemIndex != null &&\n      !hasModifier &&\n      (keyCode === SPACE || keyCode === ENTER)\n    ) {\n      this.selectedIndex = manager.activeItemIndex;\n      event.preventDefault();\n    } else {\n      manager?.setFocusOrigin('keyboard').onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    if (this.linear && index >= 0) {\n      return this.steps\n        .toArray()\n        .slice(0, index)\n        .some(step => {\n          const control = step.stepControl;\n          const isIncomplete = control\n            ? control.invalid || control.pending || !step.interacted\n            : !step.completed;\n          return isIncomplete && !step.optional && !step._completedOverride();\n        });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = _getFocusedElementPierceShadowDom();\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n\n  /** Checks whether the passed-in index is a valid step index. */\n  private _isValidIndex(index: number): boolean {\n    return index > -1 && (!this.steps || index < this.steps.length);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, Input, inject} from '@angular/core';\n\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '[type]': 'type',\n    '(click)': '_stepper.next()',\n  },\n})\nexport class CdkStepperNext {\n  _stepper = inject(CdkStepper);\n\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '[type]': 'type',\n    '(click)': '_stepper.previous()',\n  },\n})\nexport class CdkStepperPrevious {\n  _stepper = inject(CdkStepper);\n\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {CdkStepHeader} from './step-header';\nimport {BidiModule} from '../bidi';\n\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ],\n  exports: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n})\nexport class CdkStepperModule {}\n"],"names":["observableOf"],"mappings":"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"}
{"version":3,"file":"stepper.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/stepper/step-header.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/stepper/stepper.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/stepper/stepper-button.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/stepper/stepper-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, inject} from '@angular/core';\nimport {FocusableOption} from '../a11y';\n\n@Directive({\n  selector: '[cdkStepHeader]',\n  host: {\n    'role': 'tab',\n  },\n})\nexport class CdkStepHeader implements FocusableOption {\n  _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Focuses the step header. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {_IdGenerator, FocusableOption, FocusKeyManager} from '../a11y';\nimport {Direction, Directionality} from '../bidi';\nimport {ENTER, hasModifierKey, SPACE} from '../keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  AfterContentInit,\n  booleanAttribute,\n  numberAttribute,\n  inject,\n  signal,\n  computed,\n} from '@angular/core';\nimport {\n  ControlContainer,\n  type AbstractControl,\n  type NgForm,\n  type FormGroupDirective,\n} from '@angular/forms';\nimport {_getFocusedElementPierceShadowDom} from '../platform';\nimport {Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {CdkStepHeader} from './step-header';\nimport {CdkStepLabel} from './step-label';\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\n/** Possible orientation of a stepper. */\nexport type StepperOrientation = 'horizontal' | 'vertical';\n\n/** Change event emitted on selection changes. */\nexport class StepperSelectionEvent {\n  /** Index of the step now selected. */\n  selectedIndex: number;\n\n  /** Index of the step previously selected. */\n  previouslySelectedIndex: number;\n\n  /** The step instance now selected. */\n  selectedStep: CdkStep;\n\n  /** The step instance previously selected. */\n  previouslySelectedStep: CdkStep;\n}\n\n/** The state of each step. */\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\n\n/** Enum to represent the different states of the steps. */\nexport const STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error',\n};\n\n/** InjectionToken that can be used to specify the global stepper options. */\nexport const STEPPER_GLOBAL_OPTIONS = new InjectionToken<StepperOptions>('STEPPER_GLOBAL_OPTIONS');\n\n/** Configurable options for stepper. */\nexport interface StepperOptions {\n  /**\n   * Whether the stepper should display an error state or not.\n   * Default behavior is assumed to be false.\n   */\n  showError?: boolean;\n\n  /**\n   * Whether the stepper should display the default indicator type\n   * or not.\n   * Default behavior is assumed to be true.\n   */\n  displayDefaultIndicatorType?: boolean;\n}\n\n@Component({\n  selector: 'cdk-step',\n  exportAs: 'cdkStep',\n  template: '<ng-template><ng-content/></ng-template>',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CdkStep implements OnChanges {\n  private _stepperOptions: StepperOptions;\n  _stepper = inject(CdkStepper);\n  _displayDefaultIndicatorType: boolean;\n\n  /** Template for step label if it exists. */\n  @ContentChild(CdkStepLabel) stepLabel: CdkStepLabel;\n\n  /** Forms that have been projected into the step. */\n  @ContentChildren(\n    // Note: we look for `ControlContainer` here, because both `NgForm` and `FormGroupDirective`\n    // provides themselves as such, but we don't want to have a concrete reference to both of\n    // the directives. The type is marked as `Partial` in case we run into a class that provides\n    // itself as `ControlContainer` but doesn't have the same interface as the directives.\n    ControlContainer,\n    {\n      descendants: true,\n    },\n  )\n  protected _childForms: QueryList<Partial<NgForm | FormGroupDirective>> | undefined;\n\n  /** Template for step content. */\n  @ViewChild(TemplateRef, {static: true}) content: TemplateRef<any>;\n\n  /** The top level abstract control of the step. */\n  @Input() stepControl: AbstractControl;\n\n  /** Whether user has attempted to move away from the step. */\n  get interacted(): boolean {\n    return this._interacted();\n  }\n  set interacted(value: boolean) {\n    this._interacted.set(value);\n  }\n  private _interacted = signal(false);\n\n  /** Emits when the user has attempted to move away from the step. */\n  @Output('interacted')\n  readonly interactedStream: EventEmitter<CdkStep> = new EventEmitter<CdkStep>();\n\n  /** Plain text label of the step. */\n  @Input() label: string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** State of the step. */\n  @Input()\n  get state(): StepState {\n    return this._state()!;\n  }\n  set state(value: StepState) {\n    this._state.set(value);\n  }\n  private _state = signal<StepState | undefined>(undefined);\n\n  /** Whether the user can return to this step once it has been marked as completed. */\n  @Input({transform: booleanAttribute})\n  get editable(): boolean {\n    return this._editable()!;\n  }\n  set editable(value: boolean) {\n    this._editable.set(value);\n  }\n  private _editable = signal(true);\n\n  /** Whether the completion of step is optional. */\n  @Input({transform: booleanAttribute}) optional: boolean = false;\n\n  /** Whether step is marked as completed. */\n  @Input({transform: booleanAttribute})\n  get completed(): boolean {\n    const override = this._completedOverride();\n    const interacted = this._interacted();\n\n    if (override != null) {\n      return override;\n    }\n\n    return interacted && (!this.stepControl || this.stepControl.valid);\n  }\n  set completed(value: boolean) {\n    this._completedOverride.set(value);\n  }\n  _completedOverride = signal<boolean | null>(null);\n\n  /** Current index of the step within the stepper. */\n  readonly index = signal(-1);\n\n  /** Whether the step is selected. */\n  readonly isSelected = computed<boolean>(() => this._stepper.selectedIndex === this.index());\n\n  /** Type of indicator that should be shown for the step. */\n  readonly indicatorType = computed<StepState>(() => {\n    const selected = this.isSelected();\n    const completed = this.completed;\n    const defaultState = this._state() ?? STEP_STATE.NUMBER;\n    const editable = this._editable();\n\n    if (this._showError() && this.hasError && !selected) {\n      return STEP_STATE.ERROR;\n    }\n\n    if (this._displayDefaultIndicatorType) {\n      if (!completed || selected) {\n        return STEP_STATE.NUMBER;\n      }\n      return editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    } else {\n      if (completed && !selected) {\n        return STEP_STATE.DONE;\n      } else if (completed && selected) {\n        return defaultState;\n      }\n      return editable && selected ? STEP_STATE.EDIT : defaultState;\n    }\n  });\n\n  /** Whether the user can navigate to the step. */\n  readonly isNavigable = computed<boolean>(() => {\n    const isSelected = this.isSelected();\n    const isCompleted = this.completed;\n    return isCompleted || isSelected || !this._stepper.linear;\n  });\n\n  /** Whether step has an error. */\n  @Input({transform: booleanAttribute})\n  get hasError(): boolean {\n    const customError = this._customError();\n    return customError == null ? this._getDefaultError() : customError;\n  }\n  set hasError(value: boolean) {\n    this._customError.set(value);\n  }\n  private _customError = signal<boolean | null>(null);\n\n  private _getDefaultError() {\n    return this.interacted && !!this.stepControl?.invalid;\n  }\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const stepperOptions = inject<StepperOptions>(STEPPER_GLOBAL_OPTIONS, {optional: true});\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n  }\n\n  /** Selects this step component. */\n  select(): void {\n    this._stepper.selected = this;\n  }\n\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset(): void {\n    this._interacted.set(false);\n\n    if (this._completedOverride() != null) {\n      this._completedOverride.set(false);\n    }\n\n    if (this._customError() != null) {\n      this._customError.set(false);\n    }\n\n    if (this.stepControl) {\n      // Reset the forms since the default error state matchers will show errors on submit and we\n      // want the form to be back to its initial state (see #29781). Submitted state is on the\n      // individual directives, rather than the control, so we need to reset them ourselves.\n      this._childForms?.forEach(form => form.resetForm?.());\n      this.stepControl.reset();\n    }\n  }\n\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n\n  _markAsInteracted() {\n    if (!this._interacted()) {\n      this._interacted.set(true);\n      this.interactedStream.emit(this);\n    }\n  }\n\n  /** Determines whether the error state can be shown. */\n  _showError(): boolean {\n    // We want to show the error state either if the user opted into/out of it using the\n    // global options, or if they've explicitly set it through the `hasError` input.\n    return this._stepperOptions.showError ?? this._customError() != null;\n  }\n}\n\n@Directive({\n  selector: '[cdkStepper]',\n  exportAs: 'cdkStepper',\n})\nexport class CdkStepper implements AfterContentInit, AfterViewInit, OnDestroy {\n  private _dir = inject(Directionality, {optional: true});\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  protected _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n\n  /** Emits when the component is destroyed. */\n  protected readonly _destroyed = new Subject<void>();\n\n  /** Used for managing keyboard focus. */\n  private _keyManager: FocusKeyManager<FocusableOption> | undefined;\n\n  /** Full list of steps inside the stepper, including inside nested steppers. */\n  @ContentChildren(CdkStep, {descendants: true}) _steps: QueryList<CdkStep>;\n\n  /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n  readonly steps: QueryList<CdkStep> = new QueryList<CdkStep>();\n\n  /** The list of step headers of the steps in the stepper. */\n  @ContentChildren(CdkStepHeader, {descendants: true}) _stepHeader: QueryList<CdkStepHeader>;\n\n  /** List of step headers sorted based on their DOM order. */\n  private _sortedHeaders = new QueryList<CdkStepHeader>();\n\n  /** Whether the validity of previous steps should be checked or not. */\n  @Input({transform: booleanAttribute}) linear: boolean = false;\n\n  /** The index of the selected step. */\n  @Input({transform: numberAttribute})\n  get selectedIndex(): number {\n    return this._selectedIndex();\n  }\n  set selectedIndex(index: number) {\n    if (this._steps) {\n      // Ensure that the index can't be out of bounds.\n      if (!this._isValidIndex(index) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n\n      if (this.selectedIndex !== index) {\n        this.selected?._markAsInteracted();\n\n        if (\n          !this._anyControlsInvalidOrPending(index) &&\n          (index >= this.selectedIndex || this.steps.toArray()[index].editable)\n        ) {\n          this._updateSelectedItemIndex(index);\n        }\n      }\n    } else {\n      this._selectedIndex.set(index);\n    }\n  }\n  private _selectedIndex = signal(0);\n\n  /** The step that is selected. */\n  @Input()\n  get selected(): CdkStep | undefined {\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n  }\n  set selected(step: CdkStep | undefined) {\n    this.selectedIndex = step && this.steps ? this.steps.toArray().indexOf(step) : -1;\n  }\n\n  /** Event emitted when the selected step has changed. */\n  @Output() readonly selectionChange = new EventEmitter<StepperSelectionEvent>();\n\n  /** Output to support two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Used to track unique ID for each stepper component. */\n  private _groupId = inject(_IdGenerator).getId('cdk-stepper-');\n\n  /** Orientation of the stepper. */\n  @Input()\n  get orientation(): StepperOrientation {\n    return this._orientation;\n  }\n  set orientation(value: StepperOrientation) {\n    // This is a protected method so that `MatStepper` can hook into it.\n    this._orientation = value;\n\n    if (this._keyManager) {\n      this._keyManager.withVerticalOrientation(value === 'vertical');\n    }\n  }\n  private _orientation: StepperOrientation = 'horizontal';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngAfterContentInit() {\n    this._steps.changes\n      .pipe(startWith(this._steps), takeUntil(this._destroyed))\n      .subscribe((steps: QueryList<CdkStep>) => {\n        this.steps.reset(steps.filter(step => step._stepper === this));\n        this.steps.forEach((step, index) => step.index.set(index));\n        this.steps.notifyOnChanges();\n      });\n  }\n\n  ngAfterViewInit() {\n    // If the step headers are defined outside of the `ngFor` that renders the steps, like in the\n    // Material stepper, they won't appear in the `QueryList` in the same order as they're\n    // rendered in the DOM which will lead to incorrect keyboard navigation. We need to sort\n    // them manually to ensure that they're correct. Alternatively, we can change the Material\n    // template to inline the headers in the `ngFor`, but that'll result in a lot of\n    // code duplication. See #23539.\n    this._stepHeader.changes\n      .pipe(startWith(this._stepHeader), takeUntil(this._destroyed))\n      .subscribe((headers: QueryList<CdkStepHeader>) => {\n        this._sortedHeaders.reset(\n          headers.toArray().sort((a, b) => {\n            const documentPosition = a._elementRef.nativeElement.compareDocumentPosition(\n              b._elementRef.nativeElement,\n            );\n\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n          }),\n        );\n        this._sortedHeaders.notifyOnChanges();\n      });\n\n    // Note that while the step headers are content children by default, any components that\n    // extend this one might have them as view children. We initialize the keyboard handling in\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\n    this._keyManager = new FocusKeyManager<FocusableOption>(this._sortedHeaders)\n      .withWrap()\n      .withHomeAndEnd()\n      .withVerticalOrientation(this._orientation === 'vertical');\n\n    // The selected index may have changed between when the component was created and when the\n    // key manager was initialized. Use `updateActiveItem` so it's correct, but it doesn't steal\n    // away focus from the user.\n    this._keyManager.updateActiveItem(this.selectedIndex);\n\n    (this._dir ? (this._dir.change as Observable<Direction>) : observableOf<Direction>())\n      .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n      .subscribe(direction => this._keyManager?.withHorizontalOrientation(direction));\n\n    this._keyManager.updateActiveItem(this.selectedIndex);\n\n    // No need to `takeUntil` here, because we're the ones destroying `steps`.\n    this.steps.changes.subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex.set(Math.max(this.selectedIndex - 1, 0));\n      }\n    });\n\n    // The logic which asserts that the selected index is within bounds doesn't run before the\n    // steps are initialized, because we don't how many steps there are yet so we may have an\n    // invalid index on init. If that's the case, auto-correct to the default so we don't throw.\n    if (!this._isValidIndex(this.selectedIndex)) {\n      this._selectedIndex.set(0);\n    }\n\n    // For linear step and selected index is greater than zero,\n    // set all the previous steps to interacted so that we can navigate to previous steps.\n    if (this.linear && this.selectedIndex > 0) {\n      const visitedSteps = this.steps.toArray().slice(0, this._selectedIndex());\n\n      for (const step of visitedSteps) {\n        step._markAsInteracted();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this.steps.destroy();\n    this._sortedHeaders.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Selects and focuses the next step in list. */\n  next(): void {\n    this.selectedIndex = Math.min(this._selectedIndex() + 1, this.steps.length - 1);\n  }\n\n  /** Selects and focuses the previous step in list. */\n  previous(): void {\n    this.selectedIndex = Math.max(this._selectedIndex() - 1, 0);\n  }\n\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset(): void {\n    this._updateSelectedItemIndex(0);\n    this.steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i: number): string {\n    return `${this._groupId}-label-${i}`;\n  }\n\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i: number): string {\n    return `${this._groupId}-content-${i}`;\n  }\n\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index: number): StepContentPositionState {\n    const position = index - this._selectedIndex();\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex(): number | null {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex();\n  }\n\n  private _updateSelectedItemIndex(newIndex: number): void {\n    const stepsArray = this.steps.toArray();\n    const selectedIndex = this._selectedIndex();\n\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[selectedIndex],\n    });\n\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    if (this._keyManager) {\n      this._containsFocus()\n        ? this._keyManager.setActiveItem(newIndex)\n        : this._keyManager.updateActiveItem(newIndex);\n    }\n\n    this._selectedIndex.set(newIndex);\n    this.selectedIndexChange.emit(newIndex);\n    this._stateChanged();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const hasModifier = hasModifierKey(event);\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    if (\n      manager?.activeItemIndex != null &&\n      !hasModifier &&\n      (keyCode === SPACE || keyCode === ENTER)\n    ) {\n      this.selectedIndex = manager.activeItemIndex;\n      event.preventDefault();\n    } else {\n      manager?.setFocusOrigin('keyboard').onKeydown(event);\n    }\n  }\n\n  private _anyControlsInvalidOrPending(index: number): boolean {\n    if (this.linear && index >= 0) {\n      return this.steps\n        .toArray()\n        .slice(0, index)\n        .some(step => {\n          const control = step.stepControl;\n          const isIncomplete = control\n            ? control.invalid || control.pending || !step.interacted\n            : !step.completed;\n          return isIncomplete && !step.optional && !step._completedOverride();\n        });\n    }\n\n    return false;\n  }\n\n  private _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Checks whether the stepper contains the focused element. */\n  private _containsFocus(): boolean {\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = _getFocusedElementPierceShadowDom();\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n\n  /** Checks whether the passed-in index is a valid step index. */\n  private _isValidIndex(index: number): boolean {\n    return index > -1 && (!this.steps || index < this.steps.length);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, Input, inject} from '@angular/core';\n\nimport {CdkStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperNext]',\n  host: {\n    '[type]': 'type',\n    '(click)': '_stepper.next()',\n  },\n})\nexport class CdkStepperNext {\n  _stepper = inject(CdkStepper);\n\n  /** Type of the next button. Defaults to \"submit\" if not specified. */\n  @Input() type: string = 'submit';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[cdkStepperPrevious]',\n  host: {\n    '[type]': 'type',\n    '(click)': '_stepper.previous()',\n  },\n})\nexport class CdkStepperPrevious {\n  _stepper = inject(CdkStepper);\n\n  /** Type of the previous button. Defaults to \"button\" if not specified. */\n  @Input() type: string = 'button';\n\n  constructor(...args: unknown[]);\n  constructor() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {CdkStepHeader} from './step-header';\nimport {BidiModule} from '../bidi';\n\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkStep,\n    CdkStepper,\n    CdkStepHeader,\n    CdkStepLabel,\n    CdkStepperNext,\n    CdkStepperPrevious,\n  ],\n  exports: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n})\nexport class CdkStepperModule {}\n"],"names":["_elementRef","nativeElement","focus","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","CdkStepHeader","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective","isStandalone","selector","host","attributes","StepperSelectionEvent","selectedIndex","previouslySelectedIndex","selectedStep","STEP_STATE","ERROR","STEPPER_GLOBAL_OPTIONS","InjectionToken","CdkStep","inject","CdkStepper","stepLabel","interacted","_interacted","signal","ngDevMode","debugName","EventEmitter","label","errorMessage","ariaLabelledby","state","_state","editable","value","_editable","completed","override","_completedOverride","stepControl","valid","isSelected","computed","_stepper","index","_showError","hasError","selected","_displayDefaultIndicatorType","NUMBER","EDIT","DONE","linear","_customError","_getDefaultError","customError","invalid","constructor","stepperOptions","optional","_stepperOptions","displayDefaultIndicatorType","select","reset","set","_childForms","forEach","form","resetForm","ngOnChanges","_stateChanged","_markAsInteracted","showError","inputs","ariaLabel","booleanAttribute","outputs","interactedStream","queries","propertyName","first","predicate","CdkStepLabel","descendants","decorators","Component","exportAs","template","ctorParameters","propDecorators","ContentChild","ContentChildren","ControlContainer","ViewChild","TemplateRef","static","Input","args","transform","_keyManager","_selectedIndex","_steps","_anyControlsInvalidOrPending","toArray","_updateSelectedItemIndex","steps","undefined","step","selectionChange","_IdGenerator","getId","orientation","withVerticalOrientation","ngAfterContentInit","changes","pipe","startWith","takeUntil","_destroyed","subscribe","filter","notifyOnChanges","ngAfterViewInit","_stepHeader","_sortedHeaders","headers","sort","a","b","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","FocusKeyManager","withWrap","withHomeAndEnd","updateActiveItem","_dir","change","observableOf","_layoutDirection","direction","withHorizontalOrientation","Math","max","_isValidIndex","visitedSteps","slice","ngOnDestroy","destroy","next","complete","min","length","previous","_getStepLabelId","i","CdkStepperPrevious","CdkStepperModule","NgModule","ɵɵngDeclareNgModule","imports","BidiModule"],"mappings":";;;;;;;;;;;;;;;;;;;AA0BE,IAAA,IAAA,CAAAA,WAAA,CAAAC,aAAA,CAAAC,KAAA,EAAA;;AAZE,EAAA,OAAAC,IAAA,GAAAC,EAAA,CAAAC,kBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,QAAA,EAAAJ,EAAA;AAAAK,IAAAA,IAAA,EAAAC,aAAA;IAAAC,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAR,EAAA,CAAAS,eAAA,CAAAC;AAAA,GAAA,CAAA;AACD,EAAA,OAAAC,IAAA,GAAAX,EAAA,CAAAY,oBAAA,CAAA;IAAAV,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAE,IAAAA,IAAA,EAAAC,aAAA;IAAAO,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,iBAAA;IAAAC,IAAA,EAAA;MAAAC,UAAA,EAAA;AAAA,QAAA,MAAA,EAAA;AAAA;AAAA,KAAA;AAAAZ,IAAAA,QAAA,EAAAJ;AAAA,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2H4D,MAAAiB,qBAAA,CAAA;EAE3DC,aAAA;EAGAC,uBAAgB;EAiBlBC,YAAA;;;AAOA,MAAAC,UAAA,GAAA;;QAIU,MAAA;;EAGFC,KAAA,EAAA;;AASR,MAAAC,sBAAA,GAAA,IAAAC,cAAA,CAAA,wBAAA;AACQ,MAAAC,OAAY,CAAA;iBAE8B;UACJ,GAAAC,MAAA,CAAAC,UAAA,CAAA;8BAEH;EAIzCC,SAAA;aAiCE;;;AAME,EAAA,IAAAC,UAAA,GAAA;IAa2B,OAAA,IAAA,CAAAC,WAAA,EAAA;AAG/B;EACkC,IAAAD;;AAGlC;EAEMC,WAAA,GAAAC,MAAA,CAAA,KAAA,EAAA,IAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;;AAGC,EAAA,gBAAA,GAAA,IAAAC,YAAe,EAAA;EAKxBC,KAAA;EAEEC,YAAA;;EAcEC,cAAuB;EAIN,IAAAC,QAAW;AAG9B,IAAA,OAAA,IAAA,CAAAC,MAAA,EAAA;;;;AAIkB;2BAElB,MAAAP,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;cAIqFO,GAAA;;AAErF;MACFA,QAAAA,CAAAC,KAAA,EAAA;;AAGE;EAEEC,SAAA,GAAAX,MAAA,CAAA,IAAA,EAAA,IAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAIJ,EAAA,QAAA,GAAuD,KAAA;eAE+BU,GAAA;UACJC,QAAA,GAAA,IAAA,CAAAC,kBAAA,EAAA;IAChF,MAAAhB,UAAA,QAAAC,WAAA,EAAA;IACF,IAAAc,QAAA,IAAA,IAAA,EAAA;;AA/L8F;2CAEA,IAAAE,IAAAA,CAAAA,WAAA,CAAAC,KAAA,CAAA;;;;;oBAlB9F,GAAAhB,MAAA,WAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;yBAGaD,SAAA,GAAA,CAAA;IAAAC,SAAmB,EAAA;GAAK,CAAA,GAAA,EAAA,CAAA,CAAA;EAEtCe,UAAA,GAAAC,QAAA,CAAAC,MAAAA,IAAAA,CAAAA,QAAA,CAAAhC,aAAA,KAAA,IAAA,CAAAiC,KAAA,EAAA,EAAA,IAAAnB,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;qBAOe,IAAA,CAAAe,UAAY,EAAA;;;qCAKiE;QACG,IAAA,CAAAI,UAAA,EAAA,IAAA,IAAA,CAAAC,QAAA,KAAAC,QAAA,EAAA;;AAG5F;AACE,IAAA,IAAA,IAAA,CAAAC,4BAAiB,EAAA;AAClB,MAAA,IAAA,CAAAZ,SAAA,IAAAW,QAAA,EAAA;yBAK4C,CAAAE,MAAA;;qBAG3B,GAAAnC,UAAA,CAAAoC,IAAA,GAAApC,UAAA,CAAAqC,IAAA;;;yBAgBN,CAAAA,IAAA;;2BAGR;;;;;aAGa,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;wBAMqB,CAAA,MAAA;sCAAlC,EAAA;;0BAIGV,UAAA,IAAA,CAAAE,IAAAA,CAAAA,QAAA,CAAAS,MAAA;;;;;qBAmBqC,GAAA,IAAA,CAAAC,YAAA,EAAA;0BAAxC,IAAA,GAAAC,IAAAA,CAAAA,gBAAA,KAAAC,WAAA;;;;;;;;;IAoIR,sBAAuB,IAAA,CAAA,CAAA,IAAA,CAAAhB,WAAA,EAAAiB,OAAA;;AAEbC,EAAAA,WAAAA,GAAA;AACE,IAAA,MAAAC,cAAc,GAAgCvC,MAAA,CAAAH,sBAAA,EAAA;MAAA2C,QAAA,EAAA;AAAA,KAAA,CAAA;;AAGrC,IAAA,IAAA,CAAAX,4BAAgC,GAAA,IAAA,CAAAY,eAAA,CAAAC,2BAAA,KAAA,KAAA;AAG3C;AAGuCC,EAAAA,MAAAA,GAAA;IAMM,IAAAnB,CAAAA,QAAA,CAAAI,QAAA,GAAA,IAAA;;AAKrDgB,EAAAA,KAAAA,GAAuE;;AAIvE,IAAA,IAAA,IAAA,CAAAzB,kBAAA,EACiB,IAAA,IAAA,EAAA;MACf,IAAAA,CAAAA,kBAAA,CAAA0B,GAAA,CAAA,KAAA,CAAA;AACF;;;AAII;IACE,IAAA,IAAA,CAAAzB,WAAW,EAAA;MAUT,IAAA,CAAA0B,WAAA,EAAKC,OAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,SAAA,IAAA,CAAA;uBACPL,KAAA,EAAA;;;aAGFM,GAAA;QAGI,CAAA1B,QAAA,CAAA2B,aAAiB;;mBAGzBC,GAAA;;UAII,CAAAhD,WAAA,CAAAyC,GAAA,CAAA,IAAA,CAAA;;AAEJ;;EAMmBnB,UAAA,GAAA;AAKe,IAAA,OAAA,IAAA,CAAAe,eAAA,CAAAY,SAAA,SAAAnB,YAAA,EAAA,IAAA,IAAA;;;;;;;;;;;gBAKO,QAAA;IAAAzD,OAAA,EAAA,eAAA;AAAAE,IAAAA,IAAA,EAAAoB,OAAA;IAAAZ,YAAA,EAAA,IAAA;IAAAC,QAAA,EAAA,UAAA;IAAAkE,MAAA,EAAA;MAAAlC,WAAA,EAAA,aAAA;MAAAX,KAAA,EAAA,OAAA;MAAAC,YAAA,EAAA,cAAA;MAAA6C,SAAA,EAAA,CAAA,YAAA,EAAA,WAAA,CAAA;MAAA5C,cAAA,EAAA,CAAA,iBAAA,EAAA,gBAAA,CAAA;MAAAC,KAAA,EAAA,OAAA;AAAAE,MAAAA,QAAA,2BAAA0C,gBAAA,CAAA;AAAAhB,MAAAA,QAAA,2BAAAgB,gBAAA,CAAA;AAAAvC,MAAAA,SAAA,6BAAAuC,gBAAA,CAAA;AAAA7B,MAAAA,QAAA,2BAAA6B,gBAAA;AAAA,KAAA;IAAAC,OAAA,EAAA;MAAAC,gBAAA,EAAA;AAAA,KAAA;IAAAC,OAAA,EAAA,CAAA;MAAAC,YAAA,EAAA,WAAA;MAAAC,KAAA,EAAA,IAAA;AAAAC,MAAAA,SAAA,EAAAC,YAAA;MAAAC,WAAA,EAAA;AAAA,KAAA,EAAA;MAAAJ,YAAA,EAAA,aAAA;AAAAE,MAAAA,SAAA;;;;;;;;;;;;;;;;;;;;;;;QA1KrC/D,OAAA;EAAAkE,UAAA,EAAA,CAAA;AAQA,IAAA,IAAA,EAAAC,SAAA;;MAEJ9E,QAAA,EAAA,UAAA;MAEA+E,QAAA,EAAA,SAAA;AACSC,MAAAA,QAAA,EAAc,0CAAA;;;;;AAtBrB,EAAA,cAAA,EAAAC,MAAA,EAAA;EAAAC,cAAA,EAAA;IAAApE,SAAA,EAAA,CAAA;AAEA,MAAA,IAAA,EAAAqE,YAAI;yBACF;;iBACF,CAAA;AAEA,MAAA,IAAA,EAAAC,eAAS;AACP,MAAA,IAAA,EAAA,CAqB6BC,gBAAA;;AAX7B,OAAA;;;AAEJ,MAAA,IAAA,EAAAC,SAAA;AAEA,MAAA,IAAA,EAAA,CAAAC,WAAA,EAAA;QAAAC,MAAA,EAAA;AAAA,OAAA;;AACS,IAAA,WAAA,EAAA,CAAA;UACP,EAAAC;;oBACA,EAAiB,CAAA;;AAQiBC,MAAAA,IAAA,EAAA,CAAA,YAAA;;AAAlC,IAAA,KAAA,EAAA,CAAA;;;IAGApE,YAAiB,EAAA,CAAA;AAAjBmE,MAAAA,IAAAA,EAAAA;;IAkBAtB,SAAA,EAAA,CAAA;;aADI,YAAA;;IAKD5C,cAAA,EAAA,CAAA;iBAAA;AAIDmE,MAAAA,IAAA,EAAuB,CAAA,iBAAA;;AAAvB,IAAA,KAAA,EAAA,CAAA;AAIiBnG,MAAAA,IAAA,EAAAkG;;YAAjB,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,KAAA;MAOgBC,IAAA,EAAA,CAAA;AAAAC,QAAAA,SAAc,EAAAvB;AAAA,OAAA;;YAA9B,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,KAAA;AAKOsB,MAAAA,IAAA,EAAA,CAAA;AAAAC,QAAAA,SAAA,EAAAvB;AAAA,OAAA;;eAFX,CAAA;AAaA7E,MAAAA,IAAA,EAAAkG,KAAA;;iBADE,EAAArB;AAAA,OAAA;;YAAA,EAAA,CAAA;AAvL4F7E,MAAAA,IAAA,EAAAkG,KAAA;;;;;;;;;;;+CAGN,CAAA;;;EAgSnFG,WAAA;;;;;EAeA/C,MAAA,GAAA,KAAA;AAIK,EAAA,IAAAzC,aAAA,GAAA;IAIoF,OAAA,IAAA,CAAAyF,cAAA,EAAA;;EAGpF,IAAAzF,aAAuBA,CAAAiC,KAAA,EAAA;AAG3B,IAAA,IAAA,IAAA,CAAAyD,MAAA,EAAA;oCAIuF,KAAA5E,OAAAA,SAAA,oBAAAA,SAAA,CAAA,EAAA;;AAGxF;MACA,IAAAd,IAAAA,CAAAA,aAAA,KAAAiC,KAAA,EAAA;QACA,IAAAG,CAAAA,QAAA,EAAAwB,iBAAA,EAAA;AAEuF,QAAA,IAAA,KAAA,CAAA+B,4BAAA,CAAA1D,KAAA,+CACE,CAAA2D,OAAA,EAAA3D,CAAAA,KAAA,EAAAX,QAAA,CAAA,EAAA;UAChE,IAAA,CAAAuE,wBAAA,CAAA5D,KAAA,CAAA;AAC5B;AAEA;;AAOA,MAAA,IAAA,CAAAwD,cACM,CAAApC,GAAA,CAAApB,KAAA,CAAA;;;gBAKoF,GAAApB,MAAA,QAAAC,SAAA,GAAA,CAAA;IAAAC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;;WAEE,IAAA+E,CAAAA,KAAA,QAAAA,KAAA,CAAAF,OAAA,EAAA5F,CAAAA,IAAAA,CAAAA,aAAA,IAAA+F,SAAA;;AAE1F3D,EAAAA,IAAAA,QAAAA,CAAA4D,IAAA,EAAA;;AAGyD;AAGzDC,EAAAA,eAEA,OAAAjF,YAAA,EAAA;;AAIJ,EAAA,QAAA,GAAAR,MAAA,CAAA0F,YAAA,CAAAC,CAAAA,KAAA,CAAA,cAAA,CAAA;AAIE,EAAA,IAAAC,WAAA,GAAA;AACK,IAAA,OAAA,iBAAwB;AAE7B;EACF,IAAAA,WAAAA,CAAA7E,KAAA,EAAA;IAIM,iBAAiB,GAAAA,KAAA;;AAKrB,MAAA,IAAA,CAAAiE,WAAkB,CAAAa,uBAAA,CAAA9E,KAAA,KAAA,UAAA,CAAA;AACpB;;cAGK,GAAA,YAAA;aACHuB,GAAA;AACAwD,EAAAA,kBAAAA,GAAW;IAEb,IAAA,CAAAZ,MAAA,CAAAa,OAAA,CAEuDC,IAAA,CAAAC,SAAA,CAAA,IAAA,CAAAf,MAAA,CAAA,EAAAgB,SAAA,CAAA,IAAA,CAAAC,UAAA,CAAA,CAAA,CACvDC,SAAA,CAAAd,KAAA,IAAA;AACE,MAAA,IAAA,CAAAA,KAAA,CAAA1C,KAAA,CAAA0C,KAAA,CAAAe,MAAA,CAAAb,IAAA,IAAAA,IAAA,CAAAhE,QAAA,KAAA,IAAA,CAAA,CAAA;AACF,MAAA,IAAA,CAAA8D,KAAA,CAAAvC,OAAA,CAAA,CAAAyC,IAAA,EAAA/D,KAAA,KAAA+D,IAAA,CAAA/D,KAAA,CAAAoB,GAAA,CAAApB,KAAA,CAAA,CAAA;MAIE,IAAA6D,CAAAA,KAAU,CAAAgB,eAAA,EAAA;;;iBAKNC,GAAA;AAQG,IAAA,IAAA,CAAAC,WAAI,CAAAT,OAAA,CACTC,IAAA,CAAAC,SAAA,CAAA,IAAA,CAAAO,WAAA,CAAA,EAAAN,SAAA,CAAAC,IAAAA,CAAAA,UAAA;AAEF,MAAA,IAAA,CAAAM,cAAA,CAAA7D,KAAA,CAAA8D,OAAA,CAAAtB,OAAA,EAAA,CAAAuB,IAAA,CAAA,CAAAC,CAAA,EAAAC,CAAA,KAAA;AACF,QAAA,MAAAC,gBAAA,GAAAF,CAAA,CAAA1I,WAAA,CAAAC,aAAA,CAAA4I,uBAAA,CAAAF,CAAA,CAAA3I,WAAA,CAAAC,aAAA,CAAA;AAKA,QAAA,OAAA2I,gBAAA,GAAAE,IAAA,CAAAC,2BAAA,GAAA,CAAA,CAAA,GAAA,CAAA;AAEQ,OAAA,CAAA,CAAA;MACN,IAAM,CAAAR,cAAa,CAAIH;;oBAWiE,GAAAY,IAAAA,eAAA,CAAA,IAAA,CAAAT,cAAA,CAAA,CACLU,QACnB,EAAA,CAChEC,cAAQ,EAAA;AAOR,IAAA,IAAA,CAAApC,WAAwB,CAAAqC,gBAAA,CAAA,IAAM,CAAS7H,aAAA,CAAA;iBACrB,IAAA,CAAA8H,IAAA,CAAAC,MAAA,GAAAC,EAAA,EAAA,EACpBxB,IAAA,CAAAC,SAAA,CAAA,IAAA,CAAAwB,gBAAA,EAAA,CAAA,EAAAvB,SAAA,CAAA,IAAA,CAAAC,UAAA,CAAA,CAAA,CAEAC,SAAA,CAAAsB,SAAA,IAA+B,IAAA,CAAA1C,WAAA,EAAA2C,yBAAA,CAAAD,SAAA,CAAA,CAAA;AAE7B,IAAA,IAAA,CAAA1C,WAAA,CAAAqC,gBAAA,CAAA,IAAA,CAAA7H,aAAA,CAAA;AAGA,IAAA,IAAA,CAAA8F,KAAA,CAAAS,OAAA,CAAAK,SAC0B,CAAA,MAAA;AACxB,MAAA,IAAA,MAAAxE,QAAY,EAAA;QAGZ,IAAI,CAAcqD,cAAA,CAAApC,GAA0B,CAAA+E,IAAA,CAAAC,GAAA,CAAA,IAAA,CAAArI,aAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;;aAQ1C,CAAAsI,aAAW,CAAA,IAAI,CAAAtI,aAAA,CAAA,EAAA;yBACV,CAAAqD,GAAU,CAAA,CAAA,CAAA;;;MAMX,MAAAkF,YAAA,QAAAzC,KAAA,CAAAF,OAAA,EAAA4C,CAAAA,KAAA,SAAA/C,cAAA,EAAA,CAAA;MACA,KAAA,MAAAO,IAAA,IAAOuC;QACTvC,IAAA,CAAApC,iBAAmB,EAAA;AACrB;AAGJ;;AAGsB6E,EAAAA,WAAAA,GAAA;QACtB,CAAAjD,WAAA,EAAAkD;QAG6D,CAAA5C,KAAA,CAAA4C,OAAA,EAAA;AACzC,IAAA,IAAA,CAAA,cAAA,CAAAA,OAAA,EAAA;QACpB,CAAA/B,UAAA,CAAAgC,IAAA,EAAA;IACA,IAAA,CAAAhC,UAAA,CAAAiC,QAAA,EAAA;;MAKMD,GAAA;IACN,IAAA,CAAA3I,aAAe,GAAEoI,IAAA,CAAAS,GAAA,CAAA,IAAA,CAAApD,cAAA,EAAA,GAAA,CAAA,EAAA,IAAA,CAAAK,KAAA,CAAAgD,MAAA,GAAA,CAAA,CAAA;;AA1SRC,EAAAA,QAAAA,GAAA;;;AAHX3F,EAAAA,KAAAA,GAAA;AACA,IAAA,IAAA,CAAAyC,wBAAA,CAAA,CAAA,CAAA;;;;AAoBiBmD,EAAAA,eAAAA,CAAAC,CAAA,EAAA;;;;;;;;;8BAuDX,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeN,MAAA,IAAA,EAAA,CAAA1I,OAAA,EAAA;QAAAiE,WAAA,EAAA;AAAA,OAAA;;AAAA,IAAA,WAAA,EAAA,CAAA;2BAEkB;0BACZ,EAAA;QAAAA,WAAe,EAAA;AAAA,OAAA;;AAChB,IAAA,MAAA,EAAA,CAAA;;;;AAc6B,OAAA;;AAAA,IAAA,aAAA,EAAA,CAAA;AAU4DrF,MAAAA,IAAA,EAAAkG,KAAA;;;AAAA,OAAA;;AAAA,IAAA,QAAA,EAAA,CAAA;AAOxFlG,MAAAA,IAAA,EAAAkG;;AAAF,IAAA,eAAA,EAAA,CAAA;;;;;;AAIoF,IAAA,WAAA,EAAA,CAAA;AAoCpFlG,MAAAA,IAAA,EAAAkG;;;;;;;ACvcJlG,EAAAA,IAAA,GAAA,QAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARD;;;;;;;;AAWmEmG,IAAAA,IAAA,EAAA,CAAA;MAWQ1F,QAAA,EAAA,wBAAA;;;;;;;;;;UA5BjE,EAAAyF;;;;AAGP,MAAA,kBAAA,CAAA;AACA,EAAA,QAAA,GAAA,MAAA,CAAA5E,UAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;AACA,EAAA,CAAA,wBAAA,CAAA;EAAAzB,UAAA,EAAA,QAAA;EAAAC,OAAA,EAAA,eAAA;AAAAC,EAAAA,QAAA,EAAAJ,EAAA;AAAAK,EAAAA,IAAA,EAAA+J,kBAAA;EAAAzE,UAAA,EAAA,CAAA;AAEHtF,IAAAA,IAAA,EAAAK,SAAA;;;;;;;;;;;;;;;;;;ACVY,EAAA,OAAAX,IAAA,GAAAC,EAAA,CAAAC,kBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,QAAA,EAAAJ,EAAA;AAAAK,IAAAA,IAAA,EAAAgK,gBAAA;IAAA9J,IAAA,EAAA,EAAA;AAAAC,IAAAA,MAAA,EAAAR,EAAA,CAAAS,eAAA,CAAA6J;AAAA,GAAA,CAAA;mBATFC,mBAAA,CAAA;IAAArK,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,QAAA,EAAAJ,EAAA;AAAAK,IAAAA,IAAA,EAAAgK,gBAAA;IAAAG,OAAA,EAAA,CAAAC,UAAA,qBAEM,eACD;AACE,IAAA,OAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,aAAA,EAAA,YAAA,EAAA,cAAA,EAAA,kBAAA;AAAA,GAAA,CAAA;;;;;0BAAA;AAAAD,IAAAA,OAAA;;;;;;;;;AAPRnK,IAAAA,IAAA,EAAAiK,QAAA;IACR9D,IAAA,EAAA,CAAA;8FAWW4D,kBAAA;;;;;;;;"}
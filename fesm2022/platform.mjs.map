{"version":3,"file":"platform.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/platform/platform-module.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/platform/features/input-types.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\n\n@NgModule({})\nexport class PlatformModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(\n    candidateInputTypes.filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }),\n  );\n\n  return supportedInputTypes;\n}\n"],"names":["minVersion","version","ngImport","i0","type","PlatformModule","decorators","getSupportedInputTypes","supportedInputTypes","document","Set","candidateInputTypes","filter","value","featureTestInput","setAttribute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAUS,CAAA;AAAAA,EAAAA,UAAA,EAAA,QAAA;EAAAC,OAAA,EAAA,eAAA;AAAAC,EAAAA,QAAA,EAAAC,EAAA;AAAAC,EAAAA,IAAA,EAAAC,cAAA;EAAAC,UAAA,EAAA,CAAA;;;;;;;6BCQP,6BAGgB,qDAKT,4BAGA,qBAEA,SACC,mBAEH,UACC,uBAIP,EAAA,KAAA,EAEyD;SAGpDC,sBAAA,GAAA;yBAEJ,EAAA;WAE2FC,mBAAA;;0BAM3F,QAAA,IAAA,CAAAC,QAAA,EAAA;AAEID,IAAAA,sBAA2B,IAAAE,GAAA,CAAAC,mBAAA,CAAA;AAC/B,IAAA,OAAmBH,mBAAO;AAEtB;;AAKJA,EAAAA,mBAAA,OAAAE,GAAA,CAAAC,mBAAA,CAAAC,MAAA,CAAAC,KAAA,IAAA;IACFC,gBAAA,CAAAC,YAAA,CAAA,MAAA,EAAAF,KAAA,CAAA;;;;;;;;"}
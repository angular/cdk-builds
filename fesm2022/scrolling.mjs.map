{"version":3,"file":"scrolling.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/fixed-size-virtual-scroll.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/scroll-dispatcher.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/scrollable.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/viewport-ruler.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/virtual-scrollable.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/virtual-scroll-viewport.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/virtual-for-of.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/virtual-scrollable-element.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/virtual-scrollable-window.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/scrolling/scrolling-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '../coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private readonly _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() {\n    /* no-op */\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() {\n    /* no-op */\n  }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n    let scrollOffset = this._viewport.measureScrollOffset();\n    // Prevent NaN as result when dividing by zero.\n    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;\n\n    // If user scrolls to the bottom of the list and data changes to a smaller list\n    if (newRange.end > dataLength) {\n      // We have to recalculate the first visible index based on new data length and viewport size.\n      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n      const newVisibleIndex = Math.max(\n        0,\n        Math.min(firstVisibleIndex, dataLength - maxVisibleItems),\n      );\n\n      // If first visible index changed we must update scroll offset to handle start/end buffers\n      // Current range must also be adjusted to cover the new position (bottom of new list).\n      if (firstVisibleIndex != newVisibleIndex) {\n        firstVisibleIndex = newVisibleIndex;\n        scrollOffset = newVisibleIndex * this._itemSize;\n        newRange.start = Math.floor(firstVisibleIndex);\n      }\n\n      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n    }\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(\n        dataLength,\n        Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize),\n      );\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(\n            0,\n            Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize),\n          );\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(Math.round(this._itemSize * newRange.start));\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [\n    {\n      provide: VIRTUAL_SCROLL_STRATEGY,\n      useFactory: _fixedSizeVirtualScrollStrategyFactory,\n      deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n    },\n  ],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number {\n    return this._itemSize;\n  }\n  set itemSize(value: NumberInput) {\n    this._itemSize = coerceNumberProperty(value);\n  }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number {\n    return this._minBufferPx;\n  }\n  set minBufferPx(value: NumberInput) {\n    this._minBufferPx = coerceNumberProperty(value);\n  }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number {\n    return this._maxBufferPx;\n  }\n  set maxBufferPx(value: NumberInput) {\n    this._maxBufferPx = coerceNumberProperty(value);\n  }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy = new FixedSizeVirtualScrollStrategy(\n    this.itemSize,\n    this.minBufferPx,\n    this.maxBufferPx,\n  );\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {coerceElement} from '../coercion';\nimport {Platform} from '../platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, RendererFactory2, inject} from '@angular/core';\nimport {of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport type {CdkScrollable} from './scrollable';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  private _ngZone = inject(NgZone);\n  private _platform = inject(Platform);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n  private _cleanupGlobalListener: (() => void) | undefined;\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private readonly _scrolled = new Subject<CdkScrollable | void>();\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(\n        scrollable,\n        scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)),\n      );\n    }\n  }\n\n  /**\n   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable | void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable | void>) => {\n      if (!this._cleanupGlobalListener) {\n        this._cleanupGlobalListener = this._ngZone.runOutsideAngular(() =>\n          this._renderer.listen('document', 'scroll', () => this._scrolled.next()),\n        );\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription =\n        auditTimeInMs > 0\n          ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer)\n          : this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._cleanupGlobalListener?.();\n          this._cleanupGlobalListener = undefined;\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._cleanupGlobalListener?.();\n    this._cleanupGlobalListener = undefined;\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(\n    elementOrElementRef: ElementRef | HTMLElement,\n    auditTimeInMs?: number,\n  ): Observable<CdkScrollable | void> {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(\n      filter(target => !target || ancestors.indexOf(target) > -1),\n    );\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(\n    scrollable: CdkScrollable,\n    elementOrElementRef: ElementRef | HTMLElement,\n  ): boolean {\n    let element: HTMLElement | null = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) {\n        return true;\n      }\n    } while ((element = element!.parentElement));\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directionality} from '../bidi';\nimport {getRtlScrollAxisType, RtlScrollAxisType, supportsScrollBehavior} from '../platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Renderer2, inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]',\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  protected elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  protected scrollDispatcher = inject(ScrollDispatcher);\n  protected ngZone = inject(NgZone);\n  protected dir? = inject(Directionality, {optional: true});\n  protected _scrollElement: EventTarget = this.elementRef.nativeElement;\n  protected readonly _destroyed = new Subject<void>();\n  private _renderer = inject(Renderer2);\n  private _cleanupScroll: (() => void) | undefined;\n  private _elementScrolled = new Subject<Event>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    this._cleanupScroll = this.ngZone.runOutsideAngular(() =>\n      this._renderer.listen(this._scrollElement, 'scroll', event =>\n        this._elementScrolled.next(event),\n      ),\n    );\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this._cleanupScroll?.();\n    this._elementScrolled.complete();\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n        el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n          el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n          el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../platform';\nimport {Injectable, NgZone, OnDestroy, RendererFactory2, inject, DOCUMENT} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  private _platform = inject(Platform);\n  private _listeners: (() => void)[] | undefined;\n\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number} | null;\n\n  /** Stream of viewport change events. */\n  private readonly _change = new Subject<Event>();\n\n  /** Used to reference correct document/window */\n  protected _document = inject(DOCUMENT);\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n    const renderer = inject(RendererFactory2).createRenderer(null, null);\n\n    ngZone.runOutsideAngular(() => {\n      if (this._platform.isBrowser) {\n        const changeListener = (event: Event) => this._change.next(event);\n        this._listeners = [\n          renderer.listen('window', 'resize', changeListener),\n          renderer.listen('window', 'orientationchange', changeListener),\n        ];\n      }\n\n      // Clear the cached position so that the viewport is re-measured next time it is required.\n      // We don't need to keep track of the subscription, because it is completed on destroy.\n      this.change().subscribe(() => (this._viewportSize = null));\n    });\n  }\n\n  ngOnDestroy() {\n    this._listeners?.forEach(cleanup => cleanup());\n    this._change.complete();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number; height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize!.width, height: this._viewportSize!.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a DOMRect for the viewport's bounds. */\n  getViewportRect() {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._document;\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top =\n      -documentRect.top ||\n      document.body.scrollTop ||\n      window.scrollY ||\n      documentElement.scrollTop ||\n      0;\n\n    const left =\n      -documentRect.left ||\n      document.body.scrollLeft ||\n      window.scrollX ||\n      documentElement.scrollLeft ||\n      0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * This stream emits outside of the Angular zone.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser\n      ? {width: window.innerWidth, height: window.innerHeight}\n      : {width: 0, height: 0};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\nimport {CdkScrollable} from './scrollable';\n\nexport const VIRTUAL_SCROLLABLE = new InjectionToken<CdkVirtualScrollable>('VIRTUAL_SCROLLABLE');\n\n/**\n * Extending the `CdkScrollable` to be used as scrolling container for virtual scrolling.\n */\n@Directive()\nexport abstract class CdkVirtualScrollable extends CdkScrollable {\n  constructor(...args: unknown[]);\n  constructor() {\n    super();\n  }\n\n  /**\n   * Measure the viewport size for the provided orientation.\n   *\n   * @param orientation The orientation to measure the size from.\n   */\n  measureViewportSize(orientation: 'horizontal' | 'vertical') {\n    const viewportEl = this.elementRef.nativeElement;\n    return orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /**\n   * Measure the bounding DOMRect size including the scroll offset.\n   *\n   * @param from The edge to measure from.\n   */\n  abstract measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ListRange} from '../collections';\nimport {Platform} from '../platform';\nimport {\n  afterNextRender,\n  ApplicationRef,\n  booleanAttribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DestroyRef,\n  effect,\n  ElementRef,\n  inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  signal,\n  untracked,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Observer,\n  Subject,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {ViewportRuler} from './viewport-ruler';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n  typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrl: 'virtual-scroll-viewport.css',\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: CdkScrollable,\n      useFactory: () =>\n        inject(VIRTUAL_SCROLLABLE, {optional: true}) || inject(CdkVirtualScrollViewport),\n    },\n  ],\n})\nexport class CdkVirtualScrollViewport extends CdkVirtualScrollable implements OnInit, OnDestroy {\n  override elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  private _scrollStrategy = inject<VirtualScrollStrategy>(VIRTUAL_SCROLL_STRATEGY, {\n    optional: true,\n  })!;\n  scrollable = inject<CdkVirtualScrollable>(VIRTUAL_SCROLLABLE, {optional: true})!;\n\n  private _platform = inject(Platform);\n\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private readonly _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private readonly _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Whether rendered items should persist in the DOM after scrolling out of view. By default, items\n   * will be removed.\n   */\n  @Input({transform: booleanAttribute}) appendOnly: boolean = false;\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output()\n  readonly scrolledIndexChange: Observable<number> = new Observable((observer: Observer<number>) =>\n    this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n      Promise.resolve().then(() => this.ngZone.run(() => observer.next(index))),\n    ),\n  );\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  readonly renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject;\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = signal('');\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = signal('');\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualScrollRepeater. */\n  private _forOf: CdkVirtualScrollRepeater<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  private _changeDetectionNeeded = signal(false);\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  private _injector = inject(Injector);\n\n  private _isDestroyed = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const viewportRuler = inject(ViewportRuler);\n\n    if (!this._scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    this._viewportChanges = viewportRuler.change().subscribe(() => {\n      this.checkViewportSize();\n    });\n\n    if (!this.scrollable) {\n      // No scrollable is provided, so the virtual-scroll-viewport needs to become a scrollable\n      this.elementRef.nativeElement.classList.add('cdk-virtual-scrollable');\n      this.scrollable = this;\n    }\n\n    const ref = effect(\n      () => {\n        if (this._changeDetectionNeeded()) {\n          this._doChangeDetection();\n        }\n      },\n      // Using ApplicationRef injector is important here because we want this to be a root\n      // effect that runs before change detection of any application views (since we're depending on markForCheck marking parents dirty)\n      {injector: inject(ApplicationRef).injector},\n    );\n    inject(DestroyRef).onDestroy(() => void ref.destroy());\n  }\n\n  override ngOnInit() {\n    // Scrolling depends on the element dimensions which we can't get during SSR.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (this.scrollable === this) {\n      super.ngOnInit();\n    }\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() =>\n      Promise.resolve().then(() => {\n        this._measureViewportSize();\n        this._scrollStrategy.attach(this);\n\n        this.scrollable\n          .elementScrolled()\n          .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null),\n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER),\n            // Usually `elementScrolled` is completed when the scrollable is destroyed, but\n            // that may not be the case if a `CdkVirtualScrollableElement` is used so we have\n            // to unsubscribe here just in case.\n            takeUntil(this._destroyed),\n          )\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n        this._markChangeDetectionNeeded();\n      }),\n    );\n  }\n\n  override ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    this._isDestroyed = true;\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n  attach(forOf: CdkVirtualScrollRepeater<any>) {\n    if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  measureBoundingClientRectWithScrollOffset(from: 'left' | 'top' | 'right' | 'bottom'): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      if (this.appendOnly) {\n        range = {start: 0, end: Math.max(this._renderedRange.end, range.end)};\n      }\n      this._renderedRangeSubject.next((this._renderedRange = range));\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // In appendOnly, we always start from the top\n    offset = this.appendOnly && to === 'to-start' ? 0 : offset;\n\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollable.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the scrollable (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  override measureScrollOffset(\n    from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end',\n  ): number {\n    // This is to break the call cycle\n    let measureScrollOffset: InstanceType<typeof CdkVirtualScrollable>['measureScrollOffset'];\n    if (this.scrollable == this) {\n      measureScrollOffset = (_from: NonNullable<typeof from>) => super.measureScrollOffset(_from);\n    } else {\n      measureScrollOffset = (_from: NonNullable<typeof from>) =>\n        this.scrollable.measureScrollOffset(_from);\n    }\n\n    return Math.max(\n      0,\n      measureScrollOffset(from ?? (this.orientation === 'horizontal' ? 'start' : 'top')) -\n        this.measureViewportOffset(),\n    );\n  }\n\n  /**\n   * Measures the offset of the viewport from the scrolling container\n   * @param from The edge to measure from.\n   */\n  measureViewportOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end') {\n    let fromRect: 'left' | 'top' | 'right' | 'bottom';\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const isRtl = this.dir?.value == 'rtl';\n    if (from == 'start') {\n      fromRect = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      fromRect = isRtl ? LEFT : RIGHT;\n    } else if (from) {\n      fromRect = from;\n    } else {\n      fromRect = this.orientation === 'horizontal' ? 'left' : 'top';\n    }\n\n    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);\n    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];\n\n    return viewportClientRect - scrollerClientRect;\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    if (untracked(this._changeDetectionNeeded)) {\n      return;\n    }\n    this.ngZone.runOutsideAngular(() => {\n      Promise.resolve().then(() => {\n        this.ngZone.run(() => {\n          this._changeDetectionNeeded.set(true);\n        });\n      });\n    });\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    if (this._isDestroyed) {\n      return;\n    }\n\n    this.ngZone.run(() => {\n      // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n      this._changeDetectorRef.markForCheck();\n\n      // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n\n      afterNextRender(\n        () => {\n          this._changeDetectionNeeded.set(false);\n          const runAfterChangeDetection = this._runAfterChangeDetection;\n          this._runAfterChangeDetection = [];\n          for (const fn of runAfterChangeDetection) {\n            fn();\n          }\n        },\n        {injector: this._injector},\n      );\n    });\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight.set(\n      this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`,\n    );\n    this._totalContentWidth.set(\n      this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '',\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n  _RecycleViewRepeaterStrategy,\n  _VIEW_REPEATER_STRATEGY,\n  _ViewRepeaterItemInsertArgs,\n} from '../collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n  inject,\n} from '@angular/core';\nimport {NumberInput, coerceNumberProperty} from '../coercion';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollRepeater} from './virtual-scroll-repeater';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation: 'horizontal' | 'vertical', direction: 'start' | 'end', node: Node) {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n\n  if (orientation === 'horizontal') {\n    return direction === 'start' ? rect.left : rect.right;\n  }\n\n  return direction === 'start' ? rect.top : rect.bottom;\n}\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n  providers: [{provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy}],\n})\nexport class CdkVirtualForOf<T>\n  implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy\n{\n  private _viewContainerRef = inject(ViewContainerRef);\n  private _template = inject<TemplateRef<CdkVirtualForOfContext<T>>>(TemplateRef);\n  private _differs = inject(IterableDiffers);\n  private _viewRepeater =\n    inject<_RecycleViewRepeaterStrategy<T, T, CdkVirtualForOfContext<T>>>(_VIEW_REPEATER_STRATEGY);\n  private _viewport = inject(CdkVirtualScrollViewport, {skipSelf: true});\n\n  /** Emits when the rendered view of the data changes. */\n  readonly viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private readonly _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // If value is an an NgIterable, convert it to an array.\n      this._dataSourceChanges.next(\n        new ArrayDataSource<T>(isObservable(value) ? value : Array.from(value || [])),\n      );\n    }\n  }\n\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn\n      ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)\n      : undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input()\n  get cdkVirtualForTemplateCacheSize(): number {\n    return this._viewRepeater.viewCacheSize;\n  }\n  set cdkVirtualForTemplateCacheSize(size: NumberInput) {\n    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n  }\n\n  /** Emits whenever the data in the current DataSource changes. */\n  readonly dataStream: Observable<readonly T[]> = this._dataSourceChanges.pipe(\n    // Start off with null `DataSource`.\n    startWith(null),\n    // Bundle up the previous and current data sources so we can work with both.\n    pairwise(),\n    // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n    // Replay the last emitted data when someone subscribes.\n    shareReplay(1),\n  );\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: readonly T[];\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const ngZone = inject(NgZone);\n\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      if (this.viewChange.observers.length) {\n        ngZone.run(() => this.viewChange.next(this._renderedRange));\n      }\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (\n      (range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)\n    ) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all the views, find the first and land node and compute the size by subtracting\n    // the top of the first node from the bottom of the last one.\n    let firstNode: HTMLElement | undefined;\n    let lastNode: HTMLElement | undefined;\n\n    // Find the first node by starting from the beginning and going forwards.\n    for (let i = 0; i < rangeLen; i++) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        firstNode = lastNode = view.rootNodes[0];\n        break;\n      }\n    }\n\n    // Find the last node by starting from the end and going backwards.\n    for (let i = rangeLen - 1; i > -1; i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      > | null;\n      if (view && view.rootNodes.length) {\n        lastNode = view.rootNodes[view.rootNodes.length - 1];\n        break;\n      }\n    }\n\n    return firstNode && lastNode\n      ? getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode)\n      : 0;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next(undefined!);\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._viewRepeater.detach();\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      // Use a wrapper function for the `trackBy` so any new values are\n      // picked up automatically without having to recreate the differ.\n      this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n      });\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(\n    oldDs: DataSource<T> | null,\n    newDs: DataSource<T> | null,\n  ): Observable<readonly T[]> {\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    this._viewRepeater.applyChanges(\n      changes,\n      this._viewContainerRef,\n      (\n        record: IterableChangeRecord<T>,\n        _adjustedPreviousIndex: number | null,\n        currentIndex: number | null,\n      ) => this._getEmbeddedViewArgs(record, currentIndex!),\n      record => record.item,\n    );\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as EmbeddedViewRef<\n        CdkVirtualForOfContext<T>\n      >;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  private _getEmbeddedViewArgs(\n    record: IterableChangeRecord<T>,\n    index: number,\n  ): _ViewRepeaterItemInsertArgs<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return {\n      templateRef: this._template,\n      context: {\n        $implicit: record.item,\n        // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n        // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n        cdkVirtualForOf: this._cdkVirtualForOf!,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false,\n      },\n      index,\n    };\n  }\n\n  static ngTemplateContextGuard<T>(\n    directive: CdkVirtualForOf<T>,\n    context: unknown,\n  ): context is CdkVirtualForOfContext<T> {\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides a virtual scrollable for the element it is attached to.\n */\n@Directive({\n  selector: '[cdkVirtualScrollingElement]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableElement}],\n  host: {\n    'class': 'cdk-virtual-scrollable',\n  },\n})\nexport class CdkVirtualScrollableElement extends CdkVirtualScrollable {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return (\n      this.getElementRef().nativeElement.getBoundingClientRect()[from] -\n      this.measureScrollOffset(from)\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Directive, ElementRef, inject, DOCUMENT} from '@angular/core';\n\nimport {CdkVirtualScrollable, VIRTUAL_SCROLLABLE} from './virtual-scrollable';\n\n/**\n * Provides as virtual scrollable for the global / window scrollbar.\n */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[scrollWindow]',\n  providers: [{provide: VIRTUAL_SCROLLABLE, useExisting: CdkVirtualScrollableWindow}],\n})\nexport class CdkVirtualScrollableWindow extends CdkVirtualScrollable {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n    const document = inject(DOCUMENT);\n    this.elementRef = new ElementRef(document.documentElement);\n    this._scrollElement = document;\n  }\n\n  override measureBoundingClientRectWithScrollOffset(\n    from: 'left' | 'top' | 'right' | 'bottom',\n  ): number {\n    return this.getElementRef().nativeElement.getBoundingClientRect()[from];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BidiModule} from '../bidi';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\nimport {CdkVirtualScrollableElement} from './virtual-scrollable-element';\nimport {CdkVirtualScrollableWindow} from './virtual-scrollable-window';\n\n@NgModule({\n  exports: [CdkScrollable],\n  imports: [CdkScrollable],\n})\nexport class CdkScrollableModule {}\n\n/**\n * @docs-primary-export\n */\n@NgModule({\n  imports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkVirtualScrollViewport,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n    CdkVirtualScrollableWindow,\n    CdkVirtualScrollableElement,\n  ],\n})\nexport class ScrollingModule {}\n\n// Re-export needed by the Angular compiler.\n// See: https://github.com/angular/components/issues/30663.\n// Note: These exports need to be stable and shouldn't be renamed unnecessarily because\n// consuming libraries might have references to them in their own partial compilation output.\nexport {Dir as ɵɵDir} from '../bidi';\n"],"names":["FixedSizeVirtualScrollStrategy","Subject","_scrolledIndexChange","pipe","distinctUntilChanged","_itemSize","_minBufferPx","itemSize","minBufferPx","attach","viewport","_viewport","_updateTotalContentSize","detach","complete","_updateRenderedRange","onContentScrolled","onDataLengthChanged","onRenderedOffsetChanged","behavior","scrollToOffset","index","getRenderedRange","dataLength","getDataLength","scrollOffset","firstVisibleIndex","newRange","end","maxVisibleItems","ceil","viewportSize","newVisibleIndex","Math","max","min","start","expandStart","_maxBufferPx","startBuffer","endBuffer","expandEnd","setRenderedRange","setRenderedContentOffset","round","next","floor","fixedSizeDir","_scrollStrategy","value","coerceNumberProperty","Directive","selector","providers","deps","forwardRef","CdkFixedSizeVirtualScroll","Input","DEFAULT_SCROLL_TIME","_ngZone","inject","NgZone","_platform","Platform","_scrolledCount","scrollContainers","Map","register","scrollable","has","_cleanupGlobalListener","runOutsideAngular","_renderer","listen","_scrolled","subscription","auditTimeInMs","auditTime","subscribe","observer","unsubscribe","undefined","forEach","_","container","deregister","ancestorScrolled","elementOrElementRef","CdkScrollable","Renderer2","ngOnDestroy","_cleanupScroll","_elementScrolled","scrollDispatcher","_destroyed","elementScrolled","elementRef","right","options","bottom","top","getRtlScrollAxisType","RtlScrollAxisType","INVERTED","NEGATED","left","el","scrollWidth","clientWidth","_applyScrollToOptions","nativeElement","scrollLeft","scrollHeight","clientHeight","scrollTop","from","isRtl","LEFT","RIGHT","DEFAULT_RESIZE_TIME","_change","DOCUMENT","constructor","RendererFactory2","createRenderer","ngZone","isBrowser","changeListener","event","_listeners","renderer","change","_viewportSize","cleanup","_updateViewportSize","output","width","height","getViewportRect","getViewportSize","scrollPosition","getViewportScrollPosition","document","_document","window","_getWindow","documentElement","documentRect","getBoundingClientRect","body","scrollY","CdkVirtualScrollable","rangesEqual","r2","r1","SCROLL_SCHEDULER","requestAnimationFrame","animationFrameScheduler","asapScheduler","CdkVirtualScrollViewport","ElementRef","_changeDetectorRef","ChangeDetectorRef","optional","_detachedSubject","_renderedRangeSubject","orientation","_orientation","appendOnly","scrolledIndexChange","Observable","resolve","then","run","_contentWrapper","renderedRangeStream","signal","ngDevMode","debugName","_renderedContentTransform","_renderedRange","_dataLength","_forOf","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_changeDetectionNeeded","_viewportChanges","Subscription","EMPTY","_injector","Injector","_isDestroyed","viewportRuler","ViewportRuler","Error","checkViewportSize","classList","add","ref","effect","_doChangeDetection","ApplicationRef","injector","DestroyRef","onDestroy","destroy","ngOnInit","Promise","startWith","takeUntil","_markChangeDetectionNeeded","forOf","dataStream","data","newLength","length","measureBoundingClientRectWithScrollOffset","getElementRef","setTotalContentSize","_totalContentSize","size","range","onContentRendered","getOffsetToRenderedContentStart","offset","to","dir","isHorizontal","axis","axisDirection","transform","Number","measureRenderedContentSize","scrollToIndex","measureScrollOffset","_from","target","i0","ɵɵFactoryTarget","Component","isStandalone","inputs","booleanAttribute","outputs","host","properties","classAttribute","provide","useFactory","VIRTUAL_SCROLLABLE","decorators","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","static","getOffset","direction","node","rect","_viewContainerRef","ViewContainerRef","_template","TemplateRef","viewChange","_dataSourceChanges","cdkVirtualForOf","_cdkVirtualForOf","isDataSource","ArrayDataSource","isObservable","Array","cdkVirtualForTrackBy","_cdkVirtualForTrackBy","item","fn","cdkVirtualForTemplate","_needsUpdate","cdkVirtualForTemplateCacheSize","switchMap","prev","cur","_changeDataSource","_data","observers","_onRenderedDataChange","measureRangeSize","renderedStartIndex","rangeLen","lastNode","i","view","get","rootNodes","firstNode","changes","_differ","diff","_renderedItems","_updateContext","slice","CdkVirtualScrollableElement","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","ɵdir","ɵɵngDeclareDirective","useExisting","usesInheritance","CdkVirtualScrollableWindow","CdkScrollableModule","args","ScrollingModule","NgModule","CdkVirtualForOf","imports","BidiModule"],"mappings":"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"}
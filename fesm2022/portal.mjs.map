{"version":3,"file":"portal.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/portal/portal-errors.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/portal/portal.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/portal/dom-portal-outlet.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/portal/portal-directives.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nexport function throwPortalOutletAlreadyDisposedError() {\n  throw Error('This PortalOutlet has already been disposed');\n}\n\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error(\n    'Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n      'a ComponentPortal or a TemplatePortal.',\n  );\n}\n\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nexport function throwNullPortalOutletError() {\n  throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  TemplateRef,\n  ViewContainerRef,\n  ElementRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injector,\n} from '@angular/core';\nimport {\n  throwNullPortalOutletError,\n  throwPortalAlreadyAttachedError,\n  throwNoPortalAttachedError,\n  throwNullPortalError,\n  throwPortalOutletAlreadyDisposedError,\n  throwUnknownPortalTypeError,\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return <T>host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * List of DOM nodes that should be projected through `<ng-content>` of the attached component.\n   */\n  projectableNodes?: Node[][] | null;\n\n  constructor(\n    component: ComponentType<T>,\n    viewContainerRef?: ViewContainerRef | null,\n    injector?: Injector | null,\n    projectableNodes?: Node[][] | null,\n  ) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.projectableNodes = projectableNodes;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    public templateRef: TemplateRef<C>,\n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    public viewContainerRef: ViewContainerRef,\n    /** Contextual data to be passed in to the embedded view. */\n    public context?: C,\n    /** The injector to use for the embedded view. */\n    public injector?: Injector,\n  ) {\n    super();\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  override attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  override detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n/** A `PortalOutlet` is a space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  EmbeddedViewRef,\n  EnvironmentInjector,\n  Injector,\n  NgModuleRef,\n  createComponent,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, DomPortal, TemplatePortal} from './portal';\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  /**\n   * @param outletElement Element into which the content is projected.\n   * @param _appRef Reference to the application. Only used in component portals when there\n   *   is no `ViewContainerRef` available.\n   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n   *   have one. Only used for component portals.\n   */\n  constructor(\n    /** Element into which the content is projected. */\n    public outletElement: Element,\n    private _appRef?: ApplicationRef,\n    private _defaultInjector?: Injector,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      const injector = portal.injector || portal.viewContainerRef.injector;\n      const ngModuleRef = injector.get(NgModuleRef, null, {optional: true}) || undefined;\n\n      componentRef = portal.viewContainerRef.createComponent(portal.component, {\n        index: portal.viewContainerRef.length,\n        injector,\n        ngModuleRef,\n        projectableNodes: portal.projectableNodes || undefined,\n      });\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n        throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n      }\n      const appRef = this._appRef!;\n\n      const elementInjector = portal.injector || this._defaultInjector || Injector.NULL;\n      const environmentInjector = elementInjector.get(EnvironmentInjector, appRef.injector);\n      componentRef = createComponent(portal.component, {\n        elementInjector,\n        environmentInjector,\n        projectableNodes: portal.projectableNodes || undefined,\n      });\n\n      appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        // Verify that the ApplicationRef has registered views before trying to detach a host view.\n        // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n        if (appRef.viewCount > 0) {\n          appRef.detachView(componentRef.hostView);\n        }\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n    this._attachedPortal = portal;\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n\n    this.setDisposeFn(() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    });\n\n    this._attachedPortal = portal;\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this.outletElement.ownerDocument.createComment('dom-portal');\n\n    element.parentNode!.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  override dispose(): void {\n    super.dispose();\n    this.outletElement.remove();\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Input,\n  inject,\n  NgModuleRef,\n  DOCUMENT,\n} from '@angular/core';\n\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const templateRef = inject<TemplateRef<any>>(TemplateRef);\n    const viewContainerRef = inject(ViewContainerRef);\n\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _moduleRef = inject(NgModuleRef, {optional: true});\n  private _document = inject(DOCUMENT);\n  private _viewContainerRef = inject(ViewContainerRef);\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    super();\n  }\n\n  /** Portal associated with the Portal outlet. */\n  @Input('cdkPortalOutlet')\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null | undefined | '') {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal || null;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() readonly attached: EventEmitter<CdkPortalOutletAttachedRef> =\n    new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedRef = this._attachedPortal = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef =\n      portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n\n    const ref = viewContainerRef.createComponent(portal.component, {\n      index: viewContainerRef.length,\n      injector: portal.injector || viewContainerRef.injector,\n      projectableNodes: portal.projectableNodes || undefined,\n      ngModuleRef: this._moduleRef || undefined,\n    });\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n      injector: portal.injector,\n    });\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode!.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n    this._attachedPortal = portal;\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  };\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (\n      nativeElement.nodeType === nativeElement.ELEMENT_NODE\n        ? nativeElement\n        : nativeElement.parentNode!\n    ) as HTMLElement;\n  }\n}\n\n@NgModule({\n  imports: [CdkPortal, CdkPortalOutlet],\n  exports: [CdkPortal, CdkPortalOutlet],\n})\nexport class PortalModule {}\n"],"names":["throwPortalAlreadyAttachedError","Error","throwPortalOutletAlreadyDisposedError","throwUnknownPortalTypeError","Portal","throwNullPortalOutletError","host","hasAttached","_attachedHost","attach","detach","throwNoPortalAttachedError","setAttachedHost","ComponentPortal","component","viewContainerRef","injector","projectableNodes","TemplatePortal","templateRef","origin","elementRef","context","element","BasePortalOutlet","_attachedPortal","portal","ngDevMode","DomPortalOutlet","outletElement","_appRef","_defaultInjector","attachComponentPortal","componentRef","ngModuleRef","get","NgModuleRef","optional","undefined","createComponent","index","length","setDisposeFn","destroy","elementInjector","Injector","NULL","environmentInjector","EnvironmentInjector","appRef","attachView","hostView","viewCount","detachView","appendChild","_getComponentRootNode","attachTemplatePortal","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","indexOf","remove","anchorNode","ownerDocument","createComment","parentNode","insertBefore","CdkPortal","ɵfac","i0","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","target","ɵɵFactoryTarget","Directive","ɵdir","ɵɵngDeclareDirective","isStandalone","selector","exportAs","usesInheritance","decorators","args","_attachedRef","constructor","_isInitialized","attachedRef","ngOnInit","ngOnDestroy","dispose","ref","_viewContainerRef","attachDomPortal","Output","PortalModule","NgModule","imports","CdkPortalOutlet","exports"],"mappings":"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"}
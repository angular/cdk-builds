{"version":3,"file":"_typeahead-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/a11y/key-manager/typeahead.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {A, NINE, Z, ZERO} from '../../keycodes';\nimport {Subject, Observable} from 'rxjs';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\nconst DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS = 200;\n\ninterface TypeaheadItem {\n  getLabel?(): string;\n}\n\ninterface TypeaheadConfig<T> {\n  debounceInterval?: number;\n  skipPredicate?: (item: T) => boolean | undefined;\n}\n\n/**\n * Selects items based on keyboard inputs. Implements the typeahead functionality of\n * `role=\"listbox\"` or `role=\"tree\"` and other related roles.\n */\nexport class Typeahead<T extends TypeaheadItem> {\n  private readonly _letterKeyStream = new Subject<string>();\n  private _items: readonly T[] = [];\n  private _selectedItemIndex = -1;\n\n  /** Buffer for the letters that the user has pressed */\n  private _pressedLetters: string[] = [];\n\n  private _skipPredicateFn?: (item: T) => boolean | undefined;\n\n  private readonly _selectedItem = new Subject<T>();\n  readonly selectedItem: Observable<T> = this._selectedItem;\n\n  constructor(initialItems: readonly T[], config?: TypeaheadConfig<T>) {\n    const typeAheadInterval =\n      typeof config?.debounceInterval === 'number'\n        ? config.debounceInterval\n        : DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS;\n\n    if (config?.skipPredicate) {\n      this._skipPredicateFn = config.skipPredicate;\n    }\n\n    if (\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      initialItems.length &&\n      initialItems.some(item => typeof item.getLabel !== 'function')\n    ) {\n      throw new Error('KeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this.setItems(initialItems);\n    this._setupKeyHandler(typeAheadInterval);\n  }\n\n  destroy() {\n    this._pressedLetters = [];\n    this._letterKeyStream.complete();\n    this._selectedItem.complete();\n  }\n\n  setCurrentSelectedItemIndex(index: number) {\n    this._selectedItemIndex = index;\n  }\n\n  setItems(items: readonly T[]) {\n    this._items = items;\n  }\n\n  handleKey(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n    if (event.key && event.key.length === 1) {\n      this._letterKeyStream.next(event.key.toLocaleUpperCase());\n    } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n      this._letterKeyStream.next(String.fromCharCode(keyCode));\n    }\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Resets the currently stored sequence of typed letters. */\n  reset(): void {\n    this._pressedLetters = [];\n  }\n\n  private _setupKeyHandler(typeAheadInterval: number) {\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._letterKeyStream\n      .pipe(\n        tap(letter => this._pressedLetters.push(letter)),\n        debounceTime(typeAheadInterval),\n        filter(() => this._pressedLetters.length > 0),\n        map(() => this._pressedLetters.join('').toLocaleUpperCase()),\n      )\n      .subscribe(inputString => {\n        // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n        for (let i = 1; i < this._items.length + 1; i++) {\n          const index = (this._selectedItemIndex + i) % this._items.length;\n          const item = this._items[index];\n\n          if (\n            !this._skipPredicateFn?.(item) &&\n            item.getLabel?.().toLocaleUpperCase().trim().indexOf(inputString) === 0\n          ) {\n            this._selectedItem.next(item);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n  }\n}\n"],"names":["Typeahead","Subject","_skipPredicateFn","_selectedItem","selectedItem","constructor","initialItems","config","typeAheadInterval","debounceInterval","DEFAULT_TYPEAHEAD_DEBOUNCE_INTERVAL_MS","skipPredicate","ngDevMode","length","some","item","getLabel","Error","setItems","_setupKeyHandler","_pressedLetters","_letterKeyStream","complete","setCurrentSelectedItemIndex","index","_selectedItemIndex","items","_items","handleKey","event","key","next","toLocaleUpperCase","keyCode","A","Z","ZERO","NINE","String","fromCharCode","isTyping"],"mappings":";;;;;AA4BmB,MAAAA,SAA8B,CAAA;kBACjC,GAAmB,IAAAC,OAAA,EAAA;QAGsB,GAAA,EAAA;;;EAqBnDC,gBAAA;AAEAC,EAAAA,aAAA,OAAUF,OAAA,EAAA;EACZG,YAAA,GAAA,IAAA,CAAAD,aAAA;EAEAE,WAA2BA,CAAAC,YAAA,EAAAC,MAAA,EAAA;IAC3B,MAAAC,iBAAsB,GAAAD,OAAAA,MAAA,EAAAE,gBAAA,0CAItBC,sCAAyB;IAEzB,IAAAH,MAAA,EAAkBI,aAAW,EAAA;AAG/B,MAAA,IAAA,CAA4BT,gBAAa,GAAAK,MAAA,CAAAI,aAAA;AACvC;AAGF,IAAA,IAAA,CAAA,OAA4BC,SAAA,KAAA,WAAA,IAAAA,SAAA,KAC1BN,YAAA,CAAAO,MAAmB,IAGrBP,YAA8B,CAAAQ,IAAA,CAAAC,IAAA,IAAA,OAAAA,IAAA,CAAAC,QAAA,KAAA,UAAA,CAAA,EAAA;MAC5B,MAAA,IAAAC,KAAA,CAA6B,0EAAA,CAAA;;QAI7B,CAAAC,QAAA,CAAAZ,YAAsB,CAAA;IACpB,IAAA,CAAAa,gBAAA,CAAAX,iBAAA,CAAA;;;AAIJ,IAAA,IAAA,CAAAY,eAAA,GAAA,EAAA;QAGQ,CAAAC,gBAAA,CAAAC,QAAA,EAAA;IACN,IAAA,CAAAnB,aAAA,CAAAmB,QAAA,EAAA;;AAIGC,EAAAA,2BAAAA,CAAAC,KAAA,EAAA;IACH,IAAAC,CAAAA,kBAAA,GAAAD,KAAA;AAGM;AACNN,EAAAA,QAAAA,CAA6FQ,KAAA,EAAA;QAC7F,CAA2FC,MAAA,GAAAD,KAAA;;AAE3FE,EAAAA,SAAAA,CAAAC,KAAA,EAAA;iCAO2B;IAIrB,IAAAA,KAAA,CAAcC,GAAA,IAAAD,KAAA,CAAAC,GAAA,CAAAjB,MAAA,KAAA,CAAA,EAAA;2BACR,CAAAkB,IAAA,CAAAF,KAAA,CAAAC,GAAA,CAAAE,iBAAA,EAAA,CAAA;AAEN,KAAA,MAIE,IAAAC,OAAkB,IAAAC,CAAA,IAAAD,OAAA,IAAAE,CAAA,IAAAF,OAAA,IAAAG,IAAA,IAAAH,OAAA,IAAAI,IAAA,EAAA;2BACZ,CAAAN,IAAA,CAAAO,MAAA,CAAAC,YAAA,CAAAN,OAAA,CAAA,CAAA;;;UAMhBO,GAAA;IACD,OAAA,IAAA,CAAApB,eAAA,CAAAP,MAAA,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;"}
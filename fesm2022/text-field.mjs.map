{"version":3,"file":"text-field.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/text-field/text-field-style-loader.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/text-field/autofill.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/text-field/autosize.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/text-field/text-field-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/** Component used to load the structural styles of the text field. */\n@Component({\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrl: 'text-field-prebuilt.css',\n  host: {'cdk-text-field-style-loader': ''},\n})\nexport class _CdkTextFieldStyleLoader {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Platform} from '../platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  inject,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  RendererFactory2,\n} from '@angular/core';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {coerceElement} from '../coercion';\nimport {EMPTY, Observable, Subject} from 'rxjs';\nimport {_CdkTextFieldStyleLoader} from './text-field-style-loader';\n\n/** An event that is emitted when the autofill state of an input changes. */\nexport type AutofillEvent = {\n  /** The element whose autofill state changes. */\n  target: Element;\n  /** Whether the element is currently autofilled. */\n  isAutofilled: boolean;\n};\n\n/** Used to track info about currently monitored elements. */\ntype MonitoredElementInfo = {\n  readonly subject: Subject<AutofillEvent>;\n  unlisten: () => void;\n};\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = {passive: true};\n\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n@Injectable({providedIn: 'root'})\nexport class AutofillMonitor implements OnDestroy {\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n  private _renderer = inject(RendererFactory2).createRenderer(null, null);\n\n  private _styleLoader = inject(_CdkPrivateStyleLoader);\n  private _monitoredElements = new Map<Element, MonitoredElementInfo>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: Element): Observable<AutofillEvent>;\n\n  /**\n   * Monitor for changes in the autofill state of the given input element.\n   * @param element The element to monitor.\n   * @return A stream of autofill state changes.\n   */\n  monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n\n  monitor(elementOrRef: Element | ElementRef<Element>): Observable<AutofillEvent> {\n    if (!this._platform.isBrowser) {\n      return EMPTY;\n    }\n\n    this._styleLoader.load(_CdkTextFieldStyleLoader);\n\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      return info.subject;\n    }\n\n    const subject = new Subject<AutofillEvent>();\n    const cssClass = 'cdk-text-field-autofilled';\n    const listener = (event: AnimationEvent) => {\n      // Animation events fire on initial element render, we check for the presence of the autofill\n      // CSS class to make sure this is a real change in state, not just the initial render before\n      // we fire off events.\n      if (\n        event.animationName === 'cdk-text-field-autofill-start' &&\n        !element.classList.contains(cssClass)\n      ) {\n        element.classList.add(cssClass);\n        this._ngZone.run(() => subject.next({target: event.target as Element, isAutofilled: true}));\n      } else if (\n        event.animationName === 'cdk-text-field-autofill-end' &&\n        element.classList.contains(cssClass)\n      ) {\n        element.classList.remove(cssClass);\n        this._ngZone.run(() =>\n          subject.next({target: event.target as Element, isAutofilled: false}),\n        );\n      }\n    };\n\n    const unlisten = this._ngZone.runOutsideAngular(() => {\n      element.classList.add('cdk-text-field-autofill-monitored');\n      return this._renderer.listen(element, 'animationstart', listener, listenerOptions);\n    });\n\n    this._monitoredElements.set(element, {subject, unlisten});\n    return subject;\n  }\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: Element): void;\n\n  /**\n   * Stop monitoring the autofill state of the given input element.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<Element>): void;\n\n  stopMonitoring(elementOrRef: Element | ElementRef<Element>): void {\n    const element = coerceElement(elementOrRef);\n    const info = this._monitoredElements.get(element);\n\n    if (info) {\n      info.unlisten();\n      info.subject.complete();\n      element.classList.remove('cdk-text-field-autofill-monitored');\n      element.classList.remove('cdk-text-field-autofilled');\n      this._monitoredElements.delete(element);\n    }\n  }\n\n  ngOnDestroy() {\n    this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n  }\n}\n\n/** A directive that can be used to monitor the autofill state of an input. */\n@Directive({\n  selector: '[cdkAutofill]',\n})\nexport class CdkAutofill implements OnDestroy, OnInit {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _autofillMonitor = inject(AutofillMonitor);\n\n  /** Emits when the autofill state of the element changes. */\n  @Output() readonly cdkAutofill = new EventEmitter<AutofillEvent>();\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    this._autofillMonitor\n      .monitor(this._elementRef)\n      .subscribe(event => this.cdkAutofill.emit(event));\n  }\n\n  ngOnDestroy() {\n    this._autofillMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NumberInput, coerceNumberProperty} from '../coercion';\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n  booleanAttribute,\n  inject,\n  Renderer2,\n  DOCUMENT,\n} from '@angular/core';\n\nimport {Platform} from '../platform';\nimport {_CdkPrivateStyleLoader} from '../private';\nimport {auditTime} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {_CdkTextFieldStyleLoader} from './text-field-style-loader';\n\n/** Directive to automatically resize a textarea to fit its content. */\n@Directive({\n  selector: 'textarea[cdkTextareaAutosize]',\n  exportAs: 'cdkTextareaAutosize',\n  host: {\n    'class': 'cdk-textarea-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  private _elementRef = inject<ElementRef<HTMLElement>>(ElementRef);\n  private _platform = inject(Platform);\n  private _ngZone = inject(NgZone);\n  private _renderer = inject(Renderer2);\n  private _resizeEvents = new Subject<void>();\n\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue?: string;\n  private _initialHeight: string | undefined;\n  private readonly _destroyed = new Subject<void>();\n  private _listenerCleanups: (() => void)[] | undefined;\n\n  private _minRows: number;\n  private _maxRows: number;\n  private _enabled: boolean = true;\n\n  /**\n   * Value of minRows as of last resize. If the minRows has decreased, the\n   * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n   * does not have the same problem because it does not affect the textarea's scrollHeight.\n   */\n  private _previousMinRows: number = -1;\n\n  private _textareaElement: HTMLTextAreaElement;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('cdkAutosizeMinRows')\n  get minRows(): number {\n    return this._minRows;\n  }\n  set minRows(value: NumberInput) {\n    this._minRows = coerceNumberProperty(value);\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('cdkAutosizeMaxRows')\n  get maxRows(): number {\n    return this._maxRows;\n  }\n  set maxRows(value: NumberInput) {\n    this._maxRows = coerceNumberProperty(value);\n    this._setMaxHeight();\n  }\n\n  /** Whether autosizing is enabled or not */\n  @Input({alias: 'cdkTextareaAutosize', transform: booleanAttribute})\n  get enabled(): boolean {\n    return this._enabled;\n  }\n  set enabled(value: boolean) {\n    // Only act if the actual value changed. This specifically helps to not run\n    // resizeToFitContent too early (i.e. before ngAfterViewInit)\n    if (this._enabled !== value) {\n      (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n    }\n  }\n\n  @Input()\n  get placeholder(): string {\n    return this._textareaElement.placeholder;\n  }\n  set placeholder(value: string) {\n    this._cachedPlaceholderHeight = undefined;\n\n    if (value) {\n      this._textareaElement.setAttribute('placeholder', value);\n    } else {\n      this._textareaElement.removeAttribute('placeholder');\n    }\n\n    this._cacheTextareaPlaceholderHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight?: number;\n  /** Cached height of a textarea with only the placeholder. */\n  private _cachedPlaceholderHeight?: number;\n\n  /** Used to reference correct document/window */\n  protected _document = inject(DOCUMENT);\n\n  private _hasFocus: boolean;\n\n  private _isViewInited = false;\n\n  constructor(...args: unknown[]);\n\n  constructor() {\n    const styleLoader = inject(_CdkPrivateStyleLoader);\n    styleLoader.load(_CdkTextFieldStyleLoader);\n    this._textareaElement = this._elementRef.nativeElement as HTMLTextAreaElement;\n  }\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight =\n      this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight) {\n      this._textareaElement.style.minHeight = minHeight;\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight =\n      this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._textareaElement.style.maxHeight = maxHeight;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      // Remember the height which we started with in case autosizing is disabled\n      this._initialHeight = this._textareaElement.style.height;\n      this.resizeToFitContent();\n\n      this._ngZone.runOutsideAngular(() => {\n        this._listenerCleanups = [\n          this._renderer.listen('window', 'resize', () => this._resizeEvents.next()),\n          this._renderer.listen(this._textareaElement, 'focus', this._handleFocusEvent),\n          this._renderer.listen(this._textareaElement, 'blur', this._handleFocusEvent),\n        ];\n        this._resizeEvents.pipe(auditTime(16)).subscribe(() => {\n          // Clear the cached heights since the styles can change\n          // when the window is resized (e.g. by media queries).\n          this._cachedLineHeight = this._cachedPlaceholderHeight = undefined;\n          this.resizeToFitContent(true);\n        });\n      });\n\n      this._isViewInited = true;\n      this.resizeToFitContent(true);\n    }\n  }\n\n  ngOnDestroy() {\n    this._listenerCleanups?.forEach(cleanup => cleanup());\n    this._resizeEvents.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    // Use a clone element because we have to override some styles.\n    const textareaClone = this._textareaElement.cloneNode(false) as HTMLTextAreaElement;\n    const cloneStyles = textareaClone.style;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    cloneStyles.position = 'absolute';\n    cloneStyles.visibility = 'hidden';\n    cloneStyles.border = 'none';\n    cloneStyles.padding = '0';\n    cloneStyles.height = '';\n    cloneStyles.minHeight = '';\n    cloneStyles.maxHeight = '';\n\n    // App styles might be messing with the height through the positioning properties.\n    cloneStyles.top = cloneStyles.bottom = cloneStyles.left = cloneStyles.right = 'auto';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    cloneStyles.overflow = 'hidden';\n\n    this._textareaElement.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textareaClone.remove();\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  private _measureScrollHeight(): number {\n    const element = this._textareaElement;\n    const previousMargin = element.style.marginBottom || '';\n    const isFirefox = this._platform.FIREFOX;\n    const needsMarginFiller = isFirefox && this._hasFocus;\n    const measuringClass = isFirefox\n      ? 'cdk-textarea-autosize-measuring-firefox'\n      : 'cdk-textarea-autosize-measuring';\n\n    // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n    // work around it by assigning a temporary margin with the same height as the `textarea` so that\n    // it occupies the same amount of space. See #23233.\n    if (needsMarginFiller) {\n      element.style.marginBottom = `${element.clientHeight}px`;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    element.classList.add(measuringClass);\n    // The measuring class includes a 2px padding to workaround an issue with Chrome,\n    // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n    const scrollHeight = element.scrollHeight - 4;\n    element.classList.remove(measuringClass);\n\n    if (needsMarginFiller) {\n      element.style.marginBottom = previousMargin;\n    }\n\n    return scrollHeight;\n  }\n\n  private _cacheTextareaPlaceholderHeight(): void {\n    if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n      return;\n    }\n    if (!this.placeholder) {\n      this._cachedPlaceholderHeight = 0;\n      return;\n    }\n\n    const value = this._textareaElement.value;\n\n    this._textareaElement.value = this._textareaElement.placeholder;\n    this._cachedPlaceholderHeight = this._measureScrollHeight();\n    this._textareaElement.value = value;\n  }\n\n  /** Handles `focus` and `blur` events. */\n  private _handleFocusEvent = (event: FocusEvent) => {\n    this._hasFocus = event.type === 'focus';\n  };\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    // If autosizing is disabled, just skip everything else\n    if (!this._enabled) {\n      return;\n    }\n\n    this._cacheTextareaLineHeight();\n    this._cacheTextareaPlaceholderHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize if the value or minRows have changed since these calculations can be expensive.\n    if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n      return;\n    }\n\n    const scrollHeight = this._measureScrollHeight();\n    const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${height}px`;\n\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame !== 'undefined') {\n        requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n      } else {\n        setTimeout(() => this._scrollToCaretPosition(textarea));\n      }\n    });\n\n    this._previousValue = value;\n    this._previousMinRows = this._minRows;\n  }\n\n  /**\n   * Resets the textarea to its original size\n   */\n  reset() {\n    // Do not try to change the textarea, if the initialHeight has not been determined yet\n    // This might potentially remove styles when reset() is called before ngAfterViewInit\n    if (this._initialHeight !== undefined) {\n      this._textareaElement.style.height = this._initialHeight;\n    }\n  }\n\n  _noopInputHandler() {\n    // no-op handler that ensures we're running change detection on input events.\n  }\n\n  /**\n   * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n   * prevent it from scrolling to the caret position. We need to re-set the selection\n   * in order for it to scroll to the proper position.\n   */\n  private _scrollToCaretPosition(textarea: HTMLTextAreaElement) {\n    const {selectionStart, selectionEnd} = textarea;\n\n    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n    // between the time we requested the animation frame and when it was executed.\n    // Also note that we have to assert that the textarea is focused before we set the\n    // selection range. Setting the selection range on a non-focused textarea will cause\n    // it to receive focus on IE and Edge.\n    if (!this._destroyed.isStopped && this._hasFocus) {\n      textarea.setSelectionRange(selectionStart, selectionEnd);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAutofill} from './autofill';\nimport {CdkTextareaAutosize} from './autosize';\n\n@NgModule({\n  imports: [CdkAutofill, CdkTextareaAutosize],\n  exports: [CdkAutofill, CdkTextareaAutosize],\n})\nexport class TextFieldModule {}\n"],"names":["version","ngImport","i0","type","_CdkTextFieldStyleLoader","decorators","listenerOptions","Platform","constructor","monitor","elementOrRef","_platform","isBrowser","EMPTY","_styleLoader","load","element","coerceElement","_monitoredElements","get","subject","Subject","cssClass","listener","event","animationName","classList","contains","_ngZone","run","next","target","isAutofilled","EventEmitter","CdkTextareaAutosize","_renderer","inject","Renderer2","_initialHeight","_destroyed","_listenerCleanups","_minRows","_maxRows","_previousMinRows","_textareaElement","coerceNumberProperty","value","maxRows","_setMaxHeight","enabled","_enabled","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","setAttribute","_cacheTextareaPlaceholderHeight","DOCUMENT","_hasFocus","_isViewInited","styleLoader","_elementRef","nativeElement","minHeight","style","maxHeight","_cachedLineHeight","ngAfterViewInit","height","listen","_resizeEvents","_handleFocusEvent","pipe","auditTime","subscribe","forEach","cleanup","complete","textareaClone","rows","cloneStyles","visibility","border","padding","top","bottom","left","right","parentNode","appendChild","remove","_measureScrollHeight","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","clientHeight","scrollHeight","ngDoCheck","force","textarea","ctorParameters","propDecorators","minRows","transform","booleanAttribute","Input","ɵmod","ɵɵngDeclareNgModule","minVersion","TextFieldModule","imports","CdkAutofill","exports"],"mappings":"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"}
{"version":3,"file":"testing-testbed.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/task-state-zone-interceptor.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/fake-events/event-objects.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/fake-events/dispatch-events.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/fake-events/element-focus.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/fake-events/type-in-element.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/unit-test-element.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/testing/testbed/testbed-harness-environment.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ProxyZone, ProxyZoneStatic} from './proxy-zone-types';\n\n/** Current state of the intercepted zone. */\nexport interface TaskState {\n  /** Whether the zone is stable (i.e. no microtasks and macrotasks). */\n  stable: boolean;\n}\n\n/** Unique symbol that is used to patch a property to a proxy zone. */\nconst stateObservableSymbol = Symbol('ProxyZone_PATCHED#stateObservable');\n\n/** Type that describes a potentially patched proxy zone instance. */\ntype PatchedProxyZone = ProxyZone & {\n  [stateObservableSymbol]: undefined | Observable<TaskState>;\n};\n\n/**\n * Interceptor that can be set up in a `ProxyZone` instance. The interceptor\n * will keep track of the task state and emit whenever the state changes.\n *\n * This serves as a workaround for https://github.com/angular/angular/issues/32896.\n */\nexport class TaskStateZoneInterceptor {\n  private _lastState: HasTaskState | null = null;\n\n  /** Subject that can be used to emit a new state change. */\n  private readonly _stateSubject = new BehaviorSubject<TaskState>(\n    this._lastState ? this._getTaskStateFromInternalZoneState(this._lastState) : {stable: true},\n  );\n\n  /** Public observable that emits whenever the task state changes. */\n  readonly state: Observable<TaskState> = this._stateSubject;\n\n  constructor(lastState: HasTaskState | null) {\n    this._lastState = lastState;\n  }\n\n  /** This will be called whenever the task state changes in the intercepted zone. */\n  onHasTask(delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) {\n    if (current === target) {\n      this._stateSubject.next(this._getTaskStateFromInternalZoneState(hasTaskState));\n    }\n  }\n\n  /** Gets the task state from the internal ZoneJS task state. */\n  private _getTaskStateFromInternalZoneState(state: HasTaskState): TaskState {\n    return {stable: !state.macroTask && !state.microTask};\n  }\n\n  /**\n   * Sets up the custom task state Zone interceptor in the  `ProxyZone`. Throws if\n   * no `ProxyZone` could be found.\n   * @returns an observable that emits whenever the task state changes.\n   */\n  static setup(): Observable<TaskState> {\n    if (Zone === undefined) {\n      throw Error(\n        'Could not find ZoneJS. For test harnesses running in TestBed, ' +\n          'ZoneJS needs to be installed.',\n      );\n    }\n\n    // tslint:disable-next-line:variable-name\n    const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as ProxyZoneStatic | undefined;\n\n    // If there is no \"ProxyZoneSpec\" installed, we throw an error and recommend\n    // setting up the proxy zone by pulling in the testing bundle.\n    if (!ProxyZoneSpec) {\n      throw Error(\n        'ProxyZoneSpec is needed for the test harnesses but could not be found. ' +\n          'Please make sure that your environment includes zone.js/dist/zone-testing.js',\n      );\n    }\n\n    // Ensure that there is a proxy zone instance set up, and get\n    // a reference to the instance if present.\n    const zoneSpec = ProxyZoneSpec.assertPresent() as PatchedProxyZone;\n\n    // If there already is a delegate registered in the proxy zone, and it\n    // is type of the custom task state interceptor, we just use that state\n    // observable. This allows us to only intercept Zone once per test\n    // (similar to how `fakeAsync` or `async` work).\n    if (zoneSpec[stateObservableSymbol]) {\n      return zoneSpec[stateObservableSymbol]!;\n    }\n\n    // Since we intercept on environment creation and the fixture has been\n    // created before, we might have missed tasks scheduled before. Fortunately\n    // the proxy zone keeps track of the previous task state, so we can just pass\n    // this as initial state to the task zone interceptor.\n    const interceptor = new TaskStateZoneInterceptor(zoneSpec.lastTaskState);\n    const zoneSpecOnHasTask = zoneSpec.onHasTask.bind(zoneSpec);\n\n    // We setup the task state interceptor in the `ProxyZone`. Note that we cannot register\n    // the interceptor as a new proxy zone delegate because it would mean that other zone\n    // delegates (e.g. `FakeAsyncTestZone` or `AsyncTestZone`) can accidentally overwrite/disable\n    // our interceptor. Since we just intend to monitor the task state of the proxy zone, it is\n    // sufficient to just patch the proxy zone. This also avoids that we interfere with the task\n    // queue scheduling logic.\n    zoneSpec.onHasTask = function (...args: [ZoneDelegate, Zone, Zone, HasTaskState]) {\n      zoneSpecOnHasTask(...args);\n      interceptor.onHasTask(...args);\n    };\n\n    return (zoneSpec[stateObservableSymbol] = interceptor.state);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModifierKeys} from '../../test-element';\n\n/** Used to generate unique IDs for events. */\nlet uniqueIds = 0;\n\n/**\n * Creates a browser MouseEvent with the specified options.\n * @docs-private\n */\nexport function createMouseEvent(\n  type: string,\n  clientX = 0,\n  clientY = 0,\n  offsetX = 0,\n  offsetY = 0,\n  button = 0,\n  modifiers: ModifierKeys = {},\n) {\n  // Note: We cannot determine the position of the mouse event based on the screen\n  // because the dimensions and position of the browser window are not available\n  // To provide reasonable `screenX` and `screenY` coordinates, we simply use the\n  // client coordinates as if the browser is opened in fullscreen.\n  const screenX = clientX;\n  const screenY = clientY;\n\n  const event = new MouseEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    composed: true, // Required for shadow DOM events.\n    view: window,\n    detail: 1,\n    relatedTarget: null,\n    screenX,\n    screenY,\n    clientX,\n    clientY,\n    ctrlKey: modifiers.control,\n    altKey: modifiers.alt,\n    shiftKey: modifiers.shift,\n    metaKey: modifiers.meta,\n    button: button,\n    buttons: 1,\n  });\n\n  // The `MouseEvent` constructor doesn't allow us to pass these properties into the constructor.\n  // Override them to `1`, because they're used for fake screen reader event detection.\n  if (offsetX != null) {\n    defineReadonlyEventProperty(event, 'offsetX', offsetX);\n  }\n\n  if (offsetY != null) {\n    defineReadonlyEventProperty(event, 'offsetY', offsetY);\n  }\n\n  return event;\n}\n\n/**\n * Creates a browser `PointerEvent` with the specified options. Pointer events\n * by default will appear as if they are the primary pointer of their type.\n * https://www.w3.org/TR/pointerevents2/#dom-pointerevent-isprimary.\n *\n * For example, if pointer events for a multi-touch interaction are created, the non-primary\n * pointer touches would need to be represented by non-primary pointer events.\n *\n * @docs-private\n */\nexport function createPointerEvent(\n  type: string,\n  clientX = 0,\n  clientY = 0,\n  offsetX?: number,\n  offsetY?: number,\n  options: PointerEventInit = {isPrimary: true},\n) {\n  const event = new PointerEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    composed: true, // Required for shadow DOM events.\n    view: window,\n    clientX,\n    clientY,\n    ...options,\n  });\n\n  if (offsetX != null) {\n    defineReadonlyEventProperty(event, 'offsetX', offsetX);\n  }\n\n  if (offsetY != null) {\n    defineReadonlyEventProperty(event, 'offsetY', offsetY);\n  }\n\n  return event;\n}\n\n/**\n * Creates a browser TouchEvent with the specified pointer coordinates.\n * @docs-private\n */\nexport function createTouchEvent(type: string, pageX = 0, pageY = 0, clientX = 0, clientY = 0) {\n  // We cannot use the `TouchEvent` or `Touch` because Firefox and Safari lack support.\n  // TODO: Switch to the constructor API when it is available for Firefox and Safari.\n  const event = document.createEvent('UIEvent');\n  const touchDetails = {pageX, pageY, clientX, clientY, identifier: uniqueIds++};\n\n  // TS3.6 removes the initUIEvent method and suggests porting to \"new UIEvent()\".\n  (event as any).initUIEvent(type, true, true, window, 0);\n\n  // Most of the browsers don't have a \"initTouchEvent\" method that can be used to define\n  // the touch details.\n  defineReadonlyEventProperty(event, 'touches', [touchDetails]);\n  defineReadonlyEventProperty(event, 'targetTouches', [touchDetails]);\n  defineReadonlyEventProperty(event, 'changedTouches', [touchDetails]);\n\n  return event;\n}\n\n/**\n * Creates a keyboard event with the specified key and modifiers.\n * @docs-private\n */\nexport function createKeyboardEvent(\n  type: string,\n  keyCode: number = 0,\n  key: string = '',\n  modifiers: ModifierKeys = {},\n  code: string = '',\n) {\n  return new KeyboardEvent(type, {\n    bubbles: true,\n    cancelable: true,\n    composed: true, // Required for shadow DOM events.\n    view: window,\n    keyCode,\n    key,\n    shiftKey: modifiers.shift,\n    metaKey: modifiers.meta,\n    altKey: modifiers.alt,\n    ctrlKey: modifiers.control,\n    code,\n  });\n}\n\n/**\n * Creates a fake event object with any desired event type.\n * @docs-private\n */\nexport function createFakeEvent(type: string, bubbles = false, cancelable = true, composed = true) {\n  return new Event(type, {bubbles, cancelable, composed});\n}\n\n/**\n * Defines a readonly property on the given event object. Readonly properties on an event object\n * are always set as configurable as that matches default readonly properties for DOM event objects.\n */\nfunction defineReadonlyEventProperty(event: Event, propertyName: string, value: any) {\n  Object.defineProperty(event, propertyName, {get: () => value, configurable: true});\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ModifierKeys} from '../../test-element';\nimport {\n  createFakeEvent,\n  createKeyboardEvent,\n  createMouseEvent,\n  createPointerEvent,\n  createTouchEvent,\n} from './event-objects';\n\n/**\n * Utility to dispatch any event on a Node.\n * @docs-private\n */\nexport function dispatchEvent<T extends Event>(node: Node | Window, event: T): T {\n  node.dispatchEvent(event);\n  return event;\n}\n\n/**\n * Shorthand to dispatch a fake event on a specified node.\n * @docs-private\n */\nexport function dispatchFakeEvent(node: Node | Window, type: string, bubbles?: boolean): Event {\n  return dispatchEvent(node, createFakeEvent(type, bubbles));\n}\n\n/**\n * Shorthand to dispatch a keyboard event with a specified key code and\n * optional modifiers.\n * @docs-private\n */\nexport function dispatchKeyboardEvent(\n  node: Node,\n  type: string,\n  keyCode?: number,\n  key?: string,\n  modifiers?: ModifierKeys,\n  code?: string,\n): KeyboardEvent {\n  return dispatchEvent(node, createKeyboardEvent(type, keyCode, key, modifiers, code));\n}\n\n/**\n * Shorthand to dispatch a mouse event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchMouseEvent(\n  node: Node,\n  type: string,\n  clientX = 0,\n  clientY = 0,\n  offsetX?: number,\n  offsetY?: number,\n  button?: number,\n  modifiers?: ModifierKeys,\n): MouseEvent {\n  return dispatchEvent(\n    node,\n    createMouseEvent(type, clientX, clientY, offsetX, offsetY, button, modifiers),\n  );\n}\n\n/**\n * Shorthand to dispatch a pointer event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchPointerEvent(\n  node: Node,\n  type: string,\n  clientX = 0,\n  clientY = 0,\n  offsetX?: number,\n  offsetY?: number,\n  options?: PointerEventInit,\n): PointerEvent {\n  return dispatchEvent(\n    node,\n    createPointerEvent(type, clientX, clientY, offsetX, offsetY, options),\n  ) as PointerEvent;\n}\n\n/**\n * Shorthand to dispatch a touch event on the specified coordinates.\n * @docs-private\n */\nexport function dispatchTouchEvent(\n  node: Node,\n  type: string,\n  pageX = 0,\n  pageY = 0,\n  clientX = 0,\n  clientY = 0,\n) {\n  return dispatchEvent(node, createTouchEvent(type, pageX, pageY, clientX, clientY));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {dispatchFakeEvent} from './dispatch-events';\n\nfunction triggerFocusChange(element: HTMLElement, event: 'focus' | 'blur') {\n  let eventFired = false;\n  const handler = () => (eventFired = true);\n  element.addEventListener(event, handler);\n  element[event]();\n  element.removeEventListener(event, handler);\n  if (!eventFired) {\n    dispatchFakeEvent(element, event);\n  }\n}\n\n/**\n * Patches an elements focus and blur methods to emit events consistently and predictably.\n * This is necessary, because some browsers can call the focus handlers asynchronously,\n * while others won't fire them at all if the browser window is not focused.\n * @docs-private\n */\n// TODO: Check if this element focus patching is still needed for local testing,\n// where browser is not necessarily focused.\nexport function patchElementFocus(element: HTMLElement) {\n  element.focus = () => dispatchFakeEvent(element, 'focus');\n  element.blur = () => dispatchFakeEvent(element, 'blur');\n}\n\n/** @docs-private */\nexport function triggerFocus(element: HTMLElement) {\n  triggerFocusChange(element, 'focus');\n}\n\n/** @docs-private */\nexport function triggerBlur(element: HTMLElement) {\n  triggerFocusChange(element, 'blur');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {PERIOD} from '../../../keycodes';\nimport {ModifierKeys} from '../../test-element';\nimport {getNoKeysSpecifiedError} from '../../test-element-errors';\nimport {dispatchFakeEvent, dispatchKeyboardEvent} from './dispatch-events';\nimport {triggerFocus} from './element-focus';\n\n/** Input types for which the value can be entered incrementally. */\nconst incrementalInputTypes = new Set([\n  'text',\n  'email',\n  'hidden',\n  'password',\n  'search',\n  'tel',\n  'url',\n]);\n\n/**\n * Manual mapping of some common characters to their `code` in a keyboard event. Non-exhaustive, see\n * the tables on MDN for more info: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n */\nconst charsToCodes: Record<string, string> = {\n  ' ': 'Space',\n  '.': 'Period',\n  ',': 'Comma',\n  '`': 'Backquote',\n  '-': 'Minus',\n  '=': 'Equal',\n  '[': 'BracketLeft',\n  ']': 'BracketRight',\n  '\\\\': 'Backslash',\n  '/': 'Slash',\n  \"'\": 'Quote',\n  '\"': 'Quote',\n  ';': 'Semicolon',\n};\n\n/**\n * Determines the `KeyboardEvent.key` from a character. See #27034 and\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\n */\nfunction getKeyboardEventCode(char: string): string {\n  if (char.length !== 1) {\n    return '';\n  }\n\n  const charCode = char.charCodeAt(0);\n\n  // Key is a letter between a and z, uppercase or lowercase.\n  if ((charCode >= 97 && charCode <= 122) || (charCode >= 65 && charCode <= 90)) {\n    return `Key${char.toUpperCase()}`;\n  }\n\n  // Digits from 0 to 9.\n  if (48 <= charCode && charCode <= 57) {\n    return `Digit${char}`;\n  }\n\n  return charsToCodes[char] ?? '';\n}\n\n/**\n * Checks whether the given Element is a text input element.\n * @docs-private\n */\nexport function isTextInput(element: Element): element is HTMLInputElement | HTMLTextAreaElement {\n  const nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'textarea';\n}\n\n/**\n * If keys have been specified, focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param element Element onto which to set the value.\n * @param keys The keys to send to the element.\n * @docs-private\n */\nexport function typeInElement(\n  element: HTMLElement,\n  ...keys: (string | {keyCode?: number; key?: string})[]\n): void;\n\n/**\n * If keys have been specified, focuses an input, sets its value and dispatches\n * the `input` event, simulating the user typing.\n * @param element Element onto which to set the value.\n * @param modifiers Modifier keys that are held while typing.\n * @param keys The keys to send to the element.\n * @docs-private\n */\nexport function typeInElement(\n  element: HTMLElement,\n  modifiers: ModifierKeys,\n  ...keys: (string | {keyCode?: number; key?: string})[]\n): void;\n\nexport function typeInElement(element: HTMLElement, ...modifiersAndKeys: any[]) {\n  const first = modifiersAndKeys[0];\n  let modifiers: ModifierKeys;\n  let rest: (string | {keyCode?: number; key?: string; code?: string})[];\n  if (\n    first !== undefined &&\n    typeof first !== 'string' &&\n    first.keyCode === undefined &&\n    first.key === undefined\n  ) {\n    modifiers = first;\n    rest = modifiersAndKeys.slice(1);\n  } else {\n    modifiers = {};\n    rest = modifiersAndKeys;\n  }\n  const isInput = isTextInput(element);\n  const inputType = element.getAttribute('type') || 'text';\n  const keys: {keyCode?: number; key?: string; code?: string}[] = rest\n    .map(k =>\n      typeof k === 'string'\n        ? k.split('').map(c => ({\n            keyCode: c.toUpperCase().charCodeAt(0),\n            key: c,\n            code: getKeyboardEventCode(c),\n          }))\n        : [k],\n    )\n    .reduce((arr, k) => arr.concat(k), []);\n\n  // Throw an error if no keys have been specified. Calling this function with no\n  // keys should not result in a focus event being dispatched unexpectedly.\n  if (keys.length === 0) {\n    throw getNoKeysSpecifiedError();\n  }\n\n  // We simulate the user typing in a value by incrementally assigning the value below. The problem\n  // is that for some input types, the browser won't allow for an invalid value to be set via the\n  // `value` property which will always be the case when going character-by-character. If we detect\n  // such an input, we have to set the value all at once or listeners to the `input` event (e.g.\n  // the `ReactiveFormsModule` uses such an approach) won't receive the correct value.\n  const enterValueIncrementally =\n    inputType === 'number'\n      ? // The value can be set character by character in number inputs if it doesn't have any decimals.\n        keys.every(key => key.key !== '.' && key.key !== '-' && key.keyCode !== PERIOD)\n      : incrementalInputTypes.has(inputType);\n\n  triggerFocus(element);\n\n  // When we aren't entering the value incrementally, assign it all at once ahead\n  // of time so that any listeners to the key events below will have access to it.\n  if (!enterValueIncrementally) {\n    (element as HTMLInputElement).value = keys.reduce((value, key) => value + (key.key || ''), '');\n  }\n\n  for (const key of keys) {\n    dispatchKeyboardEvent(element, 'keydown', key.keyCode, key.key, modifiers, key.code);\n    dispatchKeyboardEvent(element, 'keypress', key.keyCode, key.key, modifiers, key.code);\n    if (isInput && key.key && key.key.length === 1) {\n      if (enterValueIncrementally) {\n        (element as HTMLInputElement | HTMLTextAreaElement).value += key.key;\n        dispatchFakeEvent(element, 'input');\n      }\n    }\n    dispatchKeyboardEvent(element, 'keyup', key.keyCode, key.key, modifiers, key.code);\n  }\n\n  // Since we weren't dispatching `input` events while sending the keys, we have to do it now.\n  if (!enterValueIncrementally) {\n    dispatchFakeEvent(element, 'input');\n  }\n}\n\n/**\n * Clears the text in an input or textarea element.\n * @docs-private\n */\nexport function clearElement(element: HTMLInputElement | HTMLTextAreaElement) {\n  triggerFocus(element as HTMLElement);\n  element.value = '';\n  dispatchFakeEvent(element, 'input');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as keyCodes from '../../keycodes';\nimport {\n  _getTextWithExcludedElements,\n  ElementDimensions,\n  ModifierKeys,\n  TestElement,\n  TestKey,\n  TextOptions,\n  EventData,\n} from '../../testing';\nimport {\n  clearElement,\n  createFakeEvent,\n  dispatchFakeEvent,\n  dispatchMouseEvent,\n  dispatchPointerEvent,\n  isTextInput,\n  triggerBlur,\n  triggerFocus,\n  typeInElement,\n  dispatchEvent,\n} from './fake-events';\n\n/** Maps `TestKey` constants to the `keyCode` and `key` values used by native browser events. */\nconst keyMap = {\n  [TestKey.BACKSPACE]: {keyCode: keyCodes.BACKSPACE, key: 'Backspace', code: 'Backspace'},\n  [TestKey.TAB]: {keyCode: keyCodes.TAB, key: 'Tab', code: 'Tab'},\n  [TestKey.ENTER]: {keyCode: keyCodes.ENTER, key: 'Enter', code: 'Enter'},\n  [TestKey.SHIFT]: {keyCode: keyCodes.SHIFT, key: 'Shift', code: 'ShiftLeft'},\n  [TestKey.CONTROL]: {keyCode: keyCodes.CONTROL, key: 'Control', code: 'ControlLeft'},\n  [TestKey.ALT]: {keyCode: keyCodes.ALT, key: 'Alt', code: 'AltLeft'},\n  [TestKey.ESCAPE]: {keyCode: keyCodes.ESCAPE, key: 'Escape', code: 'Escape'},\n  [TestKey.PAGE_UP]: {keyCode: keyCodes.PAGE_UP, key: 'PageUp', code: 'PageUp'},\n  [TestKey.PAGE_DOWN]: {keyCode: keyCodes.PAGE_DOWN, key: 'PageDown', code: 'PageDown'},\n  [TestKey.END]: {keyCode: keyCodes.END, key: 'End', code: 'End'},\n  [TestKey.HOME]: {keyCode: keyCodes.HOME, key: 'Home', code: 'Home'},\n  [TestKey.LEFT_ARROW]: {keyCode: keyCodes.LEFT_ARROW, key: 'ArrowLeft', code: 'ArrowLeft'},\n  [TestKey.UP_ARROW]: {keyCode: keyCodes.UP_ARROW, key: 'ArrowUp', code: 'ArrowUp'},\n  [TestKey.RIGHT_ARROW]: {keyCode: keyCodes.RIGHT_ARROW, key: 'ArrowRight', code: 'ArrowRight'},\n  [TestKey.DOWN_ARROW]: {keyCode: keyCodes.DOWN_ARROW, key: 'ArrowDown', code: 'ArrowDown'},\n  [TestKey.INSERT]: {keyCode: keyCodes.INSERT, key: 'Insert', code: 'Insert'},\n  [TestKey.DELETE]: {keyCode: keyCodes.DELETE, key: 'Delete', code: 'Delete'},\n  [TestKey.F1]: {keyCode: keyCodes.F1, key: 'F1', code: 'F1'},\n  [TestKey.F2]: {keyCode: keyCodes.F2, key: 'F2', code: 'F2'},\n  [TestKey.F3]: {keyCode: keyCodes.F3, key: 'F3', code: 'F3'},\n  [TestKey.F4]: {keyCode: keyCodes.F4, key: 'F4', code: 'F4'},\n  [TestKey.F5]: {keyCode: keyCodes.F5, key: 'F5', code: 'F5'},\n  [TestKey.F6]: {keyCode: keyCodes.F6, key: 'F6', code: 'F6'},\n  [TestKey.F7]: {keyCode: keyCodes.F7, key: 'F7', code: 'F7'},\n  [TestKey.F8]: {keyCode: keyCodes.F8, key: 'F8', code: 'F8'},\n  [TestKey.F9]: {keyCode: keyCodes.F9, key: 'F9', code: 'F9'},\n  [TestKey.F10]: {keyCode: keyCodes.F10, key: 'F10', code: 'F10'},\n  [TestKey.F11]: {keyCode: keyCodes.F11, key: 'F11', code: 'F11'},\n  [TestKey.F12]: {keyCode: keyCodes.F12, key: 'F12', code: 'F12'},\n  [TestKey.META]: {keyCode: keyCodes.META, key: 'Meta', code: 'MetaLeft'},\n  [TestKey.COMMA]: {keyCode: keyCodes.COMMA, key: ',', code: 'Comma'},\n};\n\n/** A `TestElement` implementation for unit tests. */\nexport class UnitTestElement implements TestElement {\n  constructor(\n    readonly element: Element,\n    private _stabilize: () => Promise<void>,\n  ) {}\n\n  /** Blur the element. */\n  async blur(): Promise<void> {\n    triggerBlur(this.element as HTMLElement);\n    await this._stabilize();\n  }\n\n  /** Clear the element's input (for input and textarea elements only). */\n  async clear(): Promise<void> {\n    if (!isTextInput(this.element)) {\n      throw Error('Attempting to clear an invalid element');\n    }\n    clearElement(this.element);\n    await this._stabilize();\n  }\n\n  /**\n   * Click the element at the default location for the current environment. If you need to guarantee\n   * the element is clicked at a specific location, consider using `click('center')` or\n   * `click(x, y)` instead.\n   */\n  click(modifiers?: ModifierKeys): Promise<void>;\n  /** Click the element at the element's center. */\n  click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\n  /**\n   * Click the element at the specified coordinates relative to the top-left of the element.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   * @param modifiers Modifier keys held while clicking\n   */\n  click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n  async click(\n    ...args: [ModifierKeys?] | ['center', ModifierKeys?] | [number, number, ModifierKeys?]\n  ): Promise<void> {\n    const isDisabled = (this.element as Partial<{disabled?: boolean}>).disabled === true;\n\n    // If the element is `disabled` and has a `disabled` property, we emit the mouse event\n    // sequence but not dispatch the `click` event. This is necessary to keep the behavior\n    // consistent with an actual user interaction. The click event is not necessarily\n    // automatically prevented by the browser. There is mismatch between Firefox and Chromium:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=329509.\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1115661.\n    await this._dispatchMouseEventSequence(isDisabled ? null : 'click', args, 0);\n    await this._stabilize();\n  }\n\n  /**\n   * Right clicks on the element at the specified coordinates relative to the top-left of it.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   * @param modifiers Modifier keys held while clicking\n   */\n  rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n  async rightClick(\n    ...args: [ModifierKeys?] | ['center', ModifierKeys?] | [number, number, ModifierKeys?]\n  ): Promise<void> {\n    await this._dispatchMouseEventSequence('contextmenu', args, 2);\n    await this._stabilize();\n  }\n\n  /** Focus the element. */\n  async focus(): Promise<void> {\n    triggerFocus(this.element as HTMLElement);\n    await this._stabilize();\n  }\n\n  /** Get the computed value of the given CSS property for the element. */\n  async getCssValue(property: string): Promise<string> {\n    await this._stabilize();\n    // TODO(mmalerba): Consider adding value normalization if we run into common cases where its\n    //  needed.\n    return getComputedStyle(this.element).getPropertyValue(property);\n  }\n\n  /** Hovers the mouse over the element. */\n  async hover(): Promise<void> {\n    this._dispatchPointerEventIfSupported('pointerenter');\n    dispatchMouseEvent(this.element, 'mouseover');\n    dispatchMouseEvent(this.element, 'mouseenter');\n    await this._stabilize();\n  }\n\n  /** Moves the mouse away from the element. */\n  async mouseAway(): Promise<void> {\n    this._dispatchPointerEventIfSupported('pointerleave');\n    dispatchMouseEvent(this.element, 'mouseout');\n    dispatchMouseEvent(this.element, 'mouseleave');\n    await this._stabilize();\n  }\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value. Note that this cannot\n   * reproduce native browser behavior for keyboard shortcuts such as Tab, Ctrl + A, etc.\n   */\n  async sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  async sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n  async sendKeys(...modifiersAndKeys: any[]): Promise<void> {\n    const args = modifiersAndKeys.map(k => (typeof k === 'number' ? keyMap[k as TestKey] : k));\n    typeInElement(this.element as HTMLElement, ...args);\n    await this._stabilize();\n  }\n\n  /**\n   * Gets the text from the element.\n   * @param options Options that affect what text is included.\n   */\n  async text(options?: TextOptions): Promise<string> {\n    await this._stabilize();\n    if (options?.exclude) {\n      return _getTextWithExcludedElements(this.element, options.exclude);\n    }\n    return (this.element.textContent || '').trim();\n  }\n\n  /**\n   * Sets the value of a `contenteditable` element.\n   * @param value Value to be set on the element.\n   */\n  async setContenteditableValue(value: string): Promise<void> {\n    const contenteditableAttr = await this.getAttribute('contenteditable');\n\n    if (\n      contenteditableAttr !== '' &&\n      contenteditableAttr !== 'true' &&\n      contenteditableAttr !== 'plaintext-only'\n    ) {\n      throw new Error('setContenteditableValue can only be called on a `contenteditable` element.');\n    }\n\n    await this._stabilize();\n    this.element.textContent = value;\n  }\n\n  /** Gets the value for the given attribute from the element. */\n  async getAttribute(name: string): Promise<string | null> {\n    await this._stabilize();\n    return this.element.getAttribute(name);\n  }\n\n  /** Checks whether the element has the given class. */\n  async hasClass(name: string): Promise<boolean> {\n    await this._stabilize();\n    return this.element.classList.contains(name);\n  }\n\n  /** Gets the dimensions of the element. */\n  async getDimensions(): Promise<ElementDimensions> {\n    await this._stabilize();\n    return this.element.getBoundingClientRect();\n  }\n\n  /** Gets the value of a property of an element. */\n  async getProperty<T = any>(name: string): Promise<T> {\n    await this._stabilize();\n    return (this.element as any)[name];\n  }\n\n  /** Sets the value of a property of an input. */\n  async setInputValue(value: string): Promise<void> {\n    (this.element as any).value = value;\n    await this._stabilize();\n  }\n\n  /** Selects the options at the specified indexes inside of a native `select` element. */\n  async selectOptions(...optionIndexes: number[]): Promise<void> {\n    let hasChanged = false;\n    const options = this.element.querySelectorAll('option');\n    const indexes = new Set(optionIndexes); // Convert to a set to remove duplicates.\n\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      const wasSelected = option.selected;\n\n      // We have to go through `option.selected`, because `HTMLSelectElement.value` doesn't\n      // allow for multiple options to be selected, even in `multiple` mode.\n      option.selected = indexes.has(i);\n\n      if (option.selected !== wasSelected) {\n        hasChanged = true;\n        dispatchFakeEvent(this.element, 'change');\n      }\n    }\n\n    if (hasChanged) {\n      await this._stabilize();\n    }\n  }\n\n  /** Checks whether this element matches the given selector. */\n  async matchesSelector(selector: string): Promise<boolean> {\n    await this._stabilize();\n    const elementPrototype = Element.prototype as any;\n    return (elementPrototype['matches'] || elementPrototype['msMatchesSelector']).call(\n      this.element,\n      selector,\n    );\n  }\n\n  /** Checks whether the element is focused. */\n  async isFocused(): Promise<boolean> {\n    await this._stabilize();\n    return document.activeElement === this.element;\n  }\n\n  /**\n   * Dispatches an event with a particular name.\n   * @param name Name of the event to be dispatched.\n   */\n  async dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void> {\n    const event = createFakeEvent(name);\n\n    if (data) {\n      // tslint:disable-next-line:ban Have to use `Object.assign` to preserve the original object.\n      Object.assign(event, data);\n    }\n\n    dispatchEvent(this.element, event);\n    await this._stabilize();\n  }\n\n  /**\n   * Dispatches a pointer event on the current element if the browser supports it.\n   * @param name Name of the pointer event to be dispatched.\n   * @param clientX Coordinate of the user's pointer along the X axis.\n   * @param clientY Coordinate of the user's pointer along the Y axis.\n   * @param button Mouse button that should be pressed when dispatching the event.\n   */\n  private _dispatchPointerEventIfSupported(\n    name: string,\n    clientX?: number,\n    clientY?: number,\n    offsetX?: number,\n    offsetY?: number,\n    button?: number,\n  ) {\n    // The latest versions of all browsers we support have the new `PointerEvent` API.\n    // Though since we capture the two most recent versions of these browsers, we also\n    // need to support Safari 12 at time of writing. Safari 12 does not have support for this,\n    // so we need to conditionally create and dispatch these events based on feature detection.\n    if (typeof PointerEvent !== 'undefined' && PointerEvent) {\n      dispatchPointerEvent(this.element, name, clientX, clientY, offsetX, offsetY, {\n        isPrimary: true,\n        button,\n      });\n    }\n  }\n\n  /**\n   * Dispatches all the events that are part of a mouse event sequence\n   * and then emits a given primary event at the end, if speciifed.\n   */\n  private async _dispatchMouseEventSequence(\n    primaryEventName: string | null,\n    args: [ModifierKeys?] | ['center', ModifierKeys?] | [number, number, ModifierKeys?],\n    button?: number,\n  ) {\n    let clientX: number | undefined = undefined;\n    let clientY: number | undefined = undefined;\n    let offsetX: number | undefined = undefined;\n    let offsetY: number | undefined = undefined;\n    let modifiers: ModifierKeys = {};\n\n    if (args.length && typeof args[args.length - 1] === 'object') {\n      modifiers = args.pop() as ModifierKeys;\n    }\n\n    if (args.length) {\n      const {left, top, width, height} = await this.getDimensions();\n      offsetX = args[0] === 'center' ? width / 2 : (args[0] as number);\n      offsetY = args[0] === 'center' ? height / 2 : (args[1] as number);\n\n      // Round the computed click position as decimal pixels are not\n      // supported by mouse events and could lead to unexpected results.\n      clientX = Math.round(left + offsetX);\n      clientY = Math.round(top + offsetY);\n    }\n\n    this._dispatchPointerEventIfSupported(\n      'pointerdown',\n      clientX,\n      clientY,\n      offsetX,\n      offsetY,\n      button,\n    );\n    dispatchMouseEvent(\n      this.element,\n      'mousedown',\n      clientX,\n      clientY,\n      offsetX,\n      offsetY,\n      button,\n      modifiers,\n    );\n    this._dispatchPointerEventIfSupported('pointerup', clientX, clientY, offsetX, offsetY, button);\n    dispatchMouseEvent(\n      this.element,\n      'mouseup',\n      clientX,\n      clientY,\n      offsetX,\n      offsetY,\n      button,\n      modifiers,\n    );\n\n    // If a primary event name is specified, emit it after the mouse event sequence.\n    if (primaryEventName !== null) {\n      dispatchMouseEvent(\n        this.element,\n        primaryEventName,\n        clientX,\n        clientY,\n        offsetX,\n        offsetY,\n        button,\n        modifiers,\n      );\n    }\n\n    // This call to _stabilize should not be needed since the callers will already do that them-\n    // selves. Nevertheless it breaks some tests in g3 without it. It needs to be investigated\n    // why removing breaks those tests.\n    // See: https://github.com/angular/components/pull/20758/files#r520886256.\n    await this._stabilize();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  handleAutoChangeDetectionStatus,\n  HarnessEnvironment,\n  HarnessLoader,\n  stopHandlingAutoChangeDetectionStatus,\n  TestElement,\n} from '../../testing';\nimport {ComponentFixture, flush} from '@angular/core/testing';\nimport {Observable} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {TaskState, TaskStateZoneInterceptor} from './task-state-zone-interceptor';\nimport {UnitTestElement} from './unit-test-element';\n\n/** Options to configure the environment. */\nexport interface TestbedHarnessEnvironmentOptions {\n  /** The query function used to find DOM elements. */\n  queryFn: (selector: string, root: Element) => Iterable<Element> | ArrayLike<Element>;\n}\n\n/** The default environment options. */\nconst defaultEnvironmentOptions: TestbedHarnessEnvironmentOptions = {\n  queryFn: (selector: string, root: Element) => root.querySelectorAll(selector),\n};\n\n/** Whether auto change detection is currently disabled. */\nlet disableAutoChangeDetection = false;\n\n/**\n * The set of non-destroyed fixtures currently being used by `TestbedHarnessEnvironment` instances.\n */\nconst activeFixtures = new Set<ComponentFixture<unknown>>();\n\n/**\n * Installs a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to handle change detection batching for.\n */\nfunction installAutoChangeDetectionStatusHandler(fixture: ComponentFixture<unknown>) {\n  if (!activeFixtures.size) {\n    handleAutoChangeDetectionStatus(({isDisabled, onDetectChangesNow}) => {\n      disableAutoChangeDetection = isDisabled;\n      if (onDetectChangesNow) {\n        Promise.all(Array.from(activeFixtures).map(detectChanges)).then(onDetectChangesNow);\n      }\n    });\n  }\n  activeFixtures.add(fixture);\n}\n\n/**\n * Uninstalls a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to stop handling change detection batching for.\n */\nfunction uninstallAutoChangeDetectionStatusHandler(fixture: ComponentFixture<unknown>) {\n  activeFixtures.delete(fixture);\n  if (!activeFixtures.size) {\n    stopHandlingAutoChangeDetectionStatus();\n  }\n}\n\n/** Whether we are currently in the fake async zone. */\nfunction isInFakeAsyncZone() {\n  return typeof Zone !== 'undefined' && Zone!.current.get('FakeAsyncTestZoneSpec') != null;\n}\n\n/**\n * Triggers change detection for a specific fixture.\n * @param fixture The fixture to trigger change detection for.\n */\nasync function detectChanges(fixture: ComponentFixture<unknown>) {\n  fixture.detectChanges();\n  if (isInFakeAsyncZone()) {\n    flush();\n  } else {\n    await fixture.whenStable();\n  }\n}\n\n/** A `HarnessEnvironment` implementation for Angular's Testbed. */\nexport class TestbedHarnessEnvironment extends HarnessEnvironment<Element> {\n  /** Whether the environment has been destroyed. */\n  private _destroyed = false;\n\n  /** Observable that emits whenever the test task state changes. */\n  private _taskState?: Observable<TaskState>;\n\n  /** The options for this environment. */\n  private _options: TestbedHarnessEnvironmentOptions;\n\n  /** Environment stabilization callback passed to the created test elements. */\n  private _stabilizeCallback: () => Promise<void>;\n\n  protected constructor(\n    rawRootElement: Element,\n    private _fixture: ComponentFixture<unknown>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ) {\n    super(rawRootElement);\n    this._options = {...defaultEnvironmentOptions, ...options};\n    if (typeof Zone !== 'undefined') {\n      this._taskState = TaskStateZoneInterceptor.setup();\n    }\n    this._stabilizeCallback = () => this.forceStabilize();\n    installAutoChangeDetectionStatusHandler(_fixture);\n    _fixture.componentRef.onDestroy(() => {\n      uninstallAutoChangeDetectionStatusHandler(_fixture);\n      this._destroyed = true;\n    });\n  }\n\n  /** Creates a `HarnessLoader` rooted at the given fixture's root element. */\n  static loader(\n    fixture: ComponentFixture<unknown>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ): HarnessLoader {\n    return new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n  }\n\n  /**\n   * Creates a `HarnessLoader` at the document root. This can be used if harnesses are\n   * located outside of a fixture (e.g. overlays appended to the document body).\n   */\n  static documentRootLoader(\n    fixture: ComponentFixture<unknown>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ): HarnessLoader {\n    return new TestbedHarnessEnvironment(document.body, fixture, options);\n  }\n\n  /** Gets the native DOM element corresponding to the given TestElement. */\n  static getNativeElement(el: TestElement): Element {\n    if (el instanceof UnitTestElement) {\n      return el.element;\n    }\n    throw Error('This TestElement was not created by the TestbedHarnessEnvironment');\n  }\n\n  /**\n   * Creates an instance of the given harness type, using the fixture's root element as the\n   * harness's host element. This method should be used when creating a harness for the root element\n   * of a fixture, as components do not have the correct selector when they are created as the root\n   * of the fixture.\n   */\n  static async harnessForFixture<T extends ComponentHarness>(\n    fixture: ComponentFixture<unknown>,\n    harnessType: ComponentHarnessConstructor<T>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ): Promise<T> {\n    const environment = new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n    await environment.forceStabilize();\n    return environment.createComponentHarness(harnessType, fixture.nativeElement);\n  }\n\n  /**\n   * Flushes change detection and async tasks captured in the Angular zone.\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\n   * cases where it is needed to fully flush animation events.\n   */\n  async forceStabilize(): Promise<void> {\n    if (!disableAutoChangeDetection) {\n      if (this._destroyed) {\n        throw Error('Harness is attempting to use a fixture that has already been destroyed.');\n      }\n\n      await detectChanges(this._fixture);\n    }\n  }\n\n  /**\n   * Waits for all scheduled or running async tasks to complete. This allows harness\n   * authors to wait for async tasks outside of the Angular zone.\n   */\n  async waitForTasksOutsideAngular(): Promise<void> {\n    // If we run in the fake async zone, we run \"flush\" to run any scheduled tasks. This\n    // ensures that the harnesses behave inside of the FakeAsyncTestZone similar to the\n    // \"AsyncTestZone\" and the root zone (i.e. neither fakeAsync or async). Note that we\n    // cannot just rely on the task state observable to become stable because the state will\n    // never change. This is because the task queue will be only drained if the fake async\n    // zone is being flushed.\n    if (isInFakeAsyncZone()) {\n      flush();\n    }\n\n    // Wait until the task queue has been drained and the zone is stable. Note that\n    // we cannot rely on \"fixture.whenStable\" since it does not catch tasks scheduled\n    // outside of the Angular zone. For test harnesses, we want to ensure that the\n    // app is fully stabilized and therefore need to use our own zone interceptor.\n    await this._taskState?.pipe(takeWhile(state => !state.stable)).toPromise();\n  }\n\n  /** Gets the root element for the document. */\n  protected getDocumentRoot(): Element {\n    return document.body;\n  }\n\n  /** Creates a `TestElement` from a raw element. */\n  protected createTestElement(element: Element): TestElement {\n    return new UnitTestElement(element, this._stabilizeCallback);\n  }\n\n  /** Creates a `HarnessLoader` rooted at the given raw element. */\n  protected createEnvironment(element: Element): HarnessEnvironment<Element> {\n    return new TestbedHarnessEnvironment(element, this._fixture, this._options);\n  }\n\n  /**\n   * Gets a list of all elements matching the given selector under this environment's root element.\n   */\n  protected async getAllRawElements(selector: string): Promise<Element[]> {\n    await this.forceStabilize();\n    return Array.from(this._options.queryFn(selector, this.rawRootElement));\n  }\n}\n"],"names":["TaskStateZoneInterceptor","_lastState","onHasTask","delegate","current","target","hasTaskState","_stateSubject","next","_getTaskStateFromInternalZoneState","stable","state","macroTask","microTask","setup","Error","createMouseEvent","type","clientX","clientY","offsetX","offsetY","button","modifiers","event","MouseEvent","composed","view","window","detail","screenX","screenY","ctrlKey","control","altKey","alt","shiftKey","shift","metaKey","meta","defineReadonlyEventProperty","options","node","dispatchEvent","dispatchFakeEvent","bubbles","createFakeEvent","dispatchKeyboardEvent","keyCode","key","code","element","removeEventListener","handler","eventFired","triggerFocus","triggerFocusChange","charsToCodes","getKeyboardEventCode","char","length","toUpperCase","charCode","nodeName","toLowerCase","undefined","first","rest","modifiersAndKeys","slice","isTextInput","inputType","getAttribute","map","k","split","c","charCodeAt","getNoKeysSpecifiedError","TestKey","TAB","keyCodes","ENTER","SHIFT","CONTROL","ALT","ESCAPE","HOME","LEFT_ARROW","RIGHT_ARROW","DOWN_ARROW","INSERT","DELETE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","META","COMMA","UnitTestElement","constructor","_stabilize","blur","triggerBlur","clear","clearElement","click","args","isDisabled","disabled","rightClick","focus","getComputedStyle","getPropertyValue","property","hover","_dispatchPointerEventIfSupported","dispatchMouseEvent","mouseAway","keyMap","text","exclude","contenteditableAttr","textContent","value","name","classList","contains","getDimensions","getBoundingClientRect","getProperty","querySelectorAll","Set","optionIndexes","i","wasSelected","option","selected","indexes","has","hasChanged","defaultEnvironmentOptions","queryFn","selector","root","disableAutoChangeDetection","activeFixtures","size","handleAutoChangeDetectionStatus","onDetectChangesNow","add","fixture","uninstallAutoChangeDetectionStatusHandler","delete","stopHandlingAutoChangeDetectionStatus","isInFakeAsyncZone","Zone","get","detectChanges","whenStable","TestbedHarnessEnvironment","HarnessEnvironment","_stabilizeCallback","rawRootElement","_fixture","_options","_taskState","installAutoChangeDetectionStatusHandler","_destroyed","document","body","forceStabilize"],"mappings":"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"}
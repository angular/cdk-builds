{"version":3,"file":"testbed.mjs","sources":["../../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/testing/testbed/task-state-zone-interceptor.ts","../../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/testing/testbed/unit-test-element.ts","../../../../../../k8-fastbuild-ST-46c76129e412/bin/src/cdk/testing/testbed/testbed-harness-environment.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ProxyZone, ProxyZoneStatic} from './proxy-zone-types';\n\n/** Current state of the intercepted zone. */\nexport interface TaskState {\n  /** Whether the zone is stable (i.e. no microtasks and macrotasks). */\n  stable: boolean;\n}\n\n/** Unique symbol that is used to patch a property to a proxy zone. */\nconst stateObservableSymbol = Symbol('ProxyZone_PATCHED#stateObservable');\n\n/** Type that describes a potentially patched proxy zone instance. */\ntype PatchedProxyZone = ProxyZone & {\n  [stateObservableSymbol]: undefined | Observable<TaskState>;\n};\n\n/**\n * Interceptor that can be set up in a `ProxyZone` instance. The interceptor\n * will keep track of the task state and emit whenever the state changes.\n *\n * This serves as a workaround for https://github.com/angular/angular/issues/32896.\n */\nexport class TaskStateZoneInterceptor {\n  private _lastState: HasTaskState | null = null;\n\n  /** Subject that can be used to emit a new state change. */\n  private readonly _stateSubject = new BehaviorSubject<TaskState>(\n    this._lastState ? this._getTaskStateFromInternalZoneState(this._lastState) : {stable: true},\n  );\n\n  /** Public observable that emits whenever the task state changes. */\n  readonly state: Observable<TaskState> = this._stateSubject;\n\n  constructor(lastState: HasTaskState | null) {\n    this._lastState = lastState;\n  }\n\n  /** This will be called whenever the task state changes in the intercepted zone. */\n  onHasTask(delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) {\n    if (current === target) {\n      this._stateSubject.next(this._getTaskStateFromInternalZoneState(hasTaskState));\n    }\n  }\n\n  /** Gets the task state from the internal ZoneJS task state. */\n  private _getTaskStateFromInternalZoneState(state: HasTaskState): TaskState {\n    return {stable: !state.macroTask && !state.microTask};\n  }\n\n  /**\n   * Sets up the custom task state Zone interceptor in the  `ProxyZone`. Throws if\n   * no `ProxyZone` could be found.\n   * @returns an observable that emits whenever the task state changes.\n   */\n  static setup(): Observable<TaskState> {\n    if (Zone === undefined) {\n      throw Error(\n        'Could not find ZoneJS. For test harnesses running in TestBed, ' +\n          'ZoneJS needs to be installed.',\n      );\n    }\n\n    // tslint:disable-next-line:variable-name\n    const ProxyZoneSpec = (Zone as any)['ProxyZoneSpec'] as ProxyZoneStatic | undefined;\n\n    // If there is no \"ProxyZoneSpec\" installed, we throw an error and recommend\n    // setting up the proxy zone by pulling in the testing bundle.\n    if (!ProxyZoneSpec) {\n      throw Error(\n        'ProxyZoneSpec is needed for the test harnesses but could not be found. ' +\n          'Please make sure that your environment includes zone.js/dist/zone-testing.js',\n      );\n    }\n\n    // Ensure that there is a proxy zone instance set up, and get\n    // a reference to the instance if present.\n    const zoneSpec = ProxyZoneSpec.assertPresent() as PatchedProxyZone;\n\n    // If there already is a delegate registered in the proxy zone, and it\n    // is type of the custom task state interceptor, we just use that state\n    // observable. This allows us to only intercept Zone once per test\n    // (similar to how `fakeAsync` or `async` work).\n    if (zoneSpec[stateObservableSymbol]) {\n      return zoneSpec[stateObservableSymbol]!;\n    }\n\n    // Since we intercept on environment creation and the fixture has been\n    // created before, we might have missed tasks scheduled before. Fortunately\n    // the proxy zone keeps track of the previous task state, so we can just pass\n    // this as initial state to the task zone interceptor.\n    const interceptor = new TaskStateZoneInterceptor(zoneSpec.lastTaskState);\n    const zoneSpecOnHasTask = zoneSpec.onHasTask.bind(zoneSpec);\n\n    // We setup the task state interceptor in the `ProxyZone`. Note that we cannot register\n    // the interceptor as a new proxy zone delegate because it would mean that other zone\n    // delegates (e.g. `FakeAsyncTestZone` or `AsyncTestZone`) can accidentally overwrite/disable\n    // our interceptor. Since we just intend to monitor the task state of the proxy zone, it is\n    // sufficient to just patch the proxy zone. This also avoids that we interfere with the task\n    // queue scheduling logic.\n    zoneSpec.onHasTask = function (...args: [ZoneDelegate, Zone, Zone, HasTaskState]) {\n      zoneSpecOnHasTask(...args);\n      interceptor.onHasTask(...args);\n    };\n\n    return (zoneSpec[stateObservableSymbol] = interceptor.state);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport * as keyCodes from '../../keycodes';\nimport {\n  _getTextWithExcludedElements,\n  ElementDimensions,\n  ModifierKeys,\n  TestElement,\n  TestKey,\n  TextOptions,\n  EventData,\n} from '../../testing';\nimport {\n  clearElement,\n  createFakeEvent,\n  dispatchFakeEvent,\n  dispatchMouseEvent,\n  dispatchPointerEvent,\n  isTextInput,\n  triggerBlur,\n  triggerFocus,\n  typeInElement,\n  dispatchEvent,\n} from './fake-events';\n\n/** Maps `TestKey` constants to the `keyCode` and `key` values used by native browser events. */\nconst keyMap = {\n  [TestKey.BACKSPACE]: {keyCode: keyCodes.BACKSPACE, key: 'Backspace', code: 'Backspace'},\n  [TestKey.TAB]: {keyCode: keyCodes.TAB, key: 'Tab', code: 'Tab'},\n  [TestKey.ENTER]: {keyCode: keyCodes.ENTER, key: 'Enter', code: 'Enter'},\n  [TestKey.SHIFT]: {keyCode: keyCodes.SHIFT, key: 'Shift', code: 'ShiftLeft'},\n  [TestKey.CONTROL]: {keyCode: keyCodes.CONTROL, key: 'Control', code: 'ControlLeft'},\n  [TestKey.ALT]: {keyCode: keyCodes.ALT, key: 'Alt', code: 'AltLeft'},\n  [TestKey.ESCAPE]: {keyCode: keyCodes.ESCAPE, key: 'Escape', code: 'Escape'},\n  [TestKey.PAGE_UP]: {keyCode: keyCodes.PAGE_UP, key: 'PageUp', code: 'PageUp'},\n  [TestKey.PAGE_DOWN]: {keyCode: keyCodes.PAGE_DOWN, key: 'PageDown', code: 'PageDown'},\n  [TestKey.END]: {keyCode: keyCodes.END, key: 'End', code: 'End'},\n  [TestKey.HOME]: {keyCode: keyCodes.HOME, key: 'Home', code: 'Home'},\n  [TestKey.LEFT_ARROW]: {keyCode: keyCodes.LEFT_ARROW, key: 'ArrowLeft', code: 'ArrowLeft'},\n  [TestKey.UP_ARROW]: {keyCode: keyCodes.UP_ARROW, key: 'ArrowUp', code: 'ArrowUp'},\n  [TestKey.RIGHT_ARROW]: {keyCode: keyCodes.RIGHT_ARROW, key: 'ArrowRight', code: 'ArrowRight'},\n  [TestKey.DOWN_ARROW]: {keyCode: keyCodes.DOWN_ARROW, key: 'ArrowDown', code: 'ArrowDown'},\n  [TestKey.INSERT]: {keyCode: keyCodes.INSERT, key: 'Insert', code: 'Insert'},\n  [TestKey.DELETE]: {keyCode: keyCodes.DELETE, key: 'Delete', code: 'Delete'},\n  [TestKey.F1]: {keyCode: keyCodes.F1, key: 'F1', code: 'F1'},\n  [TestKey.F2]: {keyCode: keyCodes.F2, key: 'F2', code: 'F2'},\n  [TestKey.F3]: {keyCode: keyCodes.F3, key: 'F3', code: 'F3'},\n  [TestKey.F4]: {keyCode: keyCodes.F4, key: 'F4', code: 'F4'},\n  [TestKey.F5]: {keyCode: keyCodes.F5, key: 'F5', code: 'F5'},\n  [TestKey.F6]: {keyCode: keyCodes.F6, key: 'F6', code: 'F6'},\n  [TestKey.F7]: {keyCode: keyCodes.F7, key: 'F7', code: 'F7'},\n  [TestKey.F8]: {keyCode: keyCodes.F8, key: 'F8', code: 'F8'},\n  [TestKey.F9]: {keyCode: keyCodes.F9, key: 'F9', code: 'F9'},\n  [TestKey.F10]: {keyCode: keyCodes.F10, key: 'F10', code: 'F10'},\n  [TestKey.F11]: {keyCode: keyCodes.F11, key: 'F11', code: 'F11'},\n  [TestKey.F12]: {keyCode: keyCodes.F12, key: 'F12', code: 'F12'},\n  [TestKey.META]: {keyCode: keyCodes.META, key: 'Meta', code: 'MetaLeft'},\n  [TestKey.COMMA]: {keyCode: keyCodes.COMMA, key: ',', code: 'Comma'},\n};\n\n/** A `TestElement` implementation for unit tests. */\nexport class UnitTestElement implements TestElement {\n  constructor(\n    readonly element: Element,\n    private _stabilize: () => Promise<void>,\n  ) {}\n\n  /** Blur the element. */\n  async blur(): Promise<void> {\n    triggerBlur(this.element as HTMLElement);\n    await this._stabilize();\n  }\n\n  /** Clear the element's input (for input and textarea elements only). */\n  async clear(): Promise<void> {\n    if (!isTextInput(this.element)) {\n      throw Error('Attempting to clear an invalid element');\n    }\n    clearElement(this.element);\n    await this._stabilize();\n  }\n\n  /**\n   * Click the element at the default location for the current environment. If you need to guarantee\n   * the element is clicked at a specific location, consider using `click('center')` or\n   * `click(x, y)` instead.\n   */\n  click(modifiers?: ModifierKeys): Promise<void>;\n  /** Click the element at the element's center. */\n  click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\n  /**\n   * Click the element at the specified coordinates relative to the top-left of the element.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   * @param modifiers Modifier keys held while clicking\n   */\n  click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n  async click(\n    ...args: [ModifierKeys?] | ['center', ModifierKeys?] | [number, number, ModifierKeys?]\n  ): Promise<void> {\n    const isDisabled = (this.element as Partial<{disabled?: boolean}>).disabled === true;\n\n    // If the element is `disabled` and has a `disabled` property, we emit the mouse event\n    // sequence but not dispatch the `click` event. This is necessary to keep the behavior\n    // consistent with an actual user interaction. The click event is not necessarily\n    // automatically prevented by the browser. There is mismatch between Firefox and Chromium:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=329509.\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1115661.\n    await this._dispatchMouseEventSequence(isDisabled ? null : 'click', args, 0);\n    await this._stabilize();\n  }\n\n  /**\n   * Right clicks on the element at the specified coordinates relative to the top-left of it.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   * @param modifiers Modifier keys held while clicking\n   */\n  rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n  async rightClick(\n    ...args: [ModifierKeys?] | ['center', ModifierKeys?] | [number, number, ModifierKeys?]\n  ): Promise<void> {\n    await this._dispatchMouseEventSequence('contextmenu', args, 2);\n    await this._stabilize();\n  }\n\n  /** Focus the element. */\n  async focus(): Promise<void> {\n    triggerFocus(this.element as HTMLElement);\n    await this._stabilize();\n  }\n\n  /** Get the computed value of the given CSS property for the element. */\n  async getCssValue(property: string): Promise<string> {\n    await this._stabilize();\n    // TODO(mmalerba): Consider adding value normalization if we run into common cases where its\n    //  needed.\n    return getComputedStyle(this.element).getPropertyValue(property);\n  }\n\n  /** Hovers the mouse over the element. */\n  async hover(): Promise<void> {\n    this._dispatchPointerEventIfSupported('pointerenter');\n    dispatchMouseEvent(this.element, 'mouseover');\n    dispatchMouseEvent(this.element, 'mouseenter');\n    await this._stabilize();\n  }\n\n  /** Moves the mouse away from the element. */\n  async mouseAway(): Promise<void> {\n    this._dispatchPointerEventIfSupported('pointerleave');\n    dispatchMouseEvent(this.element, 'mouseout');\n    dispatchMouseEvent(this.element, 'mouseleave');\n    await this._stabilize();\n  }\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value. Note that this cannot\n   * reproduce native browser behavior for keyboard shortcuts such as Tab, Ctrl + A, etc.\n   */\n  async sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  async sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n  async sendKeys(...modifiersAndKeys: any[]): Promise<void> {\n    const args = modifiersAndKeys.map(k => (typeof k === 'number' ? keyMap[k as TestKey] : k));\n    typeInElement(this.element as HTMLElement, ...args);\n    await this._stabilize();\n  }\n\n  /**\n   * Gets the text from the element.\n   * @param options Options that affect what text is included.\n   */\n  async text(options?: TextOptions): Promise<string> {\n    await this._stabilize();\n    if (options?.exclude) {\n      return _getTextWithExcludedElements(this.element, options.exclude);\n    }\n    return (this.element.textContent || '').trim();\n  }\n\n  /**\n   * Sets the value of a `contenteditable` element.\n   * @param value Value to be set on the element.\n   */\n  async setContenteditableValue(value: string): Promise<void> {\n    const contenteditableAttr = await this.getAttribute('contenteditable');\n\n    if (\n      contenteditableAttr !== '' &&\n      contenteditableAttr !== 'true' &&\n      contenteditableAttr !== 'plaintext-only'\n    ) {\n      throw new Error('setContenteditableValue can only be called on a `contenteditable` element.');\n    }\n\n    await this._stabilize();\n    this.element.textContent = value;\n  }\n\n  /** Gets the value for the given attribute from the element. */\n  async getAttribute(name: string): Promise<string | null> {\n    await this._stabilize();\n    return this.element.getAttribute(name);\n  }\n\n  /** Checks whether the element has the given class. */\n  async hasClass(name: string): Promise<boolean> {\n    await this._stabilize();\n    return this.element.classList.contains(name);\n  }\n\n  /** Gets the dimensions of the element. */\n  async getDimensions(): Promise<ElementDimensions> {\n    await this._stabilize();\n    return this.element.getBoundingClientRect();\n  }\n\n  /** Gets the value of a property of an element. */\n  async getProperty<T = any>(name: string): Promise<T> {\n    await this._stabilize();\n    return (this.element as any)[name];\n  }\n\n  /** Sets the value of a property of an input. */\n  async setInputValue(value: string): Promise<void> {\n    (this.element as any).value = value;\n    await this._stabilize();\n  }\n\n  /** Selects the options at the specified indexes inside of a native `select` element. */\n  async selectOptions(...optionIndexes: number[]): Promise<void> {\n    let hasChanged = false;\n    const options = this.element.querySelectorAll('option');\n    const indexes = new Set(optionIndexes); // Convert to a set to remove duplicates.\n\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      const wasSelected = option.selected;\n\n      // We have to go through `option.selected`, because `HTMLSelectElement.value` doesn't\n      // allow for multiple options to be selected, even in `multiple` mode.\n      option.selected = indexes.has(i);\n\n      if (option.selected !== wasSelected) {\n        hasChanged = true;\n        dispatchFakeEvent(this.element, 'change');\n      }\n    }\n\n    if (hasChanged) {\n      await this._stabilize();\n    }\n  }\n\n  /** Checks whether this element matches the given selector. */\n  async matchesSelector(selector: string): Promise<boolean> {\n    await this._stabilize();\n    const elementPrototype = Element.prototype as any;\n    return (elementPrototype['matches'] || elementPrototype['msMatchesSelector']).call(\n      this.element,\n      selector,\n    );\n  }\n\n  /** Checks whether the element is focused. */\n  async isFocused(): Promise<boolean> {\n    await this._stabilize();\n    return document.activeElement === this.element;\n  }\n\n  /**\n   * Dispatches an event with a particular name.\n   * @param name Name of the event to be dispatched.\n   */\n  async dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void> {\n    const event = createFakeEvent(name);\n\n    if (data) {\n      // tslint:disable-next-line:ban Have to use `Object.assign` to preserve the original object.\n      Object.assign(event, data);\n    }\n\n    dispatchEvent(this.element, event);\n    await this._stabilize();\n  }\n\n  /**\n   * Dispatches a pointer event on the current element if the browser supports it.\n   * @param name Name of the pointer event to be dispatched.\n   * @param clientX Coordinate of the user's pointer along the X axis.\n   * @param clientY Coordinate of the user's pointer along the Y axis.\n   * @param button Mouse button that should be pressed when dispatching the event.\n   */\n  private _dispatchPointerEventIfSupported(\n    name: string,\n    clientX?: number,\n    clientY?: number,\n    offsetX?: number,\n    offsetY?: number,\n    button?: number,\n  ) {\n    // The latest versions of all browsers we support have the new `PointerEvent` API.\n    // Though since we capture the two most recent versions of these browsers, we also\n    // need to support Safari 12 at time of writing. Safari 12 does not have support for this,\n    // so we need to conditionally create and dispatch these events based on feature detection.\n    if (typeof PointerEvent !== 'undefined' && PointerEvent) {\n      dispatchPointerEvent(this.element, name, clientX, clientY, offsetX, offsetY, {\n        isPrimary: true,\n        button,\n      });\n    }\n  }\n\n  /**\n   * Dispatches all the events that are part of a mouse event sequence\n   * and then emits a given primary event at the end, if speciifed.\n   */\n  private async _dispatchMouseEventSequence(\n    primaryEventName: string | null,\n    args: [ModifierKeys?] | ['center', ModifierKeys?] | [number, number, ModifierKeys?],\n    button?: number,\n  ) {\n    let clientX: number | undefined = undefined;\n    let clientY: number | undefined = undefined;\n    let offsetX: number | undefined = undefined;\n    let offsetY: number | undefined = undefined;\n    let modifiers: ModifierKeys = {};\n\n    if (args.length && typeof args[args.length - 1] === 'object') {\n      modifiers = args.pop() as ModifierKeys;\n    }\n\n    if (args.length) {\n      const {left, top, width, height} = await this.getDimensions();\n      offsetX = args[0] === 'center' ? width / 2 : (args[0] as number);\n      offsetY = args[0] === 'center' ? height / 2 : (args[1] as number);\n\n      // Round the computed click position as decimal pixels are not\n      // supported by mouse events and could lead to unexpected results.\n      clientX = Math.round(left + offsetX);\n      clientY = Math.round(top + offsetY);\n    }\n\n    this._dispatchPointerEventIfSupported(\n      'pointerdown',\n      clientX,\n      clientY,\n      offsetX,\n      offsetY,\n      button,\n    );\n    dispatchMouseEvent(\n      this.element,\n      'mousedown',\n      clientX,\n      clientY,\n      offsetX,\n      offsetY,\n      button,\n      modifiers,\n    );\n    this._dispatchPointerEventIfSupported('pointerup', clientX, clientY, offsetX, offsetY, button);\n    dispatchMouseEvent(\n      this.element,\n      'mouseup',\n      clientX,\n      clientY,\n      offsetX,\n      offsetY,\n      button,\n      modifiers,\n    );\n\n    // If a primary event name is specified, emit it after the mouse event sequence.\n    if (primaryEventName !== null) {\n      dispatchMouseEvent(\n        this.element,\n        primaryEventName,\n        clientX,\n        clientY,\n        offsetX,\n        offsetY,\n        button,\n        modifiers,\n      );\n    }\n\n    // This call to _stabilize should not be needed since the callers will already do that them-\n    // selves. Nevertheless it breaks some tests in g3 without it. It needs to be investigated\n    // why removing breaks those tests.\n    // See: https://github.com/angular/components/pull/20758/files#r520886256.\n    await this._stabilize();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  handleAutoChangeDetectionStatus,\n  HarnessEnvironment,\n  HarnessLoader,\n  stopHandlingAutoChangeDetectionStatus,\n  TestElement,\n} from '../../testing';\nimport {ComponentFixture, flush} from '@angular/core/testing';\nimport {Observable} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {TaskState, TaskStateZoneInterceptor} from './task-state-zone-interceptor';\nimport {UnitTestElement} from './unit-test-element';\n\n/** Options to configure the environment. */\nexport interface TestbedHarnessEnvironmentOptions {\n  /** The query function used to find DOM elements. */\n  queryFn: (selector: string, root: Element) => Iterable<Element> | ArrayLike<Element>;\n}\n\n/** The default environment options. */\nconst defaultEnvironmentOptions: TestbedHarnessEnvironmentOptions = {\n  queryFn: (selector: string, root: Element) => root.querySelectorAll(selector),\n};\n\n/** Whether auto change detection is currently disabled. */\nlet disableAutoChangeDetection = false;\n\n/**\n * The set of non-destroyed fixtures currently being used by `TestbedHarnessEnvironment` instances.\n */\nconst activeFixtures = new Set<ComponentFixture<unknown>>();\n\n/**\n * Installs a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to handle change detection batching for.\n */\nfunction installAutoChangeDetectionStatusHandler(fixture: ComponentFixture<unknown>) {\n  if (!activeFixtures.size) {\n    handleAutoChangeDetectionStatus(({isDisabled, onDetectChangesNow}) => {\n      disableAutoChangeDetection = isDisabled;\n      if (onDetectChangesNow) {\n        Promise.all(Array.from(activeFixtures).map(detectChanges)).then(onDetectChangesNow);\n      }\n    });\n  }\n  activeFixtures.add(fixture);\n}\n\n/**\n * Uninstalls a handler for change detection batching status changes for a specific fixture.\n * @param fixture The fixture to stop handling change detection batching for.\n */\nfunction uninstallAutoChangeDetectionStatusHandler(fixture: ComponentFixture<unknown>) {\n  activeFixtures.delete(fixture);\n  if (!activeFixtures.size) {\n    stopHandlingAutoChangeDetectionStatus();\n  }\n}\n\n/** Whether we are currently in the fake async zone. */\nfunction isInFakeAsyncZone() {\n  return typeof Zone !== 'undefined' && Zone!.current.get('FakeAsyncTestZoneSpec') != null;\n}\n\n/**\n * Triggers change detection for a specific fixture.\n * @param fixture The fixture to trigger change detection for.\n */\nasync function detectChanges(fixture: ComponentFixture<unknown>) {\n  fixture.detectChanges();\n  if (isInFakeAsyncZone()) {\n    flush();\n  } else {\n    await fixture.whenStable();\n  }\n}\n\n/** A `HarnessEnvironment` implementation for Angular's Testbed. */\nexport class TestbedHarnessEnvironment extends HarnessEnvironment<Element> {\n  /** Whether the environment has been destroyed. */\n  private _destroyed = false;\n\n  /** Observable that emits whenever the test task state changes. */\n  private _taskState?: Observable<TaskState>;\n\n  /** The options for this environment. */\n  private _options: TestbedHarnessEnvironmentOptions;\n\n  /** Environment stabilization callback passed to the created test elements. */\n  private _stabilizeCallback: () => Promise<void>;\n\n  protected constructor(\n    rawRootElement: Element,\n    private _fixture: ComponentFixture<unknown>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ) {\n    super(rawRootElement);\n    this._options = {...defaultEnvironmentOptions, ...options};\n    if (typeof Zone !== 'undefined') {\n      this._taskState = TaskStateZoneInterceptor.setup();\n    }\n    this._stabilizeCallback = () => this.forceStabilize();\n    installAutoChangeDetectionStatusHandler(_fixture);\n    _fixture.componentRef.onDestroy(() => {\n      uninstallAutoChangeDetectionStatusHandler(_fixture);\n      this._destroyed = true;\n    });\n  }\n\n  /** Creates a `HarnessLoader` rooted at the given fixture's root element. */\n  static loader(\n    fixture: ComponentFixture<unknown>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ): HarnessLoader {\n    return new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n  }\n\n  /**\n   * Creates a `HarnessLoader` at the document root. This can be used if harnesses are\n   * located outside of a fixture (e.g. overlays appended to the document body).\n   */\n  static documentRootLoader(\n    fixture: ComponentFixture<unknown>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ): HarnessLoader {\n    return new TestbedHarnessEnvironment(document.body, fixture, options);\n  }\n\n  /** Gets the native DOM element corresponding to the given TestElement. */\n  static getNativeElement(el: TestElement): Element {\n    if (el instanceof UnitTestElement) {\n      return el.element;\n    }\n    throw Error('This TestElement was not created by the TestbedHarnessEnvironment');\n  }\n\n  /**\n   * Creates an instance of the given harness type, using the fixture's root element as the\n   * harness's host element. This method should be used when creating a harness for the root element\n   * of a fixture, as components do not have the correct selector when they are created as the root\n   * of the fixture.\n   */\n  static async harnessForFixture<T extends ComponentHarness>(\n    fixture: ComponentFixture<unknown>,\n    harnessType: ComponentHarnessConstructor<T>,\n    options?: TestbedHarnessEnvironmentOptions,\n  ): Promise<T> {\n    const environment = new TestbedHarnessEnvironment(fixture.nativeElement, fixture, options);\n    await environment.forceStabilize();\n    return environment.createComponentHarness(harnessType, fixture.nativeElement);\n  }\n\n  /**\n   * Flushes change detection and async tasks captured in the Angular zone.\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\n   * cases where it is needed to fully flush animation events.\n   */\n  async forceStabilize(): Promise<void> {\n    if (!disableAutoChangeDetection) {\n      if (this._destroyed) {\n        throw Error('Harness is attempting to use a fixture that has already been destroyed.');\n      }\n\n      await detectChanges(this._fixture);\n    }\n  }\n\n  /**\n   * Waits for all scheduled or running async tasks to complete. This allows harness\n   * authors to wait for async tasks outside of the Angular zone.\n   */\n  async waitForTasksOutsideAngular(): Promise<void> {\n    // If we run in the fake async zone, we run \"flush\" to run any scheduled tasks. This\n    // ensures that the harnesses behave inside of the FakeAsyncTestZone similar to the\n    // \"AsyncTestZone\" and the root zone (i.e. neither fakeAsync or async). Note that we\n    // cannot just rely on the task state observable to become stable because the state will\n    // never change. This is because the task queue will be only drained if the fake async\n    // zone is being flushed.\n    if (isInFakeAsyncZone()) {\n      flush();\n    }\n\n    // Wait until the task queue has been drained and the zone is stable. Note that\n    // we cannot rely on \"fixture.whenStable\" since it does not catch tasks scheduled\n    // outside of the Angular zone. For test harnesses, we want to ensure that the\n    // app is fully stabilized and therefore need to use our own zone interceptor.\n    await this._taskState?.pipe(takeWhile(state => !state.stable)).toPromise();\n  }\n\n  /** Gets the root element for the document. */\n  protected getDocumentRoot(): Element {\n    return document.body;\n  }\n\n  /** Creates a `TestElement` from a raw element. */\n  protected createTestElement(element: Element): TestElement {\n    return new UnitTestElement(element, this._stabilizeCallback);\n  }\n\n  /** Creates a `HarnessLoader` rooted at the given raw element. */\n  protected createEnvironment(element: Element): HarnessEnvironment<Element> {\n    return new TestbedHarnessEnvironment(element, this._fixture, this._options);\n  }\n\n  /**\n   * Gets a list of all elements matching the given selector under this environment's root element.\n   */\n  protected async getAllRawElements(selector: string): Promise<Element[]> {\n    await this.forceStabilize();\n    return Array.from(this._options.queryFn(selector, this.rawRootElement));\n  }\n}\n"],"names":["keyCodes.BACKSPACE","keyCodes.TAB","keyCodes.ENTER","keyCodes.SHIFT","keyCodes.CONTROL","keyCodes.ALT","keyCodes.ESCAPE","keyCodes.PAGE_UP","keyCodes.PAGE_DOWN","keyCodes.END","keyCodes.HOME","keyCodes.LEFT_ARROW","keyCodes.UP_ARROW","keyCodes.RIGHT_ARROW","keyCodes.DOWN_ARROW","keyCodes.INSERT","keyCodes.DELETE","keyCodes.F1","keyCodes.F2","keyCodes.F3","keyCodes.F4","keyCodes.F5","keyCodes.F6","keyCodes.F7","keyCodes.F8","keyCodes.F9","keyCodes.F10","keyCodes.F11","keyCodes.F12","keyCodes.META","keyCodes.COMMA"],"mappings":"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"}
{"version":3,"file":"accordion.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/accordion/accordion.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/accordion/accordion-item.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/src/cdk/accordion/accordion-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  booleanAttribute,\n  inject,\n} from '@angular/core';\nimport {_IdGenerator} from '../a11y';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = inject(_IdGenerator).getId('cdk-accordion-');\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input({transform: booleanAttribute}) multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  ChangeDetectorRef,\n  booleanAttribute,\n  inject,\n  OnInit,\n  signal,\n} from '@angular/core';\nimport {_IdGenerator} from '../a11y';\nimport {UniqueSelectionDispatcher} from '../collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {Subscription} from 'rxjs';\n\n/**\n * A basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnInit, OnDestroy {\n  accordion = inject<CdkAccordion>(CDK_ACCORDION, {optional: true, skipSelf: true})!;\n  private _changeDetectorRef = inject(ChangeDetectorRef);\n  protected _expansionDispatcher = inject(UniqueSelectionDispatcher);\n\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = inject(_IdGenerator).getId('cdk-accordion-child-');\n\n  /** Whether the AccordionItem is expanded. */\n  @Input({transform: booleanAttribute})\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input({transform: booleanAttribute})\n  get disabled() {\n    return this._disabled();\n  }\n  set disabled(value: boolean) {\n    this._disabled.set(value);\n  }\n  private _disabled = signal(false);\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(...args: unknown[]);\n  constructor() {}\n\n  ngOnInit() {\n    this._removeUniqueSelectionListener = this._expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  imports: [CdkAccordion, CdkAccordionItem],\n  exports: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n"],"names":["CDK_ACCORDION","InjectionToken","_stateChanges","Subject","id","inject","_IdGenerator","getId","multi","openAll","transform","booleanAttribute","CdkAccordionItem","closed","EventEmitter","opened","expandedChange","expanded","_expanded","emit","accordionId","accordion","_expansionDispatcher","notify","_changeDetectorRef","markForCheck","disabled","_disabled","set","value","debugName","_removeUniqueSelectionListener","ngOnInit","listen","_subscribeToOpenCloseAllActions","complete","_openCloseAllSubscription","unsubscribe","decorators","args","selector","providers","useValue","undefined","ctorParameters","propDecorators","Output","type","Input","ɵmod","i0","ɵɵngDeclareNgModule","minVersion","version","ngImport","CdkAccordionModule","imports","CdkAccordion","exports"],"mappings":";;;;;;AA4Ca,MAAAA,aAA8B,GAAA,IAACC,cAAA,CAAA,cAAA;;AAQtCC,EAAAA,aAAA,OAAAC,OAAA,EAAA;;AAMFC,EAAAA,EAAA,GAAAC,MAAA,CAAAC,YAAA,EAAAC,KAAA,CAAA,gBAAA,CAAA;EASAC,KAAA,GAAA,KAAA;EA/BSC,OAAA,GAAA;;;AALF;AAET;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBA0BA;AAAA,MAAA,IAAA,EAAA,CAAA;AAAAC,QAAAA,SAAA,EAAAC;AAAA,OAAA;;;;;ACPA,MAAAC,gBAAA,CAAA;;;;;;;;EAmBIC,MAAA,GAAA,IAAAC,YAAmB,EAAA;EAGjBC,MAAA,GAAA,IAAAD,YAAY,EAAM;;AAQlBE,EAAAA,cAAA,OAAAF,YAAA,EAAA;;;;;AAUuC,EAAA,IAAAG,QAAA,CAAA,QAAA,EAAA;AAI7C,IAAA,IAAA,IAAA,CAAAC,SAAA,KAAAD,QAAA,EAAA;MAEE,IAAAC,CAAAA,SAAA,GAAAD,QAAA;AAEM,MAAA,IAAY,CAAAD,cAAA,CAAAG,IAAA,CAAAF,QAAA,CAAA;AAEpB,MAAA,IAAoDA,QAAA,EAAA;QAC5C,IAAAF,CAAAA,MAAA,CAAAI,IAAA,EAAA;QAUA,MAAAC,WAAe,GAAA,IAAA,CAAAC,SAAM,QAAAA,SAAA,CAAAjB,EAAA,GAAA,IAAA,CAAAA,EAAA;AAErB,QAAA,IAAA,CAAAkB,oBAAK,CAAAC,MAAA,CAAAnB,IAAAA,CAAAA,EAAA,EAAAgB,WAAA,CAAA;;;;UAUX,CAAAI,kBAAA,CAAAC,YAAA,EAAA;;;cAG2D,KAAA;cAG3DC,GAAA;AACA,IAAA,OAAA,IAAA,CAAAC,SAAA,EAAA;;;AAGA,IAAA,IAAA,CAAAA,SAAA,CAAAC,GAAA,CAAAC,KAAA,CAAA;AACF;;IAGMC,SAAA,EAAA;AAAA,GAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAGJ,EAAA,8BAAA,GAAAC,MAAA,EAAA;;UAG4DC,GAAA;IAC9D,IAAK,CAAAD,8BAAA,GAAAT,IAAAA,CAAAA,oBAAA,CAAAW,MAAA,CAAA,CAAA7B,EAAA,EAAAgB,WAAA,KAAA;AACH,MAAA,IAAA,IAAA,CAAAC,SAAA,IACO,CAAA,IAAA,CAAWA,SAAK,CAAAb,KAAA,yCAIoC,IAAAJ,CAAAA,EAAA,KAAAA,EAAA,EAAA;AAGzD,QAAA,IAAK,CAAAa,QAAA,GAAA,KAAA;AAET;AAEQ,KAAA,CAAA;AAIF,IAAA,IAAA,IAAA,CAAAI,SAAA,EAAA;oCACF,GAAA,IAAA,CAAAa,+BAAA,EAAA;;;;IAhIH,IAAAnB,CAAAA,MAAA,CAAAoB,QAAA,EAAA;;;;AAPQ,IAAA,IAAA,CAAAJ,8BAAA,EAAA;IAET,IAAAK,CAAAA,yBAAA,CAAAC,WAAA,EAAA;AACA;;IAGE,IAAA,CAAA,IAAAX,CAAAA,QAAA,EAAA;AACD,MAAA,IAAA,CAAAT,QAAA,GAAA,CAAA,IAAA,CAAAA,QAAA;AACF;;;;sBAaQ,KAAA;;;;;sBA2CD,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtBF,EAAA,IAAA,EAAA,gBAAA;EAAAqB,UAAmB,EAAA,CAAA;;IALvBC,IAAA,EAAA,CAAA;AACAC,MAAAA,QAAA,EAA8B,wCAAA;cAC2C,EAAA,kBAAA;AACvEC,MAAAA,SAAA;eAT0B,EAAAzC,aAAA;AAAA0C,QAAAA,QAAA,EAAAC;AAAA,OAAA;;;AAG5B,EAAA,cAAA,EACYC,MAAA,EAAA;EAAAC,cAAA,EAAA;IAAAhC,MAAA,EAAA,CAAA;;;AAEZ,IAAA,MAAA,EAAA,CAAA;;;;AAGEiC,MAAAA,IAAAA,EAAAA;;AACE,IAAA,cAAA,EAAA,CAAA;;;;AAWOC,MAAAA,IAAA,EAAAC,KAAA;;;;;AAEPtB,IAAAA,QAAA,EAAA,CAAA;;MASyCa,IAAA,EAAA,CAAA;AAAA7B,QAAAA,SAAA,EAAAC;AAAA,OAAA;;;;;;;;;;;;;;AC5ElC,EAAA,OAAAsC,IAAA,GAAAC,EAAA,CAAAC,mBAAA,CAAA;IAAAC,UAAA,EAAA,QAAA;IAAAC,OAAA,EAAA,eAAA;AAAAC,IAAAA,QAAA,EAAAJ,EAAA;AAAAH,IAAAA,IAAA,EAAAQ,kBAAA;IAAAC,OAAA,EAAA,CAAAC,YAAA,EAAA7C,gBAAA,CAAA;IAAA8C,OAAA,EAAA,CAAAD,YAAA,EAAA7C,gBAAA;AAAA,GAAA,CAAA;;;;;;;;2BAJJ,CAAA;EAAAwC,UAAA,EAAA,QAAA;EAAAC,OAAA,EAAA,eAAA;AAAAC,EAAAA,QAAA,EAAAJ,EAAA;AAAAH,EAAAA,IAAA,EAAAQ,kBAAA;EAAAjB,UAAA,EAAA,CAAA;;;;;;;;;;;"}
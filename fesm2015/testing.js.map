{"version":3,"file":"testing.js","sources":["../../../../../../src/cdk/testing/component-harness.ts","../../../../../../src/cdk/testing/harness-environment.ts","../../../../../../src/cdk/testing/test-element.ts","../../../../../../src/cdk/testing/public-api.ts","../../../../../../src/cdk/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TestElement} from './test-element';\n\n/** An async function that returns a promise when called. */\nexport type AsyncFactoryFn<T> = () => Promise<T>;\n\n/** An async function that takes an item and returns a boolean promise */\nexport type AsyncPredicate<T> = (item: T) => Promise<boolean>;\n\n/** An async function that takes an item and an option value and returns a boolean promise. */\nexport type AsyncOptionPredicate<T, O> = (item: T, option: O) => Promise<boolean>;\n\n/**\n * Interface used to load ComponentHarness objects. This interface is used by test authors to\n * instantiate `ComponentHarness`es.\n */\nexport interface HarnessLoader {\n  /**\n   * Searches for an element with the given selector under the current instances's root element,\n   * and returns a `HarnessLoader` rooted at the matching element. If multiple elements match the\n   * selector, the first is used. If no elements match, an error is thrown.\n   * @param selector The selector for the root element of the new `HarnessLoader`\n   * @return A `HarnessLoader` rooted at the element matching the given selector.\n   * @throws If a matching element can't be found.\n   */\n  getChildLoader(selector: string): Promise<HarnessLoader>;\n\n  /**\n   * Searches for all elements with the given selector under the current instances's root element,\n   * and returns an array of `HarnessLoader`s, one for each matching element, rooted at that\n   * element.\n   * @param selector The selector for the root element of the new `HarnessLoader`\n   * @return A list of `HarnessLoader`s, one for each matching element, rooted at that element.\n   */\n  getAllChildLoaders(selector: string): Promise<HarnessLoader[]>;\n\n  /**\n   * Searches for an instance of the component corresponding to the given harness type under the\n   * `HarnessLoader`'s root element, and returns a `ComponentHarness` for that instance. If multiple\n   * matching components are found, a harness for the first one is returned. If no matching\n   * component is found, an error is thrown.\n   * @param harnessType The type of harness to create\n   * @return An instance of the given harness type\n   * @throws If a matching component instance can't be found.\n   */\n  getHarness<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T>;\n\n  /**\n   * Searches for all instances of the component corresponding to the given harness type under the\n   * `HarnessLoader`'s root element, and returns a list `ComponentHarness` for each instance.\n   * @param harnessType The type of harness to create\n   * @return A list instances of the given harness type.\n   */\n  getAllHarnesses<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T[]>;\n}\n\n/**\n * Interface used to create asynchronous locator functions used find elements and component\n * harnesses. This interface is used by `ComponentHarness` authors to create locator functions for\n * their `ComponentHarness` subclass.\n */\nexport interface LocatorFactory {\n  /** Gets a locator factory rooted at the document root. */\n  documentRootLocatorFactory(): LocatorFactory;\n\n  /** The root element of this `LocatorFactory` as a `TestElement`. */\n  rootElement: TestElement;\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the root element of this `LocatorFactory`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, an error is thrown.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  locatorFor(selector: string): AsyncFactoryFn<TestElement>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the root element of this `LocatorFactory`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, an error is thrown.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or throws an error.\n   */\n  locatorFor<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the root element of this `LocatorFactory`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, null is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or returns null.\n   */\n  locatorForOptional(selector: string): AsyncFactoryFn<TestElement | null>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the root element of this `LocatorFactory`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, null is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or null if none is found.\n   */\n  locatorForOptional<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T | null>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for a list of elements with\n   * the given selector under the root element of this `LocatorFactory`. When the resulting locator\n   * function is invoked, a list of matching elements is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  locatorForAll(selector: string): AsyncFactoryFn<TestElement[]>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a list of\n   * `ComponentHarness`es for all components matching the given harness type under the root element\n   * of this `LocatorFactory`. When the resulting locator function is invoked, a list of\n   * `ComponentHarness`es for the matching components is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and returns a list of `ComponentHarness`es.\n   */\n  locatorForAll<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T[]>;\n\n  /**\n   * Gets a `HarnessLoader` instance for an element under the root of this `LocatorFactory`.\n   * @param selector The selector for the root element.\n   * @return A `HarnessLoader` rooted at the first element matching the given selector.\n   * @throws If no matching element is found for the given selector.\n   */\n  harnessLoaderFor(selector: string): Promise<HarnessLoader>;\n\n  /**\n   * Gets a `HarnessLoader` instance for an element under the root of this `LocatorFactory`\n   * @param selector The selector for the root element.\n   * @return A `HarnessLoader` rooted at the first element matching the given selector, or null if\n   *     no matching element is found.\n   */\n  harnessLoaderForOptional(selector: string): Promise<HarnessLoader | null>;\n\n  /**\n   * Gets a list of `HarnessLoader` instances, one for each matching element.\n   * @param selector The selector for the root element.\n   * @return A list of `HarnessLoader`, one rooted at each element matching the given selector.\n   */\n  harnessLoaderForAll(selector: string): Promise<HarnessLoader[]>;\n\n  /**\n   * Flushes change detection and async tasks captured in the Angular zone.\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\n   * cases where it is needed to fully flush animation events.\n   */\n  forceStabilize(): Promise<void>;\n\n  /**\n   * Waits for all scheduled or running async tasks to complete. This allows harness\n   * authors to wait for async tasks outside of the Angular zone.\n   */\n  waitForTasksOutsideAngular(): Promise<void>;\n}\n\n/**\n * Base class for component harnesses that all component harness authors should extend. This base\n * component harness provides the basic ability to locate element and sub-component harness. It\n * should be inherited when defining user's own harness.\n */\nexport abstract class ComponentHarness {\n  constructor(protected readonly locatorFactory: LocatorFactory) {}\n\n  /** Gets a `Promise` for the `TestElement` representing the host element of the component. */\n  async host(): Promise<TestElement> {\n    return this.locatorFactory.rootElement;\n  }\n\n  /**\n   * Gets a `LocatorFactory` for the document root element. This factory can be used to create\n   * locators for elements that a component creates outside of its own root element. (e.g. by\n   * appending to document.body).\n   */\n  protected documentRootLocatorFactory(): LocatorFactory {\n    return this.locatorFactory.documentRootLocatorFactory();\n  }\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the host element of this `ComponentHarness`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, an error is thrown.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  protected locatorFor(selector: string): AsyncFactoryFn<TestElement>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the host element of this `ComponentHarness`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, an error is thrown.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or throws an error.\n   */\n  protected locatorFor<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T>;\n\n  protected locatorFor(arg: any) {\n    return this.locatorFactory.locatorFor(arg);\n  }\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for elements with the given\n   * selector under the host element of this `ComponentHarness`. When the resulting locator function\n   * is invoked, if multiple matching elements are found, the first element is returned. If no\n   * elements are found, null is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or returns null.\n   */\n  protected locatorForOptional(selector: string): AsyncFactoryFn<TestElement | null>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a `ComponentHarness` for a\n   * component matching the given harness type under the host element of this `ComponentHarness`.\n   * When the resulting locator function is invoked, if multiple matching components are found, a\n   * harness for the first one is returned. If no components are found, null is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and either returns a `ComponentHarness` for the component, or null if none is found.\n   */\n  protected locatorForOptional<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T | null>;\n\n  protected locatorForOptional(arg: any) {\n    return this.locatorFactory.locatorForOptional(arg);\n  }\n\n  /**\n   * Creates an asynchronous locator function that can be used to search for a list of elements with\n   * the given selector under the host element of this `ComponentHarness`. When the resulting\n   * locator function is invoked, a list of matching elements is returned.\n   * @param selector The selector for the element that the locator function should search for.\n   * @return An asynchronous locator function that searches for elements with the given selector,\n   *     and either finds one or throws an error\n   */\n  protected locatorForAll(selector: string): AsyncFactoryFn<TestElement[]>;\n\n  /**\n   * Creates an asynchronous locator function that can be used to find a list of\n   * `ComponentHarness`es for all components matching the given harness type under the host element\n   * of this `ComponentHarness`. When the resulting locator function is invoked, a list of\n   * `ComponentHarness`es for the matching components is returned.\n   * @param harnessType The type of harness to search for.\n   * @return An asynchronous locator function that searches components matching the given harness\n   *     type, and returns a list of `ComponentHarness`es.\n   */\n  protected locatorForAll<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T[]>;\n\n  protected locatorForAll(arg: any) {\n    return this.locatorFactory.locatorForAll(arg);\n  }\n\n  /**\n   * Flushes change detection and async tasks in the Angular zone.\n   * In most cases it should not be necessary to call this manually. However, there may be some edge\n   * cases where it is needed to fully flush animation events.\n   */\n  protected async forceStabilize() {\n    return this.locatorFactory.forceStabilize();\n  }\n\n  /**\n   * Waits for all scheduled or running async tasks to complete. This allows harness\n   * authors to wait for async tasks outside of the Angular zone.\n   */\n  protected async waitForTasksOutsideAngular() {\n    return this.locatorFactory.waitForTasksOutsideAngular();\n  }\n}\n\n/** Constructor for a ComponentHarness subclass. */\nexport interface ComponentHarnessConstructor<T extends ComponentHarness> {\n  new(locatorFactory: LocatorFactory): T;\n\n  /**\n   * `ComponentHarness` subclasses must specify a static `hostSelector` property that is used to\n   * find the host element for the corresponding component. This property should match the selector\n   * for the Angular component.\n   */\n  hostSelector: string;\n}\n\nexport interface BaseHarnessFilters {\n  /** Only find component instances whose host element matches the given selector. */\n  selector?: string;\n  /** Only find component instances that are nested under an element with the given selector. */\n  ancestor?: string;\n}\n\n/**\n * A class used to associate a ComponentHarness class with predicates functions that can be used to\n * filter instances of the class.\n */\nexport class HarnessPredicate<T extends ComponentHarness> {\n  private _predicates: AsyncPredicate<T>[] = [];\n  private _descriptions: string[] = [];\n  private _ancestor: string;\n\n  constructor(public harnessType: ComponentHarnessConstructor<T>, options: BaseHarnessFilters) {\n    this._addBaseOptions(options);\n  }\n\n  /**\n   * Checks if a string matches the given pattern.\n   * @param s The string to check, or a Promise for the string to check.\n   * @param pattern The pattern the string is expected to match. If `pattern` is a string, `s` is\n   *   expected to match exactly. If `pattern` is a regex, a partial match is allowed.\n   * @return A Promise that resolves to whether the string matches the pattern.\n   */\n  static async stringMatches(s: string | Promise<string>, pattern: string | RegExp):\n      Promise<boolean> {\n    s = await s;\n    return typeof pattern === 'string' ? s === pattern : pattern.test(s);\n  }\n\n  /**\n   * Adds a predicate function to be run against candidate harnesses.\n   * @param description A description of this predicate that may be used in error messages.\n   * @param predicate An async predicate function.\n   * @return this (for method chaining).\n   */\n  add(description: string, predicate: AsyncPredicate<T>) {\n    this._descriptions.push(description);\n    this._predicates.push(predicate);\n    return this;\n  }\n\n  /**\n   * Adds a predicate function that depends on an option value to be run against candidate\n   * harnesses. If the option value is undefined, the predicate will be ignored.\n   * @param name The name of the option (may be used in error messages).\n   * @param option The option value.\n   * @param predicate The predicate function to run if the option value is not undefined.\n   * @return this (for method chaining).\n   */\n  addOption<O>(name: string, option: O | undefined, predicate: AsyncOptionPredicate<T, O>) {\n    // Add quotes around strings to differentiate them from other values\n    const value = typeof option === 'string' ? `\"${option}\"` : `${option}`;\n    if (option !== undefined) {\n      this.add(`${name} = ${value}`, item => predicate(item, option));\n    }\n    return this;\n  }\n\n  /**\n   * Filters a list of harnesses on this predicate.\n   * @param harnesses The list of harnesses to filter.\n   * @return A list of harnesses that satisfy this predicate.\n   */\n  async filter(harnesses: T[]): Promise<T[]> {\n    const results = await Promise.all(harnesses.map(h => this.evaluate(h)));\n    return harnesses.filter((_, i) => results[i]);\n  }\n\n  /**\n   * Evaluates whether the given harness satisfies this predicate.\n   * @param harness The harness to check\n   * @return A promise that resolves to true if the harness satisfies this predicate,\n   *   and resolves to false otherwise.\n   */\n  async evaluate(harness: T): Promise<boolean> {\n    const results = await Promise.all(this._predicates.map(p => p(harness)));\n    return results.reduce((combined, current) => combined && current, true);\n  }\n\n  /** Gets a description of this predicate for use in error messages. */\n  getDescription() {\n    return this._descriptions.join(', ');\n  }\n\n  /** Gets the selector used to find candidate elements. */\n  getSelector() {\n    return this._ancestor.split(',')\n        .map(part => `${part.trim()} ${this.harnessType.hostSelector}`.trim())\n        .join(',');\n  }\n\n  /** Adds base options common to all harness types. */\n  private _addBaseOptions(options: BaseHarnessFilters) {\n    this._ancestor = options.ancestor || '';\n    if (this._ancestor) {\n      this._descriptions.push(`has ancestor matching selector \"${this._ancestor}\"`);\n    }\n    const selector = options.selector;\n    if (selector !== undefined) {\n      this.add(`host matches selector \"${selector}\"`, async item => {\n        return (await item.host()).matchesSelector(selector);\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AsyncFactoryFn,\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessLoader,\n  HarnessPredicate,\n  LocatorFactory\n} from './component-harness';\nimport {TestElement} from './test-element';\n\n/**\n * Base harness environment class that can be extended to allow `ComponentHarness`es to be used in\n * different test environments (e.g. testbed, protractor, etc.). This class implements the\n * functionality of both a `HarnessLoader` and `LocatorFactory`. This class is generic on the raw\n * element type, `E`, used by the particular test environment.\n */\nexport abstract class HarnessEnvironment<E> implements HarnessLoader, LocatorFactory {\n  // Implemented as part of the `LocatorFactory` interface.\n  rootElement: TestElement;\n\n  protected constructor(protected rawRootElement: E) {\n    this.rootElement = this.createTestElement(rawRootElement);\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  documentRootLocatorFactory(): LocatorFactory {\n    return this.createEnvironment(this.getDocumentRoot());\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  locatorFor(selector: string): AsyncFactoryFn<TestElement>;\n  locatorFor<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T>;\n  locatorFor<T extends ComponentHarness>(\n      arg: string | ComponentHarnessConstructor<T> | HarnessPredicate<T>) {\n    return async () => {\n      if (typeof arg === 'string') {\n        return this.createTestElement(await this._assertElementFound(arg));\n      } else {\n        return this._assertHarnessFound(arg);\n      }\n    };\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  locatorForOptional(selector: string): AsyncFactoryFn<TestElement | null>;\n  locatorForOptional<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T | null>;\n  locatorForOptional<T extends ComponentHarness>(\n      arg: string | ComponentHarnessConstructor<T> | HarnessPredicate<T>) {\n    return async () => {\n      if (typeof arg === 'string') {\n        const element = (await this.getAllRawElements(arg))[0];\n        return element ? this.createTestElement(element) : null;\n      } else {\n        const candidates = await this._getAllHarnesses(arg);\n        return candidates[0] || null;\n      }\n    };\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  locatorForAll(selector: string): AsyncFactoryFn<TestElement[]>;\n  locatorForAll<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): AsyncFactoryFn<T[]>;\n  locatorForAll<T extends ComponentHarness>(\n      arg: string | ComponentHarnessConstructor<T> | HarnessPredicate<T>) {\n    return async () => {\n      if (typeof arg === 'string') {\n        return (await this.getAllRawElements(arg)).map(e => this.createTestElement(e));\n      } else {\n        return this._getAllHarnesses(arg);\n      }\n    };\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  async harnessLoaderFor(selector: string): Promise<HarnessLoader> {\n    return this.createEnvironment(await this._assertElementFound(selector));\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  async harnessLoaderForOptional(selector: string): Promise<HarnessLoader | null> {\n    const elements = await this.getAllRawElements(selector);\n    return elements[0] ? this.createEnvironment(elements[0]) : null;\n  }\n\n  // Implemented as part of the `LocatorFactory` interface.\n  async harnessLoaderForAll(selector: string): Promise<HarnessLoader[]> {\n    const elements = await this.getAllRawElements(selector);\n    return elements.map(element => this.createEnvironment(element));\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  getHarness<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T> {\n    return this.locatorFor(harnessType)();\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  getAllHarnesses<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T[]> {\n    return this.locatorForAll(harnessType)();\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  async getChildLoader(selector: string): Promise<HarnessLoader> {\n    return this.createEnvironment(await this._assertElementFound(selector));\n  }\n\n  // Implemented as part of the `HarnessLoader` interface.\n  async getAllChildLoaders(selector: string): Promise<HarnessLoader[]> {\n    return (await this.getAllRawElements(selector)).map(e => this.createEnvironment(e));\n  }\n\n  /** Creates a `ComponentHarness` for the given harness type with the given raw host element. */\n  protected createComponentHarness<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T>, element: E): T {\n    return new harnessType(this.createEnvironment(element));\n  }\n\n  // Part of LocatorFactory interface, subclasses will implement.\n  abstract forceStabilize(): Promise<void>;\n\n  // Part of LocatorFactory interface, subclasses will implement.\n  abstract waitForTasksOutsideAngular(): Promise<void>;\n\n  /** Gets the root element for the document. */\n  protected abstract getDocumentRoot(): E;\n\n  /** Creates a `TestElement` from a raw element. */\n  protected abstract createTestElement(element: E): TestElement;\n\n  /** Creates a `HarnessLoader` rooted at the given raw element. */\n  protected abstract createEnvironment(element: E): HarnessEnvironment<E>;\n\n  /**\n   * Gets a list of all elements matching the given selector under this environment's root element.\n   */\n  protected abstract getAllRawElements(selector: string): Promise<E[]>;\n\n  private async _getAllHarnesses<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T[]> {\n    const harnessPredicate = harnessType instanceof HarnessPredicate ?\n        harnessType : new HarnessPredicate(harnessType, {});\n    const elements = await this.getAllRawElements(harnessPredicate.getSelector());\n    return harnessPredicate.filter(elements.map(\n        element => this.createComponentHarness(harnessPredicate.harnessType, element)));\n  }\n\n  private async _assertElementFound(selector: string): Promise<E> {\n    const element = (await this.getAllRawElements(selector))[0];\n    if (!element) {\n      throw Error(`Expected to find element matching selector: \"${selector}\", but none was found`);\n    }\n    return element;\n  }\n\n  private async _assertHarnessFound<T extends ComponentHarness>(\n      harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Promise<T> {\n    const harness = (await this._getAllHarnesses(harnessType))[0];\n    if (!harness) {\n      throw _getErrorForMissingHarness(harnessType);\n    }\n    return harness;\n  }\n}\n\nfunction _getErrorForMissingHarness<T extends ComponentHarness>(\n    harnessType: ComponentHarnessConstructor<T> | HarnessPredicate<T>): Error {\n  const harnessPredicate =\n      harnessType instanceof HarnessPredicate ? harnessType : new HarnessPredicate(harnessType, {});\n  const {name, hostSelector} = harnessPredicate.harnessType;\n  let restrictions = harnessPredicate.getDescription();\n  let message = `Expected to find element for ${name} matching selector: \"${hostSelector}\"`;\n  if (restrictions) {\n    message += ` (with restrictions: ${restrictions})`;\n  }\n  message += ', but none was found';\n  return Error(message);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementDimensions} from './element-dimensions';\nimport {ModifierKeys} from './fake-events';\n\n/** An enum of non-text keys that can be used with the `sendKeys` method. */\n// NOTE: This is a separate enum from `@angular/cdk/keycodes` because we don't necessarily want to\n// support every possible keyCode. We also can't rely on Protractor's `Key` because we don't want a\n// dependency on any particular testing framework here. Instead we'll just maintain this supported\n// list of keys and let individual concrete `HarnessEnvironment` classes map them to whatever key\n// representation is used in its respective testing framework.\nexport enum TestKey {\n  BACKSPACE,\n  TAB,\n  ENTER,\n  SHIFT,\n  CONTROL,\n  ALT,\n  ESCAPE,\n  PAGE_UP,\n  PAGE_DOWN,\n  END,\n  HOME,\n  LEFT_ARROW,\n  UP_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  INSERT,\n  DELETE,\n  F1,\n  F2,\n  F3,\n  F4,\n  F5,\n  F6,\n  F7,\n  F8,\n  F9,\n  F10,\n  F11,\n  F12,\n  META\n}\n\n/**\n * This acts as a common interface for DOM elements across both unit and e2e tests. It is the\n * interface through which the ComponentHarness interacts with the component's DOM.\n */\nexport interface TestElement {\n  /** Blur the element. */\n  blur(): Promise<void>;\n\n  /** Clear the element's input (for input elements only). */\n  clear(): Promise<void>;\n\n  /**\n   * Click the element.\n   * @param relativeX Coordinate within the element, along the X-axis at which to click.\n   * @param relativeY Coordinate within the element, along the Y-axis at which to click.\n   */\n  click(relativeX?: number, relativeY?: number): Promise<void>;\n\n  /** Focus the element. */\n  focus(): Promise<void>;\n\n  /** Get the computed value of the given CSS property for the element. */\n  getCssValue(property: string): Promise<string>;\n\n  /** Hovers the mouse over the element. */\n  hover(): Promise<void>;\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n\n  /**\n   * Sends the given string to the input as a series of key presses. Also fires input events\n   * and attempts to add the string to the Element's value.\n   */\n  sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n\n  /** Gets the text from the element. */\n  text(): Promise<string>;\n\n  /** Gets the value for the given attribute from the element. */\n  getAttribute(name: string): Promise<string | null>;\n\n  /** Checks whether the element has the given class. */\n  hasClass(name: string): Promise<boolean>;\n\n  /** Gets the dimensions of the element. */\n  getDimensions(): Promise<ElementDimensions>;\n\n  /** Gets the value of a property of an element. */\n  getProperty(name: string): Promise<any>;\n\n  /** Checks whether this element matches the given selector. */\n  matchesSelector(selector: string): Promise<boolean>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './component-harness';\nexport * from './harness-environment';\nexport * from './test-element';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}